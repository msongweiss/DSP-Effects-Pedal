
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d244  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800d3cc  0800d3cc  0000e3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3f0  0800d3f0  0000f080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d3f0  0800d3f0  0000e3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3f8  0800d3f8  0000f080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3f8  0800d3f8  0000e3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3fc  0800d3fc  0000e3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800d400  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f080  2**0
                  CONTENTS
 10 .bss          00002c80  20000080  20000080  0000f080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002d00  20002d00  0000f080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002325b  00000000  00000000  0000f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000596c  00000000  00000000  0003230b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce0  00000000  00000000  00037c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001645  00000000  00000000  00039958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028bc2  00000000  00000000  0003af9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029154  00000000  00000000  00063b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6433  00000000  00000000  0008ccb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001730e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d34  00000000  00000000  0017312c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0017ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d3b4 	.word	0x0800d3b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800d3b4 	.word	0x0800d3b4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2f>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008ac:	bf24      	itt	cs
 80008ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008b6:	d90d      	bls.n	80008d4 <__aeabi_d2f+0x30>
 80008b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008cc:	bf08      	it	eq
 80008ce:	f020 0001 	biceq.w	r0, r0, #1
 80008d2:	4770      	bx	lr
 80008d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008d8:	d121      	bne.n	800091e <__aeabi_d2f+0x7a>
 80008da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008de:	bfbc      	itt	lt
 80008e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008e4:	4770      	bxlt	lr
 80008e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ee:	f1c2 0218 	rsb	r2, r2, #24
 80008f2:	f1c2 0c20 	rsb	ip, r2, #32
 80008f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008fa:	fa20 f002 	lsr.w	r0, r0, r2
 80008fe:	bf18      	it	ne
 8000900:	f040 0001 	orrne.w	r0, r0, #1
 8000904:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000908:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800090c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000910:	ea40 000c 	orr.w	r0, r0, ip
 8000914:	fa23 f302 	lsr.w	r3, r3, r2
 8000918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800091c:	e7cc      	b.n	80008b8 <__aeabi_d2f+0x14>
 800091e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000922:	d107      	bne.n	8000934 <__aeabi_d2f+0x90>
 8000924:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000928:	bf1e      	ittt	ne
 800092a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800092e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000932:	4770      	bxne	lr
 8000934:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000938:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800093c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b988 	b.w	8000c6c <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	468e      	mov	lr, r1
 800097c:	4604      	mov	r4, r0
 800097e:	4688      	mov	r8, r1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d14a      	bne.n	8000a1a <__udivmoddi4+0xa6>
 8000984:	428a      	cmp	r2, r1
 8000986:	4617      	mov	r7, r2
 8000988:	d962      	bls.n	8000a50 <__udivmoddi4+0xdc>
 800098a:	fab2 f682 	clz	r6, r2
 800098e:	b14e      	cbz	r6, 80009a4 <__udivmoddi4+0x30>
 8000990:	f1c6 0320 	rsb	r3, r6, #32
 8000994:	fa01 f806 	lsl.w	r8, r1, r6
 8000998:	fa20 f303 	lsr.w	r3, r0, r3
 800099c:	40b7      	lsls	r7, r6
 800099e:	ea43 0808 	orr.w	r8, r3, r8
 80009a2:	40b4      	lsls	r4, r6
 80009a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009a8:	fa1f fc87 	uxth.w	ip, r7
 80009ac:	fbb8 f1fe 	udiv	r1, r8, lr
 80009b0:	0c23      	lsrs	r3, r4, #16
 80009b2:	fb0e 8811 	mls	r8, lr, r1, r8
 80009b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009ba:	fb01 f20c 	mul.w	r2, r1, ip
 80009be:	429a      	cmp	r2, r3
 80009c0:	d909      	bls.n	80009d6 <__udivmoddi4+0x62>
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	f101 30ff 	add.w	r0, r1, #4294967295
 80009c8:	f080 80ea 	bcs.w	8000ba0 <__udivmoddi4+0x22c>
 80009cc:	429a      	cmp	r2, r3
 80009ce:	f240 80e7 	bls.w	8000ba0 <__udivmoddi4+0x22c>
 80009d2:	3902      	subs	r1, #2
 80009d4:	443b      	add	r3, r7
 80009d6:	1a9a      	subs	r2, r3, r2
 80009d8:	b2a3      	uxth	r3, r4
 80009da:	fbb2 f0fe 	udiv	r0, r2, lr
 80009de:	fb0e 2210 	mls	r2, lr, r0, r2
 80009e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009e6:	fb00 fc0c 	mul.w	ip, r0, ip
 80009ea:	459c      	cmp	ip, r3
 80009ec:	d909      	bls.n	8000a02 <__udivmoddi4+0x8e>
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80009f4:	f080 80d6 	bcs.w	8000ba4 <__udivmoddi4+0x230>
 80009f8:	459c      	cmp	ip, r3
 80009fa:	f240 80d3 	bls.w	8000ba4 <__udivmoddi4+0x230>
 80009fe:	443b      	add	r3, r7
 8000a00:	3802      	subs	r0, #2
 8000a02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a06:	eba3 030c 	sub.w	r3, r3, ip
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	b11d      	cbz	r5, 8000a16 <__udivmoddi4+0xa2>
 8000a0e:	40f3      	lsrs	r3, r6
 8000a10:	2200      	movs	r2, #0
 8000a12:	e9c5 3200 	strd	r3, r2, [r5]
 8000a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1a:	428b      	cmp	r3, r1
 8000a1c:	d905      	bls.n	8000a2a <__udivmoddi4+0xb6>
 8000a1e:	b10d      	cbz	r5, 8000a24 <__udivmoddi4+0xb0>
 8000a20:	e9c5 0100 	strd	r0, r1, [r5]
 8000a24:	2100      	movs	r1, #0
 8000a26:	4608      	mov	r0, r1
 8000a28:	e7f5      	b.n	8000a16 <__udivmoddi4+0xa2>
 8000a2a:	fab3 f183 	clz	r1, r3
 8000a2e:	2900      	cmp	r1, #0
 8000a30:	d146      	bne.n	8000ac0 <__udivmoddi4+0x14c>
 8000a32:	4573      	cmp	r3, lr
 8000a34:	d302      	bcc.n	8000a3c <__udivmoddi4+0xc8>
 8000a36:	4282      	cmp	r2, r0
 8000a38:	f200 8105 	bhi.w	8000c46 <__udivmoddi4+0x2d2>
 8000a3c:	1a84      	subs	r4, r0, r2
 8000a3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a42:	2001      	movs	r0, #1
 8000a44:	4690      	mov	r8, r2
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d0e5      	beq.n	8000a16 <__udivmoddi4+0xa2>
 8000a4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000a4e:	e7e2      	b.n	8000a16 <__udivmoddi4+0xa2>
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	f000 8090 	beq.w	8000b76 <__udivmoddi4+0x202>
 8000a56:	fab2 f682 	clz	r6, r2
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	f040 80a4 	bne.w	8000ba8 <__udivmoddi4+0x234>
 8000a60:	1a8a      	subs	r2, r1, r2
 8000a62:	0c03      	lsrs	r3, r0, #16
 8000a64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a68:	b280      	uxth	r0, r0
 8000a6a:	b2bc      	uxth	r4, r7
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d907      	bls.n	8000a92 <__udivmoddi4+0x11e>
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a88:	d202      	bcs.n	8000a90 <__udivmoddi4+0x11c>
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	f200 80e0 	bhi.w	8000c50 <__udivmoddi4+0x2dc>
 8000a90:	46c4      	mov	ip, r8
 8000a92:	1a9b      	subs	r3, r3, r2
 8000a94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000aa0:	fb02 f404 	mul.w	r4, r2, r4
 8000aa4:	429c      	cmp	r4, r3
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0x144>
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0x142>
 8000ab0:	429c      	cmp	r4, r3
 8000ab2:	f200 80ca 	bhi.w	8000c4a <__udivmoddi4+0x2d6>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	1b1b      	subs	r3, r3, r4
 8000aba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000abe:	e7a5      	b.n	8000a0c <__udivmoddi4+0x98>
 8000ac0:	f1c1 0620 	rsb	r6, r1, #32
 8000ac4:	408b      	lsls	r3, r1
 8000ac6:	fa22 f706 	lsr.w	r7, r2, r6
 8000aca:	431f      	orrs	r7, r3
 8000acc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ad0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ad4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ad8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000adc:	4323      	orrs	r3, r4
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	fa1f fc87 	uxth.w	ip, r7
 8000ae6:	fbbe f0f9 	udiv	r0, lr, r9
 8000aea:	0c1c      	lsrs	r4, r3, #16
 8000aec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000af0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000af4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000af8:	45a6      	cmp	lr, r4
 8000afa:	fa02 f201 	lsl.w	r2, r2, r1
 8000afe:	d909      	bls.n	8000b14 <__udivmoddi4+0x1a0>
 8000b00:	193c      	adds	r4, r7, r4
 8000b02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b06:	f080 809c 	bcs.w	8000c42 <__udivmoddi4+0x2ce>
 8000b0a:	45a6      	cmp	lr, r4
 8000b0c:	f240 8099 	bls.w	8000c42 <__udivmoddi4+0x2ce>
 8000b10:	3802      	subs	r0, #2
 8000b12:	443c      	add	r4, r7
 8000b14:	eba4 040e 	sub.w	r4, r4, lr
 8000b18:	fa1f fe83 	uxth.w	lr, r3
 8000b1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b20:	fb09 4413 	mls	r4, r9, r3, r4
 8000b24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b2c:	45a4      	cmp	ip, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x1ce>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b36:	f080 8082 	bcs.w	8000c3e <__udivmoddi4+0x2ca>
 8000b3a:	45a4      	cmp	ip, r4
 8000b3c:	d97f      	bls.n	8000c3e <__udivmoddi4+0x2ca>
 8000b3e:	3b02      	subs	r3, #2
 8000b40:	443c      	add	r4, r7
 8000b42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b46:	eba4 040c 	sub.w	r4, r4, ip
 8000b4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b4e:	4564      	cmp	r4, ip
 8000b50:	4673      	mov	r3, lr
 8000b52:	46e1      	mov	r9, ip
 8000b54:	d362      	bcc.n	8000c1c <__udivmoddi4+0x2a8>
 8000b56:	d05f      	beq.n	8000c18 <__udivmoddi4+0x2a4>
 8000b58:	b15d      	cbz	r5, 8000b72 <__udivmoddi4+0x1fe>
 8000b5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000b5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000b62:	fa04 f606 	lsl.w	r6, r4, r6
 8000b66:	fa22 f301 	lsr.w	r3, r2, r1
 8000b6a:	431e      	orrs	r6, r3
 8000b6c:	40cc      	lsrs	r4, r1
 8000b6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000b72:	2100      	movs	r1, #0
 8000b74:	e74f      	b.n	8000a16 <__udivmoddi4+0xa2>
 8000b76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b7a:	0c01      	lsrs	r1, r0, #16
 8000b7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b86:	463b      	mov	r3, r7
 8000b88:	4638      	mov	r0, r7
 8000b8a:	463c      	mov	r4, r7
 8000b8c:	46b8      	mov	r8, r7
 8000b8e:	46be      	mov	lr, r7
 8000b90:	2620      	movs	r6, #32
 8000b92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b96:	eba2 0208 	sub.w	r2, r2, r8
 8000b9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b9e:	e766      	b.n	8000a6e <__udivmoddi4+0xfa>
 8000ba0:	4601      	mov	r1, r0
 8000ba2:	e718      	b.n	80009d6 <__udivmoddi4+0x62>
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	e72c      	b.n	8000a02 <__udivmoddi4+0x8e>
 8000ba8:	f1c6 0220 	rsb	r2, r6, #32
 8000bac:	fa2e f302 	lsr.w	r3, lr, r2
 8000bb0:	40b7      	lsls	r7, r6
 8000bb2:	40b1      	lsls	r1, r6
 8000bb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000bc2:	b2bc      	uxth	r4, r7
 8000bc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000bc8:	0c11      	lsrs	r1, r2, #16
 8000bca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bce:	fb08 f904 	mul.w	r9, r8, r4
 8000bd2:	40b0      	lsls	r0, r6
 8000bd4:	4589      	cmp	r9, r1
 8000bd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000bda:	b280      	uxth	r0, r0
 8000bdc:	d93e      	bls.n	8000c5c <__udivmoddi4+0x2e8>
 8000bde:	1879      	adds	r1, r7, r1
 8000be0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000be4:	d201      	bcs.n	8000bea <__udivmoddi4+0x276>
 8000be6:	4589      	cmp	r9, r1
 8000be8:	d81f      	bhi.n	8000c2a <__udivmoddi4+0x2b6>
 8000bea:	eba1 0109 	sub.w	r1, r1, r9
 8000bee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bf2:	fb09 f804 	mul.w	r8, r9, r4
 8000bf6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bfa:	b292      	uxth	r2, r2
 8000bfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c00:	4542      	cmp	r2, r8
 8000c02:	d229      	bcs.n	8000c58 <__udivmoddi4+0x2e4>
 8000c04:	18ba      	adds	r2, r7, r2
 8000c06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c0a:	d2c4      	bcs.n	8000b96 <__udivmoddi4+0x222>
 8000c0c:	4542      	cmp	r2, r8
 8000c0e:	d2c2      	bcs.n	8000b96 <__udivmoddi4+0x222>
 8000c10:	f1a9 0102 	sub.w	r1, r9, #2
 8000c14:	443a      	add	r2, r7
 8000c16:	e7be      	b.n	8000b96 <__udivmoddi4+0x222>
 8000c18:	45f0      	cmp	r8, lr
 8000c1a:	d29d      	bcs.n	8000b58 <__udivmoddi4+0x1e4>
 8000c1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000c20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c24:	3801      	subs	r0, #1
 8000c26:	46e1      	mov	r9, ip
 8000c28:	e796      	b.n	8000b58 <__udivmoddi4+0x1e4>
 8000c2a:	eba7 0909 	sub.w	r9, r7, r9
 8000c2e:	4449      	add	r1, r9
 8000c30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c38:	fb09 f804 	mul.w	r8, r9, r4
 8000c3c:	e7db      	b.n	8000bf6 <__udivmoddi4+0x282>
 8000c3e:	4673      	mov	r3, lr
 8000c40:	e77f      	b.n	8000b42 <__udivmoddi4+0x1ce>
 8000c42:	4650      	mov	r0, sl
 8000c44:	e766      	b.n	8000b14 <__udivmoddi4+0x1a0>
 8000c46:	4608      	mov	r0, r1
 8000c48:	e6fd      	b.n	8000a46 <__udivmoddi4+0xd2>
 8000c4a:	443b      	add	r3, r7
 8000c4c:	3a02      	subs	r2, #2
 8000c4e:	e733      	b.n	8000ab8 <__udivmoddi4+0x144>
 8000c50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c54:	443b      	add	r3, r7
 8000c56:	e71c      	b.n	8000a92 <__udivmoddi4+0x11e>
 8000c58:	4649      	mov	r1, r9
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x222>
 8000c5c:	eba1 0109 	sub.w	r1, r1, r9
 8000c60:	46c4      	mov	ip, r8
 8000c62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c66:	fb09 f804 	mul.w	r8, r9, r4
 8000c6a:	e7c4      	b.n	8000bf6 <__udivmoddi4+0x282>

08000c6c <__aeabi_idiv0>:
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c76:	463b      	mov	r3, r7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c82:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000c84:	4a22      	ldr	r2, [pc, #136]	@ (8000d10 <MX_ADC1_Init+0xa0>)
 8000c86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c88:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000cb2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd2:	480e      	ldr	r0, [pc, #56]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000cd4:	f001 fb78 	bl	80023c8 <HAL_ADC_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000cde:	f000 fddd 	bl	800189c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000cea:	2306      	movs	r3, #6
 8000cec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	@ (8000d0c <MX_ADC1_Init+0x9c>)
 8000cf4:	f001 fcda 	bl	80026ac <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000cfe:	f000 fdcd 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000009c 	.word	0x2000009c
 8000d10:	40012000 	.word	0x40012000

08000d14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a2f      	ldr	r2, [pc, #188]	@ (8000df0 <HAL_ADC_MspInit+0xdc>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d157      	bne.n	8000de6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8000df4 <HAL_ADC_MspInit+0xe0>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8000df4 <HAL_ADC_MspInit+0xe0>)
 8000d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d46:	4b2b      	ldr	r3, [pc, #172]	@ (8000df4 <HAL_ADC_MspInit+0xe0>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <HAL_ADC_MspInit+0xe0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a26      	ldr	r2, [pc, #152]	@ (8000df4 <HAL_ADC_MspInit+0xe0>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <HAL_ADC_MspInit+0xe0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d72:	2303      	movs	r3, #3
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	481d      	ldr	r0, [pc, #116]	@ (8000df8 <HAL_ADC_MspInit+0xe4>)
 8000d82:	f002 fbb5 	bl	80034f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d86:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000d88:	4a1d      	ldr	r2, [pc, #116]	@ (8000e00 <HAL_ADC_MspInit+0xec>)
 8000d8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000da0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000da4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000da8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dae:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000db0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000db4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000db8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dbc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dca:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000dcc:	f002 f820 	bl	8002e10 <HAL_DMA_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000dd6:	f000 fd61 	bl	800189c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000dde:	639a      	str	r2, [r3, #56]	@ 0x38
 8000de0:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <HAL_ADC_MspInit+0xe8>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	@ 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40012000 	.word	0x40012000
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	200000e4 	.word	0x200000e4
 8000e00:	40026410 	.word	0x40026410

08000e04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <MX_DMA_Init+0x78>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a1a      	ldr	r2, [pc, #104]	@ (8000e7c <MX_DMA_Init+0x78>)
 8000e14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <MX_DMA_Init+0x78>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <MX_DMA_Init+0x78>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a13      	ldr	r2, [pc, #76]	@ (8000e7c <MX_DMA_Init+0x78>)
 8000e30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <MX_DMA_Init+0x78>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	200e      	movs	r0, #14
 8000e48:	f001 ffab 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e4c:	200e      	movs	r0, #14
 8000e4e:	f001 ffc4 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	200f      	movs	r0, #15
 8000e58:	f001 ffa3 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e5c:	200f      	movs	r0, #15
 8000e5e:	f001 ffbc 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2038      	movs	r0, #56	@ 0x38
 8000e68:	f001 ff9b 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e6c:	2038      	movs	r0, #56	@ 0x38
 8000e6e:	f001 ffb4 	bl	8002dda <HAL_NVIC_EnableIRQ>

}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	@ 0x30
 8000e84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	4b78      	ldr	r3, [pc, #480]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a77      	ldr	r2, [pc, #476]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b75      	ldr	r3, [pc, #468]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	4b71      	ldr	r3, [pc, #452]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a70      	ldr	r2, [pc, #448]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b6e      	ldr	r3, [pc, #440]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a69      	ldr	r2, [pc, #420]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b67      	ldr	r3, [pc, #412]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b63      	ldr	r3, [pc, #396]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a62      	ldr	r2, [pc, #392]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b60      	ldr	r3, [pc, #384]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b5c      	ldr	r3, [pc, #368]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a5b      	ldr	r2, [pc, #364]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b59      	ldr	r3, [pc, #356]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b55      	ldr	r3, [pc, #340]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a54      	ldr	r2, [pc, #336]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b52      	ldr	r3, [pc, #328]	@ (800107c <MX_GPIO_Init+0x1fc>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2108      	movs	r1, #8
 8000f42:	484f      	ldr	r0, [pc, #316]	@ (8001080 <MX_GPIO_Init+0x200>)
 8000f44:	f002 fc70 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	484d      	ldr	r0, [pc, #308]	@ (8001084 <MX_GPIO_Init+0x204>)
 8000f4e:	f002 fc6b 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f52:	2200      	movs	r2, #0
 8000f54:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000f58:	484b      	ldr	r0, [pc, #300]	@ (8001088 <MX_GPIO_Init+0x208>)
 8000f5a:	f002 fc65 	bl	8003828 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4842      	ldr	r0, [pc, #264]	@ (8001080 <MX_GPIO_Init+0x200>)
 8000f76:	f002 fabb 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	483c      	ldr	r0, [pc, #240]	@ (8001084 <MX_GPIO_Init+0x204>)
 8000f92:	f002 faad 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f9a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4838      	ldr	r0, [pc, #224]	@ (800108c <MX_GPIO_Init+0x20c>)
 8000fac:	f002 faa0 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4832      	ldr	r0, [pc, #200]	@ (800108c <MX_GPIO_Init+0x20c>)
 8000fc4:	f002 fa94 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482d      	ldr	r0, [pc, #180]	@ (8001090 <MX_GPIO_Init+0x210>)
 8000fdc:	f002 fa88 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fe0:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000fe4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4823      	ldr	r0, [pc, #140]	@ (8001088 <MX_GPIO_Init+0x208>)
 8000ffa:	f002 fa79 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ffe:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001010:	2306      	movs	r3, #6
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	481a      	ldr	r0, [pc, #104]	@ (8001084 <MX_GPIO_Init+0x204>)
 800101c:	f002 fa68 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001020:	2320      	movs	r3, #32
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4815      	ldr	r0, [pc, #84]	@ (8001088 <MX_GPIO_Init+0x208>)
 8001034:	f002 fa5c 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001038:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103e:	2312      	movs	r3, #18
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001042:	2301      	movs	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800104a:	2304      	movs	r3, #4
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	480e      	ldr	r0, [pc, #56]	@ (8001090 <MX_GPIO_Init+0x210>)
 8001056:	f002 fa4b 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800105a:	2302      	movs	r3, #2
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800105e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <MX_GPIO_Init+0x200>)
 8001070:	f002 fa3e 	bl	80034f0 <HAL_GPIO_Init>

}
 8001074:	bf00      	nop
 8001076:	3730      	adds	r7, #48	@ 0x30
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	40021000 	.word	0x40021000
 8001084:	40020800 	.word	0x40020800
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40020000 	.word	0x40020000
 8001090:	40020400 	.word	0x40020400

08001094 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_I2C3_Init+0x50>)
 800109a:	4a13      	ldr	r2, [pc, #76]	@ (80010e8 <MX_I2C3_Init+0x54>)
 800109c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_I2C3_Init+0x50>)
 80010a0:	4a12      	ldr	r2, [pc, #72]	@ (80010ec <MX_I2C3_Init+0x58>)
 80010a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_I2C3_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <MX_I2C3_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_I2C3_Init+0x50>)
 80010b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <MX_I2C3_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_I2C3_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <MX_I2C3_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_I2C3_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_I2C3_Init+0x50>)
 80010d2:	f004 fd11 	bl	8005af8 <HAL_I2C_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80010dc:	f000 fbde 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000144 	.word	0x20000144
 80010e8:	40005c00 	.word	0x40005c00
 80010ec:	000186a0 	.word	0x000186a0

080010f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a29      	ldr	r2, [pc, #164]	@ (80011b4 <HAL_I2C_MspInit+0xc4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d14b      	bne.n	80011aa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <HAL_I2C_MspInit+0xc8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a27      	ldr	r2, [pc, #156]	@ (80011b8 <HAL_I2C_MspInit+0xc8>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <HAL_I2C_MspInit+0xc8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <HAL_I2C_MspInit+0xc8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a20      	ldr	r2, [pc, #128]	@ (80011b8 <HAL_I2C_MspInit+0xc8>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <HAL_I2C_MspInit+0xc8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800114a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001150:	2312      	movs	r3, #18
 8001152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800115c:	2304      	movs	r3, #4
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4815      	ldr	r0, [pc, #84]	@ (80011bc <HAL_I2C_MspInit+0xcc>)
 8001168:	f002 f9c2 	bl	80034f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800116c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001172:	2312      	movs	r3, #18
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800117e:	2304      	movs	r3, #4
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	480d      	ldr	r0, [pc, #52]	@ (80011c0 <HAL_I2C_MspInit+0xd0>)
 800118a:	f002 f9b1 	bl	80034f0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <HAL_I2C_MspInit+0xc8>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	4a08      	ldr	r2, [pc, #32]	@ (80011b8 <HAL_I2C_MspInit+0xc8>)
 8001198:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800119c:	6413      	str	r3, [r2, #64]	@ 0x40
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_I2C_MspInit+0xc8>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	@ 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40005c00 	.word	0x40005c00
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020000 	.word	0x40020000

080011c4 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <MX_I2S2_Init+0x54>)
 80011ca:	4a14      	ldr	r2, [pc, #80]	@ (800121c <MX_I2S2_Init+0x58>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_I2S2_Init+0x54>)
 80011d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <MX_I2S2_Init+0x54>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_I2S2_Init+0x54>)
 80011de:	2203      	movs	r2, #3
 80011e0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <MX_I2S2_Init+0x54>)
 80011e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <MX_I2S2_Init+0x54>)
 80011ec:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80011f0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_I2S2_Init+0x54>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <MX_I2S2_Init+0x54>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_I2S2_Init+0x54>)
 8001200:	2201      	movs	r2, #1
 8001202:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	@ (8001218 <MX_I2S2_Init+0x54>)
 8001206:	f005 fc9b 	bl	8006b40 <HAL_I2S_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001210:	f000 fb44 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000198 	.word	0x20000198
 800121c:	40003800 	.word	0x40003800

08001220 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	@ 0x38
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a6f      	ldr	r2, [pc, #444]	@ (8001408 <HAL_I2S_MspInit+0x1e8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	f040 80d7 	bne.w	8001400 <HAL_I2S_MspInit+0x1e0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001252:	2301      	movs	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8001256:	2360      	movs	r3, #96	@ 0x60
 8001258:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800125a:	2302      	movs	r3, #2
 800125c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4618      	mov	r0, r3
 8001264:	f006 ffa8 	bl	80081b8 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800126e:	f000 fb15 	bl	800189c <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b65      	ldr	r3, [pc, #404]	@ (800140c <HAL_I2S_MspInit+0x1ec>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	4a64      	ldr	r2, [pc, #400]	@ (800140c <HAL_I2S_MspInit+0x1ec>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	6413      	str	r3, [r2, #64]	@ 0x40
 8001282:	4b62      	ldr	r3, [pc, #392]	@ (800140c <HAL_I2S_MspInit+0x1ec>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b5e      	ldr	r3, [pc, #376]	@ (800140c <HAL_I2S_MspInit+0x1ec>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a5d      	ldr	r2, [pc, #372]	@ (800140c <HAL_I2S_MspInit+0x1ec>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b5b      	ldr	r3, [pc, #364]	@ (800140c <HAL_I2S_MspInit+0x1ec>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b57      	ldr	r3, [pc, #348]	@ (800140c <HAL_I2S_MspInit+0x1ec>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a56      	ldr	r2, [pc, #344]	@ (800140c <HAL_I2S_MspInit+0x1ec>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b54      	ldr	r3, [pc, #336]	@ (800140c <HAL_I2S_MspInit+0x1ec>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12|GPIO_PIN_15;
 80012c6:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d8:	2305      	movs	r3, #5
 80012da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	484b      	ldr	r0, [pc, #300]	@ (8001410 <HAL_I2S_MspInit+0x1f0>)
 80012e4:	f002 f904 	bl	80034f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80012fa:	2306      	movs	r3, #6
 80012fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	4842      	ldr	r0, [pc, #264]	@ (8001410 <HAL_I2S_MspInit+0x1f0>)
 8001306:	f002 f8f3 	bl	80034f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800130a:	2340      	movs	r3, #64	@ 0x40
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800131a:	2305      	movs	r3, #5
 800131c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	483b      	ldr	r0, [pc, #236]	@ (8001414 <HAL_I2S_MspInit+0x1f4>)
 8001326:	f002 f8e3 	bl	80034f0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800132a:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 800132c:	4a3b      	ldr	r2, [pc, #236]	@ (800141c <HAL_I2S_MspInit+0x1fc>)
 800132e:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001330:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 8001332:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001336:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001338:	4b37      	ldr	r3, [pc, #220]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800133e:	4b36      	ldr	r3, [pc, #216]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001344:	4b34      	ldr	r3, [pc, #208]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 8001346:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800134a:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800134c:	4b32      	ldr	r3, [pc, #200]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 800134e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001352:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001354:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 8001356:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800135a:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 800135c:	4b2e      	ldr	r3, [pc, #184]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 800135e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001362:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001364:	4b2c      	ldr	r3, [pc, #176]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 8001366:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800136a:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800136c:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001372:	4829      	ldr	r0, [pc, #164]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 8001374:	f001 fd4c 	bl	8002e10 <HAL_DMA_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 800137e:	f000 fa8d 	bl	800189c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a24      	ldr	r2, [pc, #144]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 8001386:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001388:	4a23      	ldr	r2, [pc, #140]	@ (8001418 <HAL_I2S_MspInit+0x1f8>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 8001390:	4a24      	ldr	r2, [pc, #144]	@ (8001424 <HAL_I2S_MspInit+0x204>)
 8001392:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001394:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 8001396:	2200      	movs	r2, #0
 8001398:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 800139c:	2240      	movs	r2, #64	@ 0x40
 800139e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 80013a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ac:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 80013b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013b4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 80013b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013bc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80013be:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 80013c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013c4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013c6:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 80013c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80013cc:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ce:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80013d4:	4812      	ldr	r0, [pc, #72]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 80013d6:	f001 fd1b 	bl	8002e10 <HAL_DMA_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 80013e0:	f000 fa5c 	bl	800189c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 80013e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80013ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <HAL_I2S_MspInit+0x200>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	2024      	movs	r0, #36	@ 0x24
 80013f6:	f001 fcd4 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80013fa:	2024      	movs	r0, #36	@ 0x24
 80013fc:	f001 fced 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001400:	bf00      	nop
 8001402:	3738      	adds	r7, #56	@ 0x38
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40003800 	.word	0x40003800
 800140c:	40023800 	.word	0x40023800
 8001410:	40020400 	.word	0x40020400
 8001414:	40020800 	.word	0x40020800
 8001418:	200001e0 	.word	0x200001e0
 800141c:	40026058 	.word	0x40026058
 8001420:	20000240 	.word	0x20000240
 8001424:	40026070 	.word	0x40026070

08001428 <HAL_I2SEx_TxRxHalfCpltCallback>:
/* USER CODE BEGIN 0 */
// === DMA callbacks ===

// FOR DOUBLE BUFFERING
// Half complete buffer
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	callback_state = 1;
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	200002a0 	.word	0x200002a0

08001448 <HAL_I2SEx_TxRxCpltCallback>:

// Fully complete buffer
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	callback_state = 2;
 8001450:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8001452:	2202      	movs	r2, #2
 8001454:	701a      	strb	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200002a0 	.word	0x200002a0

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b08c      	sub	sp, #48	@ 0x30
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146e:	f000 ff15 	bl	800229c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001472:	f000 f9a9 	bl	80017c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001476:	f7ff fd03 	bl	8000e80 <MX_GPIO_Init>
  MX_DMA_Init();
 800147a:	f7ff fcc3 	bl	8000e04 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800147e:	f000 fe17 	bl	80020b0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001482:	f000 fc0b 	bl	8001c9c <MX_SPI1_Init>
  MX_I2C3_Init();
 8001486:	f7ff fe05 	bl	8001094 <MX_I2C3_Init>
  MX_USB_HOST_Init();
 800148a:	f00b fb1d 	bl	800cac8 <MX_USB_HOST_Init>
  MX_I2S2_Init();
 800148e:	f7ff fe99 	bl	80011c4 <MX_I2S2_Init>
  MX_ADC1_Init();
 8001492:	f7ff fbed 	bl	8000c70 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001496:	f000 fd51 	bl	8001f3c <MX_TIM2_Init>
  // Initialize overdrive
  // 41.6kHz Fs
  // 800Hz HPF input stage
  // 4000Hz LPF output stage
  // See OD_GAIN defined in user defines
  Overdrive_Init(&od, 41666.0f, 800.0f, 4000.0f, OD_GAIN);
 800149a:	eddf 1ab4 	vldr	s3, [pc, #720]	@ 800176c <main+0x304>
 800149e:	ed9f 1ab4 	vldr	s2, [pc, #720]	@ 8001770 <main+0x308>
 80014a2:	eddf 0ab4 	vldr	s1, [pc, #720]	@ 8001774 <main+0x30c>
 80014a6:	ed9f 0ab4 	vldr	s0, [pc, #720]	@ 8001778 <main+0x310>
 80014aa:	48b4      	ldr	r0, [pc, #720]	@ (800177c <main+0x314>)
 80014ac:	f000 f9fc 	bl	80018a8 <Overdrive_Init>

  // Initialize Tremolo
  Tremolo_Init(&tr, 41666.0f, TR_RATE, TR_DEPTH);
 80014b0:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80014b4:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 80014b8:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 8001778 <main+0x310>
 80014bc:	48b0      	ldr	r0, [pc, #704]	@ (8001780 <main+0x318>)
 80014be:	f000 fdcf 	bl	8002060 <Tremolo_Init>

  // Initialize I2S DMA
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 80014c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014c6:	4aaf      	ldr	r2, [pc, #700]	@ (8001784 <main+0x31c>)
 80014c8:	49af      	ldr	r1, [pc, #700]	@ (8001788 <main+0x320>)
 80014ca:	48b0      	ldr	r0, [pc, #704]	@ (800178c <main+0x324>)
 80014cc:	f005 fd76 	bl	8006fbc <HAL_I2SEx_TransmitReceive_DMA>
  int offset_r_ptr;
  int offset_w_ptr, w_ptr;

  // Initialize pot ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcControlData, 1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	49af      	ldr	r1, [pc, #700]	@ (8001790 <main+0x328>)
 80014d4:	48af      	ldr	r0, [pc, #700]	@ (8001794 <main+0x32c>)
 80014d6:	f000 ffbb 	bl	8002450 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 80014da:	48af      	ldr	r0, [pc, #700]	@ (8001798 <main+0x330>)
 80014dc:	f007 f884 	bl	80085e8 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (fabs(adcControlDataLast - adcControlData[0]) > 10) {
 80014e0:	4bae      	ldr	r3, [pc, #696]	@ (800179c <main+0x334>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4baa      	ldr	r3, [pc, #680]	@ (8001790 <main+0x328>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f8e7 	bl	80006c0 <__aeabi_i2d>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4614      	mov	r4, r2
 80014f8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	4ba7      	ldr	r3, [pc, #668]	@ (80017a0 <main+0x338>)
 8001502:	4620      	mov	r0, r4
 8001504:	4629      	mov	r1, r5
 8001506:	f7ff f9c3 	bl	8000890 <__aeabi_dcmpgt>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d017      	beq.n	8001540 <main+0xd8>
//		  Tremolo_Set_Depth(&tr, adcControlData[0] / 4095.0f);
		  Overdrive_Set_Gain(&od, 100.0f * adcControlData[0] / 4095.0f);
 8001510:	4b9f      	ldr	r3, [pc, #636]	@ (8001790 <main+0x328>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151c:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800176c <main+0x304>
 8001520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001524:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 80017a4 <main+0x33c>
 8001528:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800152c:	eeb0 0a47 	vmov.f32	s0, s14
 8001530:	4892      	ldr	r0, [pc, #584]	@ (800177c <main+0x314>)
 8001532:	f000 fa3b 	bl	80019ac <Overdrive_Set_Gain>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001536:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800153a:	489b      	ldr	r0, [pc, #620]	@ (80017a8 <main+0x340>)
 800153c:	f002 f98d 	bl	800385a <HAL_GPIO_TogglePin>
	  }

	  adcControlDataLast = adcControlData[0];
 8001540:	4b93      	ldr	r3, [pc, #588]	@ (8001790 <main+0x328>)
 8001542:	881a      	ldrh	r2, [r3, #0]
 8001544:	4b95      	ldr	r3, [pc, #596]	@ (800179c <main+0x334>)
 8001546:	801a      	strh	r2, [r3, #0]

	  if (callback_state != 0) {
 8001548:	4b98      	ldr	r3, [pc, #608]	@ (80017ac <main+0x344>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 8109 	beq.w	8001764 <main+0x2fc>

		  // decide if it was half or cplt callback
		  if (callback_state == 1)   {
 8001552:	4b96      	ldr	r3, [pc, #600]	@ (80017ac <main+0x344>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d106      	bne.n	8001568 <main+0x100>
			  	  offset_r_ptr = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  	  offset_w_ptr = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
			  	  w_ptr = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
 8001566:	e00a      	b.n	800157e <main+0x116>
			  	  // Set pointer to first half of DMA
			  }

		  else if (callback_state == 2) {
 8001568:	4b90      	ldr	r3, [pc, #576]	@ (80017ac <main+0x344>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d106      	bne.n	800157e <main+0x116>
			  offset_r_ptr = BLOCK_SIZE_U16;
 8001570:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  offset_w_ptr = BLOCK_SIZE_FLOAT;
 8001576:	2380      	movs	r3, #128	@ 0x80
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
			  w_ptr = BLOCK_SIZE_FLOAT;
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
			  // Set pointer to second half of DMA
		  }


		  //restore input sample buffer to float array
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 800157e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001580:	623b      	str	r3, [r7, #32]
 8001582:	e061      	b.n	8001648 <main+0x1e0>

			  // Rebuild signed 24-bit sample from 16-bit rxBuf
			  int32_t sample_l = ((int32_t)(rxBuf[i] << 16) | (rxBuf[i + 1]));
 8001584:	4a7f      	ldr	r2, [pc, #508]	@ (8001784 <main+0x31c>)
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800158c:	041b      	lsls	r3, r3, #16
 800158e:	6a3a      	ldr	r2, [r7, #32]
 8001590:	3201      	adds	r2, #1
 8001592:	497c      	ldr	r1, [pc, #496]	@ (8001784 <main+0x31c>)
 8001594:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001598:	4313      	orrs	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]

			  // Convert to float in range [-1.0f, 1.0f] for easier DSP
			  float sample_f_l = sample_l / 2147483648.0f;  // 2^31
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a6:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80017b0 <main+0x348>
 80015aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ae:	edc7 7a02 	vstr	s15, [r7, #8]

			  // Light up debug LED if this is somehow outside of range
			  if (sample_f_l > 1.0f | sample_f_l < -1.0f) {
 80015b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	bfcc      	ite	gt
 80015c4:	2301      	movgt	r3, #1
 80015c6:	2300      	movle	r3, #0
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ce:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80015d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	bf4c      	ite	mi
 80015dc:	2301      	movmi	r3, #1
 80015de:	2300      	movpl	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d004      	beq.n	80015f4 <main+0x18c>
				  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80015ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015ee:	486e      	ldr	r0, [pc, #440]	@ (80017a8 <main+0x340>)
 80015f0:	f002 f933 	bl	800385a <HAL_GPIO_TogglePin>
			  }
			  l_buf_in[w_ptr] = sample_f_l;
 80015f4:	4a6f      	ldr	r2, [pc, #444]	@ (80017b4 <main+0x34c>)
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	601a      	str	r2, [r3, #0]

			  // Repeat for right channel
			  int32_t sample_r = ((int32_t)(rxBuf[i + 2] << 16) | (rxBuf[i + 3]));
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	3302      	adds	r3, #2
 8001604:	4a5f      	ldr	r2, [pc, #380]	@ (8001784 <main+0x31c>)
 8001606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	6a3a      	ldr	r2, [r7, #32]
 800160e:	3203      	adds	r2, #3
 8001610:	495c      	ldr	r1, [pc, #368]	@ (8001784 <main+0x31c>)
 8001612:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001616:	4313      	orrs	r3, r2
 8001618:	607b      	str	r3, [r7, #4]
			  float sample_f_r = sample_r / 2147483648.0f;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001624:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80017b0 <main+0x348>
 8001628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800162c:	edc7 7a00 	vstr	s15, [r7]
			  r_buf_in[w_ptr] = sample_f_r;
 8001630:	4a61      	ldr	r2, [pc, #388]	@ (80017b8 <main+0x350>)
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	601a      	str	r2, [r3, #0]


			  w_ptr++;
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	3301      	adds	r3, #1
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	3304      	adds	r3, #4
 8001646:	623b      	str	r3, [r7, #32]
 8001648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800164e:	6a3a      	ldr	r2, [r7, #32]
 8001650:	429a      	cmp	r2, r3
 8001652:	dd97      	ble.n	8001584 <main+0x11c>
		  }


		  for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i++) {
 8001654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	e030      	b.n	80016bc <main+0x254>
			  // CODE FOR PASSTHROUGH, DON'T DELETE
//			  l_buf_out[i] = l_buf_in[i];
//			  r_buf_out[i] = r_buf_in[i];

//			  // Populate output buffer with overdrive-processed input buffer data
			  l_buf_out[i] = Overdrive_Update(&od, l_buf_in[i])/32.0f; // 1/16 for appropriate amp-level volume
 800165a:	4a56      	ldr	r2, [pc, #344]	@ (80017b4 <main+0x34c>)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	eeb0 0a67 	vmov.f32	s0, s15
 800166a:	4844      	ldr	r0, [pc, #272]	@ (800177c <main+0x314>)
 800166c:	f000 f9ae 	bl	80019cc <Overdrive_Update>
 8001670:	eeb0 7a40 	vmov.f32	s14, s0
 8001674:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80017bc <main+0x354>
 8001678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167c:	4a50      	ldr	r2, [pc, #320]	@ (80017c0 <main+0x358>)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	edc3 7a00 	vstr	s15, [r3]
			  r_buf_out[i] = Overdrive_Update(&od, r_buf_in[i])/32.0f;
 8001688:	4a4b      	ldr	r2, [pc, #300]	@ (80017b8 <main+0x350>)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	eeb0 0a67 	vmov.f32	s0, s15
 8001698:	4838      	ldr	r0, [pc, #224]	@ (800177c <main+0x314>)
 800169a:	f000 f997 	bl	80019cc <Overdrive_Update>
 800169e:	eeb0 7a40 	vmov.f32	s14, s0
 80016a2:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80017bc <main+0x354>
 80016a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016aa:	4a46      	ldr	r2, [pc, #280]	@ (80017c4 <main+0x35c>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	edc3 7a00 	vstr	s15, [r3]
		  for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i++) {
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016be:	337f      	adds	r3, #127	@ 0x7f
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	ddc9      	ble.n	800165a <main+0x1f2>
//			  l_buf_out[i] = Tremolo_Update(&tr, l_buf_in[i]); // 1/16 for appropriate amp-level volume
//			  r_buf_out[i] = Tremolo_Update(&tr, l_buf_in[i]);
		  }

		  //restore processed float-array to output sample-buffer
		  w_ptr = offset_w_ptr;
 80016c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24

		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 80016ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	e040      	b.n	8001752 <main+0x2ea>
			  int sample_out_l = (int)(l_buf_out[w_ptr] * 2147483648.0f);  // back to 24-bit signed
 80016d0:	4a3b      	ldr	r2, [pc, #236]	@ (80017c0 <main+0x358>)
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80017b0 <main+0x348>
 80016e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e8:	ee17 3a90 	vmov	r3, s15
 80016ec:	617b      	str	r3, [r7, #20]
			  txBuf[i]   = (sample_out_l >> 16) & 0xFFFF;  // upper 16 bits
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	0c1b      	lsrs	r3, r3, #16
 80016f2:	b299      	uxth	r1, r3
 80016f4:	4a24      	ldr	r2, [pc, #144]	@ (8001788 <main+0x320>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+1] = sample_out_l & 0xFFFF;          // lower 16 bits
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	3301      	adds	r3, #1
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	b291      	uxth	r1, r2
 8001704:	4a20      	ldr	r2, [pc, #128]	@ (8001788 <main+0x320>)
 8001706:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  int sample_out_r = (int)(r_buf_out[w_ptr] * 2147483648.0f);  // back to 24-bit signed
 800170a:	4a2e      	ldr	r2, [pc, #184]	@ (80017c4 <main+0x35c>)
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80017b0 <main+0x348>
 800171a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001722:	ee17 3a90 	vmov	r3, s15
 8001726:	613b      	str	r3, [r7, #16]
			  txBuf[i+2]   = (sample_out_r >> 16) & 0xFFFF;  // upper 16 bits
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	0c1a      	lsrs	r2, r3, #16
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	3302      	adds	r3, #2
 8001730:	b291      	uxth	r1, r2
 8001732:	4a15      	ldr	r2, [pc, #84]	@ (8001788 <main+0x320>)
 8001734:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+3] = sample_out_r & 0xFFFF;          // lower 16 bits
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	3303      	adds	r3, #3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	b291      	uxth	r1, r2
 8001740:	4a11      	ldr	r2, [pc, #68]	@ (8001788 <main+0x320>)
 8001742:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  w_ptr++;
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	3301      	adds	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	3304      	adds	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
 8001752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001754:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	429a      	cmp	r2, r3
 800175c:	ddb8      	ble.n	80016d0 <main+0x268>
		  }

		  callback_state = 0;
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <main+0x344>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]

	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001764:	f00b f9d6 	bl	800cb14 <MX_USB_HOST_Process>
	  if (fabs(adcControlDataLast - adcControlData[0]) > 10) {
 8001768:	e6ba      	b.n	80014e0 <main+0x78>
 800176a:	bf00      	nop
 800176c:	42c80000 	.word	0x42c80000
 8001770:	457a0000 	.word	0x457a0000
 8001774:	44480000 	.word	0x44480000
 8001778:	4722c200 	.word	0x4722c200
 800177c:	200022a8 	.word	0x200022a8
 8001780:	200022f8 	.word	0x200022f8
 8001784:	200002a8 	.word	0x200002a8
 8001788:	20000aa8 	.word	0x20000aa8
 800178c:	20000198 	.word	0x20000198
 8001790:	200002a4 	.word	0x200002a4
 8001794:	2000009c 	.word	0x2000009c
 8001798:	20002368 	.word	0x20002368
 800179c:	20000000 	.word	0x20000000
 80017a0:	40240000 	.word	0x40240000
 80017a4:	457ff000 	.word	0x457ff000
 80017a8:	40020c00 	.word	0x40020c00
 80017ac:	200002a0 	.word	0x200002a0
 80017b0:	4f000000 	.word	0x4f000000
 80017b4:	200012a8 	.word	0x200012a8
 80017b8:	200016a8 	.word	0x200016a8
 80017bc:	42000000 	.word	0x42000000
 80017c0:	20001aa8 	.word	0x20001aa8
 80017c4:	20001ea8 	.word	0x20001ea8

080017c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b094      	sub	sp, #80	@ 0x50
 80017cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ce:	f107 0320 	add.w	r3, r7, #32
 80017d2:	2230      	movs	r2, #48	@ 0x30
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f00b fd5e 	bl	800d298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	4b28      	ldr	r3, [pc, #160]	@ (8001894 <SystemClock_Config+0xcc>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	4a27      	ldr	r2, [pc, #156]	@ (8001894 <SystemClock_Config+0xcc>)
 80017f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fc:	4b25      	ldr	r3, [pc, #148]	@ (8001894 <SystemClock_Config+0xcc>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <SystemClock_Config+0xd0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a21      	ldr	r2, [pc, #132]	@ (8001898 <SystemClock_Config+0xd0>)
 8001812:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <SystemClock_Config+0xd0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001824:	2301      	movs	r3, #1
 8001826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001828:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182e:	2302      	movs	r3, #2
 8001830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001832:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001838:	2308      	movs	r3, #8
 800183a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800183c:	2348      	movs	r3, #72	@ 0x48
 800183e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001840:	2302      	movs	r3, #2
 8001842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001844:	2303      	movs	r3, #3
 8001846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4618      	mov	r0, r3
 800184e:	f006 f81d 	bl	800788c <HAL_RCC_OscConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001858:	f000 f820 	bl	800189c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185c:	230f      	movs	r3, #15
 800185e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001860:	2302      	movs	r3, #2
 8001862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001868:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800186c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800186e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001872:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2102      	movs	r1, #2
 800187a:	4618      	mov	r0, r3
 800187c:	f006 fa7e 	bl	8007d7c <HAL_RCC_ClockConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001886:	f000 f809 	bl	800189c <Error_Handler>
  }
}
 800188a:	bf00      	nop
 800188c:	3750      	adds	r7, #80	@ 0x50
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000

0800189c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <Error_Handler+0x8>

080018a8 <Overdrive_Init>:
#include "overdrive.h"
#include <stdint.h>

void Overdrive_Init(Overdrive *od, float samplingFreqHz, float hpfCutoffFreqHz, float lpfCutoffFreqHz, float odPreGain) {
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6178      	str	r0, [r7, #20]
 80018b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80018b4:	edc7 0a03 	vstr	s1, [r7, #12]
 80018b8:	ed87 1a02 	vstr	s2, [r7, #8]
 80018bc:	edc7 1a01 	vstr	s3, [r7, #4]
    od->T = 1.0f / samplingFreqHz;
 80018c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80018c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	edc3 7a00 	vstr	s15, [r3]
    od->preGain = odPreGain;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	61da      	str	r2, [r3, #28]
    od->threshold = 1.0f/3.0f;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	4a33      	ldr	r2, [pc, #204]	@ (80019a8 <Overdrive_Init+0x100>)
 80018dc:	621a      	str	r2, [r3, #32]
    // Input lpf
    od->hpfInpBufIn[0] = 0.0f; od->hpfInpBufIn[1] = 0.0f;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
    od->hpfInpBufOut[0] = 0.0f; od->hpfInpBufOut[1] = 0.0f;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
    od->hpfInpWcT = 2.0f * M_PI * hpfCutoffFreqHz * od->T;
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7fe fef0 	bl	80006e4 <__aeabi_f2d>
 8001904:	a326      	add	r3, pc, #152	@ (adr r3, 80019a0 <Overdrive_Init+0xf8>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe fc5d 	bl	80001c8 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4614      	mov	r4, r2
 8001914:	461d      	mov	r5, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fee2 	bl	80006e4 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4620      	mov	r0, r4
 8001926:	4629      	mov	r1, r5
 8001928:	f7fe fc4e 	bl	80001c8 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7fe ffb6 	bl	80008a4 <__aeabi_d2f>
 8001938:	4602      	mov	r2, r0
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	615a      	str	r2, [r3, #20]
    od->hpfInpOut = 0.0f;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	619a      	str	r2, [r3, #24]

    // Output lpf
    od->lpfOutWcT = 2.0f * M_PI * lpfCutoffFreqHz * od->T;
 8001946:	68b8      	ldr	r0, [r7, #8]
 8001948:	f7fe fecc 	bl	80006e4 <__aeabi_f2d>
 800194c:	a314      	add	r3, pc, #80	@ (adr r3, 80019a0 <Overdrive_Init+0xf8>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe fc39 	bl	80001c8 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4614      	mov	r4, r2
 800195c:	461d      	mov	r5, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe febe 	bl	80006e4 <__aeabi_f2d>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4620      	mov	r0, r4
 800196e:	4629      	mov	r1, r5
 8001970:	f7fe fc2a 	bl	80001c8 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7fe ff92 	bl	80008a4 <__aeabi_d2f>
 8001980:	4602      	mov	r2, r0
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	641a      	str	r2, [r3, #64]	@ 0x40
    od->lpfOutDamp = 1.0f;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800198c:	645a      	str	r2, [r3, #68]	@ 0x44

    od->Q = -0.5;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8001994:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bdb0      	pop	{r4, r5, r7, pc}
 800199e:	bf00      	nop
 80019a0:	54442d18 	.word	0x54442d18
 80019a4:	401921fb 	.word	0x401921fb
 80019a8:	3eaaaaab 	.word	0x3eaaaaab

080019ac <Overdrive_Set_Gain>:

void Overdrive_Set_Gain(Overdrive *od, float odPreGain) {
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	ed87 0a00 	vstr	s0, [r7]
	od->preGain = odPreGain;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	61da      	str	r2, [r3, #28]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <Overdrive_Update>:

float Overdrive_Update(Overdrive *od, float inp) {
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	ed87 0a00 	vstr	s0, [r7]
	// Get new sample and push everything down by one spot
	// First order input buffer
	od->hpfInpBufIn[1] = od->hpfInpBufIn[0];
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]
	od->hpfInpBufIn[0] = inp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	605a      	str	r2, [r3, #4]

	// Second order output buffer
	od->hpfInpBufOut[1] = od->hpfInpBufOut[0]; // Shift down by one
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]
	// Do the IIR filter math
	od->hpfInpBufOut[0] = (2.0f * (od->hpfInpBufIn[0] - od->hpfInpBufIn[1]) + (2.0f - od->hpfInpWcT) * od->hpfInpBufOut[1])/(2.0f + od->hpfInpWcT);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80019fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a08:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001a0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a24:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	edc3 7a03 	vstr	s15, [r3, #12]
	od->hpfInpOut = od->hpfInpBufOut[0];
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	619a      	str	r2, [r3, #24]
    
    // Overdrive
    float clipIn = od->preGain * od->hpfInpOut;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	edc7 7a04 	vstr	s15, [r7, #16]

//     Symmetrical clipping

    float absClipIn = fabs(clipIn);
 8001a52:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a56:	eef0 7ae7 	vabs.f32	s15, s15
 8001a5a:	edc7 7a03 	vstr	s15, [r7, #12]
    float signClipIn = (clipIn >= 0.0f) ? 1.0f : -1.0f;
 8001a5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	db02      	blt.n	8001a72 <Overdrive_Update+0xa6>
 8001a6c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a70:	e000      	b.n	8001a74 <Overdrive_Update+0xa8>
 8001a72:	4b89      	ldr	r3, [pc, #548]	@ (8001c98 <Overdrive_Update+0x2cc>)
 8001a74:	60bb      	str	r3, [r7, #8]
    float clipOut = 0.0f;
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

    // If within threshold, amplify by 2
    if (absClipIn < od->threshold) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a82:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	d506      	bpl.n	8001a9e <Overdrive_Update+0xd2>
        clipOut = 2.0f * clipIn;
 8001a90:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a98:	edc7 7a05 	vstr	s15, [r7, #20]
 8001a9c:	e045      	b.n	8001b2a <Overdrive_Update+0x15e>
    // If over threshold, but below twice threshold, soft clip
    } else if (absClipIn >= od->threshold && absClipIn < (2.0f * od->threshold)) {
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001aa4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	db30      	blt.n	8001b14 <Overdrive_Update+0x148>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ab8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001abc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac8:	d524      	bpl.n	8001b14 <Overdrive_Update+0x148>
        clipOut = signClipIn * (3.0f - (2.0f - 3.0f*absClipIn)*(2.0f - 3.0f*absClipIn)) / 3.0f;
 8001aca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ace:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001ada:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ade:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae2:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001ae6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001aea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001aee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001afa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001afe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b06:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b0e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001b12:	e00a      	b.n	8001b2a <Overdrive_Update+0x15e>
    // If entirely out of threshold, clip the signal to 2/3
    } else {
        clipOut = signClipIn * 2.0f * od->threshold;
 8001b14:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b18:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b26:	edc7 7a05 	vstr	s15, [r7, #20]
//    if (fabs(clipIn - od->Q) >= 0.00001f) {
//    	clipOut += (clipIn - od->Q)/(1.0f - expf(-d*(clipIn - od->Q)));
//    }
    
    // Lowpass filter the output 3rd degree
    od->lpfOutBufIn[2] = od->lpfOutBufIn[1];
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	631a      	str	r2, [r3, #48]	@ 0x30
    od->lpfOutBufIn[1] = od->lpfOutBufIn[0];
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	62da      	str	r2, [r3, #44]	@ 0x2c
    od->lpfOutBufIn[0] = clipOut;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	629a      	str	r2, [r3, #40]	@ 0x28

    od->lpfOutBufOut[2] = od->lpfOutBufOut[1];
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	63da      	str	r2, [r3, #60]	@ 0x3c
    od->lpfOutBufOut[1] = od->lpfOutBufOut[0];
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	639a      	str	r2, [r3, #56]	@ 0x38
    od->lpfOutBufOut[0] = od->lpfOutWcT * od->lpfOutWcT * (od->lpfOutBufIn[0] + 2.0f * od->lpfOutBufIn[1] + od->lpfOutBufIn[2])
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001b6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b70:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
                        - 2.0f * (od->lpfOutWcT * od->lpfOutWcT - 4.0f) * od->lpfOutBufOut[1]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b92:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001b96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001b9a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001ba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
                        - (4.0f - 4.0f * od->lpfOutDamp * od->lpfOutWcT + od->lpfOutWcT * od->lpfOutWcT) * od->lpfOutBufOut[2];
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001bb2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001bb6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001bc8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	ed93 6a10 	vldr	s12, [r3, #64]	@ 0x40
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001bd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bdc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
    od->lpfOutBufOut[0] = od->lpfOutWcT * od->lpfOutWcT * (od->lpfOutBufIn[0] + 2.0f * od->lpfOutBufIn[1] + od->lpfOutBufIn[2])
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    od->lpfOutBufOut[0] /= (4.0f + 4.0f * od->lpfOutDamp * od->lpfOutWcT + od->lpfOutWcT * od->lpfOutWcT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001c00:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001c04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c12:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	ed93 6a10 	vldr	s12, [r3, #64]	@ 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001c26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    od->lpfOutOut = od->lpfOutBufOut[0];
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	649a      	str	r2, [r3, #72]	@ 0x48

    od->out = od->lpfOutOut;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Ensure the signal is within -1f to 1f range
    if (od->out > 1.0f) {
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001c4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	dd04      	ble.n	8001c66 <Overdrive_Update+0x29a>
    	od->out = 1.0f;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c62:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001c64:	e00c      	b.n	8001c80 <Overdrive_Update+0x2b4>
    } else if (od->out < -1.0f) {
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001c6c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	d502      	bpl.n	8001c80 <Overdrive_Update+0x2b4>
    	od->out = -1.0f;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a06      	ldr	r2, [pc, #24]	@ (8001c98 <Overdrive_Update+0x2cc>)
 8001c7e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    return od->out;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c84:	ee07 3a90 	vmov	s15, r3
}
 8001c88:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	bf800000 	.word	0xbf800000

08001c9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ca0:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001ca2:	4a18      	ldr	r2, [pc, #96]	@ (8001d04 <MX_SPI1_Init+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ca6:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001ca8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ccc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cce:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce0:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001ce8:	220a      	movs	r2, #10
 8001cea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cec:	4804      	ldr	r0, [pc, #16]	@ (8001d00 <MX_SPI1_Init+0x64>)
 8001cee:	f006 fba3 	bl	8008438 <HAL_SPI_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cf8:	f7ff fdd0 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000230c 	.word	0x2000230c
 8001d04:	40013000 	.word	0x40013000

08001d08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	@ 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a19      	ldr	r2, [pc, #100]	@ (8001d8c <HAL_SPI_MspInit+0x84>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d12b      	bne.n	8001d82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <HAL_SPI_MspInit+0x88>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	4a17      	ldr	r2, [pc, #92]	@ (8001d90 <HAL_SPI_MspInit+0x88>)
 8001d34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3a:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <HAL_SPI_MspInit+0x88>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <HAL_SPI_MspInit+0x88>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a10      	ldr	r2, [pc, #64]	@ (8001d90 <HAL_SPI_MspInit+0x88>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <HAL_SPI_MspInit+0x88>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d62:	23e0      	movs	r3, #224	@ 0xe0
 8001d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d72:	2305      	movs	r3, #5
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <HAL_SPI_MspInit+0x8c>)
 8001d7e:	f001 fbb7 	bl	80034f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d82:	bf00      	nop
 8001d84:	3728      	adds	r7, #40	@ 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40013000 	.word	0x40013000
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000

08001d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_MspInit+0x4c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	4a0f      	ldr	r2, [pc, #60]	@ (8001de4 <HAL_MspInit+0x4c>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dae:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <HAL_MspInit+0x4c>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <HAL_MspInit+0x4c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	4a08      	ldr	r2, [pc, #32]	@ (8001de4 <HAL_MspInit+0x4c>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_MspInit+0x4c>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dd6:	2007      	movs	r0, #7
 8001dd8:	f000 ffd8 	bl	8002d8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800

08001de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <NMI_Handler+0x4>

08001df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <HardFault_Handler+0x4>

08001df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <MemManage_Handler+0x4>

08001e00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <BusFault_Handler+0x4>

08001e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <UsageFault_Handler+0x4>

08001e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3e:	f000 fa7f 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001e4c:	4802      	ldr	r0, [pc, #8]	@ (8001e58 <DMA1_Stream3_IRQHandler+0x10>)
 8001e4e:	f001 f8e5 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200001e0 	.word	0x200001e0

08001e5c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <DMA1_Stream4_IRQHandler+0x10>)
 8001e62:	f001 f8db 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000240 	.word	0x20000240

08001e70 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <SPI2_IRQHandler+0x10>)
 8001e76:	f004 ffa3 	bl	8006dc0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000198 	.word	0x20000198

08001e84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e88:	4802      	ldr	r0, [pc, #8]	@ (8001e94 <DMA2_Stream0_IRQHandler+0x10>)
 8001e8a:	f001 f8c7 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200000e4 	.word	0x200000e4

08001e98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <OTG_FS_IRQHandler+0x10>)
 8001e9e:	f001 ffd7 	bl	8003e50 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200027d8 	.word	0x200027d8

08001eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb4:	4a14      	ldr	r2, [pc, #80]	@ (8001f08 <_sbrk+0x5c>)
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <_sbrk+0x60>)
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <_sbrk+0x64>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <_sbrk+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ece:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d207      	bcs.n	8001eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001edc:	f00b f9f4 	bl	800d2c8 <__errno>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e009      	b.n	8001f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eec:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <_sbrk+0x64>)
 8001efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20020000 	.word	0x20020000
 8001f0c:	00000400 	.word	0x00000400
 8001f10:	20002364 	.word	0x20002364
 8001f14:	20002d00 	.word	0x20002d00

08001f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <SystemInit+0x20>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f22:	4a05      	ldr	r2, [pc, #20]	@ (8001f38 <SystemInit+0x20>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08e      	sub	sp, #56	@ 0x38
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f50:	f107 0320 	add.w	r3, r7, #32
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	615a      	str	r2, [r3, #20]
 8001f6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <MX_TIM2_Init+0xe0>)
 8001f6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600-1;
 8001f74:	4b29      	ldr	r3, [pc, #164]	@ (800201c <MX_TIM2_Init+0xe0>)
 8001f76:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8001f7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7c:	4b27      	ldr	r3, [pc, #156]	@ (800201c <MX_TIM2_Init+0xe0>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001f82:	4b26      	ldr	r3, [pc, #152]	@ (800201c <MX_TIM2_Init+0xe0>)
 8001f84:	2263      	movs	r2, #99	@ 0x63
 8001f86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f88:	4b24      	ldr	r3, [pc, #144]	@ (800201c <MX_TIM2_Init+0xe0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8e:	4b23      	ldr	r3, [pc, #140]	@ (800201c <MX_TIM2_Init+0xe0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f94:	4821      	ldr	r0, [pc, #132]	@ (800201c <MX_TIM2_Init+0xe0>)
 8001f96:	f006 fad8 	bl	800854a <HAL_TIM_Base_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fa0:	f7ff fc7c 	bl	800189c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001faa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fae:	4619      	mov	r1, r3
 8001fb0:	481a      	ldr	r0, [pc, #104]	@ (800201c <MX_TIM2_Init+0xe0>)
 8001fb2:	f006 fc9d 	bl	80088f0 <HAL_TIM_ConfigClockSource>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001fbc:	f7ff fc6e 	bl	800189c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fc0:	4816      	ldr	r0, [pc, #88]	@ (800201c <MX_TIM2_Init+0xe0>)
 8001fc2:	f006 fb79 	bl	80086b8 <HAL_TIM_PWM_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001fcc:	f7ff fc66 	bl	800189c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fd8:	f107 0320 	add.w	r3, r7, #32
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480f      	ldr	r0, [pc, #60]	@ (800201c <MX_TIM2_Init+0xe0>)
 8001fe0:	f007 f844 	bl	800906c <HAL_TIMEx_MasterConfigSynchronization>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001fea:	f7ff fc57 	bl	800189c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fee:	2360      	movs	r3, #96	@ 0x60
 8001ff0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	@ (800201c <MX_TIM2_Init+0xe0>)
 8002006:	f006 fbb1 	bl	800876c <HAL_TIM_PWM_ConfigChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002010:	f7ff fc44 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	3738      	adds	r7, #56	@ 0x38
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20002368 	.word	0x20002368

08002020 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002030:	d10d      	bne.n	800204e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b09      	ldr	r3, [pc, #36]	@ (800205c <HAL_TIM_Base_MspInit+0x3c>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	4a08      	ldr	r2, [pc, #32]	@ (800205c <HAL_TIM_Base_MspInit+0x3c>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6413      	str	r3, [r2, #64]	@ 0x40
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_TIM_Base_MspInit+0x3c>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800

08002060 <Tremolo_Init>:
#include "tremolo.h"
#include <stdint.h>

void Tremolo_Init(Tremolo *tr, float samplingFreqHz, float rate, float depth) {
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	ed87 0a02 	vstr	s0, [r7, #8]
 800206c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002070:	ed87 1a00 	vstr	s2, [r7]
	tr->T = 1.0f / samplingFreqHz;
 8002074:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002078:	ed97 7a02 	vldr	s14, [r7, #8]
 800207c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	edc3 7a00 	vstr	s15, [r3]
	tr->rate = rate;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	605a      	str	r2, [r3, #4]
	tr->depth = depth;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	609a      	str	r2, [r3, #8]
	tr->phase = 0.0f;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
	tr->out = 0.0f;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]

//	for (int i = 0; i < LFO_TABLE_SIZE; i++) {
//		tr->lfo_table[i] = 0.5f * tr->depth * sinf(2.0f * M_PI * (float)i / LFO_TABLE_SIZE) + 0.5f;
//	}
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <MX_USART3_UART_Init+0x50>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020e6:	4805      	ldr	r0, [pc, #20]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020e8:	f007 f83c 	bl	8009164 <HAL_UART_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020f2:	f7ff fbd3 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200023b0 	.word	0x200023b0
 8002100:	40004800 	.word	0x40004800

08002104 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	@ 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a29      	ldr	r2, [pc, #164]	@ (80021c8 <HAL_UART_MspInit+0xc4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d14b      	bne.n	80021be <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <HAL_UART_MspInit+0xc8>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	4a27      	ldr	r2, [pc, #156]	@ (80021cc <HAL_UART_MspInit+0xc8>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002134:	6413      	str	r3, [r2, #64]	@ 0x40
 8002136:	4b25      	ldr	r3, [pc, #148]	@ (80021cc <HAL_UART_MspInit+0xc8>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <HAL_UART_MspInit+0xc8>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4a20      	ldr	r2, [pc, #128]	@ (80021cc <HAL_UART_MspInit+0xc8>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30
 8002152:	4b1e      	ldr	r3, [pc, #120]	@ (80021cc <HAL_UART_MspInit+0xc8>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <HAL_UART_MspInit+0xc8>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <HAL_UART_MspInit+0xc8>)
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b17      	ldr	r3, [pc, #92]	@ (80021cc <HAL_UART_MspInit+0xc8>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800217a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800217e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002188:	2303      	movs	r3, #3
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800218c:	2307      	movs	r3, #7
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4619      	mov	r1, r3
 8002196:	480e      	ldr	r0, [pc, #56]	@ (80021d0 <HAL_UART_MspInit+0xcc>)
 8002198:	f001 f9aa 	bl	80034f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800219c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021ae:	2307      	movs	r3, #7
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4806      	ldr	r0, [pc, #24]	@ (80021d4 <HAL_UART_MspInit+0xd0>)
 80021ba:	f001 f999 	bl	80034f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021be:	bf00      	nop
 80021c0:	3728      	adds	r7, #40	@ 0x28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40004800 	.word	0x40004800
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40020400 	.word	0x40020400
 80021d4:	40020c00 	.word	0x40020c00

080021d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002210 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021dc:	f7ff fe9c 	bl	8001f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e0:	480c      	ldr	r0, [pc, #48]	@ (8002214 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021e2:	490d      	ldr	r1, [pc, #52]	@ (8002218 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021e4:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002224 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002206:	f00b f865 	bl	800d2d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800220a:	f7ff f92d 	bl	8001468 <main>
  bx  lr    
 800220e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002210:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002218:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800221c:	0800d400 	.word	0x0800d400
  ldr r2, =_sbss
 8002220:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002224:	20002d00 	.word	0x20002d00

08002228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002228:	e7fe      	b.n	8002228 <ADC_IRQHandler>

0800222a <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002240:	f000 f804 	bl	800224c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a07      	ldr	r2, [pc, #28]	@ (8002294 <HAL_I2S_ErrorCallback+0x2c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 800227a:	f7ff ffd6 	bl	800222a <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <HAL_I2S_ErrorCallback+0x30>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8002288:	f7ff ffe7 	bl	800225a <BSP_AUDIO_IN_Error_Callback>
  }
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40003c00 	.word	0x40003c00
 8002298:	40003800 	.word	0x40003800

0800229c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a0:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0d      	ldr	r2, [pc, #52]	@ (80022dc <HAL_Init+0x40>)
 80022a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022ac:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <HAL_Init+0x40>)
 80022b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b8:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a07      	ldr	r2, [pc, #28]	@ (80022dc <HAL_Init+0x40>)
 80022be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c4:	2003      	movs	r0, #3
 80022c6:	f000 fd61 	bl	8002d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f000 f808 	bl	80022e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d0:	f7ff fd62 	bl	8001d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023c00 	.word	0x40023c00

080022e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e8:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <HAL_InitTick+0x54>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <HAL_InitTick+0x58>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fd79 	bl	8002df6 <HAL_SYSTICK_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00e      	b.n	800232c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d80a      	bhi.n	800232a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f000 fd41 	bl	8002da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002320:	4a06      	ldr	r2, [pc, #24]	@ (800233c <HAL_InitTick+0x5c>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000004 	.word	0x20000004
 8002338:	2000000c 	.word	0x2000000c
 800233c:	20000008 	.word	0x20000008

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	2000000c 	.word	0x2000000c
 8002364:	200023f8 	.word	0x200023f8

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	200023f8 	.word	0x200023f8

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000000c 	.word	0x2000000c

080023c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e033      	b.n	8002446 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe fc94 	bl	8000d14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	d118      	bne.n	8002438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800240e:	f023 0302 	bic.w	r3, r3, #2
 8002412:	f043 0202 	orr.w	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fa68 	bl	80028f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	@ 0x40
 8002436:	e001      	b.n	800243c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_ADC_Start_DMA+0x1e>
 800246a:	2302      	movs	r3, #2
 800246c:	e0e9      	b.n	8002642 <HAL_ADC_Start_DMA+0x1f2>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d018      	beq.n	80024b6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002494:	4b6d      	ldr	r3, [pc, #436]	@ (800264c <HAL_ADC_Start_DMA+0x1fc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6d      	ldr	r2, [pc, #436]	@ (8002650 <HAL_ADC_Start_DMA+0x200>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0c9a      	lsrs	r2, r3, #18
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024a8:	e002      	b.n	80024b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f9      	bne.n	80024aa <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024c4:	d107      	bne.n	80024d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024d4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	f040 80a1 	bne.w	8002628 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002510:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002524:	d106      	bne.n	8002534 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	f023 0206 	bic.w	r2, r3, #6
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	645a      	str	r2, [r3, #68]	@ 0x44
 8002532:	e002      	b.n	800253a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002542:	4b44      	ldr	r3, [pc, #272]	@ (8002654 <HAL_ADC_Start_DMA+0x204>)
 8002544:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254a:	4a43      	ldr	r2, [pc, #268]	@ (8002658 <HAL_ADC_Start_DMA+0x208>)
 800254c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002552:	4a42      	ldr	r2, [pc, #264]	@ (800265c <HAL_ADC_Start_DMA+0x20c>)
 8002554:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255a:	4a41      	ldr	r2, [pc, #260]	@ (8002660 <HAL_ADC_Start_DMA+0x210>)
 800255c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002566:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002576:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002586:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	334c      	adds	r3, #76	@ 0x4c
 8002592:	4619      	mov	r1, r3
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f000 fce8 	bl	8002f6c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d12a      	bne.n	80025fe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002664 <HAL_ADC_Start_DMA+0x214>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d015      	beq.n	80025de <HAL_ADC_Start_DMA+0x18e>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002668 <HAL_ADC_Start_DMA+0x218>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d105      	bne.n	80025c8 <HAL_ADC_Start_DMA+0x178>
 80025bc:	4b25      	ldr	r3, [pc, #148]	@ (8002654 <HAL_ADC_Start_DMA+0x204>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a27      	ldr	r2, [pc, #156]	@ (800266c <HAL_ADC_Start_DMA+0x21c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d136      	bne.n	8002640 <HAL_ADC_Start_DMA+0x1f0>
 80025d2:	4b20      	ldr	r3, [pc, #128]	@ (8002654 <HAL_ADC_Start_DMA+0x204>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d130      	bne.n	8002640 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d129      	bne.n	8002640 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	e020      	b.n	8002640 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a18      	ldr	r2, [pc, #96]	@ (8002664 <HAL_ADC_Start_DMA+0x214>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d11b      	bne.n	8002640 <HAL_ADC_Start_DMA+0x1f0>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d114      	bne.n	8002640 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	e00b      	b.n	8002640 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	f043 0210 	orr.w	r2, r3, #16
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000004 	.word	0x20000004
 8002650:	431bde83 	.word	0x431bde83
 8002654:	40012300 	.word	0x40012300
 8002658:	08002ae9 	.word	0x08002ae9
 800265c:	08002ba3 	.word	0x08002ba3
 8002660:	08002bbf 	.word	0x08002bbf
 8002664:	40012000 	.word	0x40012000
 8002668:	40012100 	.word	0x40012100
 800266c:	40012200 	.word	0x40012200

08002670 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1c>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e105      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x228>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b09      	cmp	r3, #9
 80026d6:	d925      	bls.n	8002724 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68d9      	ldr	r1, [r3, #12]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	3b1e      	subs	r3, #30
 80026ee:	2207      	movs	r2, #7
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43da      	mvns	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	400a      	ands	r2, r1
 80026fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68d9      	ldr	r1, [r3, #12]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4618      	mov	r0, r3
 8002710:	4603      	mov	r3, r0
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4403      	add	r3, r0
 8002716:	3b1e      	subs	r3, #30
 8002718:	409a      	lsls	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	e022      	b.n	800276a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6919      	ldr	r1, [r3, #16]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	2207      	movs	r2, #7
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	400a      	ands	r2, r1
 8002746:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6919      	ldr	r1, [r3, #16]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	4618      	mov	r0, r3
 800275a:	4603      	mov	r3, r0
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4403      	add	r3, r0
 8002760:	409a      	lsls	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b06      	cmp	r3, #6
 8002770:	d824      	bhi.n	80027bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	3b05      	subs	r3, #5
 8002784:	221f      	movs	r2, #31
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43da      	mvns	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	400a      	ands	r2, r1
 8002792:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	3b05      	subs	r3, #5
 80027ae:	fa00 f203 	lsl.w	r2, r0, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ba:	e04c      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	d824      	bhi.n	800280e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3b23      	subs	r3, #35	@ 0x23
 80027d6:	221f      	movs	r2, #31
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43da      	mvns	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	400a      	ands	r2, r1
 80027e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	3b23      	subs	r3, #35	@ 0x23
 8002800:	fa00 f203 	lsl.w	r2, r0, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
 800280c:	e023      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	3b41      	subs	r3, #65	@ 0x41
 8002820:	221f      	movs	r2, #31
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	400a      	ands	r2, r1
 800282e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4618      	mov	r0, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	3b41      	subs	r3, #65	@ 0x41
 800284a:	fa00 f203 	lsl.w	r2, r0, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002856:	4b22      	ldr	r3, [pc, #136]	@ (80028e0 <HAL_ADC_ConfigChannel+0x234>)
 8002858:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a21      	ldr	r2, [pc, #132]	@ (80028e4 <HAL_ADC_ConfigChannel+0x238>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d109      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1cc>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b12      	cmp	r3, #18
 800286a:	d105      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a19      	ldr	r2, [pc, #100]	@ (80028e4 <HAL_ADC_ConfigChannel+0x238>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d123      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x21e>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b10      	cmp	r3, #16
 8002888:	d003      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x1e6>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b11      	cmp	r3, #17
 8002890:	d11b      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b10      	cmp	r3, #16
 80028a4:	d111      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028a6:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <HAL_ADC_ConfigChannel+0x23c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a10      	ldr	r2, [pc, #64]	@ (80028ec <HAL_ADC_ConfigChannel+0x240>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	0c9a      	lsrs	r2, r3, #18
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028bc:	e002      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f9      	bne.n	80028be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40012300 	.word	0x40012300
 80028e4:	40012000 	.word	0x40012000
 80028e8:	20000004 	.word	0x20000004
 80028ec:	431bde83 	.word	0x431bde83

080028f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028f8:	4b79      	ldr	r3, [pc, #484]	@ (8002ae0 <ADC_Init+0x1f0>)
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	431a      	orrs	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	021a      	lsls	r2, r3, #8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800296a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6899      	ldr	r1, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002982:	4a58      	ldr	r2, [pc, #352]	@ (8002ae4 <ADC_Init+0x1f4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002996:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6899      	ldr	r1, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	e00f      	b.n	80029ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0202 	bic.w	r2, r2, #2
 80029fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6899      	ldr	r1, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7e1b      	ldrb	r3, [r3, #24]
 8002a08:	005a      	lsls	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01b      	beq.n	8002a54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a2a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6859      	ldr	r1, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	3b01      	subs	r3, #1
 8002a48:	035a      	lsls	r2, r3, #13
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	e007      	b.n	8002a64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a62:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	051a      	lsls	r2, r3, #20
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6899      	ldr	r1, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002aa6:	025a      	lsls	r2, r3, #9
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6899      	ldr	r1, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	029a      	lsls	r2, r3, #10
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40012300 	.word	0x40012300
 8002ae4:	0f000001 	.word	0x0f000001

08002ae8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d13c      	bne.n	8002b7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d12b      	bne.n	8002b74 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d127      	bne.n	8002b74 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d006      	beq.n	8002b40 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d119      	bne.n	8002b74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0220 	bic.w	r2, r2, #32
 8002b4e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7ff fd7b 	bl	8002670 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b7a:	e00e      	b.n	8002b9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f7ff fd85 	bl	8002698 <HAL_ADC_ErrorCallback>
}
 8002b8e:	e004      	b.n	8002b9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bae:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f7ff fd67 	bl	8002684 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2240      	movs	r2, #64	@ 0x40
 8002bd0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	f043 0204 	orr.w	r2, r3, #4
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff fd5a 	bl	8002698 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1e:	4a04      	ldr	r2, [pc, #16]	@ (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	60d3      	str	r3, [r2, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c38:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <__NVIC_GetPriorityGrouping+0x18>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	0a1b      	lsrs	r3, r3, #8
 8002c3e:	f003 0307 	and.w	r3, r3, #7
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	db0b      	blt.n	8002c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	f003 021f 	and.w	r2, r3, #31
 8002c68:	4907      	ldr	r1, [pc, #28]	@ (8002c88 <__NVIC_EnableIRQ+0x38>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2001      	movs	r0, #1
 8002c72:	fa00 f202 	lsl.w	r2, r0, r2
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000e100 	.word	0xe000e100

08002c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	db0a      	blt.n	8002cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	490c      	ldr	r1, [pc, #48]	@ (8002cd8 <__NVIC_SetPriority+0x4c>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	0112      	lsls	r2, r2, #4
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb4:	e00a      	b.n	8002ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4908      	ldr	r1, [pc, #32]	@ (8002cdc <__NVIC_SetPriority+0x50>)
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	3b04      	subs	r3, #4
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	440b      	add	r3, r1
 8002cca:	761a      	strb	r2, [r3, #24]
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000e100 	.word	0xe000e100
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	@ 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f1c3 0307 	rsb	r3, r3, #7
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	bf28      	it	cs
 8002cfe:	2304      	movcs	r3, #4
 8002d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2b06      	cmp	r3, #6
 8002d08:	d902      	bls.n	8002d10 <NVIC_EncodePriority+0x30>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3b03      	subs	r3, #3
 8002d0e:	e000      	b.n	8002d12 <NVIC_EncodePriority+0x32>
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	f04f 32ff 	mov.w	r2, #4294967295
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	401a      	ands	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d28:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	43d9      	mvns	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	4313      	orrs	r3, r2
         );
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3724      	adds	r7, #36	@ 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d58:	d301      	bcc.n	8002d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00f      	b.n	8002d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <SysTick_Config+0x40>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d66:	210f      	movs	r1, #15
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f7ff ff8e 	bl	8002c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <SysTick_Config+0x40>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d76:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <SysTick_Config+0x40>)
 8002d78:	2207      	movs	r2, #7
 8002d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	e000e010 	.word	0xe000e010

08002d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ff29 	bl	8002bec <__NVIC_SetPriorityGrouping>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db4:	f7ff ff3e 	bl	8002c34 <__NVIC_GetPriorityGrouping>
 8002db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f7ff ff8e 	bl	8002ce0 <NVIC_EncodePriority>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff5d 	bl	8002c8c <__NVIC_SetPriority>
}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff31 	bl	8002c50 <__NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ffa2 	bl	8002d48 <SysTick_Config>
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7ff faa4 	bl	8002368 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e099      	b.n	8002f60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e4c:	e00f      	b.n	8002e6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e4e:	f7ff fa8b 	bl	8002368 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d908      	bls.n	8002e6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e078      	b.n	8002f60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e8      	bne.n	8002e4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4b38      	ldr	r3, [pc, #224]	@ (8002f68 <HAL_DMA_Init+0x158>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d107      	bne.n	8002ed8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 0307 	bic.w	r3, r3, #7
 8002eee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d117      	bne.n	8002f32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00e      	beq.n	8002f32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fa6f 	bl	80033f8 <DMA_CheckFifoParam>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2240      	movs	r2, #64	@ 0x40
 8002f24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e016      	b.n	8002f60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa26 	bl	800338c <DMA_CalcBaseAndBitshift>
 8002f40:	4603      	mov	r3, r0
 8002f42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	223f      	movs	r2, #63	@ 0x3f
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	f010803f 	.word	0xf010803f

08002f6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_DMA_Start_IT+0x26>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e040      	b.n	8003014 <HAL_DMA_Start_IT+0xa8>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d12f      	bne.n	8003006 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f9b8 	bl	8003330 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc4:	223f      	movs	r2, #63	@ 0x3f
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0216 	orr.w	r2, r2, #22
 8002fda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0208 	orr.w	r2, r2, #8
 8002ff2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e005      	b.n	8003012 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800300e:	2302      	movs	r3, #2
 8003010:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003012:	7dfb      	ldrb	r3, [r7, #23]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003028:	4b8e      	ldr	r3, [pc, #568]	@ (8003264 <HAL_DMA_IRQHandler+0x248>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a8e      	ldr	r2, [pc, #568]	@ (8003268 <HAL_DMA_IRQHandler+0x24c>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0a9b      	lsrs	r3, r3, #10
 8003034:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003046:	2208      	movs	r2, #8
 8003048:	409a      	lsls	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01a      	beq.n	8003088 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0204 	bic.w	r2, r2, #4
 800306e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	2208      	movs	r2, #8
 8003076:	409a      	lsls	r2, r3
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308c:	2201      	movs	r2, #1
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d012      	beq.n	80030be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	2201      	movs	r2, #1
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b6:	f043 0202 	orr.w	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	2204      	movs	r2, #4
 80030c4:	409a      	lsls	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d012      	beq.n	80030f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00b      	beq.n	80030f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e0:	2204      	movs	r2, #4
 80030e2:	409a      	lsls	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ec:	f043 0204 	orr.w	r2, r3, #4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f8:	2210      	movs	r2, #16
 80030fa:	409a      	lsls	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d043      	beq.n	800318c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d03c      	beq.n	800318c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003116:	2210      	movs	r2, #16
 8003118:	409a      	lsls	r2, r3
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d018      	beq.n	800315e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d108      	bne.n	800314c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d024      	beq.n	800318c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
 800314a:	e01f      	b.n	800318c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01b      	beq.n	800318c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
 800315c:	e016      	b.n	800318c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d107      	bne.n	800317c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0208 	bic.w	r2, r2, #8
 800317a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	2220      	movs	r2, #32
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 808f 	beq.w	80032bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8087 	beq.w	80032bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b2:	2220      	movs	r2, #32
 80031b4:	409a      	lsls	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d136      	bne.n	8003234 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0216 	bic.w	r2, r2, #22
 80031d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <HAL_DMA_IRQHandler+0x1da>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0208 	bic.w	r2, r2, #8
 8003204:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320a:	223f      	movs	r2, #63	@ 0x3f
 800320c:	409a      	lsls	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003226:	2b00      	cmp	r3, #0
 8003228:	d07e      	beq.n	8003328 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	4798      	blx	r3
        }
        return;
 8003232:	e079      	b.n	8003328 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01d      	beq.n	800327e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10d      	bne.n	800326c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003254:	2b00      	cmp	r3, #0
 8003256:	d031      	beq.n	80032bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
 8003260:	e02c      	b.n	80032bc <HAL_DMA_IRQHandler+0x2a0>
 8003262:	bf00      	nop
 8003264:	20000004 	.word	0x20000004
 8003268:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d023      	beq.n	80032bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
 800327c:	e01e      	b.n	80032bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10f      	bne.n	80032ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0210 	bic.w	r2, r2, #16
 800329a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d032      	beq.n	800332a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d022      	beq.n	8003316 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2205      	movs	r2, #5
 80032d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	3301      	adds	r3, #1
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d307      	bcc.n	8003304 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f2      	bne.n	80032e8 <HAL_DMA_IRQHandler+0x2cc>
 8003302:	e000      	b.n	8003306 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003304:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
 8003326:	e000      	b.n	800332a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003328:	bf00      	nop
    }
  }
}
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800334c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b40      	cmp	r3, #64	@ 0x40
 800335c:	d108      	bne.n	8003370 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800336e:	e007      	b.n	8003380 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	60da      	str	r2, [r3, #12]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	3b10      	subs	r3, #16
 800339c:	4a14      	ldr	r2, [pc, #80]	@ (80033f0 <DMA_CalcBaseAndBitshift+0x64>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033a6:	4a13      	ldr	r2, [pc, #76]	@ (80033f4 <DMA_CalcBaseAndBitshift+0x68>)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d909      	bls.n	80033ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	1d1a      	adds	r2, r3, #4
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80033cc:	e007      	b.n	80033de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	aaaaaaab 	.word	0xaaaaaaab
 80033f4:	0800d3e8 	.word	0x0800d3e8

080033f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d11f      	bne.n	8003452 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d856      	bhi.n	80034c6 <DMA_CheckFifoParam+0xce>
 8003418:	a201      	add	r2, pc, #4	@ (adr r2, 8003420 <DMA_CheckFifoParam+0x28>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	08003431 	.word	0x08003431
 8003424:	08003443 	.word	0x08003443
 8003428:	08003431 	.word	0x08003431
 800342c:	080034c7 	.word	0x080034c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d046      	beq.n	80034ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003440:	e043      	b.n	80034ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003446:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800344a:	d140      	bne.n	80034ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003450:	e03d      	b.n	80034ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800345a:	d121      	bne.n	80034a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b03      	cmp	r3, #3
 8003460:	d837      	bhi.n	80034d2 <DMA_CheckFifoParam+0xda>
 8003462:	a201      	add	r2, pc, #4	@ (adr r2, 8003468 <DMA_CheckFifoParam+0x70>)
 8003464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003468:	08003479 	.word	0x08003479
 800346c:	0800347f 	.word	0x0800347f
 8003470:	08003479 	.word	0x08003479
 8003474:	08003491 	.word	0x08003491
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      break;
 800347c:	e030      	b.n	80034e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d025      	beq.n	80034d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800348e:	e022      	b.n	80034d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003494:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003498:	d11f      	bne.n	80034da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800349e:	e01c      	b.n	80034da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d903      	bls.n	80034ae <DMA_CheckFifoParam+0xb6>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d003      	beq.n	80034b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034ac:	e018      	b.n	80034e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
      break;
 80034b2:	e015      	b.n	80034e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00e      	beq.n	80034de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
      break;
 80034c4:	e00b      	b.n	80034de <DMA_CheckFifoParam+0xe6>
      break;
 80034c6:	bf00      	nop
 80034c8:	e00a      	b.n	80034e0 <DMA_CheckFifoParam+0xe8>
      break;
 80034ca:	bf00      	nop
 80034cc:	e008      	b.n	80034e0 <DMA_CheckFifoParam+0xe8>
      break;
 80034ce:	bf00      	nop
 80034d0:	e006      	b.n	80034e0 <DMA_CheckFifoParam+0xe8>
      break;
 80034d2:	bf00      	nop
 80034d4:	e004      	b.n	80034e0 <DMA_CheckFifoParam+0xe8>
      break;
 80034d6:	bf00      	nop
 80034d8:	e002      	b.n	80034e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80034da:	bf00      	nop
 80034dc:	e000      	b.n	80034e0 <DMA_CheckFifoParam+0xe8>
      break;
 80034de:	bf00      	nop
    }
  } 
  
  return status; 
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop

080034f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b089      	sub	sp, #36	@ 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	e16b      	b.n	80037e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800350c:	2201      	movs	r2, #1
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	429a      	cmp	r2, r3
 8003526:	f040 815a 	bne.w	80037de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b01      	cmp	r3, #1
 8003534:	d005      	beq.n	8003542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800353e:	2b02      	cmp	r3, #2
 8003540:	d130      	bne.n	80035a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	2203      	movs	r2, #3
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003578:	2201      	movs	r2, #1
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 0201 	and.w	r2, r3, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d017      	beq.n	80035e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d123      	bne.n	8003634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	08da      	lsrs	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3208      	adds	r2, #8
 80035f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	220f      	movs	r2, #15
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	08da      	lsrs	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3208      	adds	r2, #8
 800362e:	69b9      	ldr	r1, [r7, #24]
 8003630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 0203 	and.w	r2, r3, #3
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80b4 	beq.w	80037de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	4b60      	ldr	r3, [pc, #384]	@ (80037fc <HAL_GPIO_Init+0x30c>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367e:	4a5f      	ldr	r2, [pc, #380]	@ (80037fc <HAL_GPIO_Init+0x30c>)
 8003680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003684:	6453      	str	r3, [r2, #68]	@ 0x44
 8003686:	4b5d      	ldr	r3, [pc, #372]	@ (80037fc <HAL_GPIO_Init+0x30c>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003692:	4a5b      	ldr	r2, [pc, #364]	@ (8003800 <HAL_GPIO_Init+0x310>)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	089b      	lsrs	r3, r3, #2
 8003698:	3302      	adds	r3, #2
 800369a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	220f      	movs	r2, #15
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a52      	ldr	r2, [pc, #328]	@ (8003804 <HAL_GPIO_Init+0x314>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d02b      	beq.n	8003716 <HAL_GPIO_Init+0x226>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a51      	ldr	r2, [pc, #324]	@ (8003808 <HAL_GPIO_Init+0x318>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d025      	beq.n	8003712 <HAL_GPIO_Init+0x222>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a50      	ldr	r2, [pc, #320]	@ (800380c <HAL_GPIO_Init+0x31c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01f      	beq.n	800370e <HAL_GPIO_Init+0x21e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003810 <HAL_GPIO_Init+0x320>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d019      	beq.n	800370a <HAL_GPIO_Init+0x21a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003814 <HAL_GPIO_Init+0x324>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_GPIO_Init+0x216>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003818 <HAL_GPIO_Init+0x328>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00d      	beq.n	8003702 <HAL_GPIO_Init+0x212>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a4c      	ldr	r2, [pc, #304]	@ (800381c <HAL_GPIO_Init+0x32c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <HAL_GPIO_Init+0x20e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003820 <HAL_GPIO_Init+0x330>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_GPIO_Init+0x20a>
 80036f6:	2307      	movs	r3, #7
 80036f8:	e00e      	b.n	8003718 <HAL_GPIO_Init+0x228>
 80036fa:	2308      	movs	r3, #8
 80036fc:	e00c      	b.n	8003718 <HAL_GPIO_Init+0x228>
 80036fe:	2306      	movs	r3, #6
 8003700:	e00a      	b.n	8003718 <HAL_GPIO_Init+0x228>
 8003702:	2305      	movs	r3, #5
 8003704:	e008      	b.n	8003718 <HAL_GPIO_Init+0x228>
 8003706:	2304      	movs	r3, #4
 8003708:	e006      	b.n	8003718 <HAL_GPIO_Init+0x228>
 800370a:	2303      	movs	r3, #3
 800370c:	e004      	b.n	8003718 <HAL_GPIO_Init+0x228>
 800370e:	2302      	movs	r3, #2
 8003710:	e002      	b.n	8003718 <HAL_GPIO_Init+0x228>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <HAL_GPIO_Init+0x228>
 8003716:	2300      	movs	r3, #0
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	f002 0203 	and.w	r2, r2, #3
 800371e:	0092      	lsls	r2, r2, #2
 8003720:	4093      	lsls	r3, r2
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003728:	4935      	ldr	r1, [pc, #212]	@ (8003800 <HAL_GPIO_Init+0x310>)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	3302      	adds	r3, #2
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003736:	4b3b      	ldr	r3, [pc, #236]	@ (8003824 <HAL_GPIO_Init+0x334>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800375a:	4a32      	ldr	r2, [pc, #200]	@ (8003824 <HAL_GPIO_Init+0x334>)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003760:	4b30      	ldr	r3, [pc, #192]	@ (8003824 <HAL_GPIO_Init+0x334>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003784:	4a27      	ldr	r2, [pc, #156]	@ (8003824 <HAL_GPIO_Init+0x334>)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800378a:	4b26      	ldr	r3, [pc, #152]	@ (8003824 <HAL_GPIO_Init+0x334>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003824 <HAL_GPIO_Init+0x334>)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003824 <HAL_GPIO_Init+0x334>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037d8:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <HAL_GPIO_Init+0x334>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3301      	adds	r3, #1
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	f67f ae90 	bls.w	800350c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	3724      	adds	r7, #36	@ 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	40013800 	.word	0x40013800
 8003804:	40020000 	.word	0x40020000
 8003808:	40020400 	.word	0x40020400
 800380c:	40020800 	.word	0x40020800
 8003810:	40020c00 	.word	0x40020c00
 8003814:	40021000 	.word	0x40021000
 8003818:	40021400 	.word	0x40021400
 800381c:	40021800 	.word	0x40021800
 8003820:	40021c00 	.word	0x40021c00
 8003824:	40013c00 	.word	0x40013c00

08003828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
 8003834:	4613      	mov	r3, r2
 8003836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003838:	787b      	ldrb	r3, [r7, #1]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800383e:	887a      	ldrh	r2, [r7, #2]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003844:	e003      	b.n	800384e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003846:	887b      	ldrh	r3, [r7, #2]
 8003848:	041a      	lsls	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	619a      	str	r2, [r3, #24]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800386c:	887a      	ldrh	r2, [r7, #2]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4013      	ands	r3, r2
 8003872:	041a      	lsls	r2, r3, #16
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	43d9      	mvns	r1, r3
 8003878:	887b      	ldrh	r3, [r7, #2]
 800387a:	400b      	ands	r3, r1
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	619a      	str	r2, [r3, #24]
}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b086      	sub	sp, #24
 8003892:	af02      	add	r7, sp, #8
 8003894:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e059      	b.n	8003954 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f009 f962 	bl	800cb84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2203      	movs	r2, #3
 80038c4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ce:	d102      	bne.n	80038d6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f005 ff7b 	bl	80097d6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7c1a      	ldrb	r2, [r3, #16]
 80038e8:	f88d 2000 	strb.w	r2, [sp]
 80038ec:	3304      	adds	r3, #4
 80038ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038f0:	f005 fefc 	bl	80096ec <USB_CoreInit>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e026      	b.n	8003954 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f005 ff73 	bl	80097f8 <USB_SetCurrentMode>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e017      	b.n	8003954 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	7c1a      	ldrb	r2, [r3, #16]
 800392c:	f88d 2000 	strb.w	r2, [sp]
 8003930:	3304      	adds	r3, #4
 8003932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003934:	f006 f916 	bl	8009b64 <USB_HostInit>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e004      	b.n	8003954 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b08b      	sub	sp, #44	@ 0x2c
 8003960:	af04      	add	r7, sp, #16
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	4608      	mov	r0, r1
 8003966:	4611      	mov	r1, r2
 8003968:	461a      	mov	r2, r3
 800396a:	4603      	mov	r3, r0
 800396c:	70fb      	strb	r3, [r7, #3]
 800396e:	460b      	mov	r3, r1
 8003970:	70bb      	strb	r3, [r7, #2]
 8003972:	4613      	mov	r3, r2
 8003974:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003976:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003978:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_HCD_HC_Init+0x2c>
 8003984:	2302      	movs	r3, #2
 8003986:	e09d      	b.n	8003ac4 <HAL_HCD_HC_Init+0x168>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	3319      	adds	r3, #25
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	3314      	adds	r3, #20
 80039b4:	787a      	ldrb	r2, [r7, #1]
 80039b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	3315      	adds	r3, #21
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	3326      	adds	r3, #38	@ 0x26
 80039dc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80039e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	78bb      	ldrb	r3, [r7, #2]
 80039e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ea:	b2d8      	uxtb	r0, r3
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	3316      	adds	r3, #22
 80039fa:	4602      	mov	r2, r0
 80039fc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	4619      	mov	r1, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fbc8 	bl	8004198 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003a08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da0a      	bge.n	8003a26 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3317      	adds	r3, #23
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e009      	b.n	8003a3a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	3317      	adds	r3, #23
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f006 f9f4 	bl	8009e2c <USB_GetHostSpeed>
 8003a44:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003a46:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d10b      	bne.n	8003a66 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003a4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d107      	bne.n	8003a66 <HAL_HCD_HC_Init+0x10a>
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2bbc      	cmp	r3, #188	@ 0xbc
 8003a60:	d901      	bls.n	8003a66 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003a62:	23bc      	movs	r3, #188	@ 0xbc
 8003a64:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	3318      	adds	r3, #24
 8003a76:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003a7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	b298      	uxth	r0, r3
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3328      	adds	r3, #40	@ 0x28
 8003a90:	4602      	mov	r2, r0
 8003a92:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	787c      	ldrb	r4, [r7, #1]
 8003a9e:	78ba      	ldrb	r2, [r7, #2]
 8003aa0:	78f9      	ldrb	r1, [r7, #3]
 8003aa2:	9302      	str	r3, [sp, #8]
 8003aa4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	f006 f9e3 	bl	8009e7c <USB_HC_Init>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd90      	pop	{r4, r7, pc}

08003acc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_HCD_HC_Halt+0x1e>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e00f      	b.n	8003b0a <HAL_HCD_HC_Halt+0x3e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f006 fd75 	bl	800a5ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	70fb      	strb	r3, [r7, #3]
 8003b26:	460b      	mov	r3, r1
 8003b28:	70bb      	strb	r3, [r7, #2]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	3317      	adds	r3, #23
 8003b3e:	78ba      	ldrb	r2, [r7, #2]
 8003b40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	3326      	adds	r3, #38	@ 0x26
 8003b52:	787a      	ldrb	r2, [r7, #1]
 8003b54:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003b56:	7c3b      	ldrb	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d114      	bne.n	8003b86 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003b5c:	78fa      	ldrb	r2, [r7, #3]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	332a      	adds	r3, #42	@ 0x2a
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3319      	adds	r3, #25
 8003b80:	7f3a      	ldrb	r2, [r7, #28]
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	e009      	b.n	8003b9a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	332a      	adds	r3, #42	@ 0x2a
 8003b96:	2202      	movs	r2, #2
 8003b98:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003b9a:	787b      	ldrb	r3, [r7, #1]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	f200 8102 	bhi.w	8003da6 <HAL_HCD_HC_SubmitRequest+0x292>
 8003ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003d91 	.word	0x08003d91
 8003bb0:	08003c7d 	.word	0x08003c7d
 8003bb4:	08003d07 	.word	0x08003d07
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003bb8:	7c3b      	ldrb	r3, [r7, #16]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	f040 80f5 	bne.w	8003daa <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003bc0:	78bb      	ldrb	r3, [r7, #2]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d12d      	bne.n	8003c22 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003bc6:	8b3b      	ldrh	r3, [r7, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	333d      	adds	r3, #61	@ 0x3d
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	333d      	adds	r3, #61	@ 0x3d
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	332a      	adds	r3, #42	@ 0x2a
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003c0a:	e0ce      	b.n	8003daa <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	332a      	adds	r3, #42	@ 0x2a
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	701a      	strb	r2, [r3, #0]
      break;
 8003c20:	e0c3      	b.n	8003daa <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	331a      	adds	r3, #26
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	f040 80b8 	bne.w	8003daa <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	333c      	adds	r3, #60	@ 0x3c
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	332a      	adds	r3, #42	@ 0x2a
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
      break;
 8003c64:	e0a1      	b.n	8003daa <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	332a      	adds	r3, #42	@ 0x2a
 8003c76:	2202      	movs	r2, #2
 8003c78:	701a      	strb	r2, [r3, #0]
      break;
 8003c7a:	e096      	b.n	8003daa <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003c7c:	78bb      	ldrb	r3, [r7, #2]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d120      	bne.n	8003cc4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	333d      	adds	r3, #61	@ 0x3d
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	332a      	adds	r3, #42	@ 0x2a
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003cac:	e07e      	b.n	8003dac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	332a      	adds	r3, #42	@ 0x2a
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	701a      	strb	r2, [r3, #0]
      break;
 8003cc2:	e073      	b.n	8003dac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	333c      	adds	r3, #60	@ 0x3c
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	332a      	adds	r3, #42	@ 0x2a
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]
      break;
 8003cee:	e05d      	b.n	8003dac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	332a      	adds	r3, #42	@ 0x2a
 8003d00:	2202      	movs	r2, #2
 8003d02:	701a      	strb	r2, [r3, #0]
      break;
 8003d04:	e052      	b.n	8003dac <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003d06:	78bb      	ldrb	r3, [r7, #2]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d120      	bne.n	8003d4e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	333d      	adds	r3, #61	@ 0x3d
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	332a      	adds	r3, #42	@ 0x2a
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003d36:	e039      	b.n	8003dac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	332a      	adds	r3, #42	@ 0x2a
 8003d48:	2202      	movs	r2, #2
 8003d4a:	701a      	strb	r2, [r3, #0]
      break;
 8003d4c:	e02e      	b.n	8003dac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	333c      	adds	r3, #60	@ 0x3c
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	332a      	adds	r3, #42	@ 0x2a
 8003d74:	2200      	movs	r2, #0
 8003d76:	701a      	strb	r2, [r3, #0]
      break;
 8003d78:	e018      	b.n	8003dac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	332a      	adds	r3, #42	@ 0x2a
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	701a      	strb	r2, [r3, #0]
      break;
 8003d8e:	e00d      	b.n	8003dac <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	332a      	adds	r3, #42	@ 0x2a
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
      break;
 8003da4:	e002      	b.n	8003dac <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003da6:	bf00      	nop
 8003da8:	e000      	b.n	8003dac <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003daa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003dac:	78fa      	ldrb	r2, [r7, #3]
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	332c      	adds	r3, #44	@ 0x2c
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	8b39      	ldrh	r1, [r7, #24]
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4403      	add	r3, r0
 8003dd0:	3334      	adds	r3, #52	@ 0x34
 8003dd2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	334c      	adds	r3, #76	@ 0x4c
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003de8:	78fa      	ldrb	r2, [r7, #3]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	3338      	adds	r3, #56	@ 0x38
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	3315      	adds	r3, #21
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	334d      	adds	r3, #77	@ 0x4d
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	3310      	adds	r3, #16
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	4413      	add	r3, r2
 8003e38:	1d19      	adds	r1, r3, #4
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	799b      	ldrb	r3, [r3, #6]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f006 f948 	bl	800a0d4 <USB_HC_StartXfer>
 8003e44:	4603      	mov	r3, r0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop

08003e50 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f005 fe3c 	bl	8009ae4 <USB_GetMode>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	f040 80fb 	bne.w	800406a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f005 fdff 	bl	8009a7c <USB_ReadInterrupts>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80f1 	beq.w	8004068 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f005 fdf6 	bl	8009a7c <USB_ReadInterrupts>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e9a:	d104      	bne.n	8003ea6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003ea4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f005 fde6 	bl	8009a7c <USB_ReadInterrupts>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eba:	d104      	bne.n	8003ec6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003ec4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f005 fdd6 	bl	8009a7c <USB_ReadInterrupts>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ed6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eda:	d104      	bne.n	8003ee6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003ee4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f005 fdc6 	bl	8009a7c <USB_ReadInterrupts>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d103      	bne.n	8003f02 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2202      	movs	r2, #2
 8003f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f005 fdb8 	bl	8009a7c <USB_ReadInterrupts>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f16:	d120      	bne.n	8003f5a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003f20:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d113      	bne.n	8003f5a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003f32:	2110      	movs	r1, #16
 8003f34:	6938      	ldr	r0, [r7, #16]
 8003f36:	f005 fcab 	bl	8009890 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003f3a:	6938      	ldr	r0, [r7, #16]
 8003f3c:	f005 fcda 	bl	80098f4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	7a5b      	ldrb	r3, [r3, #9]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d105      	bne.n	8003f54 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f005 fecc 	bl	8009cec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f008 fe93 	bl	800cc80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f005 fd8c 	bl	8009a7c <USB_ReadInterrupts>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f6e:	d102      	bne.n	8003f76 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f001 fd4d 	bl	8005a10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f005 fd7e 	bl	8009a7c <USB_ReadInterrupts>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d106      	bne.n	8003f98 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f008 fe5c 	bl	800cc48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2208      	movs	r2, #8
 8003f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f005 fd6d 	bl	8009a7c <USB_ReadInterrupts>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fac:	d139      	bne.n	8004022 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f006 fb08 	bl	800a5c8 <USB_HC_ReadInterrupt>
 8003fb8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	e025      	b.n	800400c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d018      	beq.n	8004006 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fea:	d106      	bne.n	8003ffa <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f905 	bl	8004202 <HCD_HC_IN_IRQHandler>
 8003ff8:	e005      	b.n	8004006 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	4619      	mov	r1, r3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 ff67 	bl	8004ed4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	3301      	adds	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	795b      	ldrb	r3, [r3, #5]
 8004010:	461a      	mov	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	4293      	cmp	r3, r2
 8004016:	d3d3      	bcc.n	8003fc0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004020:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f005 fd28 	bl	8009a7c <USB_ReadInterrupts>
 800402c:	4603      	mov	r3, r0
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b10      	cmp	r3, #16
 8004034:	d101      	bne.n	800403a <HAL_HCD_IRQHandler+0x1ea>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_HCD_IRQHandler+0x1ec>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d014      	beq.n	800406a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0210 	bic.w	r2, r2, #16
 800404e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f001 fbfe 	bl	8005852 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0210 	orr.w	r2, r2, #16
 8004064:	619a      	str	r2, [r3, #24]
 8004066:	e000      	b.n	800406a <HAL_HCD_IRQHandler+0x21a>
      return;
 8004068:	bf00      	nop
    }
  }
}
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_HCD_Start+0x16>
 8004082:	2302      	movs	r3, #2
 8004084:	e013      	b.n	80040ae <HAL_HCD_Start+0x3e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2101      	movs	r1, #1
 8004094:	4618      	mov	r0, r3
 8004096:	f005 fe90 	bl	8009dba <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f005 fb88 	bl	80097b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_HCD_Stop+0x16>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e00d      	b.n	80040e8 <HAL_HCD_Stop+0x32>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f006 fbe3 	bl	800a8a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f005 fe32 	bl	8009d66 <USB_ResetPort>
 8004102:	4603      	mov	r3, r0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	334c      	adds	r3, #76	@ 0x4c
 8004128:	781b      	ldrb	r3, [r3, #0]
}
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	3338      	adds	r3, #56	@ 0x38
 8004152:	681b      	ldr	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f005 fe74 	bl	8009e5a <USB_GetCurrentFrame>
 8004172:	4603      	mov	r3, r0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f005 fe4f 	bl	8009e2c <USB_GetHostSpeed>
 800418e:	4603      	mov	r3, r0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	331a      	adds	r3, #26
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	331b      	adds	r3, #27
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	1a9b      	subs	r3, r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	3325      	adds	r3, #37	@ 0x25
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80041e0:	78fa      	ldrb	r2, [r7, #3]
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	3324      	adds	r3, #36	@ 0x24
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b086      	sub	sp, #24
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f005 fc3e 	bl	8009aa2 <USB_ReadChInterrupts>
 8004226:	4603      	mov	r3, r0
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b04      	cmp	r3, #4
 800422e:	d11a      	bne.n	8004266 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800423c:	461a      	mov	r2, r3
 800423e:	2304      	movs	r3, #4
 8004240:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	334d      	adds	r3, #77	@ 0x4d
 8004252:	2207      	movs	r2, #7
 8004254:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f006 f9c3 	bl	800a5ea <USB_HC_Halt>
 8004264:	e09e      	b.n	80043a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f005 fc17 	bl	8009aa2 <USB_ReadChInterrupts>
 8004274:	4603      	mov	r3, r0
 8004276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800427e:	d11b      	bne.n	80042b8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800428c:	461a      	mov	r2, r3
 800428e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004292:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	334d      	adds	r3, #77	@ 0x4d
 80042a4:	2208      	movs	r2, #8
 80042a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	4611      	mov	r1, r2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f006 f99a 	bl	800a5ea <USB_HC_Halt>
 80042b6:	e075      	b.n	80043a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f005 fbee 	bl	8009aa2 <USB_ReadChInterrupts>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d11a      	bne.n	8004306 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042dc:	461a      	mov	r2, r3
 80042de:	2308      	movs	r3, #8
 80042e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	334d      	adds	r3, #77	@ 0x4d
 80042f2:	2206      	movs	r2, #6
 80042f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	4611      	mov	r1, r2
 80042fe:	4618      	mov	r0, r3
 8004300:	f006 f973 	bl	800a5ea <USB_HC_Halt>
 8004304:	e04e      	b.n	80043a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f005 fbc7 	bl	8009aa2 <USB_ReadChInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431e:	d11b      	bne.n	8004358 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4413      	add	r3, r2
 8004328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800432c:	461a      	mov	r2, r3
 800432e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004332:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	334d      	adds	r3, #77	@ 0x4d
 8004344:	2209      	movs	r2, #9
 8004346:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f006 f94a 	bl	800a5ea <USB_HC_Halt>
 8004356:	e025      	b.n	80043a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	78fa      	ldrb	r2, [r7, #3]
 800435e:	4611      	mov	r1, r2
 8004360:	4618      	mov	r0, r3
 8004362:	f005 fb9e 	bl	8009aa2 <USB_ReadChInterrupts>
 8004366:	4603      	mov	r3, r0
 8004368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436c:	2b80      	cmp	r3, #128	@ 0x80
 800436e:	d119      	bne.n	80043a4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4413      	add	r3, r2
 8004378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800437c:	461a      	mov	r2, r3
 800437e:	2380      	movs	r3, #128	@ 0x80
 8004380:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	334d      	adds	r3, #77	@ 0x4d
 8004392:	2207      	movs	r2, #7
 8004394:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f006 f923 	bl	800a5ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f005 fb78 	bl	8009aa2 <USB_ReadChInterrupts>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043bc:	d112      	bne.n	80043e4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	4611      	mov	r1, r2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f006 f90f 	bl	800a5ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043d8:	461a      	mov	r2, r3
 80043da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043de:	6093      	str	r3, [r2, #8]
 80043e0:	f000 bd75 	b.w	8004ece <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f005 fb58 	bl	8009aa2 <USB_ReadChInterrupts>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	f040 8128 	bne.w	800464e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800440a:	461a      	mov	r2, r3
 800440c:	2320      	movs	r3, #32
 800440e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	331b      	adds	r3, #27
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d119      	bne.n	800445a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	331b      	adds	r3, #27
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	0151      	lsls	r1, r2, #5
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	440a      	add	r2, r1
 8004450:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004458:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	799b      	ldrb	r3, [r3, #6]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d01b      	beq.n	800449a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004462:	78fa      	ldrb	r2, [r7, #3]
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	3330      	adds	r3, #48	@ 0x30
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	1ac9      	subs	r1, r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4403      	add	r3, r0
 8004496:	3338      	adds	r3, #56	@ 0x38
 8004498:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800449a:	78fa      	ldrb	r2, [r7, #3]
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	334d      	adds	r3, #77	@ 0x4d
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80044ae:	78fa      	ldrb	r2, [r7, #3]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	3344      	adds	r3, #68	@ 0x44
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ce:	461a      	mov	r2, r3
 80044d0:	2301      	movs	r3, #1
 80044d2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	3326      	adds	r3, #38	@ 0x26
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044ea:	78fa      	ldrb	r2, [r7, #3]
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	3326      	adds	r3, #38	@ 0x26
 80044fa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d110      	bne.n	8004522 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f006 f86e 	bl	800a5ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800451a:	461a      	mov	r2, r3
 800451c:	2310      	movs	r3, #16
 800451e:	6093      	str	r3, [r2, #8]
 8004520:	e03d      	b.n	800459e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	3326      	adds	r3, #38	@ 0x26
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d00a      	beq.n	800454e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	3326      	adds	r3, #38	@ 0x26
 8004548:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800454a:	2b01      	cmp	r3, #1
 800454c:	d127      	bne.n	800459e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	0151      	lsls	r1, r2, #5
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	440a      	add	r2, r1
 8004564:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004568:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800456c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	334c      	adds	r3, #76	@ 0x4c
 800457e:	2201      	movs	r2, #1
 8004580:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	334c      	adds	r3, #76	@ 0x4c
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	4619      	mov	r1, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f008 fb7f 	bl	800cc9c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	799b      	ldrb	r3, [r3, #6]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d13b      	bne.n	800461e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	3338      	adds	r3, #56	@ 0x38
 80045b6:	6819      	ldr	r1, [r3, #0]
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4403      	add	r3, r0
 80045c6:	3328      	adds	r3, #40	@ 0x28
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	440b      	add	r3, r1
 80045cc:	1e59      	subs	r1, r3, #1
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4403      	add	r3, r0
 80045dc:	3328      	adds	r3, #40	@ 0x28
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8470 	beq.w	8004ece <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	333c      	adds	r3, #60	@ 0x3c
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	78fa      	ldrb	r2, [r7, #3]
 8004602:	f083 0301 	eor.w	r3, r3, #1
 8004606:	b2d8      	uxtb	r0, r3
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	333c      	adds	r3, #60	@ 0x3c
 8004616:	4602      	mov	r2, r0
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	f000 bc58 	b.w	8004ece <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	333c      	adds	r3, #60	@ 0x3c
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	f083 0301 	eor.w	r3, r3, #1
 8004636:	b2d8      	uxtb	r0, r3
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	333c      	adds	r3, #60	@ 0x3c
 8004646:	4602      	mov	r2, r0
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	f000 bc40 	b.w	8004ece <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	4611      	mov	r1, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f005 fa23 	bl	8009aa2 <USB_ReadChInterrupts>
 800465c:	4603      	mov	r3, r0
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b20      	cmp	r3, #32
 8004664:	d131      	bne.n	80046ca <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004666:	78fb      	ldrb	r3, [r7, #3]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004672:	461a      	mov	r2, r3
 8004674:	2320      	movs	r3, #32
 8004676:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	331a      	adds	r3, #26
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b01      	cmp	r3, #1
 800468c:	f040 841f 	bne.w	8004ece <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	331b      	adds	r3, #27
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	334d      	adds	r3, #77	@ 0x4d
 80046b4:	2203      	movs	r2, #3
 80046b6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f005 ff92 	bl	800a5ea <USB_HC_Halt>
 80046c6:	f000 bc02 	b.w	8004ece <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f005 f9e5 	bl	8009aa2 <USB_ReadChInterrupts>
 80046d8:	4603      	mov	r3, r0
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b02      	cmp	r3, #2
 80046e0:	f040 8305 	bne.w	8004cee <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f0:	461a      	mov	r2, r3
 80046f2:	2302      	movs	r3, #2
 80046f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	334d      	adds	r3, #77	@ 0x4d
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d114      	bne.n	8004736 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	334d      	adds	r3, #77	@ 0x4d
 800471c:	2202      	movs	r2, #2
 800471e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	334c      	adds	r3, #76	@ 0x4c
 8004730:	2201      	movs	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e2cc      	b.n	8004cd0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	334d      	adds	r3, #77	@ 0x4d
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b06      	cmp	r3, #6
 800474a:	d114      	bne.n	8004776 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	334d      	adds	r3, #77	@ 0x4d
 800475c:	2202      	movs	r2, #2
 800475e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	334c      	adds	r3, #76	@ 0x4c
 8004770:	2205      	movs	r2, #5
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	e2ac      	b.n	8004cd0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	334d      	adds	r3, #77	@ 0x4d
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b07      	cmp	r3, #7
 800478a:	d00b      	beq.n	80047a4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	334d      	adds	r3, #77	@ 0x4d
 800479c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800479e:	2b09      	cmp	r3, #9
 80047a0:	f040 80a6 	bne.w	80048f0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047a4:	78fa      	ldrb	r2, [r7, #3]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	334d      	adds	r3, #77	@ 0x4d
 80047b4:	2202      	movs	r2, #2
 80047b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	3344      	adds	r3, #68	@ 0x44
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	1c59      	adds	r1, r3, #1
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4403      	add	r3, r0
 80047d8:	3344      	adds	r3, #68	@ 0x44
 80047da:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	3344      	adds	r3, #68	@ 0x44
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d943      	bls.n	800487a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	3344      	adds	r3, #68	@ 0x44
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	331a      	adds	r3, #26
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d123      	bne.n	8004864 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	331b      	adds	r3, #27
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	331c      	adds	r3, #28
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4413      	add	r3, r2
 800484c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	0151      	lsls	r1, r2, #5
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	440a      	add	r2, r1
 800485a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800485e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004862:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	334c      	adds	r3, #76	@ 0x4c
 8004874:	2204      	movs	r2, #4
 8004876:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004878:	e229      	b.n	8004cce <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800487a:	78fa      	ldrb	r2, [r7, #3]
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	334c      	adds	r3, #76	@ 0x4c
 800488a:	2202      	movs	r2, #2
 800488c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800488e:	78fa      	ldrb	r2, [r7, #3]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	3326      	adds	r3, #38	@ 0x26
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048a4:	78fa      	ldrb	r2, [r7, #3]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	3326      	adds	r3, #38	@ 0x26
 80048b4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	f040 8209 	bne.w	8004cce <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048d2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048da:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e8:	461a      	mov	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048ee:	e1ee      	b.n	8004cce <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	334d      	adds	r3, #77	@ 0x4d
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b05      	cmp	r3, #5
 8004904:	f040 80c8 	bne.w	8004a98 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004908:	78fa      	ldrb	r2, [r7, #3]
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	4613      	mov	r3, r2
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	334d      	adds	r3, #77	@ 0x4d
 8004918:	2202      	movs	r2, #2
 800491a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	331b      	adds	r3, #27
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b01      	cmp	r3, #1
 8004930:	f040 81ce 	bne.w	8004cd0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	3326      	adds	r3, #38	@ 0x26
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d16b      	bne.n	8004a22 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	3348      	adds	r3, #72	@ 0x48
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	1c59      	adds	r1, r3, #1
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4403      	add	r3, r0
 800496a:	3348      	adds	r3, #72	@ 0x48
 800496c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800496e:	78fa      	ldrb	r2, [r7, #3]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	3348      	adds	r3, #72	@ 0x48
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d943      	bls.n	8004a0c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	3348      	adds	r3, #72	@ 0x48
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004998:	78fa      	ldrb	r2, [r7, #3]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	331b      	adds	r3, #27
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	3344      	adds	r3, #68	@ 0x44
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d809      	bhi.n	80049d6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	331c      	adds	r3, #28
 80049d2:	2201      	movs	r2, #1
 80049d4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	78fa      	ldrb	r2, [r7, #3]
 80049e6:	0151      	lsls	r1, r2, #5
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	440a      	add	r2, r1
 80049ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049f4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	334c      	adds	r3, #76	@ 0x4c
 8004a06:	2204      	movs	r2, #4
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	e014      	b.n	8004a36 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a0c:	78fa      	ldrb	r2, [r7, #3]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	334c      	adds	r3, #76	@ 0x4c
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	e009      	b.n	8004a36 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	334c      	adds	r3, #76	@ 0x4c
 8004a32:	2202      	movs	r2, #2
 8004a34:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	3326      	adds	r3, #38	@ 0x26
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00b      	beq.n	8004a64 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	3326      	adds	r3, #38	@ 0x26
 8004a5c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	f040 8136 	bne.w	8004cd0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a7a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a82:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a90:	461a      	mov	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e11b      	b.n	8004cd0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	334d      	adds	r3, #77	@ 0x4d
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	f040 8081 	bne.w	8004bb2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	334d      	adds	r3, #77	@ 0x4d
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	331b      	adds	r3, #27
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	f040 80fa 	bne.w	8004cd0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	334c      	adds	r3, #76	@ 0x4c
 8004aec:	2202      	movs	r2, #2
 8004aee:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	0151      	lsls	r1, r2, #5
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	440a      	add	r2, r1
 8004b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b0e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	78fa      	ldrb	r2, [r7, #3]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b2e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b4a:	f023 0320 	bic.w	r3, r3, #32
 8004b4e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	3326      	adds	r3, #38	@ 0x26
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	3326      	adds	r3, #38	@ 0x26
 8004b76:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	f040 80a9 	bne.w	8004cd0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b94:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b9c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004baa:	461a      	mov	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e08e      	b.n	8004cd0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	334d      	adds	r3, #77	@ 0x4d
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d143      	bne.n	8004c50 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	334d      	adds	r3, #77	@ 0x4d
 8004bd8:	2202      	movs	r2, #2
 8004bda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	334c      	adds	r3, #76	@ 0x4c
 8004bec:	2202      	movs	r2, #2
 8004bee:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3326      	adds	r3, #38	@ 0x26
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	3326      	adds	r3, #38	@ 0x26
 8004c16:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d159      	bne.n	8004cd0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c32:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c3a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c48:	461a      	mov	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	e03f      	b.n	8004cd0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	1a9b      	subs	r3, r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	334d      	adds	r3, #77	@ 0x4d
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d126      	bne.n	8004cb4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	334d      	adds	r3, #77	@ 0x4d
 8004c76:	2202      	movs	r2, #2
 8004c78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	3344      	adds	r3, #68	@ 0x44
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	1c59      	adds	r1, r3, #1
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4403      	add	r3, r0
 8004c9a:	3344      	adds	r3, #68	@ 0x44
 8004c9c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	334c      	adds	r3, #76	@ 0x4c
 8004cae:	2204      	movs	r2, #4
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e00d      	b.n	8004cd0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	334d      	adds	r3, #77	@ 0x4d
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	f000 8100 	beq.w	8004ecc <HCD_HC_IN_IRQHandler+0xcca>
 8004ccc:	e000      	b.n	8004cd0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	334c      	adds	r3, #76	@ 0x4c
 8004ce0:	781a      	ldrb	r2, [r3, #0]
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f007 ffd8 	bl	800cc9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004cec:	e0ef      	b.n	8004ece <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	78fa      	ldrb	r2, [r7, #3]
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f004 fed3 	bl	8009aa2 <USB_ReadChInterrupts>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d02:	2b40      	cmp	r3, #64	@ 0x40
 8004d04:	d12f      	bne.n	8004d66 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d12:	461a      	mov	r2, r3
 8004d14:	2340      	movs	r3, #64	@ 0x40
 8004d16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	1a9b      	subs	r3, r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	334d      	adds	r3, #77	@ 0x4d
 8004d28:	2205      	movs	r2, #5
 8004d2a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004d2c:	78fa      	ldrb	r2, [r7, #3]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	331a      	adds	r3, #26
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d109      	bne.n	8004d56 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	3344      	adds	r3, #68	@ 0x44
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	78fa      	ldrb	r2, [r7, #3]
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f005 fc43 	bl	800a5ea <USB_HC_Halt>
 8004d64:	e0b3      	b.n	8004ece <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f004 fe97 	bl	8009aa2 <USB_ReadChInterrupts>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b10      	cmp	r3, #16
 8004d7c:	f040 80a7 	bne.w	8004ece <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3326      	adds	r3, #38	@ 0x26
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d11b      	bne.n	8004dce <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d96:	78fa      	ldrb	r2, [r7, #3]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	3344      	adds	r3, #68	@ 0x44
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	334d      	adds	r3, #77	@ 0x4d
 8004dba:	2204      	movs	r2, #4
 8004dbc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f005 fc0f 	bl	800a5ea <USB_HC_Halt>
 8004dcc:	e03f      	b.n	8004e4e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	3326      	adds	r3, #38	@ 0x26
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	3326      	adds	r3, #38	@ 0x26
 8004df4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d129      	bne.n	8004e4e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004dfa:	78fa      	ldrb	r2, [r7, #3]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	3344      	adds	r3, #68	@ 0x44
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	799b      	ldrb	r3, [r3, #6]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HCD_HC_IN_IRQHandler+0xc2a>
 8004e16:	78fa      	ldrb	r2, [r7, #3]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	331b      	adds	r3, #27
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d110      	bne.n	8004e4e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	334d      	adds	r3, #77	@ 0x4d
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	4611      	mov	r1, r2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f005 fbce 	bl	800a5ea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	331b      	adds	r3, #27
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d129      	bne.n	8004eb8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	331b      	adds	r3, #27
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e96:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	78fa      	ldrb	r2, [r7, #3]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004eb2:	f043 0320 	orr.w	r3, r3, #32
 8004eb6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004eb8:	78fb      	ldrb	r3, [r7, #3]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	2310      	movs	r3, #16
 8004ec8:	6093      	str	r3, [r2, #8]
 8004eca:	e000      	b.n	8004ece <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004ecc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	78fa      	ldrb	r2, [r7, #3]
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f004 fdd5 	bl	8009aa2 <USB_ReadChInterrupts>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d11b      	bne.n	8004f3a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f0e:	461a      	mov	r2, r3
 8004f10:	2304      	movs	r3, #4
 8004f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	334d      	adds	r3, #77	@ 0x4d
 8004f24:	2207      	movs	r2, #7
 8004f26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f005 fb5a 	bl	800a5ea <USB_HC_Halt>
 8004f36:	f000 bc89 	b.w	800584c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	78fa      	ldrb	r2, [r7, #3]
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f004 fdad 	bl	8009aa2 <USB_ReadChInterrupts>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	f040 8082 	bne.w	8005058 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f60:	461a      	mov	r2, r3
 8004f62:	2320      	movs	r3, #32
 8004f64:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3319      	adds	r3, #25
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d124      	bne.n	8004fc6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004f7c:	78fa      	ldrb	r2, [r7, #3]
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	4613      	mov	r3, r2
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	3319      	adds	r3, #25
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f90:	78fa      	ldrb	r2, [r7, #3]
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	4613      	mov	r3, r2
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	334c      	adds	r3, #76	@ 0x4c
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004fa4:	78fa      	ldrb	r2, [r7, #3]
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	334d      	adds	r3, #77	@ 0x4d
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	78fa      	ldrb	r2, [r7, #3]
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f005 fb12 	bl	800a5ea <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	331a      	adds	r3, #26
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f040 8437 	bne.w	800584c <HCD_HC_OUT_IRQHandler+0x978>
 8004fde:	78fa      	ldrb	r2, [r7, #3]
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	331b      	adds	r3, #27
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f040 842b 	bne.w	800584c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004ff6:	78fa      	ldrb	r2, [r7, #3]
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	3326      	adds	r3, #38	@ 0x26
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d009      	beq.n	8005020 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	331b      	adds	r3, #27
 800501c:	2201      	movs	r2, #1
 800501e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	334d      	adds	r3, #77	@ 0x4d
 8005030:	2203      	movs	r2, #3
 8005032:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	78fa      	ldrb	r2, [r7, #3]
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f005 fad4 	bl	800a5ea <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	3344      	adds	r3, #68	@ 0x44
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e3f9      	b.n	800584c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	78fa      	ldrb	r2, [r7, #3]
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f004 fd1e 	bl	8009aa2 <USB_ReadChInterrupts>
 8005066:	4603      	mov	r3, r0
 8005068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800506c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005070:	d111      	bne.n	8005096 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4413      	add	r3, r2
 800507a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800507e:	461a      	mov	r2, r3
 8005080:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005084:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	4611      	mov	r1, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f005 faab 	bl	800a5ea <USB_HC_Halt>
 8005094:	e3da      	b.n	800584c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	78fa      	ldrb	r2, [r7, #3]
 800509c:	4611      	mov	r1, r2
 800509e:	4618      	mov	r0, r3
 80050a0:	f004 fcff 	bl	8009aa2 <USB_ReadChInterrupts>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d168      	bne.n	8005180 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80050ae:	78fa      	ldrb	r2, [r7, #3]
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	3344      	adds	r3, #68	@ 0x44
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	78fa      	ldrb	r2, [r7, #3]
 80050c8:	4611      	mov	r1, r2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f004 fce9 	bl	8009aa2 <USB_ReadChInterrupts>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d6:	2b40      	cmp	r3, #64	@ 0x40
 80050d8:	d112      	bne.n	8005100 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	3319      	adds	r3, #25
 80050ea:	2201      	movs	r2, #1
 80050ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050fa:	461a      	mov	r2, r3
 80050fc:	2340      	movs	r3, #64	@ 0x40
 80050fe:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	331b      	adds	r3, #27
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d019      	beq.n	800514a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	331b      	adds	r3, #27
 8005126:	2200      	movs	r2, #0
 8005128:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4413      	add	r3, r2
 8005132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	78fa      	ldrb	r2, [r7, #3]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	440a      	add	r2, r1
 8005140:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005148:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4413      	add	r3, r2
 8005152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005156:	461a      	mov	r2, r3
 8005158:	2301      	movs	r3, #1
 800515a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800515c:	78fa      	ldrb	r2, [r7, #3]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	334d      	adds	r3, #77	@ 0x4d
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	4611      	mov	r1, r2
 8005178:	4618      	mov	r0, r3
 800517a:	f005 fa36 	bl	800a5ea <USB_HC_Halt>
 800517e:	e365      	b.n	800584c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	78fa      	ldrb	r2, [r7, #3]
 8005186:	4611      	mov	r1, r2
 8005188:	4618      	mov	r0, r3
 800518a:	f004 fc8a 	bl	8009aa2 <USB_ReadChInterrupts>
 800518e:	4603      	mov	r3, r0
 8005190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005194:	2b40      	cmp	r3, #64	@ 0x40
 8005196:	d139      	bne.n	800520c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005198:	78fa      	ldrb	r2, [r7, #3]
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	334d      	adds	r3, #77	@ 0x4d
 80051a8:	2205      	movs	r2, #5
 80051aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	4613      	mov	r3, r2
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	331a      	adds	r3, #26
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	3319      	adds	r3, #25
 80051d2:	2201      	movs	r2, #1
 80051d4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	3344      	adds	r3, #68	@ 0x44
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f005 f9f9 	bl	800a5ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005204:	461a      	mov	r2, r3
 8005206:	2340      	movs	r3, #64	@ 0x40
 8005208:	6093      	str	r3, [r2, #8]
 800520a:	e31f      	b.n	800584c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f004 fc44 	bl	8009aa2 <USB_ReadChInterrupts>
 800521a:	4603      	mov	r3, r0
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b08      	cmp	r3, #8
 8005222:	d11a      	bne.n	800525a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005230:	461a      	mov	r2, r3
 8005232:	2308      	movs	r3, #8
 8005234:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	334d      	adds	r3, #77	@ 0x4d
 8005246:	2206      	movs	r2, #6
 8005248:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f005 f9c9 	bl	800a5ea <USB_HC_Halt>
 8005258:	e2f8      	b.n	800584c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	4611      	mov	r1, r2
 8005262:	4618      	mov	r0, r3
 8005264:	f004 fc1d 	bl	8009aa2 <USB_ReadChInterrupts>
 8005268:	4603      	mov	r3, r0
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b10      	cmp	r3, #16
 8005270:	d144      	bne.n	80052fc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3344      	adds	r3, #68	@ 0x44
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	334d      	adds	r3, #77	@ 0x4d
 8005296:	2204      	movs	r2, #4
 8005298:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800529a:	78fa      	ldrb	r2, [r7, #3]
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	3319      	adds	r3, #25
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d114      	bne.n	80052da <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80052b0:	78fa      	ldrb	r2, [r7, #3]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	3318      	adds	r3, #24
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	3319      	adds	r3, #25
 80052d6:	2201      	movs	r2, #1
 80052d8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f005 f981 	bl	800a5ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052f4:	461a      	mov	r2, r3
 80052f6:	2310      	movs	r3, #16
 80052f8:	6093      	str	r3, [r2, #8]
 80052fa:	e2a7      	b.n	800584c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	4611      	mov	r1, r2
 8005304:	4618      	mov	r0, r3
 8005306:	f004 fbcc 	bl	8009aa2 <USB_ReadChInterrupts>
 800530a:	4603      	mov	r3, r0
 800530c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005310:	2b80      	cmp	r3, #128	@ 0x80
 8005312:	f040 8083 	bne.w	800541c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	799b      	ldrb	r3, [r3, #6]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d111      	bne.n	8005342 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	334d      	adds	r3, #77	@ 0x4d
 800532e:	2207      	movs	r2, #7
 8005330:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	78fa      	ldrb	r2, [r7, #3]
 8005338:	4611      	mov	r1, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f005 f955 	bl	800a5ea <USB_HC_Halt>
 8005340:	e062      	b.n	8005408 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005342:	78fa      	ldrb	r2, [r7, #3]
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	3344      	adds	r3, #68	@ 0x44
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	1c59      	adds	r1, r3, #1
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	4613      	mov	r3, r2
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	1a9b      	subs	r3, r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4403      	add	r3, r0
 8005362:	3344      	adds	r3, #68	@ 0x44
 8005364:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	3344      	adds	r3, #68	@ 0x44
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d922      	bls.n	80053c2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800537c:	78fa      	ldrb	r2, [r7, #3]
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	3344      	adds	r3, #68	@ 0x44
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	1a9b      	subs	r3, r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	334c      	adds	r3, #76	@ 0x4c
 80053a0:	2204      	movs	r2, #4
 80053a2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80053a4:	78fa      	ldrb	r2, [r7, #3]
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	4613      	mov	r3, r2
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	334c      	adds	r3, #76	@ 0x4c
 80053b4:	781a      	ldrb	r2, [r3, #0]
 80053b6:	78fb      	ldrb	r3, [r7, #3]
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f007 fc6e 	bl	800cc9c <HAL_HCD_HC_NotifyURBChange_Callback>
 80053c0:	e022      	b.n	8005408 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	334c      	adds	r3, #76	@ 0x4c
 80053d2:	2202      	movs	r2, #2
 80053d4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80053d6:	78fb      	ldrb	r3, [r7, #3]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053ec:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053f4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80053f6:	78fb      	ldrb	r3, [r7, #3]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005402:	461a      	mov	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4413      	add	r3, r2
 8005410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005414:	461a      	mov	r2, r3
 8005416:	2380      	movs	r3, #128	@ 0x80
 8005418:	6093      	str	r3, [r2, #8]
 800541a:	e217      	b.n	800584c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	4611      	mov	r1, r2
 8005424:	4618      	mov	r0, r3
 8005426:	f004 fb3c 	bl	8009aa2 <USB_ReadChInterrupts>
 800542a:	4603      	mov	r3, r0
 800542c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005434:	d11b      	bne.n	800546e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005436:	78fa      	ldrb	r2, [r7, #3]
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	440b      	add	r3, r1
 8005444:	334d      	adds	r3, #77	@ 0x4d
 8005446:	2209      	movs	r2, #9
 8005448:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	4611      	mov	r1, r2
 8005452:	4618      	mov	r0, r3
 8005454:	f005 f8c9 	bl	800a5ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	4413      	add	r3, r2
 8005460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005464:	461a      	mov	r2, r3
 8005466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800546a:	6093      	str	r3, [r2, #8]
 800546c:	e1ee      	b.n	800584c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	4611      	mov	r1, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f004 fb13 	bl	8009aa2 <USB_ReadChInterrupts>
 800547c:	4603      	mov	r3, r0
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b02      	cmp	r3, #2
 8005484:	f040 81df 	bne.w	8005846 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005494:	461a      	mov	r2, r3
 8005496:	2302      	movs	r3, #2
 8005498:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800549a:	78fa      	ldrb	r2, [r7, #3]
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	4613      	mov	r3, r2
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	1a9b      	subs	r3, r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	440b      	add	r3, r1
 80054a8:	334d      	adds	r3, #77	@ 0x4d
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	f040 8093 	bne.w	80055d8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	334d      	adds	r3, #77	@ 0x4d
 80054c2:	2202      	movs	r2, #2
 80054c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80054c6:	78fa      	ldrb	r2, [r7, #3]
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	334c      	adds	r3, #76	@ 0x4c
 80054d6:	2201      	movs	r2, #1
 80054d8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	3326      	adds	r3, #38	@ 0x26
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d00b      	beq.n	8005508 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80054f0:	78fa      	ldrb	r2, [r7, #3]
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	4613      	mov	r3, r2
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	3326      	adds	r3, #38	@ 0x26
 8005500:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005502:	2b03      	cmp	r3, #3
 8005504:	f040 8190 	bne.w	8005828 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	799b      	ldrb	r3, [r3, #6]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d115      	bne.n	800553c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	333d      	adds	r3, #61	@ 0x3d
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	f083 0301 	eor.w	r3, r3, #1
 8005528:	b2d8      	uxtb	r0, r3
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	333d      	adds	r3, #61	@ 0x3d
 8005538:	4602      	mov	r2, r0
 800553a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	799b      	ldrb	r3, [r3, #6]
 8005540:	2b01      	cmp	r3, #1
 8005542:	f040 8171 	bne.w	8005828 <HCD_HC_OUT_IRQHandler+0x954>
 8005546:	78fa      	ldrb	r2, [r7, #3]
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	3334      	adds	r3, #52	@ 0x34
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8165 	beq.w	8005828 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	3334      	adds	r3, #52	@ 0x34
 800556e:	6819      	ldr	r1, [r3, #0]
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4403      	add	r3, r0
 800557e:	3328      	adds	r3, #40	@ 0x28
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	440b      	add	r3, r1
 8005584:	1e59      	subs	r1, r3, #1
 8005586:	78fa      	ldrb	r2, [r7, #3]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	4613      	mov	r3, r2
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4403      	add	r3, r0
 8005594:	3328      	adds	r3, #40	@ 0x28
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	fbb1 f3f3 	udiv	r3, r1, r3
 800559c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 813f 	beq.w	8005828 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	333d      	adds	r3, #61	@ 0x3d
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	f083 0301 	eor.w	r3, r3, #1
 80055c2:	b2d8      	uxtb	r0, r3
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	440b      	add	r3, r1
 80055d0:	333d      	adds	r3, #61	@ 0x3d
 80055d2:	4602      	mov	r2, r0
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	e127      	b.n	8005828 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	1a9b      	subs	r3, r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	334d      	adds	r3, #77	@ 0x4d
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d120      	bne.n	8005630 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055ee:	78fa      	ldrb	r2, [r7, #3]
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	1a9b      	subs	r3, r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	334d      	adds	r3, #77	@ 0x4d
 80055fe:	2202      	movs	r2, #2
 8005600:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	331b      	adds	r3, #27
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	f040 8107 	bne.w	8005828 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	334c      	adds	r3, #76	@ 0x4c
 800562a:	2202      	movs	r2, #2
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e0fb      	b.n	8005828 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	334d      	adds	r3, #77	@ 0x4d
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b04      	cmp	r3, #4
 8005644:	d13a      	bne.n	80056bc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005646:	78fa      	ldrb	r2, [r7, #3]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	334d      	adds	r3, #77	@ 0x4d
 8005656:	2202      	movs	r2, #2
 8005658:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	334c      	adds	r3, #76	@ 0x4c
 800566a:	2202      	movs	r2, #2
 800566c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	331b      	adds	r3, #27
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b01      	cmp	r3, #1
 8005682:	f040 80d1 	bne.w	8005828 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005686:	78fa      	ldrb	r2, [r7, #3]
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	331b      	adds	r3, #27
 8005696:	2200      	movs	r2, #0
 8005698:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	78fa      	ldrb	r2, [r7, #3]
 80056aa:	0151      	lsls	r1, r2, #5
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	440a      	add	r2, r1
 80056b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056b8:	6053      	str	r3, [r2, #4]
 80056ba:	e0b5      	b.n	8005828 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	334d      	adds	r3, #77	@ 0x4d
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b05      	cmp	r3, #5
 80056d0:	d114      	bne.n	80056fc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056d2:	78fa      	ldrb	r2, [r7, #3]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	334d      	adds	r3, #77	@ 0x4d
 80056e2:	2202      	movs	r2, #2
 80056e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80056e6:	78fa      	ldrb	r2, [r7, #3]
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	334c      	adds	r3, #76	@ 0x4c
 80056f6:	2202      	movs	r2, #2
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e095      	b.n	8005828 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80056fc:	78fa      	ldrb	r2, [r7, #3]
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	334d      	adds	r3, #77	@ 0x4d
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b06      	cmp	r3, #6
 8005710:	d114      	bne.n	800573c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005712:	78fa      	ldrb	r2, [r7, #3]
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	4613      	mov	r3, r2
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	334d      	adds	r3, #77	@ 0x4d
 8005722:	2202      	movs	r2, #2
 8005724:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005726:	78fa      	ldrb	r2, [r7, #3]
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	334c      	adds	r3, #76	@ 0x4c
 8005736:	2205      	movs	r2, #5
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	e075      	b.n	8005828 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800573c:	78fa      	ldrb	r2, [r7, #3]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	334d      	adds	r3, #77	@ 0x4d
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b07      	cmp	r3, #7
 8005750:	d00a      	beq.n	8005768 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	334d      	adds	r3, #77	@ 0x4d
 8005762:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005764:	2b09      	cmp	r3, #9
 8005766:	d170      	bne.n	800584a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005768:	78fa      	ldrb	r2, [r7, #3]
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	334d      	adds	r3, #77	@ 0x4d
 8005778:	2202      	movs	r2, #2
 800577a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	3344      	adds	r3, #68	@ 0x44
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	1c59      	adds	r1, r3, #1
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4403      	add	r3, r0
 800579c:	3344      	adds	r3, #68	@ 0x44
 800579e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80057a0:	78fa      	ldrb	r2, [r7, #3]
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	3344      	adds	r3, #68	@ 0x44
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d914      	bls.n	80057e0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80057b6:	78fa      	ldrb	r2, [r7, #3]
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	3344      	adds	r3, #68	@ 0x44
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	334c      	adds	r3, #76	@ 0x4c
 80057da:	2204      	movs	r2, #4
 80057dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80057de:	e022      	b.n	8005826 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057e0:	78fa      	ldrb	r2, [r7, #3]
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	4613      	mov	r3, r2
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	1a9b      	subs	r3, r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	334c      	adds	r3, #76	@ 0x4c
 80057f0:	2202      	movs	r2, #2
 80057f2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800580a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005812:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005820:	461a      	mov	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005826:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	334c      	adds	r3, #76	@ 0x4c
 8005838:	781a      	ldrb	r2, [r3, #0]
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f007 fa2c 	bl	800cc9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005844:	e002      	b.n	800584c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800584a:	bf00      	nop
  }
}
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b08a      	sub	sp, #40	@ 0x28
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	0c5b      	lsrs	r3, r3, #17
 8005878:	f003 030f 	and.w	r3, r3, #15
 800587c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	091b      	lsrs	r3, r3, #4
 8005882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005886:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d004      	beq.n	8005898 <HCD_RXQLVL_IRQHandler+0x46>
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b05      	cmp	r3, #5
 8005892:	f000 80b6 	beq.w	8005a02 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005896:	e0b7      	b.n	8005a08 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80b3 	beq.w	8005a06 <HCD_RXQLVL_IRQHandler+0x1b4>
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	4613      	mov	r3, r2
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	332c      	adds	r3, #44	@ 0x2c
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 80a7 	beq.w	8005a06 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4613      	mov	r3, r2
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	3338      	adds	r3, #56	@ 0x38
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	18d1      	adds	r1, r2, r3
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4613      	mov	r3, r2
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4403      	add	r3, r0
 80058dc:	3334      	adds	r3, #52	@ 0x34
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4299      	cmp	r1, r3
 80058e2:	f200 8083 	bhi.w	80059ec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	4613      	mov	r3, r2
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	1a9b      	subs	r3, r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	332c      	adds	r3, #44	@ 0x2c
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	b292      	uxth	r2, r2
 8005900:	4619      	mov	r1, r3
 8005902:	f004 f863 	bl	80099cc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4613      	mov	r3, r2
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	1a9b      	subs	r3, r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	332c      	adds	r3, #44	@ 0x2c
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	18d1      	adds	r1, r2, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	4613      	mov	r3, r2
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4403      	add	r3, r0
 800592a:	332c      	adds	r3, #44	@ 0x2c
 800592c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4613      	mov	r3, r2
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	1a9b      	subs	r3, r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	440b      	add	r3, r1
 800593c:	3338      	adds	r3, #56	@ 0x38
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	18d1      	adds	r1, r2, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	4613      	mov	r3, r2
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4403      	add	r3, r0
 8005952:	3338      	adds	r3, #56	@ 0x38
 8005954:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	4413      	add	r3, r2
 800595e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	0cdb      	lsrs	r3, r3, #19
 8005966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800596a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	4613      	mov	r3, r2
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	3328      	adds	r3, #40	@ 0x28
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	4293      	cmp	r3, r2
 8005984:	d13f      	bne.n	8005a06 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d03c      	beq.n	8005a06 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	4413      	add	r3, r2
 8005994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80059aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059b8:	461a      	mov	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	4613      	mov	r3, r2
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	333c      	adds	r3, #60	@ 0x3c
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f083 0301 	eor.w	r3, r3, #1
 80059d4:	b2d8      	uxtb	r0, r3
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4613      	mov	r3, r2
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	333c      	adds	r3, #60	@ 0x3c
 80059e6:	4602      	mov	r2, r0
 80059e8:	701a      	strb	r2, [r3, #0]
      break;
 80059ea:	e00c      	b.n	8005a06 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4613      	mov	r3, r2
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	334c      	adds	r3, #76	@ 0x4c
 80059fc:	2204      	movs	r2, #4
 80059fe:	701a      	strb	r2, [r3, #0]
      break;
 8005a00:	e001      	b.n	8005a06 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005a06:	bf00      	nop
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3728      	adds	r7, #40	@ 0x28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005a3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d10b      	bne.n	8005a60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d102      	bne.n	8005a58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f007 f906 	bl	800cc64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f043 0302 	orr.w	r3, r3, #2
 8005a5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b08      	cmp	r3, #8
 8005a68:	d132      	bne.n	8005ad0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f043 0308 	orr.w	r3, r3, #8
 8005a70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d126      	bne.n	8005aca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	7a5b      	ldrb	r3, [r3, #9]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d113      	bne.n	8005aac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005a8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a8e:	d106      	bne.n	8005a9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2102      	movs	r1, #2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f004 f928 	bl	8009cec <USB_InitFSLSPClkSel>
 8005a9c:	e011      	b.n	8005ac2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f004 f921 	bl	8009cec <USB_InitFSLSPClkSel>
 8005aaa:	e00a      	b.n	8005ac2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	79db      	ldrb	r3, [r3, #7]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d106      	bne.n	8005ac2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aba:	461a      	mov	r2, r3
 8005abc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005ac0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f007 f8f8 	bl	800ccb8 <HAL_HCD_PortEnabled_Callback>
 8005ac8:	e002      	b.n	8005ad0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f007 f902 	bl	800ccd4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d103      	bne.n	8005ae2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f043 0320 	orr.w	r3, r3, #32
 8005ae0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6013      	str	r3, [r2, #0]
}
 8005aee:	bf00      	nop
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e12b      	b.n	8005d62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fb fae6 	bl	80010f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2224      	movs	r2, #36	@ 0x24
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b5c:	f002 fb04 	bl	8008168 <HAL_RCC_GetPCLK1Freq>
 8005b60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	4a81      	ldr	r2, [pc, #516]	@ (8005d6c <HAL_I2C_Init+0x274>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d807      	bhi.n	8005b7c <HAL_I2C_Init+0x84>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4a80      	ldr	r2, [pc, #512]	@ (8005d70 <HAL_I2C_Init+0x278>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	bf94      	ite	ls
 8005b74:	2301      	movls	r3, #1
 8005b76:	2300      	movhi	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	e006      	b.n	8005b8a <HAL_I2C_Init+0x92>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4a7d      	ldr	r2, [pc, #500]	@ (8005d74 <HAL_I2C_Init+0x27c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	bf94      	ite	ls
 8005b84:	2301      	movls	r3, #1
 8005b86:	2300      	movhi	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e0e7      	b.n	8005d62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4a78      	ldr	r2, [pc, #480]	@ (8005d78 <HAL_I2C_Init+0x280>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	0c9b      	lsrs	r3, r3, #18
 8005b9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	4a6a      	ldr	r2, [pc, #424]	@ (8005d6c <HAL_I2C_Init+0x274>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d802      	bhi.n	8005bcc <HAL_I2C_Init+0xd4>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	e009      	b.n	8005be0 <HAL_I2C_Init+0xe8>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	4a69      	ldr	r2, [pc, #420]	@ (8005d7c <HAL_I2C_Init+0x284>)
 8005bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bdc:	099b      	lsrs	r3, r3, #6
 8005bde:	3301      	adds	r3, #1
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bf2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	495c      	ldr	r1, [pc, #368]	@ (8005d6c <HAL_I2C_Init+0x274>)
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	d819      	bhi.n	8005c34 <HAL_I2C_Init+0x13c>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	1e59      	subs	r1, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c0e:	1c59      	adds	r1, r3, #1
 8005c10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005c14:	400b      	ands	r3, r1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <HAL_I2C_Init+0x138>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1e59      	subs	r1, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c28:	3301      	adds	r3, #1
 8005c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c2e:	e051      	b.n	8005cd4 <HAL_I2C_Init+0x1dc>
 8005c30:	2304      	movs	r3, #4
 8005c32:	e04f      	b.n	8005cd4 <HAL_I2C_Init+0x1dc>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d111      	bne.n	8005c60 <HAL_I2C_Init+0x168>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	1e58      	subs	r0, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6859      	ldr	r1, [r3, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	440b      	add	r3, r1
 8005c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bf0c      	ite	eq
 8005c58:	2301      	moveq	r3, #1
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	e012      	b.n	8005c86 <HAL_I2C_Init+0x18e>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	1e58      	subs	r0, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6859      	ldr	r1, [r3, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	0099      	lsls	r1, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c76:	3301      	adds	r3, #1
 8005c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	bf0c      	ite	eq
 8005c80:	2301      	moveq	r3, #1
 8005c82:	2300      	movne	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_I2C_Init+0x196>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e022      	b.n	8005cd4 <HAL_I2C_Init+0x1dc>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10e      	bne.n	8005cb4 <HAL_I2C_Init+0x1bc>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	1e58      	subs	r0, r3, #1
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6859      	ldr	r1, [r3, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	440b      	add	r3, r1
 8005ca4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca8:	3301      	adds	r3, #1
 8005caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb2:	e00f      	b.n	8005cd4 <HAL_I2C_Init+0x1dc>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1e58      	subs	r0, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6859      	ldr	r1, [r3, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	0099      	lsls	r1, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cca:	3301      	adds	r3, #1
 8005ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	6809      	ldr	r1, [r1, #0]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69da      	ldr	r2, [r3, #28]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6911      	ldr	r1, [r2, #16]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68d2      	ldr	r2, [r2, #12]
 8005d0e:	4311      	orrs	r1, r2
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695a      	ldr	r2, [r3, #20]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	000186a0 	.word	0x000186a0
 8005d70:	001e847f 	.word	0x001e847f
 8005d74:	003d08ff 	.word	0x003d08ff
 8005d78:	431bde83 	.word	0x431bde83
 8005d7c:	10624dd3 	.word	0x10624dd3

08005d80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	4608      	mov	r0, r1
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	4603      	mov	r3, r0
 8005d90:	817b      	strh	r3, [r7, #10]
 8005d92:	460b      	mov	r3, r1
 8005d94:	813b      	strh	r3, [r7, #8]
 8005d96:	4613      	mov	r3, r2
 8005d98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d9a:	f7fc fae5 	bl	8002368 <HAL_GetTick>
 8005d9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	f040 80d9 	bne.w	8005f60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	2319      	movs	r3, #25
 8005db4:	2201      	movs	r2, #1
 8005db6:	496d      	ldr	r1, [pc, #436]	@ (8005f6c <HAL_I2C_Mem_Write+0x1ec>)
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 fc8b 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e0cc      	b.n	8005f62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_I2C_Mem_Write+0x56>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e0c5      	b.n	8005f62 <HAL_I2C_Mem_Write+0x1e2>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d007      	beq.n	8005dfc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2221      	movs	r2, #33	@ 0x21
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2240      	movs	r2, #64	@ 0x40
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a3a      	ldr	r2, [r7, #32]
 8005e26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a4d      	ldr	r2, [pc, #308]	@ (8005f70 <HAL_I2C_Mem_Write+0x1f0>)
 8005e3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e3e:	88f8      	ldrh	r0, [r7, #6]
 8005e40:	893a      	ldrh	r2, [r7, #8]
 8005e42:	8979      	ldrh	r1, [r7, #10]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 fac2 	bl	80063d8 <I2C_RequestMemoryWrite>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d052      	beq.n	8005f00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e081      	b.n	8005f62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 fd50 	bl	8006908 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00d      	beq.n	8005e8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d107      	bne.n	8005e86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e06b      	b.n	8005f62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	781a      	ldrb	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d11b      	bne.n	8005f00 <HAL_I2C_Mem_Write+0x180>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d017      	beq.n	8005f00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1aa      	bne.n	8005e5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 fd43 	bl	8006998 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00d      	beq.n	8005f34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d107      	bne.n	8005f30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e016      	b.n	8005f62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e000      	b.n	8005f62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f60:	2302      	movs	r3, #2
  }
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	00100002 	.word	0x00100002
 8005f70:	ffff0000 	.word	0xffff0000

08005f74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08c      	sub	sp, #48	@ 0x30
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	461a      	mov	r2, r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	817b      	strh	r3, [r7, #10]
 8005f86:	460b      	mov	r3, r1
 8005f88:	813b      	strh	r3, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f8e:	f7fc f9eb 	bl	8002368 <HAL_GetTick>
 8005f92:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	f040 8214 	bne.w	80063ca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	2319      	movs	r3, #25
 8005fa8:	2201      	movs	r2, #1
 8005faa:	497b      	ldr	r1, [pc, #492]	@ (8006198 <HAL_I2C_Mem_Read+0x224>)
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 fb91 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e207      	b.n	80063cc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_I2C_Mem_Read+0x56>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e200      	b.n	80063cc <HAL_I2C_Mem_Read+0x458>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d007      	beq.n	8005ff0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ffe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2222      	movs	r2, #34	@ 0x22
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2240      	movs	r2, #64	@ 0x40
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800601a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006020:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4a5b      	ldr	r2, [pc, #364]	@ (800619c <HAL_I2C_Mem_Read+0x228>)
 8006030:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006032:	88f8      	ldrh	r0, [r7, #6]
 8006034:	893a      	ldrh	r2, [r7, #8]
 8006036:	8979      	ldrh	r1, [r7, #10]
 8006038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	4603      	mov	r3, r0
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 fa5e 	bl	8006504 <I2C_RequestMemoryRead>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e1bc      	b.n	80063cc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006056:	2b00      	cmp	r3, #0
 8006058:	d113      	bne.n	8006082 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605a:	2300      	movs	r3, #0
 800605c:	623b      	str	r3, [r7, #32]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	623b      	str	r3, [r7, #32]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	623b      	str	r3, [r7, #32]
 800606e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e190      	b.n	80063a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006086:	2b01      	cmp	r3, #1
 8006088:	d11b      	bne.n	80060c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	e170      	b.n	80063a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d11b      	bne.n	8006102 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ea:	2300      	movs	r3, #0
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	e150      	b.n	80063a4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006118:	e144      	b.n	80063a4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800611e:	2b03      	cmp	r3, #3
 8006120:	f200 80f1 	bhi.w	8006306 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006128:	2b01      	cmp	r3, #1
 800612a:	d123      	bne.n	8006174 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800612c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fc79 	bl	8006a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e145      	b.n	80063cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006172:	e117      	b.n	80063a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006178:	2b02      	cmp	r3, #2
 800617a:	d14e      	bne.n	800621a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006182:	2200      	movs	r2, #0
 8006184:	4906      	ldr	r1, [pc, #24]	@ (80061a0 <HAL_I2C_Mem_Read+0x22c>)
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 faa4 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d008      	beq.n	80061a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e11a      	b.n	80063cc <HAL_I2C_Mem_Read+0x458>
 8006196:	bf00      	nop
 8006198:	00100002 	.word	0x00100002
 800619c:	ffff0000 	.word	0xffff0000
 80061a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006218:	e0c4      	b.n	80063a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	2200      	movs	r2, #0
 8006222:	496c      	ldr	r1, [pc, #432]	@ (80063d4 <HAL_I2C_Mem_Read+0x460>)
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fa55 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0cb      	b.n	80063cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006242:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627c:	2200      	movs	r2, #0
 800627e:	4955      	ldr	r1, [pc, #340]	@ (80063d4 <HAL_I2C_Mem_Read+0x460>)
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fa27 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e09d      	b.n	80063cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800629e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006304:	e04e      	b.n	80063a4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006308:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 fb8c 	bl	8006a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e058      	b.n	80063cc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b04      	cmp	r3, #4
 8006358:	d124      	bne.n	80063a4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635e:	2b03      	cmp	r3, #3
 8006360:	d107      	bne.n	8006372 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006370:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f47f aeb6 	bne.w	800611a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	e000      	b.n	80063cc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80063ca:	2302      	movs	r3, #2
  }
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3728      	adds	r7, #40	@ 0x28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	00010004 	.word	0x00010004

080063d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af02      	add	r7, sp, #8
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	4608      	mov	r0, r1
 80063e2:	4611      	mov	r1, r2
 80063e4:	461a      	mov	r2, r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	817b      	strh	r3, [r7, #10]
 80063ea:	460b      	mov	r3, r1
 80063ec:	813b      	strh	r3, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	2200      	movs	r2, #0
 800640a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 f960 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00d      	beq.n	8006436 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006428:	d103      	bne.n	8006432 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006430:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e05f      	b.n	80064f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006436:	897b      	ldrh	r3, [r7, #10]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	6a3a      	ldr	r2, [r7, #32]
 800644a:	492d      	ldr	r1, [pc, #180]	@ (8006500 <I2C_RequestMemoryWrite+0x128>)
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f9bb 	bl	80067c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e04c      	b.n	80064f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006474:	6a39      	ldr	r1, [r7, #32]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fa46 	bl	8006908 <I2C_WaitOnTXEFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006486:	2b04      	cmp	r3, #4
 8006488:	d107      	bne.n	800649a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e02b      	b.n	80064f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d105      	bne.n	80064b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064a4:	893b      	ldrh	r3, [r7, #8]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	611a      	str	r2, [r3, #16]
 80064ae:	e021      	b.n	80064f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064b0:	893b      	ldrh	r3, [r7, #8]
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c0:	6a39      	ldr	r1, [r7, #32]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 fa20 	bl	8006908 <I2C_WaitOnTXEFlagUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d107      	bne.n	80064e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e005      	b.n	80064f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064ea:	893b      	ldrh	r3, [r7, #8]
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	00010002 	.word	0x00010002

08006504 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	4608      	mov	r0, r1
 800650e:	4611      	mov	r1, r2
 8006510:	461a      	mov	r2, r3
 8006512:	4603      	mov	r3, r0
 8006514:	817b      	strh	r3, [r7, #10]
 8006516:	460b      	mov	r3, r1
 8006518:	813b      	strh	r3, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800652c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800653c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	2200      	movs	r2, #0
 8006546:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 f8c2 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00d      	beq.n	8006572 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006564:	d103      	bne.n	800656e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800656c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e0aa      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006572:	897b      	ldrh	r3, [r7, #10]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006580:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	6a3a      	ldr	r2, [r7, #32]
 8006586:	4952      	ldr	r1, [pc, #328]	@ (80066d0 <I2C_RequestMemoryRead+0x1cc>)
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f91d 	bl	80067c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e097      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b0:	6a39      	ldr	r1, [r7, #32]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f9a8 	bl	8006908 <I2C_WaitOnTXEFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00d      	beq.n	80065da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d107      	bne.n	80065d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e076      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d105      	bne.n	80065ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065e0:	893b      	ldrh	r3, [r7, #8]
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	611a      	str	r2, [r3, #16]
 80065ea:	e021      	b.n	8006630 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065ec:	893b      	ldrh	r3, [r7, #8]
 80065ee:	0a1b      	lsrs	r3, r3, #8
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065fc:	6a39      	ldr	r1, [r7, #32]
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 f982 	bl	8006908 <I2C_WaitOnTXEFlagUntilTimeout>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00d      	beq.n	8006626 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660e:	2b04      	cmp	r3, #4
 8006610:	d107      	bne.n	8006622 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006620:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e050      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006626:	893b      	ldrh	r3, [r7, #8]
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006632:	6a39      	ldr	r1, [r7, #32]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f967 	bl	8006908 <I2C_WaitOnTXEFlagUntilTimeout>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00d      	beq.n	800665c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006644:	2b04      	cmp	r3, #4
 8006646:	d107      	bne.n	8006658 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006656:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e035      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800666a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	2200      	movs	r2, #0
 8006674:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f82b 	bl	80066d4 <I2C_WaitOnFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00d      	beq.n	80066a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800668e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006692:	d103      	bne.n	800669c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800669a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e013      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066a0:	897b      	ldrh	r3, [r7, #10]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	4906      	ldr	r1, [pc, #24]	@ (80066d0 <I2C_RequestMemoryRead+0x1cc>)
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 f886 	bl	80067c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	00010002 	.word	0x00010002

080066d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066e4:	e048      	b.n	8006778 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ec:	d044      	beq.n	8006778 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ee:	f7fb fe3b 	bl	8002368 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d302      	bcc.n	8006704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d139      	bne.n	8006778 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	0c1b      	lsrs	r3, r3, #16
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b01      	cmp	r3, #1
 800670c:	d10d      	bne.n	800672a <I2C_WaitOnFlagUntilTimeout+0x56>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	43da      	mvns	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4013      	ands	r3, r2
 800671a:	b29b      	uxth	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	bf0c      	ite	eq
 8006720:	2301      	moveq	r3, #1
 8006722:	2300      	movne	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	e00c      	b.n	8006744 <I2C_WaitOnFlagUntilTimeout+0x70>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	43da      	mvns	r2, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4013      	ands	r3, r2
 8006736:	b29b      	uxth	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	bf0c      	ite	eq
 800673c:	2301      	moveq	r3, #1
 800673e:	2300      	movne	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	461a      	mov	r2, r3
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	429a      	cmp	r2, r3
 8006748:	d116      	bne.n	8006778 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006764:	f043 0220 	orr.w	r2, r3, #32
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e023      	b.n	80067c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	0c1b      	lsrs	r3, r3, #16
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b01      	cmp	r3, #1
 8006780:	d10d      	bne.n	800679e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	43da      	mvns	r2, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	4013      	ands	r3, r2
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	bf0c      	ite	eq
 8006794:	2301      	moveq	r3, #1
 8006796:	2300      	movne	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	461a      	mov	r2, r3
 800679c:	e00c      	b.n	80067b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	43da      	mvns	r2, r3
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	4013      	ands	r3, r2
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bf0c      	ite	eq
 80067b0:	2301      	moveq	r3, #1
 80067b2:	2300      	movne	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	461a      	mov	r2, r3
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d093      	beq.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067d6:	e071      	b.n	80068bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067e6:	d123      	bne.n	8006830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006800:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681c:	f043 0204 	orr.w	r2, r3, #4
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e067      	b.n	8006900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006836:	d041      	beq.n	80068bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006838:	f7fb fd96 	bl	8002368 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	429a      	cmp	r2, r3
 8006846:	d302      	bcc.n	800684e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d136      	bne.n	80068bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	0c1b      	lsrs	r3, r3, #16
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b01      	cmp	r3, #1
 8006856:	d10c      	bne.n	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	43da      	mvns	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4013      	ands	r3, r2
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	bf14      	ite	ne
 800686a:	2301      	movne	r3, #1
 800686c:	2300      	moveq	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	e00b      	b.n	800688a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	43da      	mvns	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4013      	ands	r3, r2
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	bf14      	ite	ne
 8006884:	2301      	movne	r3, #1
 8006886:	2300      	moveq	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d016      	beq.n	80068bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2220      	movs	r2, #32
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a8:	f043 0220 	orr.w	r2, r3, #32
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e021      	b.n	8006900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	0c1b      	lsrs	r3, r3, #16
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d10c      	bne.n	80068e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	43da      	mvns	r2, r3
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4013      	ands	r3, r2
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	bf14      	ite	ne
 80068d8:	2301      	movne	r3, #1
 80068da:	2300      	moveq	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	e00b      	b.n	80068f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	43da      	mvns	r2, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4013      	ands	r3, r2
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bf14      	ite	ne
 80068f2:	2301      	movne	r3, #1
 80068f4:	2300      	moveq	r3, #0
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f47f af6d 	bne.w	80067d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006914:	e034      	b.n	8006980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 f8e3 	bl	8006ae2 <I2C_IsAcknowledgeFailed>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e034      	b.n	8006990 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d028      	beq.n	8006980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692e:	f7fb fd1b 	bl	8002368 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	429a      	cmp	r2, r3
 800693c:	d302      	bcc.n	8006944 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d11d      	bne.n	8006980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694e:	2b80      	cmp	r3, #128	@ 0x80
 8006950:	d016      	beq.n	8006980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696c:	f043 0220 	orr.w	r2, r3, #32
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e007      	b.n	8006990 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800698a:	2b80      	cmp	r3, #128	@ 0x80
 800698c:	d1c3      	bne.n	8006916 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069a4:	e034      	b.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f89b 	bl	8006ae2 <I2C_IsAcknowledgeFailed>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e034      	b.n	8006a20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069bc:	d028      	beq.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069be:	f7fb fcd3 	bl	8002368 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d302      	bcc.n	80069d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d11d      	bne.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d016      	beq.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fc:	f043 0220 	orr.w	r2, r3, #32
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e007      	b.n	8006a20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d1c3      	bne.n	80069a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a34:	e049      	b.n	8006aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d119      	bne.n	8006a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0210 	mvn.w	r2, #16
 8006a4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e030      	b.n	8006ada <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a78:	f7fb fc76 	bl	8002368 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d302      	bcc.n	8006a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d11d      	bne.n	8006aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a98:	2b40      	cmp	r3, #64	@ 0x40
 8006a9a:	d016      	beq.n	8006aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab6:	f043 0220 	orr.w	r2, r3, #32
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e007      	b.n	8006ada <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad4:	2b40      	cmp	r3, #64	@ 0x40
 8006ad6:	d1ae      	bne.n	8006a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006af8:	d11b      	bne.n	8006b32 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b02:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1e:	f043 0204 	orr.w	r2, r3, #4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e000      	b.n	8006b34 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e128      	b.n	8006da4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d109      	bne.n	8006b72 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a90      	ldr	r2, [pc, #576]	@ (8006dac <HAL_I2S_Init+0x26c>)
 8006b6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7fa fb57 	bl	8001220 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6812      	ldr	r2, [r2, #0]
 8006b84:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006b88:	f023 030f 	bic.w	r3, r3, #15
 8006b8c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2202      	movs	r2, #2
 8006b94:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d060      	beq.n	8006c60 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006ba6:	2310      	movs	r3, #16
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	e001      	b.n	8006bb0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006bac:	2320      	movs	r3, #32
 8006bae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	d802      	bhi.n	8006bbe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	f001 fbdc 	bl	800837c <HAL_RCCEx_GetPeriphCLKFreq>
 8006bc4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bce:	d125      	bne.n	8006c1c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d010      	beq.n	8006bfa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	fbb2 f2f3 	udiv	r2, r2, r3
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	461a      	mov	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf4:	3305      	adds	r3, #5
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	e01f      	b.n	8006c3a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c16:	3305      	adds	r3, #5
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	e00e      	b.n	8006c3a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c36:	3305      	adds	r3, #5
 8006c38:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	4a5c      	ldr	r2, [pc, #368]	@ (8006db0 <HAL_I2S_Init+0x270>)
 8006c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c42:	08db      	lsrs	r3, r3, #3
 8006c44:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	085b      	lsrs	r3, r3, #1
 8006c56:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	021b      	lsls	r3, r3, #8
 8006c5c:	61bb      	str	r3, [r7, #24]
 8006c5e:	e003      	b.n	8006c68 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006c60:	2302      	movs	r3, #2
 8006c62:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d902      	bls.n	8006c74 <HAL_I2S_Init+0x134>
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	2bff      	cmp	r3, #255	@ 0xff
 8006c72:	d907      	bls.n	8006c84 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c78:	f043 0210 	orr.w	r2, r3, #16
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e08f      	b.n	8006da4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	ea42 0103 	orr.w	r1, r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006ca2:	f023 030f 	bic.w	r3, r3, #15
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6851      	ldr	r1, [r2, #4]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6892      	ldr	r2, [r2, #8]
 8006cae:	4311      	orrs	r1, r2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	68d2      	ldr	r2, [r2, #12]
 8006cb4:	4311      	orrs	r1, r2
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6992      	ldr	r2, [r2, #24]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cc6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d161      	bne.n	8006d94 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a38      	ldr	r2, [pc, #224]	@ (8006db4 <HAL_I2S_Init+0x274>)
 8006cd4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a37      	ldr	r2, [pc, #220]	@ (8006db8 <HAL_I2S_Init+0x278>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d101      	bne.n	8006ce4 <HAL_I2S_Init+0x1a4>
 8006ce0:	4b36      	ldr	r3, [pc, #216]	@ (8006dbc <HAL_I2S_Init+0x27c>)
 8006ce2:	e001      	b.n	8006ce8 <HAL_I2S_Init+0x1a8>
 8006ce4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6812      	ldr	r2, [r2, #0]
 8006cee:	4932      	ldr	r1, [pc, #200]	@ (8006db8 <HAL_I2S_Init+0x278>)
 8006cf0:	428a      	cmp	r2, r1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_I2S_Init+0x1b8>
 8006cf4:	4a31      	ldr	r2, [pc, #196]	@ (8006dbc <HAL_I2S_Init+0x27c>)
 8006cf6:	e001      	b.n	8006cfc <HAL_I2S_Init+0x1bc>
 8006cf8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006cfc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006d00:	f023 030f 	bic.w	r3, r3, #15
 8006d04:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8006db8 <HAL_I2S_Init+0x278>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d101      	bne.n	8006d14 <HAL_I2S_Init+0x1d4>
 8006d10:	4b2a      	ldr	r3, [pc, #168]	@ (8006dbc <HAL_I2S_Init+0x27c>)
 8006d12:	e001      	b.n	8006d18 <HAL_I2S_Init+0x1d8>
 8006d14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d18:	2202      	movs	r2, #2
 8006d1a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a25      	ldr	r2, [pc, #148]	@ (8006db8 <HAL_I2S_Init+0x278>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d101      	bne.n	8006d2a <HAL_I2S_Init+0x1ea>
 8006d26:	4b25      	ldr	r3, [pc, #148]	@ (8006dbc <HAL_I2S_Init+0x27c>)
 8006d28:	e001      	b.n	8006d2e <HAL_I2S_Init+0x1ee>
 8006d2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d3a:	d003      	beq.n	8006d44 <HAL_I2S_Init+0x204>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d103      	bne.n	8006d4c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006d44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	e001      	b.n	8006d50 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d64:	4313      	orrs	r3, r2
 8006d66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	897b      	ldrh	r3, [r7, #10]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006d7c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a0d      	ldr	r2, [pc, #52]	@ (8006db8 <HAL_I2S_Init+0x278>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d101      	bne.n	8006d8c <HAL_I2S_Init+0x24c>
 8006d88:	4b0c      	ldr	r3, [pc, #48]	@ (8006dbc <HAL_I2S_Init+0x27c>)
 8006d8a:	e001      	b.n	8006d90 <HAL_I2S_Init+0x250>
 8006d8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d90:	897a      	ldrh	r2, [r7, #10]
 8006d92:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3720      	adds	r7, #32
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	08006ea7 	.word	0x08006ea7
 8006db0:	cccccccd 	.word	0xcccccccd
 8006db4:	08007279 	.word	0x08007279
 8006db8:	40003800 	.word	0x40003800
 8006dbc:	40003400 	.word	0x40003400

08006dc0 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df8:	881a      	ldrh	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e04:	1c9a      	adds	r2, r3, #2
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10e      	bne.n	8006e40 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e30:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff ffcc 	bl	8006dd8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5a:	b292      	uxth	r2, r2
 8006e5c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e62:	1c9a      	adds	r2, r3, #2
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10e      	bne.n	8006e9e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e8e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7fb f9cd 	bl	8002238 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006e9e:	bf00      	nop
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b086      	sub	sp, #24
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d13a      	bne.n	8006f38 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d109      	bne.n	8006ee0 <I2S_IRQHandler+0x3a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed6:	2b40      	cmp	r3, #64	@ 0x40
 8006ed8:	d102      	bne.n	8006ee0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff ffb4 	bl	8006e48 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee6:	2b40      	cmp	r3, #64	@ 0x40
 8006ee8:	d126      	bne.n	8006f38 <I2S_IRQHandler+0x92>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f003 0320 	and.w	r3, r3, #32
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	d11f      	bne.n	8006f38 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006f06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006f08:	2300      	movs	r3, #0
 8006f0a:	613b      	str	r3, [r7, #16]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	613b      	str	r3, [r7, #16]
 8006f1c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f2a:	f043 0202 	orr.w	r2, r3, #2
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fb f998 	bl	8002268 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d136      	bne.n	8006fb2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d109      	bne.n	8006f62 <I2S_IRQHandler+0xbc>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f58:	2b80      	cmp	r3, #128	@ 0x80
 8006f5a:	d102      	bne.n	8006f62 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff ff45 	bl	8006dec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d122      	bne.n	8006fb2 <I2S_IRQHandler+0x10c>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	d11b      	bne.n	8006fb2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f88:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa4:	f043 0204 	orr.w	r2, r3, #4
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fb f95b 	bl	8002268 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fb2:	bf00      	nop
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
 8006fc8:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61bb      	str	r3, [r7, #24]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d001      	beq.n	8006fe2 <HAL_I2SEx_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e13c      	b.n	800725c <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <HAL_I2SEx_TransmitReceive_DMA+0x38>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <HAL_I2SEx_TransmitReceive_DMA+0x38>
 8006fee:	887b      	ldrh	r3, [r7, #2]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_I2SEx_TransmitReceive_DMA+0x3c>
  {
    return  HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e131      	b.n	800725c <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_I2SEx_TransmitReceive_DMA+0x4c>
 8007004:	2302      	movs	r3, #2
 8007006:	e129      	b.n	800725c <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	61bb      	str	r3, [r7, #24]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	2b03      	cmp	r3, #3
 800702c:	d002      	beq.n	8007034 <HAL_I2SEx_TransmitReceive_DMA+0x78>
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	2b05      	cmp	r3, #5
 8007032:	d114      	bne.n	800705e <HAL_I2SEx_TransmitReceive_DMA+0xa2>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8007034:	887b      	ldrh	r3, [r7, #2]
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	b29a      	uxth	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 800703e:	887b      	ldrh	r3, [r7, #2]
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8007048:	887b      	ldrh	r3, [r7, #2]
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8007052:	887b      	ldrh	r3, [r7, #2]
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	865a      	strh	r2, [r3, #50]	@ 0x32
 800705c:	e00b      	b.n	8007076 <HAL_I2SEx_TransmitReceive_DMA+0xba>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	887a      	ldrh	r2, [r7, #2]
 8007062:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	887a      	ldrh	r2, [r7, #2]
 8007068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	887a      	ldrh	r2, [r7, #2]
 800706e:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	887a      	ldrh	r2, [r7, #2]
 8007074:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2205      	movs	r2, #5
 8007080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007088:	4a76      	ldr	r2, [pc, #472]	@ (8007264 <HAL_I2SEx_TransmitReceive_DMA+0x2a8>)
 800708a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007090:	4a75      	ldr	r2, [pc, #468]	@ (8007268 <HAL_I2SEx_TransmitReceive_DMA+0x2ac>)
 8007092:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007098:	4a74      	ldr	r2, [pc, #464]	@ (800726c <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 800709a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a0:	2200      	movs	r2, #0
 80070a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a8:	2200      	movs	r2, #0
 80070aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b0:	4a6e      	ldr	r2, [pc, #440]	@ (800726c <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 80070b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070be:	61bb      	str	r3, [r7, #24]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070c6:	d002      	beq.n	80070ce <HAL_I2SEx_TransmitReceive_DMA+0x112>
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d144      	bne.n	8007158 <HAL_I2SEx_TransmitReceive_DMA+0x19c>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80070ce:	1d3b      	adds	r3, r7, #4
 80070d0:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a65      	ldr	r2, [pc, #404]	@ (8007270 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d101      	bne.n	80070e4 <HAL_I2SEx_TransmitReceive_DMA+0x128>
 80070e0:	4b64      	ldr	r3, [pc, #400]	@ (8007274 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80070e2:	e001      	b.n	80070e8 <HAL_I2SEx_TransmitReceive_DMA+0x12c>
 80070e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070e8:	330c      	adds	r3, #12
 80070ea:	4619      	mov	r1, r3
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	f7fb ff39 	bl	8002f6c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a5c      	ldr	r2, [pc, #368]	@ (8007270 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d101      	bne.n	8007108 <HAL_I2SEx_TransmitReceive_DMA+0x14c>
 8007104:	4b5b      	ldr	r3, [pc, #364]	@ (8007274 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8007106:	e001      	b.n	800710c <HAL_I2SEx_TransmitReceive_DMA+0x150>
 8007108:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4957      	ldr	r1, [pc, #348]	@ (8007270 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8007114:	428b      	cmp	r3, r1
 8007116:	d101      	bne.n	800711c <HAL_I2SEx_TransmitReceive_DMA+0x160>
 8007118:	4b56      	ldr	r3, [pc, #344]	@ (8007274 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800711a:	e001      	b.n	8007120 <HAL_I2SEx_TransmitReceive_DMA+0x164>
 800711c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007120:	f042 0201 	orr.w	r2, r2, #1
 8007124:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8007126:	f107 0308 	add.w	r3, r7, #8
 800712a:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	6819      	ldr	r1, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	461a      	mov	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007140:	b29b      	uxth	r3, r3
 8007142:	f7fb ff13 	bl	8002f6c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0202 	orr.w	r2, r2, #2
 8007154:	605a      	str	r2, [r3, #4]
 8007156:	e056      	b.n	8007206 <HAL_I2SEx_TransmitReceive_DMA+0x24a>
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007166:	d10a      	bne.n	800717e <HAL_I2SEx_TransmitReceive_DMA+0x1c2>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	617b      	str	r3, [r7, #20]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	697b      	ldr	r3, [r7, #20]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800717e:	f107 0308 	add.w	r3, r7, #8
 8007182:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	6819      	ldr	r1, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a37      	ldr	r2, [pc, #220]	@ (8007270 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d101      	bne.n	800719a <HAL_I2SEx_TransmitReceive_DMA+0x1de>
 8007196:	4b37      	ldr	r3, [pc, #220]	@ (8007274 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8007198:	e001      	b.n	800719e <HAL_I2SEx_TransmitReceive_DMA+0x1e2>
 800719a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800719e:	330c      	adds	r3, #12
 80071a0:	461a      	mov	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f7fb fee0 	bl	8002f6c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a2f      	ldr	r2, [pc, #188]	@ (8007270 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d101      	bne.n	80071ba <HAL_I2SEx_TransmitReceive_DMA+0x1fe>
 80071b6:	4b2f      	ldr	r3, [pc, #188]	@ (8007274 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80071b8:	e001      	b.n	80071be <HAL_I2SEx_TransmitReceive_DMA+0x202>
 80071ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	492a      	ldr	r1, [pc, #168]	@ (8007270 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80071c6:	428b      	cmp	r3, r1
 80071c8:	d101      	bne.n	80071ce <HAL_I2SEx_TransmitReceive_DMA+0x212>
 80071ca:	4b2a      	ldr	r3, [pc, #168]	@ (8007274 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80071cc:	e001      	b.n	80071d2 <HAL_I2SEx_TransmitReceive_DMA+0x216>
 80071ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071d2:	f042 0202 	orr.w	r2, r2, #2
 80071d6:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80071d8:	1d3b      	adds	r3, r7, #4
 80071da:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	330c      	adds	r3, #12
 80071e6:	4619      	mov	r1, r3
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f7fb febb 	bl	8002f6c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f042 0201 	orr.w	r2, r2, #1
 8007204:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800721c:	d01d      	beq.n	800725a <HAL_I2SEx_TransmitReceive_DMA+0x29e>
  {
    /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
    __HAL_I2SEXT_ENABLE(hi2s);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a13      	ldr	r2, [pc, #76]	@ (8007270 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d101      	bne.n	800722c <HAL_I2SEx_TransmitReceive_DMA+0x270>
 8007228:	4b12      	ldr	r3, [pc, #72]	@ (8007274 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800722a:	e001      	b.n	8007230 <HAL_I2SEx_TransmitReceive_DMA+0x274>
 800722c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007230:	69da      	ldr	r2, [r3, #28]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	490e      	ldr	r1, [pc, #56]	@ (8007270 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8007238:	428b      	cmp	r3, r1
 800723a:	d101      	bne.n	8007240 <HAL_I2SEx_TransmitReceive_DMA+0x284>
 800723c:	4b0d      	ldr	r3, [pc, #52]	@ (8007274 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800723e:	e001      	b.n	8007244 <HAL_I2SEx_TransmitReceive_DMA+0x288>
 8007240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007244:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007248:	61da      	str	r2, [r3, #28]
    /* Enable I2S peripheral before the I2Sext */
    __HAL_I2S_ENABLE(hi2s);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69da      	ldr	r2, [r3, #28]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007258:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3720      	adds	r7, #32
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	08007521 	.word	0x08007521
 8007268:	0800753d 	.word	0x0800753d
 800726c:	08007615 	.word	0x08007615
 8007270:	40003800 	.word	0x40003800
 8007274:	40003400 	.word	0x40003400

08007278 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a92      	ldr	r2, [pc, #584]	@ (80074d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d101      	bne.n	8007296 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007292:	4b92      	ldr	r3, [pc, #584]	@ (80074dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007294:	e001      	b.n	800729a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007296:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a8b      	ldr	r2, [pc, #556]	@ (80074d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d101      	bne.n	80072b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80072b0:	4b8a      	ldr	r3, [pc, #552]	@ (80074dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80072b2:	e001      	b.n	80072b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80072b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072c4:	d004      	beq.n	80072d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f040 8099 	bne.w	8007402 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d107      	bne.n	80072ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f9d5 	bl	8007694 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d107      	bne.n	8007304 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa78 	bl	80077f4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730a:	2b40      	cmp	r3, #64	@ 0x40
 800730c:	d13a      	bne.n	8007384 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b00      	cmp	r3, #0
 8007316:	d035      	beq.n	8007384 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a6e      	ldr	r2, [pc, #440]	@ (80074d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d101      	bne.n	8007326 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007322:	4b6e      	ldr	r3, [pc, #440]	@ (80074dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007324:	e001      	b.n	800732a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007326:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4969      	ldr	r1, [pc, #420]	@ (80074d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007332:	428b      	cmp	r3, r1
 8007334:	d101      	bne.n	800733a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007336:	4b69      	ldr	r3, [pc, #420]	@ (80074dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007338:	e001      	b.n	800733e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800733a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800733e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007342:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007352:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007376:	f043 0202 	orr.w	r2, r3, #2
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7fa ff72 	bl	8002268 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b08      	cmp	r3, #8
 800738c:	f040 80c3 	bne.w	8007516 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 80bd 	beq.w	8007516 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80073aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a49      	ldr	r2, [pc, #292]	@ (80074d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d101      	bne.n	80073ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80073b6:	4b49      	ldr	r3, [pc, #292]	@ (80074dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073b8:	e001      	b.n	80073be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80073ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4944      	ldr	r1, [pc, #272]	@ (80074d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80073c6:	428b      	cmp	r3, r1
 80073c8:	d101      	bne.n	80073ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80073ca:	4b44      	ldr	r3, [pc, #272]	@ (80074dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80073cc:	e001      	b.n	80073d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80073ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80073d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80073d8:	2300      	movs	r3, #0
 80073da:	60bb      	str	r3, [r7, #8]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	60bb      	str	r3, [r7, #8]
 80073e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073f2:	f043 0204 	orr.w	r2, r3, #4
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fa ff34 	bl	8002268 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007400:	e089      	b.n	8007516 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b02      	cmp	r3, #2
 800740a:	d107      	bne.n	800741c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f96e 	bl	80076f8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b01      	cmp	r3, #1
 8007424:	d107      	bne.n	8007436 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f9ad 	bl	8007790 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800743c:	2b40      	cmp	r3, #64	@ 0x40
 800743e:	d12f      	bne.n	80074a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f003 0320 	and.w	r3, r3, #32
 8007446:	2b00      	cmp	r3, #0
 8007448:	d02a      	beq.n	80074a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007458:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1e      	ldr	r2, [pc, #120]	@ (80074d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d101      	bne.n	8007468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007464:	4b1d      	ldr	r3, [pc, #116]	@ (80074dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007466:	e001      	b.n	800746c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007468:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4919      	ldr	r1, [pc, #100]	@ (80074d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007474:	428b      	cmp	r3, r1
 8007476:	d101      	bne.n	800747c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007478:	4b18      	ldr	r3, [pc, #96]	@ (80074dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800747a:	e001      	b.n	8007480 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800747c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007480:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007484:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007492:	f043 0202 	orr.w	r2, r3, #2
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fa fee4 	bl	8002268 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	f003 0308 	and.w	r3, r3, #8
 80074a6:	2b08      	cmp	r3, #8
 80074a8:	d136      	bne.n	8007518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f003 0320 	and.w	r3, r3, #32
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d031      	beq.n	8007518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a07      	ldr	r2, [pc, #28]	@ (80074d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d101      	bne.n	80074c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80074be:	4b07      	ldr	r3, [pc, #28]	@ (80074dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80074c0:	e001      	b.n	80074c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80074c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4902      	ldr	r1, [pc, #8]	@ (80074d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80074ce:	428b      	cmp	r3, r1
 80074d0:	d106      	bne.n	80074e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80074d2:	4b02      	ldr	r3, [pc, #8]	@ (80074dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80074d4:	e006      	b.n	80074e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80074d6:	bf00      	nop
 80074d8:	40003800 	.word	0x40003800
 80074dc:	40003400 	.word	0x40003400
 80074e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80074e8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80074f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007506:	f043 0204 	orr.w	r2, r3, #4
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fa feaa 	bl	8002268 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007514:	e000      	b.n	8007518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007516:	bf00      	nop
}
 8007518:	bf00      	nop
 800751a:	3720      	adds	r7, #32
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7f9 ff7a 	bl	8001428 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007534:	bf00      	nop
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007548:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d155      	bne.n	80075fe <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800755c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007560:	d006      	beq.n	8007570 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800756c:	2b00      	cmp	r3, #0
 800756e:	d11e      	bne.n	80075ae <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a25      	ldr	r2, [pc, #148]	@ (800760c <I2SEx_TxRxDMACplt+0xd0>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d101      	bne.n	800757e <I2SEx_TxRxDMACplt+0x42>
 800757a:	4b25      	ldr	r3, [pc, #148]	@ (8007610 <I2SEx_TxRxDMACplt+0xd4>)
 800757c:	e001      	b.n	8007582 <I2SEx_TxRxDMACplt+0x46>
 800757e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4920      	ldr	r1, [pc, #128]	@ (800760c <I2SEx_TxRxDMACplt+0xd0>)
 800758a:	428b      	cmp	r3, r1
 800758c:	d101      	bne.n	8007592 <I2SEx_TxRxDMACplt+0x56>
 800758e:	4b20      	ldr	r3, [pc, #128]	@ (8007610 <I2SEx_TxRxDMACplt+0xd4>)
 8007590:	e001      	b.n	8007596 <I2SEx_TxRxDMACplt+0x5a>
 8007592:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007596:	f022 0201 	bic.w	r2, r2, #1
 800759a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0202 	bic.w	r2, r2, #2
 80075aa:	605a      	str	r2, [r3, #4]
 80075ac:	e01d      	b.n	80075ea <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0201 	bic.w	r2, r2, #1
 80075bc:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a12      	ldr	r2, [pc, #72]	@ (800760c <I2SEx_TxRxDMACplt+0xd0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d101      	bne.n	80075cc <I2SEx_TxRxDMACplt+0x90>
 80075c8:	4b11      	ldr	r3, [pc, #68]	@ (8007610 <I2SEx_TxRxDMACplt+0xd4>)
 80075ca:	e001      	b.n	80075d0 <I2SEx_TxRxDMACplt+0x94>
 80075cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	490d      	ldr	r1, [pc, #52]	@ (800760c <I2SEx_TxRxDMACplt+0xd0>)
 80075d8:	428b      	cmp	r3, r1
 80075da:	d101      	bne.n	80075e0 <I2SEx_TxRxDMACplt+0xa4>
 80075dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007610 <I2SEx_TxRxDMACplt+0xd4>)
 80075de:	e001      	b.n	80075e4 <I2SEx_TxRxDMACplt+0xa8>
 80075e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075e4:	f022 0202 	bic.w	r2, r2, #2
 80075e8:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7f9 ff22 	bl	8001448 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007604:	bf00      	nop
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40003800 	.word	0x40003800
 8007610:	40003400 	.word	0x40003400

08007614 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007620:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0203 	bic.w	r2, r2, #3
 8007630:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a15      	ldr	r2, [pc, #84]	@ (800768c <I2SEx_TxRxDMAError+0x78>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d101      	bne.n	8007640 <I2SEx_TxRxDMAError+0x2c>
 800763c:	4b14      	ldr	r3, [pc, #80]	@ (8007690 <I2SEx_TxRxDMAError+0x7c>)
 800763e:	e001      	b.n	8007644 <I2SEx_TxRxDMAError+0x30>
 8007640:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4910      	ldr	r1, [pc, #64]	@ (800768c <I2SEx_TxRxDMAError+0x78>)
 800764c:	428b      	cmp	r3, r1
 800764e:	d101      	bne.n	8007654 <I2SEx_TxRxDMAError+0x40>
 8007650:	4b0f      	ldr	r3, [pc, #60]	@ (8007690 <I2SEx_TxRxDMAError+0x7c>)
 8007652:	e001      	b.n	8007658 <I2SEx_TxRxDMAError+0x44>
 8007654:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007658:	f022 0203 	bic.w	r2, r2, #3
 800765c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007676:	f043 0208 	orr.w	r2, r3, #8
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7fa fdf2 	bl	8002268 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007684:	bf00      	nop
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40003800 	.word	0x40003800
 8007690:	40003400 	.word	0x40003400

08007694 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a0:	1c99      	adds	r1, r3, #2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	6251      	str	r1, [r2, #36]	@ 0x24
 80076a6:	881a      	ldrh	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d113      	bne.n	80076ee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80076d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d106      	bne.n	80076ee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7f9 fead 	bl	8001448 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007704:	1c99      	adds	r1, r3, #2
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6251      	str	r1, [r2, #36]	@ 0x24
 800770a:	8819      	ldrh	r1, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1d      	ldr	r2, [pc, #116]	@ (8007788 <I2SEx_TxISR_I2SExt+0x90>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d101      	bne.n	800771a <I2SEx_TxISR_I2SExt+0x22>
 8007716:	4b1d      	ldr	r3, [pc, #116]	@ (800778c <I2SEx_TxISR_I2SExt+0x94>)
 8007718:	e001      	b.n	800771e <I2SEx_TxISR_I2SExt+0x26>
 800771a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800771e:	460a      	mov	r2, r1
 8007720:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007726:	b29b      	uxth	r3, r3
 8007728:	3b01      	subs	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007734:	b29b      	uxth	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d121      	bne.n	800777e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a12      	ldr	r2, [pc, #72]	@ (8007788 <I2SEx_TxISR_I2SExt+0x90>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d101      	bne.n	8007748 <I2SEx_TxISR_I2SExt+0x50>
 8007744:	4b11      	ldr	r3, [pc, #68]	@ (800778c <I2SEx_TxISR_I2SExt+0x94>)
 8007746:	e001      	b.n	800774c <I2SEx_TxISR_I2SExt+0x54>
 8007748:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	490d      	ldr	r1, [pc, #52]	@ (8007788 <I2SEx_TxISR_I2SExt+0x90>)
 8007754:	428b      	cmp	r3, r1
 8007756:	d101      	bne.n	800775c <I2SEx_TxISR_I2SExt+0x64>
 8007758:	4b0c      	ldr	r3, [pc, #48]	@ (800778c <I2SEx_TxISR_I2SExt+0x94>)
 800775a:	e001      	b.n	8007760 <I2SEx_TxISR_I2SExt+0x68>
 800775c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007760:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007764:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800776a:	b29b      	uxth	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d106      	bne.n	800777e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7f9 fe65 	bl	8001448 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800777e:	bf00      	nop
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	40003800 	.word	0x40003800
 800778c:	40003400 	.word	0x40003400

08007790 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68d8      	ldr	r0, [r3, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a2:	1c99      	adds	r1, r3, #2
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80077a8:	b282      	uxth	r2, r0
 80077aa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d113      	bne.n	80077ec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80077d2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7f9 fe2e 	bl	8001448 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077ec:	bf00      	nop
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a20      	ldr	r2, [pc, #128]	@ (8007884 <I2SEx_RxISR_I2SExt+0x90>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d101      	bne.n	800780a <I2SEx_RxISR_I2SExt+0x16>
 8007806:	4b20      	ldr	r3, [pc, #128]	@ (8007888 <I2SEx_RxISR_I2SExt+0x94>)
 8007808:	e001      	b.n	800780e <I2SEx_RxISR_I2SExt+0x1a>
 800780a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800780e:	68d8      	ldr	r0, [r3, #12]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007814:	1c99      	adds	r1, r3, #2
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800781a:	b282      	uxth	r2, r0
 800781c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d121      	bne.n	800787a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a12      	ldr	r2, [pc, #72]	@ (8007884 <I2SEx_RxISR_I2SExt+0x90>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d101      	bne.n	8007844 <I2SEx_RxISR_I2SExt+0x50>
 8007840:	4b11      	ldr	r3, [pc, #68]	@ (8007888 <I2SEx_RxISR_I2SExt+0x94>)
 8007842:	e001      	b.n	8007848 <I2SEx_RxISR_I2SExt+0x54>
 8007844:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	490d      	ldr	r1, [pc, #52]	@ (8007884 <I2SEx_RxISR_I2SExt+0x90>)
 8007850:	428b      	cmp	r3, r1
 8007852:	d101      	bne.n	8007858 <I2SEx_RxISR_I2SExt+0x64>
 8007854:	4b0c      	ldr	r3, [pc, #48]	@ (8007888 <I2SEx_RxISR_I2SExt+0x94>)
 8007856:	e001      	b.n	800785c <I2SEx_RxISR_I2SExt+0x68>
 8007858:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800785c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007860:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007866:	b29b      	uxth	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d106      	bne.n	800787a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7f9 fde7 	bl	8001448 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	40003800 	.word	0x40003800
 8007888:	40003400 	.word	0x40003400

0800788c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e267      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d075      	beq.n	8007996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80078aa:	4b88      	ldr	r3, [pc, #544]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 030c 	and.w	r3, r3, #12
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	d00c      	beq.n	80078d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078b6:	4b85      	ldr	r3, [pc, #532]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80078be:	2b08      	cmp	r3, #8
 80078c0:	d112      	bne.n	80078e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078c2:	4b82      	ldr	r3, [pc, #520]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078ce:	d10b      	bne.n	80078e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078d0:	4b7e      	ldr	r3, [pc, #504]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d05b      	beq.n	8007994 <HAL_RCC_OscConfig+0x108>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d157      	bne.n	8007994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e242      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078f0:	d106      	bne.n	8007900 <HAL_RCC_OscConfig+0x74>
 80078f2:	4b76      	ldr	r3, [pc, #472]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a75      	ldr	r2, [pc, #468]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 80078f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	e01d      	b.n	800793c <HAL_RCC_OscConfig+0xb0>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007908:	d10c      	bne.n	8007924 <HAL_RCC_OscConfig+0x98>
 800790a:	4b70      	ldr	r3, [pc, #448]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a6f      	ldr	r2, [pc, #444]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 8007910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	4b6d      	ldr	r3, [pc, #436]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a6c      	ldr	r2, [pc, #432]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 800791c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	e00b      	b.n	800793c <HAL_RCC_OscConfig+0xb0>
 8007924:	4b69      	ldr	r3, [pc, #420]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a68      	ldr	r2, [pc, #416]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 800792a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	4b66      	ldr	r3, [pc, #408]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a65      	ldr	r2, [pc, #404]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 8007936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800793a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d013      	beq.n	800796c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007944:	f7fa fd10 	bl	8002368 <HAL_GetTick>
 8007948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800794a:	e008      	b.n	800795e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800794c:	f7fa fd0c 	bl	8002368 <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b64      	cmp	r3, #100	@ 0x64
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e207      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800795e:	4b5b      	ldr	r3, [pc, #364]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0f0      	beq.n	800794c <HAL_RCC_OscConfig+0xc0>
 800796a:	e014      	b.n	8007996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800796c:	f7fa fcfc 	bl	8002368 <HAL_GetTick>
 8007970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007972:	e008      	b.n	8007986 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007974:	f7fa fcf8 	bl	8002368 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b64      	cmp	r3, #100	@ 0x64
 8007980:	d901      	bls.n	8007986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e1f3      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007986:	4b51      	ldr	r3, [pc, #324]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1f0      	bne.n	8007974 <HAL_RCC_OscConfig+0xe8>
 8007992:	e000      	b.n	8007996 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d063      	beq.n	8007a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80079a2:	4b4a      	ldr	r3, [pc, #296]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 030c 	and.w	r3, r3, #12
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00b      	beq.n	80079c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079ae:	4b47      	ldr	r3, [pc, #284]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80079b6:	2b08      	cmp	r3, #8
 80079b8:	d11c      	bne.n	80079f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079ba:	4b44      	ldr	r3, [pc, #272]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d116      	bne.n	80079f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079c6:	4b41      	ldr	r3, [pc, #260]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d005      	beq.n	80079de <HAL_RCC_OscConfig+0x152>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d001      	beq.n	80079de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e1c7      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079de:	4b3b      	ldr	r3, [pc, #236]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	00db      	lsls	r3, r3, #3
 80079ec:	4937      	ldr	r1, [pc, #220]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079f2:	e03a      	b.n	8007a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d020      	beq.n	8007a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079fc:	4b34      	ldr	r3, [pc, #208]	@ (8007ad0 <HAL_RCC_OscConfig+0x244>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a02:	f7fa fcb1 	bl	8002368 <HAL_GetTick>
 8007a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a08:	e008      	b.n	8007a1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a0a:	f7fa fcad 	bl	8002368 <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d901      	bls.n	8007a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e1a8      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d0f0      	beq.n	8007a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a28:	4b28      	ldr	r3, [pc, #160]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	4925      	ldr	r1, [pc, #148]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	600b      	str	r3, [r1, #0]
 8007a3c:	e015      	b.n	8007a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a3e:	4b24      	ldr	r3, [pc, #144]	@ (8007ad0 <HAL_RCC_OscConfig+0x244>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a44:	f7fa fc90 	bl	8002368 <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a4c:	f7fa fc8c 	bl	8002368 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e187      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1f0      	bne.n	8007a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d036      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d016      	beq.n	8007aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a7e:	4b15      	ldr	r3, [pc, #84]	@ (8007ad4 <HAL_RCC_OscConfig+0x248>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a84:	f7fa fc70 	bl	8002368 <HAL_GetTick>
 8007a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a8c:	f7fa fc6c 	bl	8002368 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e167      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8007acc <HAL_RCC_OscConfig+0x240>)
 8007aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0f0      	beq.n	8007a8c <HAL_RCC_OscConfig+0x200>
 8007aaa:	e01b      	b.n	8007ae4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007aac:	4b09      	ldr	r3, [pc, #36]	@ (8007ad4 <HAL_RCC_OscConfig+0x248>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ab2:	f7fa fc59 	bl	8002368 <HAL_GetTick>
 8007ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ab8:	e00e      	b.n	8007ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aba:	f7fa fc55 	bl	8002368 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d907      	bls.n	8007ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e150      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
 8007acc:	40023800 	.word	0x40023800
 8007ad0:	42470000 	.word	0x42470000
 8007ad4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ad8:	4b88      	ldr	r3, [pc, #544]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1ea      	bne.n	8007aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0304 	and.w	r3, r3, #4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 8097 	beq.w	8007c20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007af2:	2300      	movs	r3, #0
 8007af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007af6:	4b81      	ldr	r3, [pc, #516]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10f      	bne.n	8007b22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b02:	2300      	movs	r3, #0
 8007b04:	60bb      	str	r3, [r7, #8]
 8007b06:	4b7d      	ldr	r3, [pc, #500]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b0a:	4a7c      	ldr	r2, [pc, #496]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b12:	4b7a      	ldr	r3, [pc, #488]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b1a:	60bb      	str	r3, [r7, #8]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b22:	4b77      	ldr	r3, [pc, #476]	@ (8007d00 <HAL_RCC_OscConfig+0x474>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d118      	bne.n	8007b60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b2e:	4b74      	ldr	r3, [pc, #464]	@ (8007d00 <HAL_RCC_OscConfig+0x474>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a73      	ldr	r2, [pc, #460]	@ (8007d00 <HAL_RCC_OscConfig+0x474>)
 8007b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b3a:	f7fa fc15 	bl	8002368 <HAL_GetTick>
 8007b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b40:	e008      	b.n	8007b54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b42:	f7fa fc11 	bl	8002368 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e10c      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b54:	4b6a      	ldr	r3, [pc, #424]	@ (8007d00 <HAL_RCC_OscConfig+0x474>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0f0      	beq.n	8007b42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d106      	bne.n	8007b76 <HAL_RCC_OscConfig+0x2ea>
 8007b68:	4b64      	ldr	r3, [pc, #400]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6c:	4a63      	ldr	r2, [pc, #396]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007b6e:	f043 0301 	orr.w	r3, r3, #1
 8007b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b74:	e01c      	b.n	8007bb0 <HAL_RCC_OscConfig+0x324>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	2b05      	cmp	r3, #5
 8007b7c:	d10c      	bne.n	8007b98 <HAL_RCC_OscConfig+0x30c>
 8007b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b82:	4a5e      	ldr	r2, [pc, #376]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007b84:	f043 0304 	orr.w	r3, r3, #4
 8007b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8e:	4a5b      	ldr	r2, [pc, #364]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007b90:	f043 0301 	orr.w	r3, r3, #1
 8007b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b96:	e00b      	b.n	8007bb0 <HAL_RCC_OscConfig+0x324>
 8007b98:	4b58      	ldr	r3, [pc, #352]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9c:	4a57      	ldr	r2, [pc, #348]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007b9e:	f023 0301 	bic.w	r3, r3, #1
 8007ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ba4:	4b55      	ldr	r3, [pc, #340]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba8:	4a54      	ldr	r2, [pc, #336]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007baa:	f023 0304 	bic.w	r3, r3, #4
 8007bae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d015      	beq.n	8007be4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb8:	f7fa fbd6 	bl	8002368 <HAL_GetTick>
 8007bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bbe:	e00a      	b.n	8007bd6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bc0:	f7fa fbd2 	bl	8002368 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e0cb      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bd6:	4b49      	ldr	r3, [pc, #292]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0ee      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x334>
 8007be2:	e014      	b.n	8007c0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007be4:	f7fa fbc0 	bl	8002368 <HAL_GetTick>
 8007be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bea:	e00a      	b.n	8007c02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bec:	f7fa fbbc 	bl	8002368 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e0b5      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c02:	4b3e      	ldr	r3, [pc, #248]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1ee      	bne.n	8007bec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d105      	bne.n	8007c20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c14:	4b39      	ldr	r3, [pc, #228]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c18:	4a38      	ldr	r2, [pc, #224]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007c1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 80a1 	beq.w	8007d6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c2a:	4b34      	ldr	r3, [pc, #208]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 030c 	and.w	r3, r3, #12
 8007c32:	2b08      	cmp	r3, #8
 8007c34:	d05c      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d141      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c3e:	4b31      	ldr	r3, [pc, #196]	@ (8007d04 <HAL_RCC_OscConfig+0x478>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c44:	f7fa fb90 	bl	8002368 <HAL_GetTick>
 8007c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c4a:	e008      	b.n	8007c5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c4c:	f7fa fb8c 	bl	8002368 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e087      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c5e:	4b27      	ldr	r3, [pc, #156]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1f0      	bne.n	8007c4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69da      	ldr	r2, [r3, #28]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c78:	019b      	lsls	r3, r3, #6
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c80:	085b      	lsrs	r3, r3, #1
 8007c82:	3b01      	subs	r3, #1
 8007c84:	041b      	lsls	r3, r3, #16
 8007c86:	431a      	orrs	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8c:	061b      	lsls	r3, r3, #24
 8007c8e:	491b      	ldr	r1, [pc, #108]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c94:	4b1b      	ldr	r3, [pc, #108]	@ (8007d04 <HAL_RCC_OscConfig+0x478>)
 8007c96:	2201      	movs	r2, #1
 8007c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c9a:	f7fa fb65 	bl	8002368 <HAL_GetTick>
 8007c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ca0:	e008      	b.n	8007cb4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ca2:	f7fa fb61 	bl	8002368 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d901      	bls.n	8007cb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e05c      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cb4:	4b11      	ldr	r3, [pc, #68]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d0f0      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x416>
 8007cc0:	e054      	b.n	8007d6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc2:	4b10      	ldr	r3, [pc, #64]	@ (8007d04 <HAL_RCC_OscConfig+0x478>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cc8:	f7fa fb4e 	bl	8002368 <HAL_GetTick>
 8007ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cce:	e008      	b.n	8007ce2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cd0:	f7fa fb4a 	bl	8002368 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e045      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ce2:	4b06      	ldr	r3, [pc, #24]	@ (8007cfc <HAL_RCC_OscConfig+0x470>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1f0      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x444>
 8007cee:	e03d      	b.n	8007d6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d107      	bne.n	8007d08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e038      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
 8007cfc:	40023800 	.word	0x40023800
 8007d00:	40007000 	.word	0x40007000
 8007d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d08:	4b1b      	ldr	r3, [pc, #108]	@ (8007d78 <HAL_RCC_OscConfig+0x4ec>)
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d028      	beq.n	8007d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d121      	bne.n	8007d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d11a      	bne.n	8007d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007d38:	4013      	ands	r3, r2
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d111      	bne.n	8007d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4e:	085b      	lsrs	r3, r3, #1
 8007d50:	3b01      	subs	r3, #1
 8007d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d107      	bne.n	8007d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d001      	beq.n	8007d6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e000      	b.n	8007d6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3718      	adds	r7, #24
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	40023800 	.word	0x40023800

08007d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e0cc      	b.n	8007f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d90:	4b68      	ldr	r3, [pc, #416]	@ (8007f34 <HAL_RCC_ClockConfig+0x1b8>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0307 	and.w	r3, r3, #7
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d90c      	bls.n	8007db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d9e:	4b65      	ldr	r3, [pc, #404]	@ (8007f34 <HAL_RCC_ClockConfig+0x1b8>)
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	b2d2      	uxtb	r2, r2
 8007da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007da6:	4b63      	ldr	r3, [pc, #396]	@ (8007f34 <HAL_RCC_ClockConfig+0x1b8>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0307 	and.w	r3, r3, #7
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d001      	beq.n	8007db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e0b8      	b.n	8007f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0302 	and.w	r3, r3, #2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d020      	beq.n	8007e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0304 	and.w	r3, r3, #4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d005      	beq.n	8007ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007dd0:	4b59      	ldr	r3, [pc, #356]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	4a58      	ldr	r2, [pc, #352]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007dda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0308 	and.w	r3, r3, #8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d005      	beq.n	8007df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007de8:	4b53      	ldr	r3, [pc, #332]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	4a52      	ldr	r2, [pc, #328]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007dee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007df4:	4b50      	ldr	r3, [pc, #320]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	494d      	ldr	r1, [pc, #308]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d044      	beq.n	8007e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d107      	bne.n	8007e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e1a:	4b47      	ldr	r3, [pc, #284]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d119      	bne.n	8007e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e07f      	b.n	8007f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d003      	beq.n	8007e3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d107      	bne.n	8007e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d109      	bne.n	8007e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e06f      	b.n	8007f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e067      	b.n	8007f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e5a:	4b37      	ldr	r3, [pc, #220]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f023 0203 	bic.w	r2, r3, #3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	4934      	ldr	r1, [pc, #208]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e6c:	f7fa fa7c 	bl	8002368 <HAL_GetTick>
 8007e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e72:	e00a      	b.n	8007e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e74:	f7fa fa78 	bl	8002368 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e04f      	b.n	8007f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f003 020c 	and.w	r2, r3, #12
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d1eb      	bne.n	8007e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e9c:	4b25      	ldr	r3, [pc, #148]	@ (8007f34 <HAL_RCC_ClockConfig+0x1b8>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0307 	and.w	r3, r3, #7
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d20c      	bcs.n	8007ec4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eaa:	4b22      	ldr	r3, [pc, #136]	@ (8007f34 <HAL_RCC_ClockConfig+0x1b8>)
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	b2d2      	uxtb	r2, r2
 8007eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eb2:	4b20      	ldr	r3, [pc, #128]	@ (8007f34 <HAL_RCC_ClockConfig+0x1b8>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d001      	beq.n	8007ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e032      	b.n	8007f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d008      	beq.n	8007ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ed0:	4b19      	ldr	r3, [pc, #100]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	4916      	ldr	r1, [pc, #88]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0308 	and.w	r3, r3, #8
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d009      	beq.n	8007f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007eee:	4b12      	ldr	r3, [pc, #72]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	490e      	ldr	r1, [pc, #56]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f02:	f000 f821 	bl	8007f48 <HAL_RCC_GetSysClockFreq>
 8007f06:	4602      	mov	r2, r0
 8007f08:	4b0b      	ldr	r3, [pc, #44]	@ (8007f38 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	091b      	lsrs	r3, r3, #4
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	490a      	ldr	r1, [pc, #40]	@ (8007f3c <HAL_RCC_ClockConfig+0x1c0>)
 8007f14:	5ccb      	ldrb	r3, [r1, r3]
 8007f16:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1a:	4a09      	ldr	r2, [pc, #36]	@ (8007f40 <HAL_RCC_ClockConfig+0x1c4>)
 8007f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007f1e:	4b09      	ldr	r3, [pc, #36]	@ (8007f44 <HAL_RCC_ClockConfig+0x1c8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fa f9dc 	bl	80022e0 <HAL_InitTick>

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	40023c00 	.word	0x40023c00
 8007f38:	40023800 	.word	0x40023800
 8007f3c:	0800d3d0 	.word	0x0800d3d0
 8007f40:	20000004 	.word	0x20000004
 8007f44:	20000008 	.word	0x20000008

08007f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f4c:	b094      	sub	sp, #80	@ 0x50
 8007f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f60:	4b79      	ldr	r3, [pc, #484]	@ (8008148 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f003 030c 	and.w	r3, r3, #12
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d00d      	beq.n	8007f88 <HAL_RCC_GetSysClockFreq+0x40>
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	f200 80e1 	bhi.w	8008134 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <HAL_RCC_GetSysClockFreq+0x34>
 8007f76:	2b04      	cmp	r3, #4
 8007f78:	d003      	beq.n	8007f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f7a:	e0db      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f7c:	4b73      	ldr	r3, [pc, #460]	@ (800814c <HAL_RCC_GetSysClockFreq+0x204>)
 8007f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f80:	e0db      	b.n	800813a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f82:	4b72      	ldr	r3, [pc, #456]	@ (800814c <HAL_RCC_GetSysClockFreq+0x204>)
 8007f84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007f86:	e0d8      	b.n	800813a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f88:	4b6f      	ldr	r3, [pc, #444]	@ (8008148 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f92:	4b6d      	ldr	r3, [pc, #436]	@ (8008148 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d063      	beq.n	8008066 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8008148 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	099b      	lsrs	r3, r3, #6
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007fba:	4622      	mov	r2, r4
 8007fbc:	462b      	mov	r3, r5
 8007fbe:	f04f 0000 	mov.w	r0, #0
 8007fc2:	f04f 0100 	mov.w	r1, #0
 8007fc6:	0159      	lsls	r1, r3, #5
 8007fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fcc:	0150      	lsls	r0, r2, #5
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	1a51      	subs	r1, r2, r1
 8007fd6:	6139      	str	r1, [r7, #16]
 8007fd8:	4629      	mov	r1, r5
 8007fda:	eb63 0301 	sbc.w	r3, r3, r1
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fec:	4659      	mov	r1, fp
 8007fee:	018b      	lsls	r3, r1, #6
 8007ff0:	4651      	mov	r1, sl
 8007ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ff6:	4651      	mov	r1, sl
 8007ff8:	018a      	lsls	r2, r1, #6
 8007ffa:	4651      	mov	r1, sl
 8007ffc:	ebb2 0801 	subs.w	r8, r2, r1
 8008000:	4659      	mov	r1, fp
 8008002:	eb63 0901 	sbc.w	r9, r3, r1
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800801a:	4690      	mov	r8, r2
 800801c:	4699      	mov	r9, r3
 800801e:	4623      	mov	r3, r4
 8008020:	eb18 0303 	adds.w	r3, r8, r3
 8008024:	60bb      	str	r3, [r7, #8]
 8008026:	462b      	mov	r3, r5
 8008028:	eb49 0303 	adc.w	r3, r9, r3
 800802c:	60fb      	str	r3, [r7, #12]
 800802e:	f04f 0200 	mov.w	r2, #0
 8008032:	f04f 0300 	mov.w	r3, #0
 8008036:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800803a:	4629      	mov	r1, r5
 800803c:	028b      	lsls	r3, r1, #10
 800803e:	4621      	mov	r1, r4
 8008040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008044:	4621      	mov	r1, r4
 8008046:	028a      	lsls	r2, r1, #10
 8008048:	4610      	mov	r0, r2
 800804a:	4619      	mov	r1, r3
 800804c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800804e:	2200      	movs	r2, #0
 8008050:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008054:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008058:	f7f8 fc74 	bl	8000944 <__aeabi_uldivmod>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4613      	mov	r3, r2
 8008062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008064:	e058      	b.n	8008118 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008066:	4b38      	ldr	r3, [pc, #224]	@ (8008148 <HAL_RCC_GetSysClockFreq+0x200>)
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	099b      	lsrs	r3, r3, #6
 800806c:	2200      	movs	r2, #0
 800806e:	4618      	mov	r0, r3
 8008070:	4611      	mov	r1, r2
 8008072:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008076:	623b      	str	r3, [r7, #32]
 8008078:	2300      	movs	r3, #0
 800807a:	627b      	str	r3, [r7, #36]	@ 0x24
 800807c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	f04f 0000 	mov.w	r0, #0
 8008088:	f04f 0100 	mov.w	r1, #0
 800808c:	0159      	lsls	r1, r3, #5
 800808e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008092:	0150      	lsls	r0, r2, #5
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4641      	mov	r1, r8
 800809a:	ebb2 0a01 	subs.w	sl, r2, r1
 800809e:	4649      	mov	r1, r9
 80080a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80080a4:	f04f 0200 	mov.w	r2, #0
 80080a8:	f04f 0300 	mov.w	r3, #0
 80080ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80080b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80080b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80080b8:	ebb2 040a 	subs.w	r4, r2, sl
 80080bc:	eb63 050b 	sbc.w	r5, r3, fp
 80080c0:	f04f 0200 	mov.w	r2, #0
 80080c4:	f04f 0300 	mov.w	r3, #0
 80080c8:	00eb      	lsls	r3, r5, #3
 80080ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080ce:	00e2      	lsls	r2, r4, #3
 80080d0:	4614      	mov	r4, r2
 80080d2:	461d      	mov	r5, r3
 80080d4:	4643      	mov	r3, r8
 80080d6:	18e3      	adds	r3, r4, r3
 80080d8:	603b      	str	r3, [r7, #0]
 80080da:	464b      	mov	r3, r9
 80080dc:	eb45 0303 	adc.w	r3, r5, r3
 80080e0:	607b      	str	r3, [r7, #4]
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080ee:	4629      	mov	r1, r5
 80080f0:	028b      	lsls	r3, r1, #10
 80080f2:	4621      	mov	r1, r4
 80080f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080f8:	4621      	mov	r1, r4
 80080fa:	028a      	lsls	r2, r1, #10
 80080fc:	4610      	mov	r0, r2
 80080fe:	4619      	mov	r1, r3
 8008100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008102:	2200      	movs	r2, #0
 8008104:	61bb      	str	r3, [r7, #24]
 8008106:	61fa      	str	r2, [r7, #28]
 8008108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800810c:	f7f8 fc1a 	bl	8000944 <__aeabi_uldivmod>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4613      	mov	r3, r2
 8008116:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008118:	4b0b      	ldr	r3, [pc, #44]	@ (8008148 <HAL_RCC_GetSysClockFreq+0x200>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	0c1b      	lsrs	r3, r3, #16
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	3301      	adds	r3, #1
 8008124:	005b      	lsls	r3, r3, #1
 8008126:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008128:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800812a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800812c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008130:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008132:	e002      	b.n	800813a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008134:	4b05      	ldr	r3, [pc, #20]	@ (800814c <HAL_RCC_GetSysClockFreq+0x204>)
 8008136:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800813a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800813c:	4618      	mov	r0, r3
 800813e:	3750      	adds	r7, #80	@ 0x50
 8008140:	46bd      	mov	sp, r7
 8008142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008146:	bf00      	nop
 8008148:	40023800 	.word	0x40023800
 800814c:	00f42400 	.word	0x00f42400

08008150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008150:	b480      	push	{r7}
 8008152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008154:	4b03      	ldr	r3, [pc, #12]	@ (8008164 <HAL_RCC_GetHCLKFreq+0x14>)
 8008156:	681b      	ldr	r3, [r3, #0]
}
 8008158:	4618      	mov	r0, r3
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20000004 	.word	0x20000004

08008168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800816c:	f7ff fff0 	bl	8008150 <HAL_RCC_GetHCLKFreq>
 8008170:	4602      	mov	r2, r0
 8008172:	4b05      	ldr	r3, [pc, #20]	@ (8008188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	0a9b      	lsrs	r3, r3, #10
 8008178:	f003 0307 	and.w	r3, r3, #7
 800817c:	4903      	ldr	r1, [pc, #12]	@ (800818c <HAL_RCC_GetPCLK1Freq+0x24>)
 800817e:	5ccb      	ldrb	r3, [r1, r3]
 8008180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008184:	4618      	mov	r0, r3
 8008186:	bd80      	pop	{r7, pc}
 8008188:	40023800 	.word	0x40023800
 800818c:	0800d3e0 	.word	0x0800d3e0

08008190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008194:	f7ff ffdc 	bl	8008150 <HAL_RCC_GetHCLKFreq>
 8008198:	4602      	mov	r2, r0
 800819a:	4b05      	ldr	r3, [pc, #20]	@ (80081b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	0b5b      	lsrs	r3, r3, #13
 80081a0:	f003 0307 	and.w	r3, r3, #7
 80081a4:	4903      	ldr	r1, [pc, #12]	@ (80081b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081a6:	5ccb      	ldrb	r3, [r1, r3]
 80081a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	40023800 	.word	0x40023800
 80081b4:	0800d3e0 	.word	0x0800d3e0

080081b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d105      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d035      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80081e0:	4b62      	ldr	r3, [pc, #392]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081e6:	f7fa f8bf 	bl	8002368 <HAL_GetTick>
 80081ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081ec:	e008      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80081ee:	f7fa f8bb 	bl	8002368 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d901      	bls.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e0b0      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008200:	4b5b      	ldr	r3, [pc, #364]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1f0      	bne.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	019a      	lsls	r2, r3, #6
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	071b      	lsls	r3, r3, #28
 8008218:	4955      	ldr	r1, [pc, #340]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008220:	4b52      	ldr	r3, [pc, #328]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008222:	2201      	movs	r2, #1
 8008224:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008226:	f7fa f89f 	bl	8002368 <HAL_GetTick>
 800822a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800822c:	e008      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800822e:	f7fa f89b 	bl	8002368 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d901      	bls.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e090      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008240:	4b4b      	ldr	r3, [pc, #300]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0f0      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 8083 	beq.w	8008360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800825a:	2300      	movs	r3, #0
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	4b44      	ldr	r3, [pc, #272]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008262:	4a43      	ldr	r2, [pc, #268]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008268:	6413      	str	r3, [r2, #64]	@ 0x40
 800826a:	4b41      	ldr	r3, [pc, #260]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800826c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008276:	4b3f      	ldr	r3, [pc, #252]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a3e      	ldr	r2, [pc, #248]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800827c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008280:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008282:	f7fa f871 	bl	8002368 <HAL_GetTick>
 8008286:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008288:	e008      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800828a:	f7fa f86d 	bl	8002368 <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d901      	bls.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e062      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800829c:	4b35      	ldr	r3, [pc, #212]	@ (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d0f0      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80082a8:	4b31      	ldr	r3, [pc, #196]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80082aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082b0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d02f      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d028      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80082c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80082d0:	4b29      	ldr	r3, [pc, #164]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80082d2:	2201      	movs	r2, #1
 80082d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80082d6:	4b28      	ldr	r3, [pc, #160]	@ (8008378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80082dc:	4a24      	ldr	r2, [pc, #144]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80082e2:	4b23      	ldr	r3, [pc, #140]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80082e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d114      	bne.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80082ee:	f7fa f83b 	bl	8002368 <HAL_GetTick>
 80082f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082f4:	e00a      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082f6:	f7fa f837 	bl	8002368 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008304:	4293      	cmp	r3, r2
 8008306:	d901      	bls.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e02a      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800830c:	4b18      	ldr	r3, [pc, #96]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800830e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0ee      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008324:	d10d      	bne.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008326:	4b12      	ldr	r3, [pc, #72]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800833a:	490d      	ldr	r1, [pc, #52]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800833c:	4313      	orrs	r3, r2
 800833e:	608b      	str	r3, [r1, #8]
 8008340:	e005      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008342:	4b0b      	ldr	r3, [pc, #44]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	4a0a      	ldr	r2, [pc, #40]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008348:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800834c:	6093      	str	r3, [r2, #8]
 800834e:	4b08      	ldr	r3, [pc, #32]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008350:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800835a:	4905      	ldr	r1, [pc, #20]	@ (8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800835c:	4313      	orrs	r3, r2
 800835e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	42470068 	.word	0x42470068
 8008370:	40023800 	.word	0x40023800
 8008374:	40007000 	.word	0x40007000
 8008378:	42470e40 	.word	0x42470e40

0800837c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d13f      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800839a:	4b24      	ldr	r3, [pc, #144]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083a2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d006      	beq.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80083b0:	d12f      	bne.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80083b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80083b4:	617b      	str	r3, [r7, #20]
          break;
 80083b6:	e02f      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80083b8:	4b1c      	ldr	r3, [pc, #112]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083c4:	d108      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80083c6:	4b19      	ldr	r3, [pc, #100]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083ce:	4a19      	ldr	r2, [pc, #100]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80083d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d4:	613b      	str	r3, [r7, #16]
 80083d6:	e007      	b.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80083d8:	4b14      	ldr	r3, [pc, #80]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083e0:	4a14      	ldr	r2, [pc, #80]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80083e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80083e8:	4b10      	ldr	r3, [pc, #64]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80083ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083ee:	099b      	lsrs	r3, r3, #6
 80083f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	fb02 f303 	mul.w	r3, r2, r3
 80083fa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80083fc:	4b0b      	ldr	r3, [pc, #44]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80083fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008402:	0f1b      	lsrs	r3, r3, #28
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	fbb2 f3f3 	udiv	r3, r2, r3
 800840e:	617b      	str	r3, [r7, #20]
          break;
 8008410:	e002      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8008412:	2300      	movs	r3, #0
 8008414:	617b      	str	r3, [r7, #20]
          break;
 8008416:	bf00      	nop
        }
      }
      break;
 8008418:	e000      	b.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800841a:	bf00      	nop
    }
  }
  return frequency;
 800841c:	697b      	ldr	r3, [r7, #20]
}
 800841e:	4618      	mov	r0, r3
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40023800 	.word	0x40023800
 8008430:	00bb8000 	.word	0x00bb8000
 8008434:	00f42400 	.word	0x00f42400

08008438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e07b      	b.n	8008542 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844e:	2b00      	cmp	r3, #0
 8008450:	d108      	bne.n	8008464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800845a:	d009      	beq.n	8008470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	61da      	str	r2, [r3, #28]
 8008462:	e005      	b.n	8008470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d106      	bne.n	8008490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7f9 fc3c 	bl	8001d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80084b8:	431a      	orrs	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084c2:	431a      	orrs	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	431a      	orrs	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	431a      	orrs	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084e0:	431a      	orrs	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084ea:	431a      	orrs	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084f4:	ea42 0103 	orr.w	r1, r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	0c1b      	lsrs	r3, r3, #16
 800850e:	f003 0104 	and.w	r1, r3, #4
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008516:	f003 0210 	and.w	r2, r3, #16
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69da      	ldr	r2, [r3, #28]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008530:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e041      	b.n	80085e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b00      	cmp	r3, #0
 8008566:	d106      	bne.n	8008576 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7f9 fd55 	bl	8002020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2202      	movs	r2, #2
 800857a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3304      	adds	r3, #4
 8008586:	4619      	mov	r1, r3
 8008588:	4610      	mov	r0, r2
 800858a:	f000 fa79 	bl	8008a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d001      	beq.n	8008600 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e046      	b.n	800868e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a23      	ldr	r2, [pc, #140]	@ (800869c <HAL_TIM_Base_Start+0xb4>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d022      	beq.n	8008658 <HAL_TIM_Base_Start+0x70>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861a:	d01d      	beq.n	8008658 <HAL_TIM_Base_Start+0x70>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a1f      	ldr	r2, [pc, #124]	@ (80086a0 <HAL_TIM_Base_Start+0xb8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d018      	beq.n	8008658 <HAL_TIM_Base_Start+0x70>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a1e      	ldr	r2, [pc, #120]	@ (80086a4 <HAL_TIM_Base_Start+0xbc>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d013      	beq.n	8008658 <HAL_TIM_Base_Start+0x70>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1c      	ldr	r2, [pc, #112]	@ (80086a8 <HAL_TIM_Base_Start+0xc0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00e      	beq.n	8008658 <HAL_TIM_Base_Start+0x70>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a1b      	ldr	r2, [pc, #108]	@ (80086ac <HAL_TIM_Base_Start+0xc4>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d009      	beq.n	8008658 <HAL_TIM_Base_Start+0x70>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a19      	ldr	r2, [pc, #100]	@ (80086b0 <HAL_TIM_Base_Start+0xc8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d004      	beq.n	8008658 <HAL_TIM_Base_Start+0x70>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a18      	ldr	r2, [pc, #96]	@ (80086b4 <HAL_TIM_Base_Start+0xcc>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d111      	bne.n	800867c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b06      	cmp	r3, #6
 8008668:	d010      	beq.n	800868c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0201 	orr.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867a:	e007      	b.n	800868c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0201 	orr.w	r2, r2, #1
 800868a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	40010000 	.word	0x40010000
 80086a0:	40000400 	.word	0x40000400
 80086a4:	40000800 	.word	0x40000800
 80086a8:	40000c00 	.word	0x40000c00
 80086ac:	40010400 	.word	0x40010400
 80086b0:	40014000 	.word	0x40014000
 80086b4:	40001800 	.word	0x40001800

080086b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e041      	b.n	800874e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d106      	bne.n	80086e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f839 	bl	8008756 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	f000 f9c2 	bl	8008a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800875e:	bf00      	nop
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
	...

0800876c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008782:	2b01      	cmp	r3, #1
 8008784:	d101      	bne.n	800878a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008786:	2302      	movs	r3, #2
 8008788:	e0ae      	b.n	80088e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b0c      	cmp	r3, #12
 8008796:	f200 809f 	bhi.w	80088d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800879a:	a201      	add	r2, pc, #4	@ (adr r2, 80087a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800879c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a0:	080087d5 	.word	0x080087d5
 80087a4:	080088d9 	.word	0x080088d9
 80087a8:	080088d9 	.word	0x080088d9
 80087ac:	080088d9 	.word	0x080088d9
 80087b0:	08008815 	.word	0x08008815
 80087b4:	080088d9 	.word	0x080088d9
 80087b8:	080088d9 	.word	0x080088d9
 80087bc:	080088d9 	.word	0x080088d9
 80087c0:	08008857 	.word	0x08008857
 80087c4:	080088d9 	.word	0x080088d9
 80087c8:	080088d9 	.word	0x080088d9
 80087cc:	080088d9 	.word	0x080088d9
 80087d0:	08008897 	.word	0x08008897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68b9      	ldr	r1, [r7, #8]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 f9fc 	bl	8008bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	699a      	ldr	r2, [r3, #24]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0208 	orr.w	r2, r2, #8
 80087ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0204 	bic.w	r2, r2, #4
 80087fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6999      	ldr	r1, [r3, #24]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	691a      	ldr	r2, [r3, #16]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	619a      	str	r2, [r3, #24]
      break;
 8008812:	e064      	b.n	80088de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	4618      	mov	r0, r3
 800881c:	f000 fa4c 	bl	8008cb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	699a      	ldr	r2, [r3, #24]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800882e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	699a      	ldr	r2, [r3, #24]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800883e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6999      	ldr	r1, [r3, #24]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	021a      	lsls	r2, r3, #8
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	619a      	str	r2, [r3, #24]
      break;
 8008854:	e043      	b.n	80088de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 faa1 	bl	8008da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69da      	ldr	r2, [r3, #28]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f042 0208 	orr.w	r2, r2, #8
 8008870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69da      	ldr	r2, [r3, #28]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f022 0204 	bic.w	r2, r2, #4
 8008880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69d9      	ldr	r1, [r3, #28]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	691a      	ldr	r2, [r3, #16]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	61da      	str	r2, [r3, #28]
      break;
 8008894:	e023      	b.n	80088de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68b9      	ldr	r1, [r7, #8]
 800889c:	4618      	mov	r0, r3
 800889e:	f000 faf5 	bl	8008e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69da      	ldr	r2, [r3, #28]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69da      	ldr	r2, [r3, #28]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69d9      	ldr	r1, [r3, #28]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	021a      	lsls	r2, r3, #8
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	61da      	str	r2, [r3, #28]
      break;
 80088d6:	e002      	b.n	80088de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
      break;
 80088dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_TIM_ConfigClockSource+0x1c>
 8008908:	2302      	movs	r3, #2
 800890a:	e0b4      	b.n	8008a76 <HAL_TIM_ConfigClockSource+0x186>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800892a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008944:	d03e      	beq.n	80089c4 <HAL_TIM_ConfigClockSource+0xd4>
 8008946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800894a:	f200 8087 	bhi.w	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800894e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008952:	f000 8086 	beq.w	8008a62 <HAL_TIM_ConfigClockSource+0x172>
 8008956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800895a:	d87f      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800895c:	2b70      	cmp	r3, #112	@ 0x70
 800895e:	d01a      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0xa6>
 8008960:	2b70      	cmp	r3, #112	@ 0x70
 8008962:	d87b      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 8008964:	2b60      	cmp	r3, #96	@ 0x60
 8008966:	d050      	beq.n	8008a0a <HAL_TIM_ConfigClockSource+0x11a>
 8008968:	2b60      	cmp	r3, #96	@ 0x60
 800896a:	d877      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800896c:	2b50      	cmp	r3, #80	@ 0x50
 800896e:	d03c      	beq.n	80089ea <HAL_TIM_ConfigClockSource+0xfa>
 8008970:	2b50      	cmp	r3, #80	@ 0x50
 8008972:	d873      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 8008974:	2b40      	cmp	r3, #64	@ 0x40
 8008976:	d058      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x13a>
 8008978:	2b40      	cmp	r3, #64	@ 0x40
 800897a:	d86f      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800897c:	2b30      	cmp	r3, #48	@ 0x30
 800897e:	d064      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x15a>
 8008980:	2b30      	cmp	r3, #48	@ 0x30
 8008982:	d86b      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 8008984:	2b20      	cmp	r3, #32
 8008986:	d060      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x15a>
 8008988:	2b20      	cmp	r3, #32
 800898a:	d867      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800898c:	2b00      	cmp	r3, #0
 800898e:	d05c      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x15a>
 8008990:	2b10      	cmp	r3, #16
 8008992:	d05a      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x15a>
 8008994:	e062      	b.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089a6:	f000 fb41 	bl	800902c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80089b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	609a      	str	r2, [r3, #8]
      break;
 80089c2:	e04f      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089d4:	f000 fb2a 	bl	800902c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689a      	ldr	r2, [r3, #8]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089e6:	609a      	str	r2, [r3, #8]
      break;
 80089e8:	e03c      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089f6:	461a      	mov	r2, r3
 80089f8:	f000 fa9e 	bl	8008f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2150      	movs	r1, #80	@ 0x50
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 faf7 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008a08:	e02c      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a16:	461a      	mov	r2, r3
 8008a18:	f000 fabd 	bl	8008f96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2160      	movs	r1, #96	@ 0x60
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fae7 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008a28:	e01c      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a36:	461a      	mov	r2, r3
 8008a38:	f000 fa7e 	bl	8008f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2140      	movs	r1, #64	@ 0x40
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fad7 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008a48:	e00c      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f000 face 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008a5a:	e003      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a60:	e000      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a46      	ldr	r2, [pc, #280]	@ (8008bac <TIM_Base_SetConfig+0x12c>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d013      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a9e:	d00f      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a43      	ldr	r2, [pc, #268]	@ (8008bb0 <TIM_Base_SetConfig+0x130>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d00b      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a42      	ldr	r2, [pc, #264]	@ (8008bb4 <TIM_Base_SetConfig+0x134>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d007      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a41      	ldr	r2, [pc, #260]	@ (8008bb8 <TIM_Base_SetConfig+0x138>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d003      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a40      	ldr	r2, [pc, #256]	@ (8008bbc <TIM_Base_SetConfig+0x13c>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d108      	bne.n	8008ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a35      	ldr	r2, [pc, #212]	@ (8008bac <TIM_Base_SetConfig+0x12c>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d02b      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae0:	d027      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a32      	ldr	r2, [pc, #200]	@ (8008bb0 <TIM_Base_SetConfig+0x130>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d023      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a31      	ldr	r2, [pc, #196]	@ (8008bb4 <TIM_Base_SetConfig+0x134>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d01f      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a30      	ldr	r2, [pc, #192]	@ (8008bb8 <TIM_Base_SetConfig+0x138>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d01b      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a2f      	ldr	r2, [pc, #188]	@ (8008bbc <TIM_Base_SetConfig+0x13c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d017      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a2e      	ldr	r2, [pc, #184]	@ (8008bc0 <TIM_Base_SetConfig+0x140>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d013      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8008bc4 <TIM_Base_SetConfig+0x144>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d00f      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a2c      	ldr	r2, [pc, #176]	@ (8008bc8 <TIM_Base_SetConfig+0x148>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00b      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8008bcc <TIM_Base_SetConfig+0x14c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d007      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a2a      	ldr	r2, [pc, #168]	@ (8008bd0 <TIM_Base_SetConfig+0x150>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d003      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a29      	ldr	r2, [pc, #164]	@ (8008bd4 <TIM_Base_SetConfig+0x154>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d108      	bne.n	8008b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a10      	ldr	r2, [pc, #64]	@ (8008bac <TIM_Base_SetConfig+0x12c>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d003      	beq.n	8008b78 <TIM_Base_SetConfig+0xf8>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a12      	ldr	r2, [pc, #72]	@ (8008bbc <TIM_Base_SetConfig+0x13c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d103      	bne.n	8008b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	691a      	ldr	r2, [r3, #16]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d105      	bne.n	8008b9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	f023 0201 	bic.w	r2, r3, #1
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	611a      	str	r2, [r3, #16]
  }
}
 8008b9e:	bf00      	nop
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	40010000 	.word	0x40010000
 8008bb0:	40000400 	.word	0x40000400
 8008bb4:	40000800 	.word	0x40000800
 8008bb8:	40000c00 	.word	0x40000c00
 8008bbc:	40010400 	.word	0x40010400
 8008bc0:	40014000 	.word	0x40014000
 8008bc4:	40014400 	.word	0x40014400
 8008bc8:	40014800 	.word	0x40014800
 8008bcc:	40001800 	.word	0x40001800
 8008bd0:	40001c00 	.word	0x40001c00
 8008bd4:	40002000 	.word	0x40002000

08008bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a1b      	ldr	r3, [r3, #32]
 8008bec:	f023 0201 	bic.w	r2, r3, #1
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 0303 	bic.w	r3, r3, #3
 8008c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f023 0302 	bic.w	r3, r3, #2
 8008c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a20      	ldr	r2, [pc, #128]	@ (8008cb0 <TIM_OC1_SetConfig+0xd8>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d003      	beq.n	8008c3c <TIM_OC1_SetConfig+0x64>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a1f      	ldr	r2, [pc, #124]	@ (8008cb4 <TIM_OC1_SetConfig+0xdc>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d10c      	bne.n	8008c56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f023 0308 	bic.w	r3, r3, #8
 8008c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f023 0304 	bic.w	r3, r3, #4
 8008c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a15      	ldr	r2, [pc, #84]	@ (8008cb0 <TIM_OC1_SetConfig+0xd8>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d003      	beq.n	8008c66 <TIM_OC1_SetConfig+0x8e>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a14      	ldr	r2, [pc, #80]	@ (8008cb4 <TIM_OC1_SetConfig+0xdc>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d111      	bne.n	8008c8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	621a      	str	r2, [r3, #32]
}
 8008ca4:	bf00      	nop
 8008ca6:	371c      	adds	r7, #28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	40010000 	.word	0x40010000
 8008cb4:	40010400 	.word	0x40010400

08008cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b087      	sub	sp, #28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	f023 0210 	bic.w	r2, r3, #16
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	021b      	lsls	r3, r3, #8
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f023 0320 	bic.w	r3, r3, #32
 8008d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a22      	ldr	r2, [pc, #136]	@ (8008d9c <TIM_OC2_SetConfig+0xe4>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d003      	beq.n	8008d20 <TIM_OC2_SetConfig+0x68>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a21      	ldr	r2, [pc, #132]	@ (8008da0 <TIM_OC2_SetConfig+0xe8>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d10d      	bne.n	8008d3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	011b      	lsls	r3, r3, #4
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a17      	ldr	r2, [pc, #92]	@ (8008d9c <TIM_OC2_SetConfig+0xe4>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d003      	beq.n	8008d4c <TIM_OC2_SetConfig+0x94>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a16      	ldr	r2, [pc, #88]	@ (8008da0 <TIM_OC2_SetConfig+0xe8>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d113      	bne.n	8008d74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	621a      	str	r2, [r3, #32]
}
 8008d8e:	bf00      	nop
 8008d90:	371c      	adds	r7, #28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40010000 	.word	0x40010000
 8008da0:	40010400 	.word	0x40010400

08008da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f023 0303 	bic.w	r3, r3, #3
 8008dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	021b      	lsls	r3, r3, #8
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a21      	ldr	r2, [pc, #132]	@ (8008e84 <TIM_OC3_SetConfig+0xe0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d003      	beq.n	8008e0a <TIM_OC3_SetConfig+0x66>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a20      	ldr	r2, [pc, #128]	@ (8008e88 <TIM_OC3_SetConfig+0xe4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d10d      	bne.n	8008e26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a16      	ldr	r2, [pc, #88]	@ (8008e84 <TIM_OC3_SetConfig+0xe0>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d003      	beq.n	8008e36 <TIM_OC3_SetConfig+0x92>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a15      	ldr	r2, [pc, #84]	@ (8008e88 <TIM_OC3_SetConfig+0xe4>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d113      	bne.n	8008e5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	011b      	lsls	r3, r3, #4
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	621a      	str	r2, [r3, #32]
}
 8008e78:	bf00      	nop
 8008e7a:	371c      	adds	r7, #28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	40010000 	.word	0x40010000
 8008e88:	40010400 	.word	0x40010400

08008e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	031b      	lsls	r3, r3, #12
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a12      	ldr	r2, [pc, #72]	@ (8008f30 <TIM_OC4_SetConfig+0xa4>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d003      	beq.n	8008ef4 <TIM_OC4_SetConfig+0x68>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a11      	ldr	r2, [pc, #68]	@ (8008f34 <TIM_OC4_SetConfig+0xa8>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d109      	bne.n	8008f08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	019b      	lsls	r3, r3, #6
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	621a      	str	r2, [r3, #32]
}
 8008f22:	bf00      	nop
 8008f24:	371c      	adds	r7, #28
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	40010000 	.word	0x40010000
 8008f34:	40010400 	.word	0x40010400

08008f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	f023 0201 	bic.w	r2, r3, #1
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f023 030a 	bic.w	r3, r3, #10
 8008f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	621a      	str	r2, [r3, #32]
}
 8008f8a:	bf00      	nop
 8008f8c:	371c      	adds	r7, #28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b087      	sub	sp, #28
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	f023 0210 	bic.w	r2, r3, #16
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	031b      	lsls	r3, r3, #12
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008fd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	621a      	str	r2, [r3, #32]
}
 8008fea:	bf00      	nop
 8008fec:	371c      	adds	r7, #28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800900c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4313      	orrs	r3, r2
 8009014:	f043 0307 	orr.w	r3, r3, #7
 8009018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	609a      	str	r2, [r3, #8]
}
 8009020:	bf00      	nop
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	021a      	lsls	r2, r3, #8
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	431a      	orrs	r2, r3
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	4313      	orrs	r3, r2
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	609a      	str	r2, [r3, #8]
}
 8009060:	bf00      	nop
 8009062:	371c      	adds	r7, #28
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800907c:	2b01      	cmp	r3, #1
 800907e:	d101      	bne.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009080:	2302      	movs	r3, #2
 8009082:	e05a      	b.n	800913a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2202      	movs	r2, #2
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a21      	ldr	r2, [pc, #132]	@ (8009148 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d022      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090d0:	d01d      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a1d      	ldr	r2, [pc, #116]	@ (800914c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d018      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009150 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d013      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009154 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d00e      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a18      	ldr	r2, [pc, #96]	@ (8009158 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d009      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a17      	ldr	r2, [pc, #92]	@ (800915c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d004      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a15      	ldr	r2, [pc, #84]	@ (8009160 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d10c      	bne.n	8009128 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	4313      	orrs	r3, r2
 800911e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	40010000 	.word	0x40010000
 800914c:	40000400 	.word	0x40000400
 8009150:	40000800 	.word	0x40000800
 8009154:	40000c00 	.word	0x40000c00
 8009158:	40010400 	.word	0x40010400
 800915c:	40014000 	.word	0x40014000
 8009160:	40001800 	.word	0x40001800

08009164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e042      	b.n	80091fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b00      	cmp	r3, #0
 8009180:	d106      	bne.n	8009190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7f8 ffba 	bl	8002104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2224      	movs	r2, #36	@ 0x24
 8009194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80091a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f82b 	bl	8009204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	691a      	ldr	r2, [r3, #16]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	695a      	ldr	r2, [r3, #20]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2220      	movs	r2, #32
 80091e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2220      	movs	r2, #32
 80091f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009208:	b0c0      	sub	sp, #256	@ 0x100
 800920a:	af00      	add	r7, sp, #0
 800920c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800921c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009220:	68d9      	ldr	r1, [r3, #12]
 8009222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	ea40 0301 	orr.w	r3, r0, r1
 800922c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800922e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	431a      	orrs	r2, r3
 800923c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	431a      	orrs	r2, r3
 8009244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	4313      	orrs	r3, r2
 800924c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800925c:	f021 010c 	bic.w	r1, r1, #12
 8009260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800926a:	430b      	orrs	r3, r1
 800926c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800926e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800927a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800927e:	6999      	ldr	r1, [r3, #24]
 8009280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	ea40 0301 	orr.w	r3, r0, r1
 800928a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800928c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	4b8f      	ldr	r3, [pc, #572]	@ (80094d0 <UART_SetConfig+0x2cc>)
 8009294:	429a      	cmp	r2, r3
 8009296:	d005      	beq.n	80092a4 <UART_SetConfig+0xa0>
 8009298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	4b8d      	ldr	r3, [pc, #564]	@ (80094d4 <UART_SetConfig+0x2d0>)
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d104      	bne.n	80092ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092a4:	f7fe ff74 	bl	8008190 <HAL_RCC_GetPCLK2Freq>
 80092a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80092ac:	e003      	b.n	80092b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092ae:	f7fe ff5b 	bl	8008168 <HAL_RCC_GetPCLK1Freq>
 80092b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c0:	f040 810c 	bne.w	80094dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092c8:	2200      	movs	r2, #0
 80092ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80092d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80092d6:	4622      	mov	r2, r4
 80092d8:	462b      	mov	r3, r5
 80092da:	1891      	adds	r1, r2, r2
 80092dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80092de:	415b      	adcs	r3, r3
 80092e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80092e6:	4621      	mov	r1, r4
 80092e8:	eb12 0801 	adds.w	r8, r2, r1
 80092ec:	4629      	mov	r1, r5
 80092ee:	eb43 0901 	adc.w	r9, r3, r1
 80092f2:	f04f 0200 	mov.w	r2, #0
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009306:	4690      	mov	r8, r2
 8009308:	4699      	mov	r9, r3
 800930a:	4623      	mov	r3, r4
 800930c:	eb18 0303 	adds.w	r3, r8, r3
 8009310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009314:	462b      	mov	r3, r5
 8009316:	eb49 0303 	adc.w	r3, r9, r3
 800931a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800931e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800932a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800932e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009332:	460b      	mov	r3, r1
 8009334:	18db      	adds	r3, r3, r3
 8009336:	653b      	str	r3, [r7, #80]	@ 0x50
 8009338:	4613      	mov	r3, r2
 800933a:	eb42 0303 	adc.w	r3, r2, r3
 800933e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009344:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009348:	f7f7 fafc 	bl	8000944 <__aeabi_uldivmod>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4b61      	ldr	r3, [pc, #388]	@ (80094d8 <UART_SetConfig+0x2d4>)
 8009352:	fba3 2302 	umull	r2, r3, r3, r2
 8009356:	095b      	lsrs	r3, r3, #5
 8009358:	011c      	lsls	r4, r3, #4
 800935a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800935e:	2200      	movs	r2, #0
 8009360:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009364:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009368:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800936c:	4642      	mov	r2, r8
 800936e:	464b      	mov	r3, r9
 8009370:	1891      	adds	r1, r2, r2
 8009372:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009374:	415b      	adcs	r3, r3
 8009376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009378:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800937c:	4641      	mov	r1, r8
 800937e:	eb12 0a01 	adds.w	sl, r2, r1
 8009382:	4649      	mov	r1, r9
 8009384:	eb43 0b01 	adc.w	fp, r3, r1
 8009388:	f04f 0200 	mov.w	r2, #0
 800938c:	f04f 0300 	mov.w	r3, #0
 8009390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009394:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800939c:	4692      	mov	sl, r2
 800939e:	469b      	mov	fp, r3
 80093a0:	4643      	mov	r3, r8
 80093a2:	eb1a 0303 	adds.w	r3, sl, r3
 80093a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093aa:	464b      	mov	r3, r9
 80093ac:	eb4b 0303 	adc.w	r3, fp, r3
 80093b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80093b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80093c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80093c8:	460b      	mov	r3, r1
 80093ca:	18db      	adds	r3, r3, r3
 80093cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80093ce:	4613      	mov	r3, r2
 80093d0:	eb42 0303 	adc.w	r3, r2, r3
 80093d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80093d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80093da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80093de:	f7f7 fab1 	bl	8000944 <__aeabi_uldivmod>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4611      	mov	r1, r2
 80093e8:	4b3b      	ldr	r3, [pc, #236]	@ (80094d8 <UART_SetConfig+0x2d4>)
 80093ea:	fba3 2301 	umull	r2, r3, r3, r1
 80093ee:	095b      	lsrs	r3, r3, #5
 80093f0:	2264      	movs	r2, #100	@ 0x64
 80093f2:	fb02 f303 	mul.w	r3, r2, r3
 80093f6:	1acb      	subs	r3, r1, r3
 80093f8:	00db      	lsls	r3, r3, #3
 80093fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80093fe:	4b36      	ldr	r3, [pc, #216]	@ (80094d8 <UART_SetConfig+0x2d4>)
 8009400:	fba3 2302 	umull	r2, r3, r3, r2
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800940c:	441c      	add	r4, r3
 800940e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009412:	2200      	movs	r2, #0
 8009414:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009418:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800941c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009420:	4642      	mov	r2, r8
 8009422:	464b      	mov	r3, r9
 8009424:	1891      	adds	r1, r2, r2
 8009426:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009428:	415b      	adcs	r3, r3
 800942a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800942c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009430:	4641      	mov	r1, r8
 8009432:	1851      	adds	r1, r2, r1
 8009434:	6339      	str	r1, [r7, #48]	@ 0x30
 8009436:	4649      	mov	r1, r9
 8009438:	414b      	adcs	r3, r1
 800943a:	637b      	str	r3, [r7, #52]	@ 0x34
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	f04f 0300 	mov.w	r3, #0
 8009444:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009448:	4659      	mov	r1, fp
 800944a:	00cb      	lsls	r3, r1, #3
 800944c:	4651      	mov	r1, sl
 800944e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009452:	4651      	mov	r1, sl
 8009454:	00ca      	lsls	r2, r1, #3
 8009456:	4610      	mov	r0, r2
 8009458:	4619      	mov	r1, r3
 800945a:	4603      	mov	r3, r0
 800945c:	4642      	mov	r2, r8
 800945e:	189b      	adds	r3, r3, r2
 8009460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009464:	464b      	mov	r3, r9
 8009466:	460a      	mov	r2, r1
 8009468:	eb42 0303 	adc.w	r3, r2, r3
 800946c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800947c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009484:	460b      	mov	r3, r1
 8009486:	18db      	adds	r3, r3, r3
 8009488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800948a:	4613      	mov	r3, r2
 800948c:	eb42 0303 	adc.w	r3, r2, r3
 8009490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009496:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800949a:	f7f7 fa53 	bl	8000944 <__aeabi_uldivmod>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4b0d      	ldr	r3, [pc, #52]	@ (80094d8 <UART_SetConfig+0x2d4>)
 80094a4:	fba3 1302 	umull	r1, r3, r3, r2
 80094a8:	095b      	lsrs	r3, r3, #5
 80094aa:	2164      	movs	r1, #100	@ 0x64
 80094ac:	fb01 f303 	mul.w	r3, r1, r3
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	3332      	adds	r3, #50	@ 0x32
 80094b6:	4a08      	ldr	r2, [pc, #32]	@ (80094d8 <UART_SetConfig+0x2d4>)
 80094b8:	fba2 2303 	umull	r2, r3, r2, r3
 80094bc:	095b      	lsrs	r3, r3, #5
 80094be:	f003 0207 	and.w	r2, r3, #7
 80094c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4422      	add	r2, r4
 80094ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094cc:	e106      	b.n	80096dc <UART_SetConfig+0x4d8>
 80094ce:	bf00      	nop
 80094d0:	40011000 	.word	0x40011000
 80094d4:	40011400 	.word	0x40011400
 80094d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094e0:	2200      	movs	r2, #0
 80094e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80094e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80094ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80094ee:	4642      	mov	r2, r8
 80094f0:	464b      	mov	r3, r9
 80094f2:	1891      	adds	r1, r2, r2
 80094f4:	6239      	str	r1, [r7, #32]
 80094f6:	415b      	adcs	r3, r3
 80094f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80094fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094fe:	4641      	mov	r1, r8
 8009500:	1854      	adds	r4, r2, r1
 8009502:	4649      	mov	r1, r9
 8009504:	eb43 0501 	adc.w	r5, r3, r1
 8009508:	f04f 0200 	mov.w	r2, #0
 800950c:	f04f 0300 	mov.w	r3, #0
 8009510:	00eb      	lsls	r3, r5, #3
 8009512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009516:	00e2      	lsls	r2, r4, #3
 8009518:	4614      	mov	r4, r2
 800951a:	461d      	mov	r5, r3
 800951c:	4643      	mov	r3, r8
 800951e:	18e3      	adds	r3, r4, r3
 8009520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009524:	464b      	mov	r3, r9
 8009526:	eb45 0303 	adc.w	r3, r5, r3
 800952a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800952e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800953a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800953e:	f04f 0200 	mov.w	r2, #0
 8009542:	f04f 0300 	mov.w	r3, #0
 8009546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800954a:	4629      	mov	r1, r5
 800954c:	008b      	lsls	r3, r1, #2
 800954e:	4621      	mov	r1, r4
 8009550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009554:	4621      	mov	r1, r4
 8009556:	008a      	lsls	r2, r1, #2
 8009558:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800955c:	f7f7 f9f2 	bl	8000944 <__aeabi_uldivmod>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	4b60      	ldr	r3, [pc, #384]	@ (80096e8 <UART_SetConfig+0x4e4>)
 8009566:	fba3 2302 	umull	r2, r3, r3, r2
 800956a:	095b      	lsrs	r3, r3, #5
 800956c:	011c      	lsls	r4, r3, #4
 800956e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009572:	2200      	movs	r2, #0
 8009574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009578:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800957c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009580:	4642      	mov	r2, r8
 8009582:	464b      	mov	r3, r9
 8009584:	1891      	adds	r1, r2, r2
 8009586:	61b9      	str	r1, [r7, #24]
 8009588:	415b      	adcs	r3, r3
 800958a:	61fb      	str	r3, [r7, #28]
 800958c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009590:	4641      	mov	r1, r8
 8009592:	1851      	adds	r1, r2, r1
 8009594:	6139      	str	r1, [r7, #16]
 8009596:	4649      	mov	r1, r9
 8009598:	414b      	adcs	r3, r1
 800959a:	617b      	str	r3, [r7, #20]
 800959c:	f04f 0200 	mov.w	r2, #0
 80095a0:	f04f 0300 	mov.w	r3, #0
 80095a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80095a8:	4659      	mov	r1, fp
 80095aa:	00cb      	lsls	r3, r1, #3
 80095ac:	4651      	mov	r1, sl
 80095ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095b2:	4651      	mov	r1, sl
 80095b4:	00ca      	lsls	r2, r1, #3
 80095b6:	4610      	mov	r0, r2
 80095b8:	4619      	mov	r1, r3
 80095ba:	4603      	mov	r3, r0
 80095bc:	4642      	mov	r2, r8
 80095be:	189b      	adds	r3, r3, r2
 80095c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095c4:	464b      	mov	r3, r9
 80095c6:	460a      	mov	r2, r1
 80095c8:	eb42 0303 	adc.w	r3, r2, r3
 80095cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80095da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80095dc:	f04f 0200 	mov.w	r2, #0
 80095e0:	f04f 0300 	mov.w	r3, #0
 80095e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80095e8:	4649      	mov	r1, r9
 80095ea:	008b      	lsls	r3, r1, #2
 80095ec:	4641      	mov	r1, r8
 80095ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095f2:	4641      	mov	r1, r8
 80095f4:	008a      	lsls	r2, r1, #2
 80095f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80095fa:	f7f7 f9a3 	bl	8000944 <__aeabi_uldivmod>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	4611      	mov	r1, r2
 8009604:	4b38      	ldr	r3, [pc, #224]	@ (80096e8 <UART_SetConfig+0x4e4>)
 8009606:	fba3 2301 	umull	r2, r3, r3, r1
 800960a:	095b      	lsrs	r3, r3, #5
 800960c:	2264      	movs	r2, #100	@ 0x64
 800960e:	fb02 f303 	mul.w	r3, r2, r3
 8009612:	1acb      	subs	r3, r1, r3
 8009614:	011b      	lsls	r3, r3, #4
 8009616:	3332      	adds	r3, #50	@ 0x32
 8009618:	4a33      	ldr	r2, [pc, #204]	@ (80096e8 <UART_SetConfig+0x4e4>)
 800961a:	fba2 2303 	umull	r2, r3, r2, r3
 800961e:	095b      	lsrs	r3, r3, #5
 8009620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009624:	441c      	add	r4, r3
 8009626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800962a:	2200      	movs	r2, #0
 800962c:	673b      	str	r3, [r7, #112]	@ 0x70
 800962e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009630:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009634:	4642      	mov	r2, r8
 8009636:	464b      	mov	r3, r9
 8009638:	1891      	adds	r1, r2, r2
 800963a:	60b9      	str	r1, [r7, #8]
 800963c:	415b      	adcs	r3, r3
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009644:	4641      	mov	r1, r8
 8009646:	1851      	adds	r1, r2, r1
 8009648:	6039      	str	r1, [r7, #0]
 800964a:	4649      	mov	r1, r9
 800964c:	414b      	adcs	r3, r1
 800964e:	607b      	str	r3, [r7, #4]
 8009650:	f04f 0200 	mov.w	r2, #0
 8009654:	f04f 0300 	mov.w	r3, #0
 8009658:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800965c:	4659      	mov	r1, fp
 800965e:	00cb      	lsls	r3, r1, #3
 8009660:	4651      	mov	r1, sl
 8009662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009666:	4651      	mov	r1, sl
 8009668:	00ca      	lsls	r2, r1, #3
 800966a:	4610      	mov	r0, r2
 800966c:	4619      	mov	r1, r3
 800966e:	4603      	mov	r3, r0
 8009670:	4642      	mov	r2, r8
 8009672:	189b      	adds	r3, r3, r2
 8009674:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009676:	464b      	mov	r3, r9
 8009678:	460a      	mov	r2, r1
 800967a:	eb42 0303 	adc.w	r3, r2, r3
 800967e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	663b      	str	r3, [r7, #96]	@ 0x60
 800968a:	667a      	str	r2, [r7, #100]	@ 0x64
 800968c:	f04f 0200 	mov.w	r2, #0
 8009690:	f04f 0300 	mov.w	r3, #0
 8009694:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009698:	4649      	mov	r1, r9
 800969a:	008b      	lsls	r3, r1, #2
 800969c:	4641      	mov	r1, r8
 800969e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096a2:	4641      	mov	r1, r8
 80096a4:	008a      	lsls	r2, r1, #2
 80096a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80096aa:	f7f7 f94b 	bl	8000944 <__aeabi_uldivmod>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	4b0d      	ldr	r3, [pc, #52]	@ (80096e8 <UART_SetConfig+0x4e4>)
 80096b4:	fba3 1302 	umull	r1, r3, r3, r2
 80096b8:	095b      	lsrs	r3, r3, #5
 80096ba:	2164      	movs	r1, #100	@ 0x64
 80096bc:	fb01 f303 	mul.w	r3, r1, r3
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	011b      	lsls	r3, r3, #4
 80096c4:	3332      	adds	r3, #50	@ 0x32
 80096c6:	4a08      	ldr	r2, [pc, #32]	@ (80096e8 <UART_SetConfig+0x4e4>)
 80096c8:	fba2 2303 	umull	r2, r3, r2, r3
 80096cc:	095b      	lsrs	r3, r3, #5
 80096ce:	f003 020f 	and.w	r2, r3, #15
 80096d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4422      	add	r2, r4
 80096da:	609a      	str	r2, [r3, #8]
}
 80096dc:	bf00      	nop
 80096de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80096e2:	46bd      	mov	sp, r7
 80096e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096e8:	51eb851f 	.word	0x51eb851f

080096ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096ec:	b084      	sub	sp, #16
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	f107 001c 	add.w	r0, r7, #28
 80096fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009702:	2b01      	cmp	r3, #1
 8009704:	d123      	bne.n	800974e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800971a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800972e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009732:	2b01      	cmp	r3, #1
 8009734:	d105      	bne.n	8009742 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f9dc 	bl	8009b00 <USB_CoreReset>
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
 800974c:	e01b      	b.n	8009786 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f9d0 	bl	8009b00 <USB_CoreReset>
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009764:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009768:	2b00      	cmp	r3, #0
 800976a:	d106      	bne.n	800977a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009770:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	639a      	str	r2, [r3, #56]	@ 0x38
 8009778:	e005      	b.n	8009786 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009786:	7fbb      	ldrb	r3, [r7, #30]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d10b      	bne.n	80097a4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f043 0206 	orr.w	r2, r3, #6
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f043 0220 	orr.w	r2, r3, #32
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097b0:	b004      	add	sp, #16
 80097b2:	4770      	bx	lr

080097b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f043 0201 	orr.w	r2, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b083      	sub	sp, #12
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f023 0201 	bic.w	r2, r3, #1
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009804:	2300      	movs	r3, #0
 8009806:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d115      	bne.n	8009846 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009826:	200a      	movs	r0, #10
 8009828:	f7f8 fdaa 	bl	8002380 <HAL_Delay>
      ms += 10U;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	330a      	adds	r3, #10
 8009830:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f956 	bl	8009ae4 <USB_GetMode>
 8009838:	4603      	mov	r3, r0
 800983a:	2b01      	cmp	r3, #1
 800983c:	d01e      	beq.n	800987c <USB_SetCurrentMode+0x84>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2bc7      	cmp	r3, #199	@ 0xc7
 8009842:	d9f0      	bls.n	8009826 <USB_SetCurrentMode+0x2e>
 8009844:	e01a      	b.n	800987c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d115      	bne.n	8009878 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009858:	200a      	movs	r0, #10
 800985a:	f7f8 fd91 	bl	8002380 <HAL_Delay>
      ms += 10U;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	330a      	adds	r3, #10
 8009862:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f93d 	bl	8009ae4 <USB_GetMode>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d005      	beq.n	800987c <USB_SetCurrentMode+0x84>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2bc7      	cmp	r3, #199	@ 0xc7
 8009874:	d9f0      	bls.n	8009858 <USB_SetCurrentMode+0x60>
 8009876:	e001      	b.n	800987c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e005      	b.n	8009888 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009880:	d101      	bne.n	8009886 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e000      	b.n	8009888 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800989a:	2300      	movs	r3, #0
 800989c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3301      	adds	r3, #1
 80098a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098aa:	d901      	bls.n	80098b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e01b      	b.n	80098e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	daf2      	bge.n	800989e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	019b      	lsls	r3, r3, #6
 80098c0:	f043 0220 	orr.w	r2, r3, #32
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3301      	adds	r3, #1
 80098cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098d4:	d901      	bls.n	80098da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e006      	b.n	80098e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	2b20      	cmp	r3, #32
 80098e4:	d0f0      	beq.n	80098c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3301      	adds	r3, #1
 8009904:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800990c:	d901      	bls.n	8009912 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e018      	b.n	8009944 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	daf2      	bge.n	8009900 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800991a:	2300      	movs	r3, #0
 800991c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2210      	movs	r2, #16
 8009922:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3301      	adds	r3, #1
 8009928:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009930:	d901      	bls.n	8009936 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e006      	b.n	8009944 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	f003 0310 	and.w	r3, r3, #16
 800993e:	2b10      	cmp	r3, #16
 8009940:	d0f0      	beq.n	8009924 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009950:	b480      	push	{r7}
 8009952:	b089      	sub	sp, #36	@ 0x24
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	4611      	mov	r1, r2
 800995c:	461a      	mov	r2, r3
 800995e:	460b      	mov	r3, r1
 8009960:	71fb      	strb	r3, [r7, #7]
 8009962:	4613      	mov	r3, r2
 8009964:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800996e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009972:	2b00      	cmp	r3, #0
 8009974:	d123      	bne.n	80099be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009976:	88bb      	ldrh	r3, [r7, #4]
 8009978:	3303      	adds	r3, #3
 800997a:	089b      	lsrs	r3, r3, #2
 800997c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800997e:	2300      	movs	r3, #0
 8009980:	61bb      	str	r3, [r7, #24]
 8009982:	e018      	b.n	80099b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	031a      	lsls	r2, r3, #12
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	4413      	add	r3, r2
 800998c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009990:	461a      	mov	r2, r3
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	3301      	adds	r3, #1
 800999c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	3301      	adds	r3, #1
 80099a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	3301      	adds	r3, #1
 80099a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	3301      	adds	r3, #1
 80099ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	3301      	adds	r3, #1
 80099b4:	61bb      	str	r3, [r7, #24]
 80099b6:	69ba      	ldr	r2, [r7, #24]
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d3e2      	bcc.n	8009984 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3724      	adds	r7, #36	@ 0x24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b08b      	sub	sp, #44	@ 0x2c
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	4613      	mov	r3, r2
 80099d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80099e2:	88fb      	ldrh	r3, [r7, #6]
 80099e4:	089b      	lsrs	r3, r3, #2
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80099ea:	88fb      	ldrh	r3, [r7, #6]
 80099ec:	f003 0303 	and.w	r3, r3, #3
 80099f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80099f2:	2300      	movs	r3, #0
 80099f4:	623b      	str	r3, [r7, #32]
 80099f6:	e014      	b.n	8009a22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a02:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a06:	3301      	adds	r3, #1
 8009a08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a12:	3301      	adds	r3, #1
 8009a14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a18:	3301      	adds	r3, #1
 8009a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009a1c:	6a3b      	ldr	r3, [r7, #32]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	623b      	str	r3, [r7, #32]
 8009a22:	6a3a      	ldr	r2, [r7, #32]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d3e6      	bcc.n	80099f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009a2a:	8bfb      	ldrh	r3, [r7, #30]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d01e      	beq.n	8009a6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a30:	2300      	movs	r3, #0
 8009a32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	f107 0310 	add.w	r3, r7, #16
 8009a40:	6812      	ldr	r2, [r2, #0]
 8009a42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a54:	701a      	strb	r2, [r3, #0]
      i++;
 8009a56:	6a3b      	ldr	r3, [r7, #32]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5e:	3301      	adds	r3, #1
 8009a60:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009a62:	8bfb      	ldrh	r3, [r7, #30]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a68:	8bfb      	ldrh	r3, [r7, #30]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1ea      	bne.n	8009a44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	372c      	adds	r7, #44	@ 0x2c
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	695b      	ldr	r3, [r3, #20]
 8009a88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	4013      	ands	r3, r2
 8009a92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a94:	68fb      	ldr	r3, [r7, #12]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3714      	adds	r7, #20
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b085      	sub	sp, #20
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009ab2:	78fb      	ldrb	r3, [r7, #3]
 8009ab4:	015a      	lsls	r2, r3, #5
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	4413      	add	r3, r2
 8009aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009ac2:	78fb      	ldrb	r3, [r7, #3]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ad6:	68bb      	ldr	r3, [r7, #8]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3714      	adds	r7, #20
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	f003 0301 	and.w	r3, r3, #1
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b18:	d901      	bls.n	8009b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e01b      	b.n	8009b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	daf2      	bge.n	8009b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	f043 0201 	orr.w	r2, r3, #1
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b42:	d901      	bls.n	8009b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e006      	b.n	8009b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d0f0      	beq.n	8009b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
	...

08009b64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b64:	b084      	sub	sp, #16
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b086      	sub	sp, #24
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b84:	461a      	mov	r2, r3
 8009b86:	2300      	movs	r3, #0
 8009b88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b9a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d119      	bne.n	8009bee <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009bba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d10a      	bne.n	8009bd8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009bd0:	f043 0304 	orr.w	r3, r3, #4
 8009bd4:	6013      	str	r3, [r2, #0]
 8009bd6:	e014      	b.n	8009c02 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009be6:	f023 0304 	bic.w	r3, r3, #4
 8009bea:	6013      	str	r3, [r2, #0]
 8009bec:	e009      	b.n	8009c02 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009bfc:	f023 0304 	bic.w	r3, r3, #4
 8009c00:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009c02:	2110      	movs	r1, #16
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff fe43 	bl	8009890 <USB_FlushTxFifo>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff fe6d 	bl	80098f4 <USB_FlushRxFifo>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009c24:	2300      	movs	r3, #0
 8009c26:	613b      	str	r3, [r7, #16]
 8009c28:	e015      	b.n	8009c56 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c36:	461a      	mov	r2, r3
 8009c38:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	3301      	adds	r3, #1
 8009c54:	613b      	str	r3, [r7, #16]
 8009c56:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d3e3      	bcc.n	8009c2a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c6e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a18      	ldr	r2, [pc, #96]	@ (8009cd4 <USB_HostInit+0x170>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d10b      	bne.n	8009c90 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c7e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a15      	ldr	r2, [pc, #84]	@ (8009cd8 <USB_HostInit+0x174>)
 8009c84:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a14      	ldr	r2, [pc, #80]	@ (8009cdc <USB_HostInit+0x178>)
 8009c8a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009c8e:	e009      	b.n	8009ca4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2280      	movs	r2, #128	@ 0x80
 8009c94:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a11      	ldr	r2, [pc, #68]	@ (8009ce0 <USB_HostInit+0x17c>)
 8009c9a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a11      	ldr	r2, [pc, #68]	@ (8009ce4 <USB_HostInit+0x180>)
 8009ca0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ca4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d105      	bne.n	8009cb8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	f043 0210 	orr.w	r2, r3, #16
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	699a      	ldr	r2, [r3, #24]
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce8 <USB_HostInit+0x184>)
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cd0:	b004      	add	sp, #16
 8009cd2:	4770      	bx	lr
 8009cd4:	40040000 	.word	0x40040000
 8009cd8:	01000200 	.word	0x01000200
 8009cdc:	00e00300 	.word	0x00e00300
 8009ce0:	00600080 	.word	0x00600080
 8009ce4:	004000e0 	.word	0x004000e0
 8009ce8:	a3200008 	.word	0xa3200008

08009cec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009d0a:	f023 0303 	bic.w	r3, r3, #3
 8009d0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	f003 0303 	and.w	r3, r3, #3
 8009d1e:	68f9      	ldr	r1, [r7, #12]
 8009d20:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009d24:	4313      	orrs	r3, r2
 8009d26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d107      	bne.n	8009d3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d34:	461a      	mov	r2, r3
 8009d36:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009d3a:	6053      	str	r3, [r2, #4]
 8009d3c:	e00c      	b.n	8009d58 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d107      	bne.n	8009d54 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009d50:	6053      	str	r3, [r2, #4]
 8009d52:	e001      	b.n	8009d58 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e000      	b.n	8009d5a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b084      	sub	sp, #16
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009d86:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d94:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009d96:	2064      	movs	r0, #100	@ 0x64
 8009d98:	f7f8 faf2 	bl	8002380 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009da8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009daa:	200a      	movs	r0, #10
 8009dac:	f7f8 fae8 	bl	8002380 <HAL_Delay>

  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b085      	sub	sp, #20
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009dde:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d109      	bne.n	8009dfe <USB_DriveVbus+0x44>
 8009dea:	78fb      	ldrb	r3, [r7, #3]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d106      	bne.n	8009dfe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009dfc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e08:	d109      	bne.n	8009e1e <USB_DriveVbus+0x64>
 8009e0a:	78fb      	ldrb	r3, [r7, #3]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d106      	bne.n	8009e1e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009e18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e1c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	0c5b      	lsrs	r3, r3, #17
 8009e4a:	f003 0303 	and.w	r3, r3, #3
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	b29b      	uxth	r3, r3
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	4608      	mov	r0, r1
 8009e86:	4611      	mov	r1, r2
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	70fb      	strb	r3, [r7, #3]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	70bb      	strb	r3, [r7, #2]
 8009e92:	4613      	mov	r3, r2
 8009e94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009e9e:	78fb      	ldrb	r3, [r7, #3]
 8009ea0:	015a      	lsls	r2, r3, #5
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009eb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	d87c      	bhi.n	8009fb4 <USB_HC_Init+0x138>
 8009eba:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec0 <USB_HC_Init+0x44>)
 8009ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec0:	08009ed1 	.word	0x08009ed1
 8009ec4:	08009f77 	.word	0x08009f77
 8009ec8:	08009ed1 	.word	0x08009ed1
 8009ecc:	08009f39 	.word	0x08009f39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009edc:	461a      	mov	r2, r3
 8009ede:	f240 439d 	movw	r3, #1181	@ 0x49d
 8009ee2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009ee4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	da10      	bge.n	8009f0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009eec:	78fb      	ldrb	r3, [r7, #3]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	78fa      	ldrb	r2, [r7, #3]
 8009efc:	0151      	lsls	r1, r2, #5
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	440a      	add	r2, r1
 8009f02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f0a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009f0c:	e055      	b.n	8009fba <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a6f      	ldr	r2, [pc, #444]	@ (800a0d0 <USB_HC_Init+0x254>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d151      	bne.n	8009fba <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009f16:	78fb      	ldrb	r3, [r7, #3]
 8009f18:	015a      	lsls	r2, r3, #5
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	78fa      	ldrb	r2, [r7, #3]
 8009f26:	0151      	lsls	r1, r2, #5
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	440a      	add	r2, r1
 8009f2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f30:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009f34:	60d3      	str	r3, [r2, #12]
      break;
 8009f36:	e040      	b.n	8009fba <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009f38:	78fb      	ldrb	r3, [r7, #3]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f44:	461a      	mov	r2, r3
 8009f46:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009f4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009f4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	da34      	bge.n	8009fbe <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	78fa      	ldrb	r2, [r7, #3]
 8009f64:	0151      	lsls	r1, r2, #5
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	440a      	add	r2, r1
 8009f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009f74:	e023      	b.n	8009fbe <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009f76:	78fb      	ldrb	r3, [r7, #3]
 8009f78:	015a      	lsls	r2, r3, #5
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f82:	461a      	mov	r2, r3
 8009f84:	f240 2325 	movw	r3, #549	@ 0x225
 8009f88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009f8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	da17      	bge.n	8009fc2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009f92:	78fb      	ldrb	r3, [r7, #3]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	78fa      	ldrb	r2, [r7, #3]
 8009fa2:	0151      	lsls	r1, r2, #5
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	440a      	add	r2, r1
 8009fa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009fac:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009fb0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009fb2:	e006      	b.n	8009fc2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	77fb      	strb	r3, [r7, #31]
      break;
 8009fb8:	e004      	b.n	8009fc4 <USB_HC_Init+0x148>
      break;
 8009fba:	bf00      	nop
 8009fbc:	e002      	b.n	8009fc4 <USB_HC_Init+0x148>
      break;
 8009fbe:	bf00      	nop
 8009fc0:	e000      	b.n	8009fc4 <USB_HC_Init+0x148>
      break;
 8009fc2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009fc4:	78fb      	ldrb	r3, [r7, #3]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009fd6:	78fb      	ldrb	r3, [r7, #3]
 8009fd8:	015a      	lsls	r2, r3, #5
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	78fa      	ldrb	r2, [r7, #3]
 8009fe6:	0151      	lsls	r1, r2, #5
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	440a      	add	r2, r1
 8009fec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ff0:	f043 0302 	orr.w	r3, r3, #2
 8009ff4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ffc:	699a      	ldr	r2, [r3, #24]
 8009ffe:	78fb      	ldrb	r3, [r7, #3]
 800a000:	f003 030f 	and.w	r3, r3, #15
 800a004:	2101      	movs	r1, #1
 800a006:	fa01 f303 	lsl.w	r3, r1, r3
 800a00a:	6939      	ldr	r1, [r7, #16]
 800a00c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a010:	4313      	orrs	r3, r2
 800a012:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a020:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a024:	2b00      	cmp	r3, #0
 800a026:	da03      	bge.n	800a030 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a02c:	61bb      	str	r3, [r7, #24]
 800a02e:	e001      	b.n	800a034 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a030:	2300      	movs	r3, #0
 800a032:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7ff fef9 	bl	8009e2c <USB_GetHostSpeed>
 800a03a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a03c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a040:	2b02      	cmp	r3, #2
 800a042:	d106      	bne.n	800a052 <USB_HC_Init+0x1d6>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b02      	cmp	r3, #2
 800a048:	d003      	beq.n	800a052 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a04a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a04e:	617b      	str	r3, [r7, #20]
 800a050:	e001      	b.n	800a056 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a056:	787b      	ldrb	r3, [r7, #1]
 800a058:	059b      	lsls	r3, r3, #22
 800a05a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a05e:	78bb      	ldrb	r3, [r7, #2]
 800a060:	02db      	lsls	r3, r3, #11
 800a062:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a066:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a068:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a06c:	049b      	lsls	r3, r3, #18
 800a06e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a072:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a074:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a076:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a07a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	431a      	orrs	r2, r3
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a084:	78fa      	ldrb	r2, [r7, #3]
 800a086:	0151      	lsls	r1, r2, #5
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	440a      	add	r2, r1
 800a08c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a090:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a094:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a096:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d003      	beq.n	800a0a6 <USB_HC_Init+0x22a>
 800a09e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d10f      	bne.n	800a0c6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a0a6:	78fb      	ldrb	r3, [r7, #3]
 800a0a8:	015a      	lsls	r2, r3, #5
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	78fa      	ldrb	r2, [r7, #3]
 800a0b6:	0151      	lsls	r1, r2, #5
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	440a      	add	r2, r1
 800a0bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a0c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3720      	adds	r7, #32
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	40040000 	.word	0x40040000

0800a0d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08c      	sub	sp, #48	@ 0x30
 800a0d8:	af02      	add	r7, sp, #8
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	785b      	ldrb	r3, [r3, #1]
 800a0ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a0ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0f0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	4a5d      	ldr	r2, [pc, #372]	@ (800a26c <USB_HC_StartXfer+0x198>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d12f      	bne.n	800a15a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d11c      	bne.n	800a13a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	7c9b      	ldrb	r3, [r3, #18]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d003      	beq.n	800a110 <USB_HC_StartXfer+0x3c>
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	7c9b      	ldrb	r3, [r3, #18]
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d124      	bne.n	800a15a <USB_HC_StartXfer+0x86>
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	799b      	ldrb	r3, [r3, #6]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d120      	bne.n	800a15a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	69fa      	ldr	r2, [r7, #28]
 800a128:	0151      	lsls	r1, r2, #5
 800a12a:	6a3a      	ldr	r2, [r7, #32]
 800a12c:	440a      	add	r2, r1
 800a12e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a136:	60d3      	str	r3, [r2, #12]
 800a138:	e00f      	b.n	800a15a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	791b      	ldrb	r3, [r3, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10b      	bne.n	800a15a <USB_HC_StartXfer+0x86>
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	795b      	ldrb	r3, [r3, #5]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d107      	bne.n	800a15a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	785b      	ldrb	r3, [r3, #1]
 800a14e:	4619      	mov	r1, r3
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 fb6b 	bl	800a82c <USB_DoPing>
        return HAL_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	e232      	b.n	800a5c0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	799b      	ldrb	r3, [r3, #6]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d158      	bne.n	800a214 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a162:	2301      	movs	r3, #1
 800a164:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	78db      	ldrb	r3, [r3, #3]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d007      	beq.n	800a17e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a16e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	8a92      	ldrh	r2, [r2, #20]
 800a174:	fb03 f202 	mul.w	r2, r3, r2
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	61da      	str	r2, [r3, #28]
 800a17c:	e07c      	b.n	800a278 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	7c9b      	ldrb	r3, [r3, #18]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d130      	bne.n	800a1e8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	2bbc      	cmp	r3, #188	@ 0xbc
 800a18c:	d918      	bls.n	800a1c0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	8a9b      	ldrh	r3, [r3, #20]
 800a192:	461a      	mov	r2, r3
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	69da      	ldr	r2, [r3, #28]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d003      	beq.n	800a1b0 <USB_HC_StartXfer+0xdc>
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d103      	bne.n	800a1b8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	60da      	str	r2, [r3, #12]
 800a1b6:	e05f      	b.n	800a278 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	60da      	str	r2, [r3, #12]
 800a1be:	e05b      	b.n	800a278 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	6a1a      	ldr	r2, [r3, #32]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d007      	beq.n	800a1e0 <USB_HC_StartXfer+0x10c>
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d003      	beq.n	800a1e0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2204      	movs	r2, #4
 800a1dc:	60da      	str	r2, [r3, #12]
 800a1de:	e04b      	b.n	800a278 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2203      	movs	r2, #3
 800a1e4:	60da      	str	r2, [r3, #12]
 800a1e6:	e047      	b.n	800a278 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a1e8:	79fb      	ldrb	r3, [r7, #7]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d10d      	bne.n	800a20a <USB_HC_StartXfer+0x136>
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	8a92      	ldrh	r2, [r2, #20]
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d907      	bls.n	800a20a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a1fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	8a92      	ldrh	r2, [r2, #20]
 800a200:	fb03 f202 	mul.w	r2, r3, r2
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	61da      	str	r2, [r3, #28]
 800a208:	e036      	b.n	800a278 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	6a1a      	ldr	r2, [r3, #32]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	61da      	str	r2, [r3, #28]
 800a212:	e031      	b.n	800a278 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d018      	beq.n	800a24e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	6a1b      	ldr	r3, [r3, #32]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	8a92      	ldrh	r2, [r2, #20]
 800a224:	4413      	add	r3, r2
 800a226:	3b01      	subs	r3, #1
 800a228:	68ba      	ldr	r2, [r7, #8]
 800a22a:	8a92      	ldrh	r2, [r2, #20]
 800a22c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a230:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800a232:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a234:	8b7b      	ldrh	r3, [r7, #26]
 800a236:	429a      	cmp	r2, r3
 800a238:	d90b      	bls.n	800a252 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a23a:	8b7b      	ldrh	r3, [r7, #26]
 800a23c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a23e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	8a92      	ldrh	r2, [r2, #20]
 800a244:	fb03 f202 	mul.w	r2, r3, r2
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	61da      	str	r2, [r3, #28]
 800a24c:	e001      	b.n	800a252 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a24e:	2301      	movs	r3, #1
 800a250:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	78db      	ldrb	r3, [r3, #3]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00a      	beq.n	800a270 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a25a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	8a92      	ldrh	r2, [r2, #20]
 800a260:	fb03 f202 	mul.w	r2, r3, r2
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	61da      	str	r2, [r3, #28]
 800a268:	e006      	b.n	800a278 <USB_HC_StartXfer+0x1a4>
 800a26a:	bf00      	nop
 800a26c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	6a1a      	ldr	r2, [r3, #32]
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a280:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a282:	04d9      	lsls	r1, r3, #19
 800a284:	4ba3      	ldr	r3, [pc, #652]	@ (800a514 <USB_HC_StartXfer+0x440>)
 800a286:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a288:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	7d9b      	ldrb	r3, [r3, #22]
 800a28e:	075b      	lsls	r3, r3, #29
 800a290:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a294:	69f9      	ldr	r1, [r7, #28]
 800a296:	0148      	lsls	r0, r1, #5
 800a298:	6a39      	ldr	r1, [r7, #32]
 800a29a:	4401      	add	r1, r0
 800a29c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a2a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d009      	beq.n	800a2be <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	6999      	ldr	r1, [r3, #24]
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	015a      	lsls	r2, r3, #5
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2ba:	460a      	mov	r2, r1
 800a2bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	bf0c      	ite	eq
 800a2ce:	2301      	moveq	r3, #1
 800a2d0:	2300      	movne	r3, #0
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	69fa      	ldr	r2, [r7, #28]
 800a2e6:	0151      	lsls	r1, r2, #5
 800a2e8:	6a3a      	ldr	r2, [r7, #32]
 800a2ea:	440a      	add	r2, r1
 800a2ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a2f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	7e7b      	ldrb	r3, [r7, #25]
 800a306:	075b      	lsls	r3, r3, #29
 800a308:	69f9      	ldr	r1, [r7, #28]
 800a30a:	0148      	lsls	r0, r1, #5
 800a30c:	6a39      	ldr	r1, [r7, #32]
 800a30e:	4401      	add	r1, r0
 800a310:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800a314:	4313      	orrs	r3, r2
 800a316:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	799b      	ldrb	r3, [r3, #6]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	f040 80c3 	bne.w	800a4a8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	7c5b      	ldrb	r3, [r3, #17]
 800a326:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a32c:	4313      	orrs	r3, r2
 800a32e:	69fa      	ldr	r2, [r7, #28]
 800a330:	0151      	lsls	r1, r2, #5
 800a332:	6a3a      	ldr	r2, [r7, #32]
 800a334:	440a      	add	r2, r1
 800a336:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a33a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a33e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	015a      	lsls	r2, r3, #5
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	4413      	add	r3, r2
 800a348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	0151      	lsls	r1, r2, #5
 800a352:	6a3a      	ldr	r2, [r7, #32]
 800a354:	440a      	add	r2, r1
 800a356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a35a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a35e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	79db      	ldrb	r3, [r3, #7]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d123      	bne.n	800a3b0 <USB_HC_StartXfer+0x2dc>
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	78db      	ldrb	r3, [r3, #3]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d11f      	bne.n	800a3b0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	4413      	add	r3, r2
 800a378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	0151      	lsls	r1, r2, #5
 800a382:	6a3a      	ldr	r2, [r7, #32]
 800a384:	440a      	add	r2, r1
 800a386:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a38a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a38e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	4413      	add	r3, r2
 800a398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	69fa      	ldr	r2, [r7, #28]
 800a3a0:	0151      	lsls	r1, r2, #5
 800a3a2:	6a3a      	ldr	r2, [r7, #32]
 800a3a4:	440a      	add	r2, r1
 800a3a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a3aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3ae:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	7c9b      	ldrb	r3, [r3, #18]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d003      	beq.n	800a3c0 <USB_HC_StartXfer+0x2ec>
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	7c9b      	ldrb	r3, [r3, #18]
 800a3bc:	2b03      	cmp	r3, #3
 800a3be:	d117      	bne.n	800a3f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d113      	bne.n	800a3f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	78db      	ldrb	r3, [r3, #3]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d10f      	bne.n	800a3f0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	015a      	lsls	r2, r3, #5
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	69fa      	ldr	r2, [r7, #28]
 800a3e0:	0151      	lsls	r1, r2, #5
 800a3e2:	6a3a      	ldr	r2, [r7, #32]
 800a3e4:	440a      	add	r2, r1
 800a3e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a3ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3ee:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	7c9b      	ldrb	r3, [r3, #18]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d162      	bne.n	800a4be <USB_HC_StartXfer+0x3ea>
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	78db      	ldrb	r3, [r3, #3]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d15e      	bne.n	800a4be <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	3b01      	subs	r3, #1
 800a406:	2b03      	cmp	r3, #3
 800a408:	d858      	bhi.n	800a4bc <USB_HC_StartXfer+0x3e8>
 800a40a:	a201      	add	r2, pc, #4	@ (adr r2, 800a410 <USB_HC_StartXfer+0x33c>)
 800a40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a410:	0800a421 	.word	0x0800a421
 800a414:	0800a443 	.word	0x0800a443
 800a418:	0800a465 	.word	0x0800a465
 800a41c:	0800a487 	.word	0x0800a487
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	015a      	lsls	r2, r3, #5
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	4413      	add	r3, r2
 800a428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	69fa      	ldr	r2, [r7, #28]
 800a430:	0151      	lsls	r1, r2, #5
 800a432:	6a3a      	ldr	r2, [r7, #32]
 800a434:	440a      	add	r2, r1
 800a436:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a43a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a43e:	6053      	str	r3, [r2, #4]
          break;
 800a440:	e03d      	b.n	800a4be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	015a      	lsls	r2, r3, #5
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	4413      	add	r3, r2
 800a44a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	69fa      	ldr	r2, [r7, #28]
 800a452:	0151      	lsls	r1, r2, #5
 800a454:	6a3a      	ldr	r2, [r7, #32]
 800a456:	440a      	add	r2, r1
 800a458:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a45c:	f043 030e 	orr.w	r3, r3, #14
 800a460:	6053      	str	r3, [r2, #4]
          break;
 800a462:	e02c      	b.n	800a4be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	69fa      	ldr	r2, [r7, #28]
 800a474:	0151      	lsls	r1, r2, #5
 800a476:	6a3a      	ldr	r2, [r7, #32]
 800a478:	440a      	add	r2, r1
 800a47a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a47e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a482:	6053      	str	r3, [r2, #4]
          break;
 800a484:	e01b      	b.n	800a4be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	015a      	lsls	r2, r3, #5
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	4413      	add	r3, r2
 800a48e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	69fa      	ldr	r2, [r7, #28]
 800a496:	0151      	lsls	r1, r2, #5
 800a498:	6a3a      	ldr	r2, [r7, #32]
 800a49a:	440a      	add	r2, r1
 800a49c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a4a4:	6053      	str	r3, [r2, #4]
          break;
 800a4a6:	e00a      	b.n	800a4be <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	015a      	lsls	r2, r3, #5
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	6053      	str	r3, [r2, #4]
 800a4ba:	e000      	b.n	800a4be <USB_HC_StartXfer+0x3ea>
          break;
 800a4bc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a4d4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	78db      	ldrb	r3, [r3, #3]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d004      	beq.n	800a4e8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4e4:	613b      	str	r3, [r7, #16]
 800a4e6:	e003      	b.n	800a4f0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a4ee:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a4f6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	6a3b      	ldr	r3, [r7, #32]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a504:	461a      	mov	r2, r3
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a50a:	79fb      	ldrb	r3, [r7, #7]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d003      	beq.n	800a518 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	e055      	b.n	800a5c0 <USB_HC_StartXfer+0x4ec>
 800a514:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	78db      	ldrb	r3, [r3, #3]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d14e      	bne.n	800a5be <USB_HC_StartXfer+0x4ea>
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d04a      	beq.n	800a5be <USB_HC_StartXfer+0x4ea>
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	79db      	ldrb	r3, [r3, #7]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d146      	bne.n	800a5be <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	7c9b      	ldrb	r3, [r3, #18]
 800a534:	2b03      	cmp	r3, #3
 800a536:	d831      	bhi.n	800a59c <USB_HC_StartXfer+0x4c8>
 800a538:	a201      	add	r2, pc, #4	@ (adr r2, 800a540 <USB_HC_StartXfer+0x46c>)
 800a53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53e:	bf00      	nop
 800a540:	0800a551 	.word	0x0800a551
 800a544:	0800a575 	.word	0x0800a575
 800a548:	0800a551 	.word	0x0800a551
 800a54c:	0800a575 	.word	0x0800a575
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	6a1b      	ldr	r3, [r3, #32]
 800a554:	3303      	adds	r3, #3
 800a556:	089b      	lsrs	r3, r3, #2
 800a558:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a55a:	8afa      	ldrh	r2, [r7, #22]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a560:	b29b      	uxth	r3, r3
 800a562:	429a      	cmp	r2, r3
 800a564:	d91c      	bls.n	800a5a0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	699b      	ldr	r3, [r3, #24]
 800a56a:	f043 0220 	orr.w	r2, r3, #32
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	619a      	str	r2, [r3, #24]
        }
        break;
 800a572:	e015      	b.n	800a5a0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	6a1b      	ldr	r3, [r3, #32]
 800a578:	3303      	adds	r3, #3
 800a57a:	089b      	lsrs	r3, r3, #2
 800a57c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a57e:	8afa      	ldrh	r2, [r7, #22]
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d90a      	bls.n	800a5a4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	619a      	str	r2, [r3, #24]
        }
        break;
 800a59a:	e003      	b.n	800a5a4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a59c:	bf00      	nop
 800a59e:	e002      	b.n	800a5a6 <USB_HC_StartXfer+0x4d2>
        break;
 800a5a0:	bf00      	nop
 800a5a2:	e000      	b.n	800a5a6 <USB_HC_StartXfer+0x4d2>
        break;
 800a5a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	6999      	ldr	r1, [r3, #24]
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	785a      	ldrb	r2, [r3, #1]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	9000      	str	r0, [sp, #0]
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f7ff f9c9 	bl	8009950 <USB_WritePacket>
  }

  return HAL_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3728      	adds	r7, #40	@ 0x28
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	b29b      	uxth	r3, r3
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3714      	adds	r7, #20
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b089      	sub	sp, #36	@ 0x24
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	0c9b      	lsrs	r3, r3, #18
 800a612:	f003 0303 	and.w	r3, r3, #3
 800a616:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	0fdb      	lsrs	r3, r3, #31
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	4413      	add	r3, r2
 800a636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	0fdb      	lsrs	r3, r3, #31
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f003 0320 	and.w	r3, r3, #32
 800a64c:	2b20      	cmp	r3, #32
 800a64e:	d10d      	bne.n	800a66c <USB_HC_Halt+0x82>
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10a      	bne.n	800a66c <USB_HC_Halt+0x82>
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d005      	beq.n	800a668 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d002      	beq.n	800a668 <USB_HC_Halt+0x7e>
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2b03      	cmp	r3, #3
 800a666:	d101      	bne.n	800a66c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	e0d8      	b.n	800a81e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <USB_HC_Halt+0x8e>
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2b02      	cmp	r3, #2
 800a676:	d173      	bne.n	800a760 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	0151      	lsls	r1, r2, #5
 800a68a:	69fa      	ldr	r2, [r7, #28]
 800a68c:	440a      	add	r2, r1
 800a68e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a692:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a696:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	f003 0320 	and.w	r3, r3, #32
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d14a      	bne.n	800a73a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d133      	bne.n	800a718 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	69ba      	ldr	r2, [r7, #24]
 800a6c0:	0151      	lsls	r1, r2, #5
 800a6c2:	69fa      	ldr	r2, [r7, #28]
 800a6c4:	440a      	add	r2, r1
 800a6c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a6ce:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69ba      	ldr	r2, [r7, #24]
 800a6e0:	0151      	lsls	r1, r2, #5
 800a6e2:	69fa      	ldr	r2, [r7, #28]
 800a6e4:	440a      	add	r2, r1
 800a6e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a6ee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6fc:	d82e      	bhi.n	800a75c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	015a      	lsls	r2, r3, #5
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	4413      	add	r3, r2
 800a706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a714:	d0ec      	beq.n	800a6f0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a716:	e081      	b.n	800a81c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	015a      	lsls	r2, r3, #5
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	4413      	add	r3, r2
 800a720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	69ba      	ldr	r2, [r7, #24]
 800a728:	0151      	lsls	r1, r2, #5
 800a72a:	69fa      	ldr	r2, [r7, #28]
 800a72c:	440a      	add	r2, r1
 800a72e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a732:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a736:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a738:	e070      	b.n	800a81c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	015a      	lsls	r2, r3, #5
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	4413      	add	r3, r2
 800a742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	69ba      	ldr	r2, [r7, #24]
 800a74a:	0151      	lsls	r1, r2, #5
 800a74c:	69fa      	ldr	r2, [r7, #28]
 800a74e:	440a      	add	r2, r1
 800a750:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a754:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a758:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a75a:	e05f      	b.n	800a81c <USB_HC_Halt+0x232>
            break;
 800a75c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a75e:	e05d      	b.n	800a81c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	4413      	add	r3, r2
 800a768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	69ba      	ldr	r2, [r7, #24]
 800a770:	0151      	lsls	r1, r2, #5
 800a772:	69fa      	ldr	r2, [r7, #28]
 800a774:	440a      	add	r2, r1
 800a776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a77a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a77e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d133      	bne.n	800a7f8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	4413      	add	r3, r2
 800a798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	69ba      	ldr	r2, [r7, #24]
 800a7a0:	0151      	lsls	r1, r2, #5
 800a7a2:	69fa      	ldr	r2, [r7, #28]
 800a7a4:	440a      	add	r2, r1
 800a7a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a7aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	0151      	lsls	r1, r2, #5
 800a7c2:	69fa      	ldr	r2, [r7, #28]
 800a7c4:	440a      	add	r2, r1
 800a7c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a7ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a7ce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a7dc:	d81d      	bhi.n	800a81a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7f4:	d0ec      	beq.n	800a7d0 <USB_HC_Halt+0x1e6>
 800a7f6:	e011      	b.n	800a81c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	4413      	add	r3, r2
 800a800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	69ba      	ldr	r2, [r7, #24]
 800a808:	0151      	lsls	r1, r2, #5
 800a80a:	69fa      	ldr	r2, [r7, #28]
 800a80c:	440a      	add	r2, r1
 800a80e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a812:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a816:	6013      	str	r3, [r2, #0]
 800a818:	e000      	b.n	800a81c <USB_HC_Halt+0x232>
          break;
 800a81a:	bf00      	nop
    }
  }

  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3724      	adds	r7, #36	@ 0x24
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
	...

0800a82c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a840:	2301      	movs	r3, #1
 800a842:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	04da      	lsls	r2, r3, #19
 800a848:	4b15      	ldr	r3, [pc, #84]	@ (800a8a0 <USB_DoPing+0x74>)
 800a84a:	4013      	ands	r3, r2
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	0151      	lsls	r1, r2, #5
 800a850:	697a      	ldr	r2, [r7, #20]
 800a852:	440a      	add	r2, r1
 800a854:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a858:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a85c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	015a      	lsls	r2, r3, #5
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	4413      	add	r3, r2
 800a866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a874:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a87c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	015a      	lsls	r2, r3, #5
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	4413      	add	r3, r2
 800a886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a88a:	461a      	mov	r2, r3
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	371c      	adds	r7, #28
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	1ff80000 	.word	0x1ff80000

0800a8a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b088      	sub	sp, #32
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f7fe ff8c 	bl	80097d6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a8be:	2110      	movs	r1, #16
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7fe ffe5 	bl	8009890 <USB_FlushTxFifo>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff f80f 	bl	80098f4 <USB_FlushRxFifo>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	61bb      	str	r3, [r7, #24]
 800a8e4:	e01f      	b.n	800a926 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	015a      	lsls	r2, r3, #5
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a904:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a90c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	015a      	lsls	r2, r3, #5
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	4413      	add	r3, r2
 800a916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a91a:	461a      	mov	r2, r3
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	3301      	adds	r3, #1
 800a924:	61bb      	str	r3, [r7, #24]
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	2b0f      	cmp	r3, #15
 800a92a:	d9dc      	bls.n	800a8e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a92c:	2300      	movs	r3, #0
 800a92e:	61bb      	str	r3, [r7, #24]
 800a930:	e034      	b.n	800a99c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	015a      	lsls	r2, r3, #5
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	4413      	add	r3, r2
 800a93a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a948:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a950:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a958:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	4413      	add	r3, r2
 800a962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a966:	461a      	mov	r2, r3
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3301      	adds	r3, #1
 800a970:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a978:	d80c      	bhi.n	800a994 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	015a      	lsls	r2, r3, #5
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	4413      	add	r3, r2
 800a982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a98c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a990:	d0ec      	beq.n	800a96c <USB_StopHost+0xc8>
 800a992:	e000      	b.n	800a996 <USB_StopHost+0xf2>
        break;
 800a994:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	3301      	adds	r3, #1
 800a99a:	61bb      	str	r3, [r7, #24]
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	2b0f      	cmp	r3, #15
 800a9a0:	d9c7      	bls.n	800a932 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7fe fefb 	bl	80097b4 <USB_EnableGlobalInt>

  return ret;
 800a9be:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3720      	adds	r7, #32
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a9c8:	b590      	push	{r4, r7, lr}
 800a9ca:	b089      	sub	sp, #36	@ 0x24
 800a9cc:	af04      	add	r7, sp, #16
 800a9ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	2102      	movs	r1, #2
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fc85 	bl	800b2e6 <USBH_FindInterface>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
 800a9e2:	2bff      	cmp	r3, #255	@ 0xff
 800a9e4:	d002      	beq.n	800a9ec <USBH_CDC_InterfaceInit+0x24>
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d901      	bls.n	800a9f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	e13d      	b.n	800ac6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fc5a 	bl	800b2ae <USBH_SelectInterface>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800aa04:	2302      	movs	r3, #2
 800aa06:	e131      	b.n	800ac6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800aa0e:	2050      	movs	r0, #80	@ 0x50
 800aa10:	f002 fb84 	bl	800d11c <malloc>
 800aa14:	4603      	mov	r3, r0
 800aa16:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d101      	bne.n	800aa2c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	e11f      	b.n	800ac6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800aa2c:	2250      	movs	r2, #80	@ 0x50
 800aa2e:	2100      	movs	r1, #0
 800aa30:	68b8      	ldr	r0, [r7, #8]
 800aa32:	f002 fc31 	bl	800d298 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	211a      	movs	r1, #26
 800aa3c:	fb01 f303 	mul.w	r3, r1, r3
 800aa40:	4413      	add	r3, r2
 800aa42:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	b25b      	sxtb	r3, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	da15      	bge.n	800aa7a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	211a      	movs	r1, #26
 800aa54:	fb01 f303 	mul.w	r3, r1, r3
 800aa58:	4413      	add	r3, r2
 800aa5a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800aa5e:	781a      	ldrb	r2, [r3, #0]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	211a      	movs	r1, #26
 800aa6a:	fb01 f303 	mul.w	r3, r1, r3
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800aa74:	881a      	ldrh	r2, [r3, #0]
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	785b      	ldrb	r3, [r3, #1]
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f001 ffbe 	bl	800ca02 <USBH_AllocPipe>
 800aa86:	4603      	mov	r3, r0
 800aa88:	461a      	mov	r2, r3
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	7819      	ldrb	r1, [r3, #0]
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	7858      	ldrb	r0, [r3, #1]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	8952      	ldrh	r2, [r2, #10]
 800aaa6:	9202      	str	r2, [sp, #8]
 800aaa8:	2203      	movs	r2, #3
 800aaaa:	9201      	str	r2, [sp, #4]
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	4623      	mov	r3, r4
 800aab0:	4602      	mov	r2, r0
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f001 ff76 	bl	800c9a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	2200      	movs	r2, #0
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f002 fa85 	bl	800cfd0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800aac6:	2300      	movs	r3, #0
 800aac8:	2200      	movs	r2, #0
 800aaca:	210a      	movs	r1, #10
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fc0a 	bl	800b2e6 <USBH_FindInterface>
 800aad2:	4603      	mov	r3, r0
 800aad4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	2bff      	cmp	r3, #255	@ 0xff
 800aada:	d002      	beq.n	800aae2 <USBH_CDC_InterfaceInit+0x11a>
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d901      	bls.n	800aae6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800aae2:	2302      	movs	r3, #2
 800aae4:	e0c2      	b.n	800ac6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	211a      	movs	r1, #26
 800aaec:	fb01 f303 	mul.w	r3, r1, r3
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	b25b      	sxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	da16      	bge.n	800ab2c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	211a      	movs	r1, #26
 800ab04:	fb01 f303 	mul.w	r3, r1, r3
 800ab08:	4413      	add	r3, r2
 800ab0a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ab0e:	781a      	ldrb	r2, [r3, #0]
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	211a      	movs	r1, #26
 800ab1a:	fb01 f303 	mul.w	r3, r1, r3
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ab24:	881a      	ldrh	r2, [r3, #0]
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	835a      	strh	r2, [r3, #26]
 800ab2a:	e015      	b.n	800ab58 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ab2c:	7bfb      	ldrb	r3, [r7, #15]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	211a      	movs	r1, #26
 800ab32:	fb01 f303 	mul.w	r3, r1, r3
 800ab36:	4413      	add	r3, r2
 800ab38:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ab3c:	781a      	ldrb	r2, [r3, #0]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	211a      	movs	r1, #26
 800ab48:	fb01 f303 	mul.w	r3, r1, r3
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ab52:	881a      	ldrh	r2, [r3, #0]
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	211a      	movs	r1, #26
 800ab5e:	fb01 f303 	mul.w	r3, r1, r3
 800ab62:	4413      	add	r3, r2
 800ab64:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	b25b      	sxtb	r3, r3
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	da16      	bge.n	800ab9e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	211a      	movs	r1, #26
 800ab76:	fb01 f303 	mul.w	r3, r1, r3
 800ab7a:	4413      	add	r3, r2
 800ab7c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ab80:	781a      	ldrb	r2, [r3, #0]
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	211a      	movs	r1, #26
 800ab8c:	fb01 f303 	mul.w	r3, r1, r3
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800ab96:	881a      	ldrh	r2, [r3, #0]
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	835a      	strh	r2, [r3, #26]
 800ab9c:	e015      	b.n	800abca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	211a      	movs	r1, #26
 800aba4:	fb01 f303 	mul.w	r3, r1, r3
 800aba8:	4413      	add	r3, r2
 800abaa:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800abae:	781a      	ldrb	r2, [r3, #0]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800abb4:	7bfb      	ldrb	r3, [r7, #15]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	211a      	movs	r1, #26
 800abba:	fb01 f303 	mul.w	r3, r1, r3
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800abc4:	881a      	ldrh	r2, [r3, #0]
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	7b9b      	ldrb	r3, [r3, #14]
 800abce:	4619      	mov	r1, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f001 ff16 	bl	800ca02 <USBH_AllocPipe>
 800abd6:	4603      	mov	r3, r0
 800abd8:	461a      	mov	r2, r3
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	7bdb      	ldrb	r3, [r3, #15]
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f001 ff0c 	bl	800ca02 <USBH_AllocPipe>
 800abea:	4603      	mov	r3, r0
 800abec:	461a      	mov	r2, r3
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	7b59      	ldrb	r1, [r3, #13]
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	7b98      	ldrb	r0, [r3, #14]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	8b12      	ldrh	r2, [r2, #24]
 800ac0a:	9202      	str	r2, [sp, #8]
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	9201      	str	r2, [sp, #4]
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	4623      	mov	r3, r4
 800ac14:	4602      	mov	r2, r0
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f001 fec4 	bl	800c9a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	7b19      	ldrb	r1, [r3, #12]
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	7bd8      	ldrb	r0, [r3, #15]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	8b52      	ldrh	r2, [r2, #26]
 800ac34:	9202      	str	r2, [sp, #8]
 800ac36:	2202      	movs	r2, #2
 800ac38:	9201      	str	r2, [sp, #4]
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	4623      	mov	r3, r4
 800ac3e:	4602      	mov	r2, r0
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f001 feaf 	bl	800c9a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	7b5b      	ldrb	r3, [r3, #13]
 800ac52:	2200      	movs	r2, #0
 800ac54:	4619      	mov	r1, r3
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f002 f9ba 	bl	800cfd0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	7b1b      	ldrb	r3, [r3, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f002 f9b3 	bl	800cfd0 <USBH_LL_SetToggle>

  return USBH_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd90      	pop	{r4, r7, pc}

0800ac74 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac82:	69db      	ldr	r3, [r3, #28]
 800ac84:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00e      	beq.n	800acac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f001 fea4 	bl	800c9e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f001 fecf 	bl	800ca44 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	7b1b      	ldrb	r3, [r3, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00e      	beq.n	800acd2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	7b1b      	ldrb	r3, [r3, #12]
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f001 fe91 	bl	800c9e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	7b1b      	ldrb	r3, [r3, #12]
 800acc4:	4619      	mov	r1, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f001 febc 	bl	800ca44 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	7b5b      	ldrb	r3, [r3, #13]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00e      	beq.n	800acf8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	7b5b      	ldrb	r3, [r3, #13]
 800acde:	4619      	mov	r1, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f001 fe7e 	bl	800c9e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	7b5b      	ldrb	r3, [r3, #13]
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f001 fea9 	bl	800ca44 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800acfe:	69db      	ldr	r3, [r3, #28]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00b      	beq.n	800ad1c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f002 fa0d 	bl	800d12c <free>
    phost->pActiveClass->pData = 0U;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ad18:	2200      	movs	r2, #0
 800ad1a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	3340      	adds	r3, #64	@ 0x40
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f8b1 	bl	800aea6 <GetLineCoding>
 800ad44:	4603      	mov	r3, r0
 800ad46:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ad48:	7afb      	ldrb	r3, [r7, #11]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d105      	bne.n	800ad5a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ad54:	2102      	movs	r1, #2
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ad5a:	7afb      	ldrb	r3, [r7, #11]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ad7a:	69db      	ldr	r3, [r3, #28]
 800ad7c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ad84:	2b04      	cmp	r3, #4
 800ad86:	d877      	bhi.n	800ae78 <USBH_CDC_Process+0x114>
 800ad88:	a201      	add	r2, pc, #4	@ (adr r2, 800ad90 <USBH_CDC_Process+0x2c>)
 800ad8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad8e:	bf00      	nop
 800ad90:	0800ada5 	.word	0x0800ada5
 800ad94:	0800adab 	.word	0x0800adab
 800ad98:	0800addb 	.word	0x0800addb
 800ad9c:	0800ae4f 	.word	0x0800ae4f
 800ada0:	0800ae5d 	.word	0x0800ae5d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	73fb      	strb	r3, [r7, #15]
      break;
 800ada8:	e06d      	b.n	800ae86 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800adae:	4619      	mov	r1, r3
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f897 	bl	800aee4 <SetLineCoding>
 800adb6:	4603      	mov	r3, r0
 800adb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800adba:	7bbb      	ldrb	r3, [r7, #14]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d104      	bne.n	800adca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2202      	movs	r2, #2
 800adc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800adc8:	e058      	b.n	800ae7c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800adca:	7bbb      	ldrb	r3, [r7, #14]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d055      	beq.n	800ae7c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	2204      	movs	r2, #4
 800add4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800add8:	e050      	b.n	800ae7c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	3340      	adds	r3, #64	@ 0x40
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f860 	bl	800aea6 <GetLineCoding>
 800ade6:	4603      	mov	r3, r0
 800ade8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800adea:	7bbb      	ldrb	r3, [r7, #14]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d126      	bne.n	800ae3e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae02:	791b      	ldrb	r3, [r3, #4]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d13b      	bne.n	800ae80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae12:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d133      	bne.n	800ae80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae22:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d12b      	bne.n	800ae80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae30:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d124      	bne.n	800ae80 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f958 	bl	800b0ec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ae3c:	e020      	b.n	800ae80 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d01d      	beq.n	800ae80 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2204      	movs	r2, #4
 800ae48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ae4c:	e018      	b.n	800ae80 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f867 	bl	800af22 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f8da 	bl	800b00e <CDC_ProcessReception>
      break;
 800ae5a:	e014      	b.n	800ae86 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f001 f81a 	bl	800be98 <USBH_ClrFeature>
 800ae64:	4603      	mov	r3, r0
 800ae66:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ae68:	7bbb      	ldrb	r3, [r7, #14]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10a      	bne.n	800ae84 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800ae76:	e005      	b.n	800ae84 <USBH_CDC_Process+0x120>

    default:
      break;
 800ae78:	bf00      	nop
 800ae7a:	e004      	b.n	800ae86 <USBH_CDC_Process+0x122>
      break;
 800ae7c:	bf00      	nop
 800ae7e:	e002      	b.n	800ae86 <USBH_CDC_Process+0x122>
      break;
 800ae80:	bf00      	nop
 800ae82:	e000      	b.n	800ae86 <USBH_CDC_Process+0x122>
      break;
 800ae84:	bf00      	nop

  }

  return status;
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	370c      	adds	r7, #12
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	22a1      	movs	r2, #161	@ 0xa1
 800aeb4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2221      	movs	r2, #33	@ 0x21
 800aeba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2207      	movs	r2, #7
 800aecc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2207      	movs	r2, #7
 800aed2:	4619      	mov	r1, r3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f001 fb14 	bl	800c502 <USBH_CtlReq>
 800aeda:	4603      	mov	r3, r0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2221      	movs	r2, #33	@ 0x21
 800aef2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2220      	movs	r2, #32
 800aef8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2207      	movs	r2, #7
 800af0a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2207      	movs	r2, #7
 800af10:	4619      	mov	r1, r3
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f001 faf5 	bl	800c502 <USBH_CtlReq>
 800af18:	4603      	mov	r3, r0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b086      	sub	sp, #24
 800af26:	af02      	add	r7, sp, #8
 800af28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800af34:	2300      	movs	r3, #0
 800af36:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d002      	beq.n	800af48 <CDC_ProcessTransmission+0x26>
 800af42:	2b02      	cmp	r3, #2
 800af44:	d023      	beq.n	800af8e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800af46:	e05e      	b.n	800b006 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	8b12      	ldrh	r2, [r2, #24]
 800af50:	4293      	cmp	r3, r2
 800af52:	d90b      	bls.n	800af6c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	69d9      	ldr	r1, [r3, #28]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	8b1a      	ldrh	r2, [r3, #24]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	7b5b      	ldrb	r3, [r3, #13]
 800af60:	2001      	movs	r0, #1
 800af62:	9000      	str	r0, [sp, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 fcda 	bl	800c91e <USBH_BulkSendData>
 800af6a:	e00b      	b.n	800af84 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800af74:	b29a      	uxth	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	7b5b      	ldrb	r3, [r3, #13]
 800af7a:	2001      	movs	r0, #1
 800af7c:	9000      	str	r0, [sp, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f001 fccd 	bl	800c91e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2202      	movs	r2, #2
 800af88:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800af8c:	e03b      	b.n	800b006 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	7b5b      	ldrb	r3, [r3, #13]
 800af92:	4619      	mov	r1, r3
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f001 fff1 	bl	800cf7c <USBH_LL_GetURBState>
 800af9a:	4603      	mov	r3, r0
 800af9c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800af9e:	7afb      	ldrb	r3, [r7, #11]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d128      	bne.n	800aff6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	8b12      	ldrh	r2, [r2, #24]
 800afac:	4293      	cmp	r3, r2
 800afae:	d90e      	bls.n	800afce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	8b12      	ldrh	r2, [r2, #24]
 800afb8:	1a9a      	subs	r2, r3, r2
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	69db      	ldr	r3, [r3, #28]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	8b12      	ldrh	r2, [r2, #24]
 800afc6:	441a      	add	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	61da      	str	r2, [r3, #28]
 800afcc:	e002      	b.n	800afd4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2200      	movs	r2, #0
 800afd2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d004      	beq.n	800afe6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800afe4:	e00e      	b.n	800b004 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f868 	bl	800b0c4 <USBH_CDC_TransmitCallback>
      break;
 800aff4:	e006      	b.n	800b004 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800aff6:	7afb      	ldrb	r3, [r7, #11]
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d103      	bne.n	800b004 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800b004:	bf00      	nop
  }
}
 800b006:	bf00      	nop
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b086      	sub	sp, #24
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b020:	2300      	movs	r3, #0
 800b022:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d002      	beq.n	800b034 <CDC_ProcessReception+0x26>
 800b02e:	2b04      	cmp	r3, #4
 800b030:	d00e      	beq.n	800b050 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b032:	e043      	b.n	800b0bc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	6a19      	ldr	r1, [r3, #32]
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	8b5a      	ldrh	r2, [r3, #26]
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	7b1b      	ldrb	r3, [r3, #12]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f001 fc91 	bl	800c968 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	2204      	movs	r2, #4
 800b04a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800b04e:	e035      	b.n	800b0bc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	7b1b      	ldrb	r3, [r3, #12]
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 ff90 	bl	800cf7c <USBH_LL_GetURBState>
 800b05c:	4603      	mov	r3, r0
 800b05e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b060:	7cfb      	ldrb	r3, [r7, #19]
 800b062:	2b01      	cmp	r3, #1
 800b064:	d129      	bne.n	800b0ba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	7b1b      	ldrb	r3, [r3, #12]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 fef3 	bl	800ce58 <USBH_LL_GetLastXferSize>
 800b072:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d016      	beq.n	800b0ac <CDC_ProcessReception+0x9e>
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	8b5b      	ldrh	r3, [r3, #26]
 800b082:	461a      	mov	r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	4293      	cmp	r3, r2
 800b088:	d110      	bne.n	800b0ac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	1ad2      	subs	r2, r2, r3
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	6a1a      	ldr	r2, [r3, #32]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	441a      	add	r2, r3
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2203      	movs	r2, #3
 800b0a6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800b0aa:	e006      	b.n	800b0ba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f80f 	bl	800b0d8 <USBH_CDC_ReceiveCallback>
      break;
 800b0ba:	bf00      	nop
  }
}
 800b0bc:	bf00      	nop
 800b0be:	3718      	adds	r7, #24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	4613      	mov	r3, r2
 800b10c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b114:	2302      	movs	r3, #2
 800b116:	e029      	b.n	800b16c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	79fa      	ldrb	r2, [r7, #7]
 800b11c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f000 f81f 	bl	800b174 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d003      	beq.n	800b164 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f001 fdc3 	bl	800ccf0 <USBH_LL_Init>

  return USBH_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b17c:	2300      	movs	r3, #0
 800b17e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b180:	2300      	movs	r3, #0
 800b182:	60fb      	str	r3, [r7, #12]
 800b184:	e009      	b.n	800b19a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	33e0      	adds	r3, #224	@ 0xe0
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	2200      	movs	r2, #0
 800b192:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3301      	adds	r3, #1
 800b198:	60fb      	str	r3, [r7, #12]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2b0f      	cmp	r3, #15
 800b19e:	d9f2      	bls.n	800b186 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	60fb      	str	r3, [r7, #12]
 800b1a4:	e009      	b.n	800b1ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1c0:	d3f1      	bcc.n	800b1a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2240      	movs	r2, #64	@ 0x40
 800b1e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	331c      	adds	r3, #28
 800b212:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b216:	2100      	movs	r1, #0
 800b218:	4618      	mov	r0, r3
 800b21a:	f002 f83d 	bl	800d298 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b228:	2100      	movs	r1, #0
 800b22a:	4618      	mov	r0, r3
 800b22c:	f002 f834 	bl	800d298 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b236:	2212      	movs	r2, #18
 800b238:	2100      	movs	r1, #0
 800b23a:	4618      	mov	r0, r3
 800b23c:	f002 f82c 	bl	800d298 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b246:	223e      	movs	r2, #62	@ 0x3e
 800b248:	2100      	movs	r1, #0
 800b24a:	4618      	mov	r0, r3
 800b24c:	f002 f824 	bl	800d298 <memset>

  return USBH_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b25a:	b480      	push	{r7}
 800b25c:	b085      	sub	sp, #20
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b264:	2300      	movs	r3, #0
 800b266:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d016      	beq.n	800b29c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10e      	bne.n	800b296 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b27e:	1c59      	adds	r1, r3, #1
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	33de      	adds	r3, #222	@ 0xde
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b290:	2300      	movs	r3, #0
 800b292:	73fb      	strb	r3, [r7, #15]
 800b294:	e004      	b.n	800b2a0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b296:	2302      	movs	r3, #2
 800b298:	73fb      	strb	r3, [r7, #15]
 800b29a:	e001      	b.n	800b2a0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b29c:	2302      	movs	r3, #2
 800b29e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800b2c4:	78fa      	ldrb	r2, [r7, #3]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d204      	bcs.n	800b2d4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	78fa      	ldrb	r2, [r7, #3]
 800b2ce:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800b2d2:	e001      	b.n	800b2d8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr

0800b2e6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b087      	sub	sp, #28
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	4608      	mov	r0, r1
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	70fb      	strb	r3, [r7, #3]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	70bb      	strb	r3, [r7, #2]
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b300:	2300      	movs	r3, #0
 800b302:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b304:	2300      	movs	r3, #0
 800b306:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b30e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b310:	e025      	b.n	800b35e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	221a      	movs	r2, #26
 800b316:	fb02 f303 	mul.w	r3, r2, r3
 800b31a:	3308      	adds	r3, #8
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	4413      	add	r3, r2
 800b320:	3302      	adds	r3, #2
 800b322:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	795b      	ldrb	r3, [r3, #5]
 800b328:	78fa      	ldrb	r2, [r7, #3]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d002      	beq.n	800b334 <USBH_FindInterface+0x4e>
 800b32e:	78fb      	ldrb	r3, [r7, #3]
 800b330:	2bff      	cmp	r3, #255	@ 0xff
 800b332:	d111      	bne.n	800b358 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b338:	78ba      	ldrb	r2, [r7, #2]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d002      	beq.n	800b344 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b33e:	78bb      	ldrb	r3, [r7, #2]
 800b340:	2bff      	cmp	r3, #255	@ 0xff
 800b342:	d109      	bne.n	800b358 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b348:	787a      	ldrb	r2, [r7, #1]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d002      	beq.n	800b354 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b34e:	787b      	ldrb	r3, [r7, #1]
 800b350:	2bff      	cmp	r3, #255	@ 0xff
 800b352:	d101      	bne.n	800b358 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b354:	7dfb      	ldrb	r3, [r7, #23]
 800b356:	e006      	b.n	800b366 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b358:	7dfb      	ldrb	r3, [r7, #23]
 800b35a:	3301      	adds	r3, #1
 800b35c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b35e:	7dfb      	ldrb	r3, [r7, #23]
 800b360:	2b01      	cmp	r3, #1
 800b362:	d9d6      	bls.n	800b312 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b364:	23ff      	movs	r3, #255	@ 0xff
}
 800b366:	4618      	mov	r0, r3
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b082      	sub	sp, #8
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f001 fcf4 	bl	800cd68 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b380:	2101      	movs	r1, #1
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f001 fe0d 	bl	800cfa2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
	...

0800b394 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b088      	sub	sp, #32
 800b398:	af04      	add	r7, sp, #16
 800b39a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b39c:	2302      	movs	r3, #2
 800b39e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d102      	bne.n	800b3b6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2203      	movs	r2, #3
 800b3b4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b0b      	cmp	r3, #11
 800b3be:	f200 81bb 	bhi.w	800b738 <USBH_Process+0x3a4>
 800b3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c8 <USBH_Process+0x34>)
 800b3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c8:	0800b3f9 	.word	0x0800b3f9
 800b3cc:	0800b42b 	.word	0x0800b42b
 800b3d0:	0800b493 	.word	0x0800b493
 800b3d4:	0800b6d3 	.word	0x0800b6d3
 800b3d8:	0800b739 	.word	0x0800b739
 800b3dc:	0800b533 	.word	0x0800b533
 800b3e0:	0800b679 	.word	0x0800b679
 800b3e4:	0800b569 	.word	0x0800b569
 800b3e8:	0800b589 	.word	0x0800b589
 800b3ec:	0800b5a7 	.word	0x0800b5a7
 800b3f0:	0800b5eb 	.word	0x0800b5eb
 800b3f4:	0800b6bb 	.word	0x0800b6bb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 819b 	beq.w	800b73c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b40c:	20c8      	movs	r0, #200	@ 0xc8
 800b40e:	f001 fe12 	bl	800d036 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f001 fd05 	bl	800ce22 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b428:	e188      	b.n	800b73c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b430:	2b01      	cmp	r3, #1
 800b432:	d107      	bne.n	800b444 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2202      	movs	r2, #2
 800b440:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b442:	e18a      	b.n	800b75a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b44a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b44e:	d914      	bls.n	800b47a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b456:	3301      	adds	r3, #1
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b466:	2b03      	cmp	r3, #3
 800b468:	d903      	bls.n	800b472 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	220d      	movs	r2, #13
 800b46e:	701a      	strb	r2, [r3, #0]
      break;
 800b470:	e173      	b.n	800b75a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	701a      	strb	r2, [r3, #0]
      break;
 800b478:	e16f      	b.n	800b75a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b480:	f103 020a 	add.w	r2, r3, #10
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800b48a:	200a      	movs	r0, #10
 800b48c:	f001 fdd3 	bl	800d036 <USBH_Delay>
      break;
 800b490:	e163      	b.n	800b75a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d005      	beq.n	800b4a8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b4a2:	2104      	movs	r1, #4
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b4a8:	2064      	movs	r0, #100	@ 0x64
 800b4aa:	f001 fdc4 	bl	800d036 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f001 fc90 	bl	800cdd4 <USBH_LL_GetSpeed>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2205      	movs	r2, #5
 800b4c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f001 fa9b 	bl	800ca02 <USBH_AllocPipe>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b4d4:	2180      	movs	r1, #128	@ 0x80
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f001 fa93 	bl	800ca02 <USBH_AllocPipe>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	461a      	mov	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	7919      	ldrb	r1, [r3, #4]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b4f8:	9202      	str	r2, [sp, #8]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	9201      	str	r2, [sp, #4]
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	4603      	mov	r3, r0
 800b502:	2280      	movs	r2, #128	@ 0x80
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f001 fa4d 	bl	800c9a4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	7959      	ldrb	r1, [r3, #5]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b51e:	9202      	str	r2, [sp, #8]
 800b520:	2200      	movs	r2, #0
 800b522:	9201      	str	r2, [sp, #4]
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	4603      	mov	r3, r0
 800b528:	2200      	movs	r2, #0
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f001 fa3a 	bl	800c9a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b530:	e113      	b.n	800b75a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 f916 	bl	800b764 <USBH_HandleEnum>
 800b538:	4603      	mov	r3, r0
 800b53a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b53c:	7bbb      	ldrb	r3, [r7, #14]
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	2b00      	cmp	r3, #0
 800b542:	f040 80fd 	bne.w	800b740 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800b554:	2b01      	cmp	r3, #1
 800b556:	d103      	bne.n	800b560 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2208      	movs	r2, #8
 800b55c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b55e:	e0ef      	b.n	800b740 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2207      	movs	r2, #7
 800b564:	701a      	strb	r2, [r3, #0]
      break;
 800b566:	e0eb      	b.n	800b740 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f000 80e8 	beq.w	800b744 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b57a:	2101      	movs	r1, #1
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2208      	movs	r2, #8
 800b584:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b586:	e0dd      	b.n	800b744 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800b58e:	4619      	mov	r1, r3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fc3a 	bl	800be0a <USBH_SetCfg>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f040 80d5 	bne.w	800b748 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2209      	movs	r2, #9
 800b5a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b5a4:	e0d0      	b.n	800b748 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b5ac:	f003 0320 	and.w	r3, r3, #32
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d016      	beq.n	800b5e2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b5b4:	2101      	movs	r1, #1
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fc4a 	bl	800be50 <USBH_SetFeature>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b5c0:	7bbb      	ldrb	r3, [r7, #14]
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d103      	bne.n	800b5d0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	220a      	movs	r2, #10
 800b5cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b5ce:	e0bd      	b.n	800b74c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800b5d0:	7bbb      	ldrb	r3, [r7, #14]
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	2b03      	cmp	r3, #3
 800b5d6:	f040 80b9 	bne.w	800b74c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	220a      	movs	r2, #10
 800b5de:	701a      	strb	r2, [r3, #0]
      break;
 800b5e0:	e0b4      	b.n	800b74c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	220a      	movs	r2, #10
 800b5e6:	701a      	strb	r2, [r3, #0]
      break;
 800b5e8:	e0b0      	b.n	800b74c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f000 80ad 	beq.w	800b750 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b5fe:	2300      	movs	r3, #0
 800b600:	73fb      	strb	r3, [r7, #15]
 800b602:	e016      	b.n	800b632 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b604:	7bfa      	ldrb	r2, [r7, #15]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	32de      	adds	r2, #222	@ 0xde
 800b60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b60e:	791a      	ldrb	r2, [r3, #4]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b616:	429a      	cmp	r2, r3
 800b618:	d108      	bne.n	800b62c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b61a:	7bfa      	ldrb	r2, [r7, #15]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	32de      	adds	r2, #222	@ 0xde
 800b620:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b62a:	e005      	b.n	800b638 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
 800b62e:	3301      	adds	r3, #1
 800b630:	73fb      	strb	r3, [r7, #15]
 800b632:	7bfb      	ldrb	r3, [r7, #15]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d0e5      	beq.n	800b604 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d016      	beq.n	800b670 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	4798      	blx	r3
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d109      	bne.n	800b668 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2206      	movs	r2, #6
 800b658:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b660:	2103      	movs	r1, #3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b666:	e073      	b.n	800b750 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	220d      	movs	r2, #13
 800b66c:	701a      	strb	r2, [r3, #0]
      break;
 800b66e:	e06f      	b.n	800b750 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	220d      	movs	r2, #13
 800b674:	701a      	strb	r2, [r3, #0]
      break;
 800b676:	e06b      	b.n	800b750 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d017      	beq.n	800b6b2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	4798      	blx	r3
 800b68e:	4603      	mov	r3, r0
 800b690:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b692:	7bbb      	ldrb	r3, [r7, #14]
 800b694:	b2db      	uxtb	r3, r3
 800b696:	2b00      	cmp	r3, #0
 800b698:	d103      	bne.n	800b6a2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	220b      	movs	r2, #11
 800b69e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b6a0:	e058      	b.n	800b754 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d154      	bne.n	800b754 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	220d      	movs	r2, #13
 800b6ae:	701a      	strb	r2, [r3, #0]
      break;
 800b6b0:	e050      	b.n	800b754 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	220d      	movs	r2, #13
 800b6b6:	701a      	strb	r2, [r3, #0]
      break;
 800b6b8:	e04c      	b.n	800b754 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d049      	beq.n	800b758 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b6ca:	695b      	ldr	r3, [r3, #20]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	4798      	blx	r3
      }
      break;
 800b6d0:	e042      	b.n	800b758 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7ff fd4a 	bl	800b174 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d009      	beq.n	800b6fe <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b704:	2b00      	cmp	r3, #0
 800b706:	d005      	beq.n	800b714 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b70e:	2105      	movs	r1, #5
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d107      	bne.n	800b730 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7ff fe22 	bl	800b372 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b72e:	e014      	b.n	800b75a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 fb19 	bl	800cd68 <USBH_LL_Start>
      break;
 800b736:	e010      	b.n	800b75a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b738:	bf00      	nop
 800b73a:	e00e      	b.n	800b75a <USBH_Process+0x3c6>
      break;
 800b73c:	bf00      	nop
 800b73e:	e00c      	b.n	800b75a <USBH_Process+0x3c6>
      break;
 800b740:	bf00      	nop
 800b742:	e00a      	b.n	800b75a <USBH_Process+0x3c6>
    break;
 800b744:	bf00      	nop
 800b746:	e008      	b.n	800b75a <USBH_Process+0x3c6>
      break;
 800b748:	bf00      	nop
 800b74a:	e006      	b.n	800b75a <USBH_Process+0x3c6>
      break;
 800b74c:	bf00      	nop
 800b74e:	e004      	b.n	800b75a <USBH_Process+0x3c6>
      break;
 800b750:	bf00      	nop
 800b752:	e002      	b.n	800b75a <USBH_Process+0x3c6>
      break;
 800b754:	bf00      	nop
 800b756:	e000      	b.n	800b75a <USBH_Process+0x3c6>
      break;
 800b758:	bf00      	nop
  }
  return USBH_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b088      	sub	sp, #32
 800b768:	af04      	add	r7, sp, #16
 800b76a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b76c:	2301      	movs	r3, #1
 800b76e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b770:	2301      	movs	r3, #1
 800b772:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	785b      	ldrb	r3, [r3, #1]
 800b778:	2b07      	cmp	r3, #7
 800b77a:	f200 81bd 	bhi.w	800baf8 <USBH_HandleEnum+0x394>
 800b77e:	a201      	add	r2, pc, #4	@ (adr r2, 800b784 <USBH_HandleEnum+0x20>)
 800b780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b784:	0800b7a5 	.word	0x0800b7a5
 800b788:	0800b85f 	.word	0x0800b85f
 800b78c:	0800b8c9 	.word	0x0800b8c9
 800b790:	0800b953 	.word	0x0800b953
 800b794:	0800b9bd 	.word	0x0800b9bd
 800b798:	0800ba2d 	.word	0x0800ba2d
 800b79c:	0800ba73 	.word	0x0800ba73
 800b7a0:	0800bab9 	.word	0x0800bab9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b7a4:	2108      	movs	r1, #8
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 fa4c 	bl	800bc44 <USBH_Get_DevDesc>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b7b0:	7bbb      	ldrb	r3, [r7, #14]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d12e      	bne.n	800b814 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	7919      	ldrb	r1, [r3, #4]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b7da:	9202      	str	r2, [sp, #8]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	9201      	str	r2, [sp, #4]
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2280      	movs	r2, #128	@ 0x80
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f001 f8dc 	bl	800c9a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	7959      	ldrb	r1, [r3, #5]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b800:	9202      	str	r2, [sp, #8]
 800b802:	2200      	movs	r2, #0
 800b804:	9201      	str	r2, [sp, #4]
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	4603      	mov	r3, r0
 800b80a:	2200      	movs	r2, #0
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f001 f8c9 	bl	800c9a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b812:	e173      	b.n	800bafc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b814:	7bbb      	ldrb	r3, [r7, #14]
 800b816:	2b03      	cmp	r3, #3
 800b818:	f040 8170 	bne.w	800bafc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b822:	3301      	adds	r3, #1
 800b824:	b2da      	uxtb	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b832:	2b03      	cmp	r3, #3
 800b834:	d903      	bls.n	800b83e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	220d      	movs	r2, #13
 800b83a:	701a      	strb	r2, [r3, #0]
      break;
 800b83c:	e15e      	b.n	800bafc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	795b      	ldrb	r3, [r3, #5]
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f001 f8fd 	bl	800ca44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	791b      	ldrb	r3, [r3, #4]
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f001 f8f7 	bl	800ca44 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	701a      	strb	r2, [r3, #0]
      break;
 800b85c:	e14e      	b.n	800bafc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b85e:	2112      	movs	r1, #18
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 f9ef 	bl	800bc44 <USBH_Get_DevDesc>
 800b866:	4603      	mov	r3, r0
 800b868:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b86a:	7bbb      	ldrb	r3, [r7, #14]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d103      	bne.n	800b878 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2202      	movs	r2, #2
 800b874:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b876:	e143      	b.n	800bb00 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b878:	7bbb      	ldrb	r3, [r7, #14]
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	f040 8140 	bne.w	800bb00 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b886:	3301      	adds	r3, #1
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b896:	2b03      	cmp	r3, #3
 800b898:	d903      	bls.n	800b8a2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	220d      	movs	r2, #13
 800b89e:	701a      	strb	r2, [r3, #0]
      break;
 800b8a0:	e12e      	b.n	800bb00 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	795b      	ldrb	r3, [r3, #5]
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f001 f8cb 	bl	800ca44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	791b      	ldrb	r3, [r3, #4]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f001 f8c5 	bl	800ca44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	701a      	strb	r2, [r3, #0]
      break;
 800b8c6:	e11b      	b.n	800bb00 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fa79 	bl	800bdc2 <USBH_SetAddress>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b8d4:	7bbb      	ldrb	r3, [r7, #14]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d130      	bne.n	800b93c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b8da:	2002      	movs	r0, #2
 800b8dc:	f001 fbab 	bl	800d036 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2203      	movs	r2, #3
 800b8ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	7919      	ldrb	r1, [r3, #4]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b902:	9202      	str	r2, [sp, #8]
 800b904:	2200      	movs	r2, #0
 800b906:	9201      	str	r2, [sp, #4]
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	4603      	mov	r3, r0
 800b90c:	2280      	movs	r2, #128	@ 0x80
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f001 f848 	bl	800c9a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	7959      	ldrb	r1, [r3, #5]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b928:	9202      	str	r2, [sp, #8]
 800b92a:	2200      	movs	r2, #0
 800b92c:	9201      	str	r2, [sp, #4]
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	4603      	mov	r3, r0
 800b932:	2200      	movs	r2, #0
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f001 f835 	bl	800c9a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b93a:	e0e3      	b.n	800bb04 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
 800b93e:	2b03      	cmp	r3, #3
 800b940:	f040 80e0 	bne.w	800bb04 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	220d      	movs	r2, #13
 800b948:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	705a      	strb	r2, [r3, #1]
      break;
 800b950:	e0d8      	b.n	800bb04 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b952:	2109      	movs	r1, #9
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 f9a1 	bl	800bc9c <USBH_Get_CfgDesc>
 800b95a:	4603      	mov	r3, r0
 800b95c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b95e:	7bbb      	ldrb	r3, [r7, #14]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d103      	bne.n	800b96c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2204      	movs	r2, #4
 800b968:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b96a:	e0cd      	b.n	800bb08 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
 800b96e:	2b03      	cmp	r3, #3
 800b970:	f040 80ca 	bne.w	800bb08 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b97a:	3301      	adds	r3, #1
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b98a:	2b03      	cmp	r3, #3
 800b98c:	d903      	bls.n	800b996 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	220d      	movs	r2, #13
 800b992:	701a      	strb	r2, [r3, #0]
      break;
 800b994:	e0b8      	b.n	800bb08 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	795b      	ldrb	r3, [r3, #5]
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f001 f851 	bl	800ca44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	791b      	ldrb	r3, [r3, #4]
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f001 f84b 	bl	800ca44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	701a      	strb	r2, [r3, #0]
      break;
 800b9ba:	e0a5      	b.n	800bb08 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f969 	bl	800bc9c <USBH_Get_CfgDesc>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b9ce:	7bbb      	ldrb	r3, [r7, #14]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d103      	bne.n	800b9dc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2205      	movs	r2, #5
 800b9d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b9da:	e097      	b.n	800bb0c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	f040 8094 	bne.w	800bb0c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d903      	bls.n	800ba06 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	220d      	movs	r2, #13
 800ba02:	701a      	strb	r2, [r3, #0]
      break;
 800ba04:	e082      	b.n	800bb0c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	795b      	ldrb	r3, [r3, #5]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f001 f819 	bl	800ca44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	791b      	ldrb	r3, [r3, #4]
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f001 f813 	bl	800ca44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	701a      	strb	r2, [r3, #0]
      break;
 800ba2a:	e06f      	b.n	800bb0c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d019      	beq.n	800ba6a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ba42:	23ff      	movs	r3, #255	@ 0xff
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f953 	bl	800bcf0 <USBH_Get_StringDesc>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d103      	bne.n	800ba5c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2206      	movs	r2, #6
 800ba58:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ba5a:	e059      	b.n	800bb10 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	d156      	bne.n	800bb10 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2206      	movs	r2, #6
 800ba66:	705a      	strb	r2, [r3, #1]
      break;
 800ba68:	e052      	b.n	800bb10 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2206      	movs	r2, #6
 800ba6e:	705a      	strb	r2, [r3, #1]
      break;
 800ba70:	e04e      	b.n	800bb10 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d019      	beq.n	800bab0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ba88:	23ff      	movs	r3, #255	@ 0xff
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 f930 	bl	800bcf0 <USBH_Get_StringDesc>
 800ba90:	4603      	mov	r3, r0
 800ba92:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d103      	bne.n	800baa2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2207      	movs	r2, #7
 800ba9e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800baa0:	e038      	b.n	800bb14 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800baa2:	7bbb      	ldrb	r3, [r7, #14]
 800baa4:	2b03      	cmp	r3, #3
 800baa6:	d135      	bne.n	800bb14 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2207      	movs	r2, #7
 800baac:	705a      	strb	r2, [r3, #1]
      break;
 800baae:	e031      	b.n	800bb14 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2207      	movs	r2, #7
 800bab4:	705a      	strb	r2, [r3, #1]
      break;
 800bab6:	e02d      	b.n	800bb14 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d017      	beq.n	800baf2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bace:	23ff      	movs	r3, #255	@ 0xff
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f90d 	bl	800bcf0 <USBH_Get_StringDesc>
 800bad6:	4603      	mov	r3, r0
 800bad8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bada:	7bbb      	ldrb	r3, [r7, #14]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d102      	bne.n	800bae6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bae4:	e018      	b.n	800bb18 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bae6:	7bbb      	ldrb	r3, [r7, #14]
 800bae8:	2b03      	cmp	r3, #3
 800baea:	d115      	bne.n	800bb18 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	73fb      	strb	r3, [r7, #15]
      break;
 800baf0:	e012      	b.n	800bb18 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	73fb      	strb	r3, [r7, #15]
      break;
 800baf6:	e00f      	b.n	800bb18 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800baf8:	bf00      	nop
 800bafa:	e00e      	b.n	800bb1a <USBH_HandleEnum+0x3b6>
      break;
 800bafc:	bf00      	nop
 800bafe:	e00c      	b.n	800bb1a <USBH_HandleEnum+0x3b6>
      break;
 800bb00:	bf00      	nop
 800bb02:	e00a      	b.n	800bb1a <USBH_HandleEnum+0x3b6>
      break;
 800bb04:	bf00      	nop
 800bb06:	e008      	b.n	800bb1a <USBH_HandleEnum+0x3b6>
      break;
 800bb08:	bf00      	nop
 800bb0a:	e006      	b.n	800bb1a <USBH_HandleEnum+0x3b6>
      break;
 800bb0c:	bf00      	nop
 800bb0e:	e004      	b.n	800bb1a <USBH_HandleEnum+0x3b6>
      break;
 800bb10:	bf00      	nop
 800bb12:	e002      	b.n	800bb1a <USBH_HandleEnum+0x3b6>
      break;
 800bb14:	bf00      	nop
 800bb16:	e000      	b.n	800bb1a <USBH_HandleEnum+0x3b6>
      break;
 800bb18:	bf00      	nop
  }
  return Status;
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	683a      	ldr	r2, [r7, #0]
 800bb32:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800bb36:	bf00      	nop
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b082      	sub	sp, #8
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bb50:	1c5a      	adds	r2, r3, #1
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f804 	bl	800bb66 <USBH_HandleSof>
}
 800bb5e:	bf00      	nop
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	2b0b      	cmp	r3, #11
 800bb76:	d10a      	bne.n	800bb8e <USBH_HandleSof+0x28>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d005      	beq.n	800bb8e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bb88:	699b      	ldr	r3, [r3, #24]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	4798      	blx	r3
  }
}
 800bb8e:	bf00      	nop
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bb96:	b480      	push	{r7}
 800bb98:	b083      	sub	sp, #12
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bba6:	bf00      	nop
}
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800bbc2:	bf00      	nop
}
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b083      	sub	sp, #12
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f001 f8be 	bl	800cd9e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	791b      	ldrb	r3, [r3, #4]
 800bc26:	4619      	mov	r1, r3
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 ff0b 	bl	800ca44 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	795b      	ldrb	r3, [r3, #5]
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 ff05 	bl	800ca44 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af02      	add	r7, sp, #8
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800bc50:	887b      	ldrh	r3, [r7, #2]
 800bc52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc56:	d901      	bls.n	800bc5c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	e01b      	b.n	800bc94 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bc62:	887b      	ldrh	r3, [r7, #2]
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	4613      	mov	r3, r2
 800bc68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f872 	bl	800bd58 <USBH_GetDescriptor>
 800bc74:	4603      	mov	r3, r0
 800bc76:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800bc78:	7bfb      	ldrb	r3, [r7, #15]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d109      	bne.n	800bc92 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bc84:	887a      	ldrh	r2, [r7, #2]
 800bc86:	4619      	mov	r1, r3
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 f929 	bl	800bee0 <USBH_ParseDevDesc>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	460b      	mov	r3, r1
 800bca6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	331c      	adds	r3, #28
 800bcac:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800bcae:	887b      	ldrh	r3, [r7, #2]
 800bcb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcb4:	d901      	bls.n	800bcba <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e016      	b.n	800bce8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bcba:	887b      	ldrh	r3, [r7, #2]
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 f846 	bl	800bd58 <USBH_GetDescriptor>
 800bccc:	4603      	mov	r3, r0
 800bcce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bcd0:	7bfb      	ldrb	r3, [r7, #15]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d107      	bne.n	800bce6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bcd6:	887b      	ldrh	r3, [r7, #2]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	68b9      	ldr	r1, [r7, #8]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 f9af 	bl	800c040 <USBH_ParseCfgDesc>
 800bce2:	4603      	mov	r3, r0
 800bce4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b088      	sub	sp, #32
 800bcf4:	af02      	add	r7, sp, #8
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	607a      	str	r2, [r7, #4]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	72fb      	strb	r3, [r7, #11]
 800bd00:	4613      	mov	r3, r2
 800bd02:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800bd04:	893b      	ldrh	r3, [r7, #8]
 800bd06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd0a:	d802      	bhi.n	800bd12 <USBH_Get_StringDesc+0x22>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bd12:	2303      	movs	r3, #3
 800bd14:	e01c      	b.n	800bd50 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800bd16:	7afb      	ldrb	r3, [r7, #11]
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800bd1e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bd26:	893b      	ldrh	r3, [r7, #8]
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f000 f812 	bl	800bd58 <USBH_GetDescriptor>
 800bd34:	4603      	mov	r3, r0
 800bd36:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bd38:	7dfb      	ldrb	r3, [r7, #23]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d107      	bne.n	800bd4e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bd44:	893a      	ldrh	r2, [r7, #8]
 800bd46:	6879      	ldr	r1, [r7, #4]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 fb8d 	bl	800c468 <USBH_ParseStringDesc>
  }

  return status;
 800bd4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	607b      	str	r3, [r7, #4]
 800bd62:	460b      	mov	r3, r1
 800bd64:	72fb      	strb	r3, [r7, #11]
 800bd66:	4613      	mov	r3, r2
 800bd68:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	789b      	ldrb	r3, [r3, #2]
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d11c      	bne.n	800bdac <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bd72:	7afb      	ldrb	r3, [r7, #11]
 800bd74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2206      	movs	r2, #6
 800bd82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	893a      	ldrh	r2, [r7, #8]
 800bd88:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bd8a:	893b      	ldrh	r3, [r7, #8]
 800bd8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bd90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd94:	d104      	bne.n	800bda0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f240 4209 	movw	r2, #1033	@ 0x409
 800bd9c:	829a      	strh	r2, [r3, #20]
 800bd9e:	e002      	b.n	800bda6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	8b3a      	ldrh	r2, [r7, #24]
 800bdaa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bdac:	8b3b      	ldrh	r3, [r7, #24]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	6879      	ldr	r1, [r7, #4]
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f000 fba5 	bl	800c502 <USBH_CtlReq>
 800bdb8:	4603      	mov	r3, r0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b082      	sub	sp, #8
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	460b      	mov	r3, r1
 800bdcc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	789b      	ldrb	r3, [r3, #2]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d10f      	bne.n	800bdf6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2205      	movs	r2, #5
 800bde0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bde2:	78fb      	ldrb	r3, [r7, #3]
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fb81 	bl	800c502 <USBH_CtlReq>
 800be00:	4603      	mov	r3, r0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b082      	sub	sp, #8
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	460b      	mov	r3, r1
 800be14:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	789b      	ldrb	r3, [r3, #2]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d10e      	bne.n	800be3c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2209      	movs	r2, #9
 800be28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	887a      	ldrh	r2, [r7, #2]
 800be2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800be3c:	2200      	movs	r2, #0
 800be3e:	2100      	movs	r1, #0
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fb5e 	bl	800c502 <USBH_CtlReq>
 800be46:	4603      	mov	r3, r0
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	460b      	mov	r3, r1
 800be5a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	789b      	ldrb	r3, [r3, #2]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d10f      	bne.n	800be84 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2203      	movs	r2, #3
 800be6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800be70:	78fb      	ldrb	r3, [r7, #3]
 800be72:	b29a      	uxth	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800be84:	2200      	movs	r2, #0
 800be86:	2100      	movs	r1, #0
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fb3a 	bl	800c502 <USBH_CtlReq>
 800be8e:	4603      	mov	r3, r0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	789b      	ldrb	r3, [r3, #2]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d10f      	bne.n	800becc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2202      	movs	r2, #2
 800beb0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bebe:	78fb      	ldrb	r3, [r7, #3]
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800becc:	2200      	movs	r2, #0
 800bece:	2100      	movs	r1, #0
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fb16 	bl	800c502 <USBH_CtlReq>
 800bed6:	4603      	mov	r3, r0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b087      	sub	sp, #28
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	4613      	mov	r3, r2
 800beec:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800bef4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800bef6:	2300      	movs	r3, #0
 800bef8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800bf00:	2302      	movs	r3, #2
 800bf02:	e094      	b.n	800c02e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	781a      	ldrb	r2, [r3, #0]
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	785a      	ldrb	r2, [r3, #1]
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	3302      	adds	r3, #2
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	3303      	adds	r3, #3
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	021b      	lsls	r3, r3, #8
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	4313      	orrs	r3, r2
 800bf28:	b29a      	uxth	r2, r3
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	791a      	ldrb	r2, [r3, #4]
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	795a      	ldrb	r2, [r3, #5]
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	799a      	ldrb	r2, [r3, #6]
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	79da      	ldrb	r2, [r3, #7]
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d004      	beq.n	800bf62 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d11b      	bne.n	800bf9a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	79db      	ldrb	r3, [r3, #7]
 800bf66:	2b20      	cmp	r3, #32
 800bf68:	dc0f      	bgt.n	800bf8a <USBH_ParseDevDesc+0xaa>
 800bf6a:	2b08      	cmp	r3, #8
 800bf6c:	db0f      	blt.n	800bf8e <USBH_ParseDevDesc+0xae>
 800bf6e:	3b08      	subs	r3, #8
 800bf70:	4a32      	ldr	r2, [pc, #200]	@ (800c03c <USBH_ParseDevDesc+0x15c>)
 800bf72:	fa22 f303 	lsr.w	r3, r2, r3
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	bf14      	ite	ne
 800bf7e:	2301      	movne	r3, #1
 800bf80:	2300      	moveq	r3, #0
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <USBH_ParseDevDesc+0xb6>
 800bf88:	e001      	b.n	800bf8e <USBH_ParseDevDesc+0xae>
 800bf8a:	2b40      	cmp	r3, #64	@ 0x40
 800bf8c:	d003      	beq.n	800bf96 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	2208      	movs	r2, #8
 800bf92:	71da      	strb	r2, [r3, #7]
        break;
 800bf94:	e000      	b.n	800bf98 <USBH_ParseDevDesc+0xb8>
        break;
 800bf96:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800bf98:	e00e      	b.n	800bfb8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d107      	bne.n	800bfb4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	79db      	ldrb	r3, [r3, #7]
 800bfa8:	2b08      	cmp	r3, #8
 800bfaa:	d005      	beq.n	800bfb8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	2208      	movs	r2, #8
 800bfb0:	71da      	strb	r2, [r3, #7]
 800bfb2:	e001      	b.n	800bfb8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800bfb8:	88fb      	ldrh	r3, [r7, #6]
 800bfba:	2b08      	cmp	r3, #8
 800bfbc:	d936      	bls.n	800c02c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	3309      	adds	r3, #9
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	021b      	lsls	r3, r3, #8
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	330a      	adds	r3, #10
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	330b      	adds	r3, #11
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	021b      	lsls	r3, r3, #8
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	4313      	orrs	r3, r2
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	330c      	adds	r3, #12
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	461a      	mov	r2, r3
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	330d      	adds	r3, #13
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	021b      	lsls	r3, r3, #8
 800c002:	b29b      	uxth	r3, r3
 800c004:	4313      	orrs	r3, r2
 800c006:	b29a      	uxth	r2, r3
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	7b9a      	ldrb	r2, [r3, #14]
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	7bda      	ldrb	r2, [r3, #15]
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	7c1a      	ldrb	r2, [r3, #16]
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	7c5a      	ldrb	r2, [r3, #17]
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800c02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	371c      	adds	r7, #28
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	01000101 	.word	0x01000101

0800c040 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b08c      	sub	sp, #48	@ 0x30
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	4613      	mov	r3, r2
 800c04c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c054:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c05c:	2300      	movs	r3, #0
 800c05e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800c062:	2300      	movs	r3, #0
 800c064:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800c06e:	2302      	movs	r3, #2
 800c070:	e0da      	b.n	800c228 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800c076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	2b09      	cmp	r3, #9
 800c07c:	d002      	beq.n	800c084 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c080:	2209      	movs	r2, #9
 800c082:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	781a      	ldrb	r2, [r3, #0]
 800c088:	6a3b      	ldr	r3, [r7, #32]
 800c08a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	785a      	ldrb	r2, [r3, #1]
 800c090:	6a3b      	ldr	r3, [r7, #32]
 800c092:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	3302      	adds	r3, #2
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	461a      	mov	r2, r3
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	3303      	adds	r3, #3
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	021b      	lsls	r3, r3, #8
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0ae:	bf28      	it	cs
 800c0b0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	791a      	ldrb	r2, [r3, #4]
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	795a      	ldrb	r2, [r3, #5]
 800c0c6:	6a3b      	ldr	r3, [r7, #32]
 800c0c8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	799a      	ldrb	r2, [r3, #6]
 800c0ce:	6a3b      	ldr	r3, [r7, #32]
 800c0d0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	79da      	ldrb	r2, [r3, #7]
 800c0d6:	6a3b      	ldr	r3, [r7, #32]
 800c0d8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	7a1a      	ldrb	r2, [r3, #8]
 800c0de:	6a3b      	ldr	r3, [r7, #32]
 800c0e0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c0e2:	88fb      	ldrh	r3, [r7, #6]
 800c0e4:	2b09      	cmp	r3, #9
 800c0e6:	f240 809d 	bls.w	800c224 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800c0ea:	2309      	movs	r3, #9
 800c0ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c0f2:	e081      	b.n	800c1f8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c0f4:	f107 0316 	add.w	r3, r7, #22
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0fc:	f000 f9e7 	bl	800c4ce <USBH_GetNextDesc>
 800c100:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c104:	785b      	ldrb	r3, [r3, #1]
 800c106:	2b04      	cmp	r3, #4
 800c108:	d176      	bne.n	800c1f8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	2b09      	cmp	r3, #9
 800c110:	d002      	beq.n	800c118 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c114:	2209      	movs	r2, #9
 800c116:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c11c:	221a      	movs	r2, #26
 800c11e:	fb02 f303 	mul.w	r3, r2, r3
 800c122:	3308      	adds	r3, #8
 800c124:	6a3a      	ldr	r2, [r7, #32]
 800c126:	4413      	add	r3, r2
 800c128:	3302      	adds	r3, #2
 800c12a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c12c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c12e:	69f8      	ldr	r0, [r7, #28]
 800c130:	f000 f87e 	bl	800c230 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c134:	2300      	movs	r3, #0
 800c136:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c13a:	2300      	movs	r3, #0
 800c13c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c13e:	e043      	b.n	800c1c8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c140:	f107 0316 	add.w	r3, r7, #22
 800c144:	4619      	mov	r1, r3
 800c146:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c148:	f000 f9c1 	bl	800c4ce <USBH_GetNextDesc>
 800c14c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c150:	785b      	ldrb	r3, [r3, #1]
 800c152:	2b05      	cmp	r3, #5
 800c154:	d138      	bne.n	800c1c8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	795b      	ldrb	r3, [r3, #5]
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d113      	bne.n	800c186 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c162:	2b02      	cmp	r3, #2
 800c164:	d003      	beq.n	800c16e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	799b      	ldrb	r3, [r3, #6]
 800c16a:	2b03      	cmp	r3, #3
 800c16c:	d10b      	bne.n	800c186 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	79db      	ldrb	r3, [r3, #7]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10b      	bne.n	800c18e <USBH_ParseCfgDesc+0x14e>
 800c176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	2b09      	cmp	r3, #9
 800c17c:	d007      	beq.n	800c18e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800c17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c180:	2209      	movs	r2, #9
 800c182:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c184:	e003      	b.n	800c18e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c188:	2207      	movs	r2, #7
 800c18a:	701a      	strb	r2, [r3, #0]
 800c18c:	e000      	b.n	800c190 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c18e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c194:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c198:	3201      	adds	r2, #1
 800c19a:	00d2      	lsls	r2, r2, #3
 800c19c:	211a      	movs	r1, #26
 800c19e:	fb01 f303 	mul.w	r3, r1, r3
 800c1a2:	4413      	add	r3, r2
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	6a3a      	ldr	r2, [r7, #32]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c1ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1b0:	69b9      	ldr	r1, [r7, #24]
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f000 f870 	bl	800c298 <USBH_ParseEPDesc>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800c1be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	791b      	ldrb	r3, [r3, #4]
 800c1cc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d204      	bcs.n	800c1de <USBH_ParseCfgDesc+0x19e>
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	885a      	ldrh	r2, [r3, #2]
 800c1d8:	8afb      	ldrh	r3, [r7, #22]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d8b0      	bhi.n	800c140 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	791b      	ldrb	r3, [r3, #4]
 800c1e2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d201      	bcs.n	800c1ee <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800c1ea:	2303      	movs	r3, #3
 800c1ec:	e01c      	b.n	800c228 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800c1ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d805      	bhi.n	800c20c <USBH_ParseCfgDesc+0x1cc>
 800c200:	6a3b      	ldr	r3, [r7, #32]
 800c202:	885a      	ldrh	r2, [r3, #2]
 800c204:	8afb      	ldrh	r3, [r7, #22]
 800c206:	429a      	cmp	r2, r3
 800c208:	f63f af74 	bhi.w	800c0f4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c20c:	6a3b      	ldr	r3, [r7, #32]
 800c20e:	791b      	ldrb	r3, [r3, #4]
 800c210:	2b02      	cmp	r3, #2
 800c212:	bf28      	it	cs
 800c214:	2302      	movcs	r3, #2
 800c216:	b2db      	uxtb	r3, r3
 800c218:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d201      	bcs.n	800c224 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800c220:	2303      	movs	r3, #3
 800c222:	e001      	b.n	800c228 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800c224:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3730      	adds	r7, #48	@ 0x30
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	781a      	ldrb	r2, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	785a      	ldrb	r2, [r3, #1]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	789a      	ldrb	r2, [r3, #2]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	78da      	ldrb	r2, [r3, #3]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	3304      	adds	r3, #4
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	2b02      	cmp	r3, #2
 800c262:	bf28      	it	cs
 800c264:	2302      	movcs	r3, #2
 800c266:	b2da      	uxtb	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	795a      	ldrb	r2, [r3, #5]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	799a      	ldrb	r2, [r3, #6]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	79da      	ldrb	r2, [r3, #7]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	7a1a      	ldrb	r2, [r3, #8]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	721a      	strb	r2, [r3, #8]
}
 800c28c:	bf00      	nop
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c298:	b480      	push	{r7}
 800c29a:	b087      	sub	sp, #28
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	781a      	ldrb	r2, [r3, #0]
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	785a      	ldrb	r2, [r3, #1]
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	789a      	ldrb	r2, [r3, #2]
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	78da      	ldrb	r2, [r3, #3]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	3305      	adds	r3, #5
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	021b      	lsls	r3, r3, #8
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	799a      	ldrb	r2, [r3, #6]
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	889b      	ldrh	r3, [r3, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d009      	beq.n	800c306 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c2f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2fa:	d804      	bhi.n	800c306 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c304:	d901      	bls.n	800c30a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800c306:	2303      	movs	r3, #3
 800c308:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c310:	2b00      	cmp	r3, #0
 800c312:	d136      	bne.n	800c382 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	78db      	ldrb	r3, [r3, #3]
 800c318:	f003 0303 	and.w	r3, r3, #3
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d108      	bne.n	800c332 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	889b      	ldrh	r3, [r3, #4]
 800c324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c328:	f240 8097 	bls.w	800c45a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c32c:	2303      	movs	r3, #3
 800c32e:	75fb      	strb	r3, [r7, #23]
 800c330:	e093      	b.n	800c45a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	78db      	ldrb	r3, [r3, #3]
 800c336:	f003 0303 	and.w	r3, r3, #3
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d107      	bne.n	800c34e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	889b      	ldrh	r3, [r3, #4]
 800c342:	2b40      	cmp	r3, #64	@ 0x40
 800c344:	f240 8089 	bls.w	800c45a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c348:	2303      	movs	r3, #3
 800c34a:	75fb      	strb	r3, [r7, #23]
 800c34c:	e085      	b.n	800c45a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	78db      	ldrb	r3, [r3, #3]
 800c352:	f003 0303 	and.w	r3, r3, #3
 800c356:	2b01      	cmp	r3, #1
 800c358:	d005      	beq.n	800c366 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	78db      	ldrb	r3, [r3, #3]
 800c35e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c362:	2b03      	cmp	r3, #3
 800c364:	d10a      	bne.n	800c37c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	799b      	ldrb	r3, [r3, #6]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d003      	beq.n	800c376 <USBH_ParseEPDesc+0xde>
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	799b      	ldrb	r3, [r3, #6]
 800c372:	2b10      	cmp	r3, #16
 800c374:	d970      	bls.n	800c458 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800c376:	2303      	movs	r3, #3
 800c378:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c37a:	e06d      	b.n	800c458 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c37c:	2303      	movs	r3, #3
 800c37e:	75fb      	strb	r3, [r7, #23]
 800c380:	e06b      	b.n	800c45a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d13c      	bne.n	800c406 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	78db      	ldrb	r3, [r3, #3]
 800c390:	f003 0303 	and.w	r3, r3, #3
 800c394:	2b02      	cmp	r3, #2
 800c396:	d005      	beq.n	800c3a4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	78db      	ldrb	r3, [r3, #3]
 800c39c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d106      	bne.n	800c3b2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	889b      	ldrh	r3, [r3, #4]
 800c3a8:	2b40      	cmp	r3, #64	@ 0x40
 800c3aa:	d956      	bls.n	800c45a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c3ac:	2303      	movs	r3, #3
 800c3ae:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c3b0:	e053      	b.n	800c45a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	78db      	ldrb	r3, [r3, #3]
 800c3b6:	f003 0303 	and.w	r3, r3, #3
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d10e      	bne.n	800c3dc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	799b      	ldrb	r3, [r3, #6]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d007      	beq.n	800c3d6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c3ca:	2b10      	cmp	r3, #16
 800c3cc:	d803      	bhi.n	800c3d6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c3d2:	2b40      	cmp	r3, #64	@ 0x40
 800c3d4:	d941      	bls.n	800c45a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	75fb      	strb	r3, [r7, #23]
 800c3da:	e03e      	b.n	800c45a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	78db      	ldrb	r3, [r3, #3]
 800c3e0:	f003 0303 	and.w	r3, r3, #3
 800c3e4:	2b03      	cmp	r3, #3
 800c3e6:	d10b      	bne.n	800c400 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	799b      	ldrb	r3, [r3, #6]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d004      	beq.n	800c3fa <USBH_ParseEPDesc+0x162>
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	889b      	ldrh	r3, [r3, #4]
 800c3f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3f8:	d32f      	bcc.n	800c45a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c3fa:	2303      	movs	r3, #3
 800c3fc:	75fb      	strb	r3, [r7, #23]
 800c3fe:	e02c      	b.n	800c45a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c400:	2303      	movs	r3, #3
 800c402:	75fb      	strb	r3, [r7, #23]
 800c404:	e029      	b.n	800c45a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d120      	bne.n	800c452 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	78db      	ldrb	r3, [r3, #3]
 800c414:	f003 0303 	and.w	r3, r3, #3
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d106      	bne.n	800c42a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	889b      	ldrh	r3, [r3, #4]
 800c420:	2b08      	cmp	r3, #8
 800c422:	d01a      	beq.n	800c45a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c424:	2303      	movs	r3, #3
 800c426:	75fb      	strb	r3, [r7, #23]
 800c428:	e017      	b.n	800c45a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	78db      	ldrb	r3, [r3, #3]
 800c42e:	f003 0303 	and.w	r3, r3, #3
 800c432:	2b03      	cmp	r3, #3
 800c434:	d10a      	bne.n	800c44c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	799b      	ldrb	r3, [r3, #6]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d003      	beq.n	800c446 <USBH_ParseEPDesc+0x1ae>
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	889b      	ldrh	r3, [r3, #4]
 800c442:	2b08      	cmp	r3, #8
 800c444:	d909      	bls.n	800c45a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c446:	2303      	movs	r3, #3
 800c448:	75fb      	strb	r3, [r7, #23]
 800c44a:	e006      	b.n	800c45a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c44c:	2303      	movs	r3, #3
 800c44e:	75fb      	strb	r3, [r7, #23]
 800c450:	e003      	b.n	800c45a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c452:	2303      	movs	r3, #3
 800c454:	75fb      	strb	r3, [r7, #23]
 800c456:	e000      	b.n	800c45a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c458:	bf00      	nop
  }

  return status;
 800c45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	371c      	adds	r7, #28
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c468:	b480      	push	{r7}
 800c46a:	b087      	sub	sp, #28
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	4613      	mov	r3, r2
 800c474:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	3301      	adds	r3, #1
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	2b03      	cmp	r3, #3
 800c47e:	d120      	bne.n	800c4c2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	1e9a      	subs	r2, r3, #2
 800c486:	88fb      	ldrh	r3, [r7, #6]
 800c488:	4293      	cmp	r3, r2
 800c48a:	bf28      	it	cs
 800c48c:	4613      	movcs	r3, r2
 800c48e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	3302      	adds	r3, #2
 800c494:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c496:	2300      	movs	r3, #0
 800c498:	82fb      	strh	r3, [r7, #22]
 800c49a:	e00b      	b.n	800c4b4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c49c:	8afb      	ldrh	r3, [r7, #22]
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	781a      	ldrb	r2, [r3, #0]
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c4ae:	8afb      	ldrh	r3, [r7, #22]
 800c4b0:	3302      	adds	r3, #2
 800c4b2:	82fb      	strh	r3, [r7, #22]
 800c4b4:	8afa      	ldrh	r2, [r7, #22]
 800c4b6:	8abb      	ldrh	r3, [r7, #20]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d3ef      	bcc.n	800c49c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	701a      	strb	r2, [r3, #0]
  }
}
 800c4c2:	bf00      	nop
 800c4c4:	371c      	adds	r7, #28
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	b085      	sub	sp, #20
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
 800c4d6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	881b      	ldrh	r3, [r3, #0]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	7812      	ldrb	r2, [r2, #0]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3714      	adds	r7, #20
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b086      	sub	sp, #24
 800c506:	af00      	add	r7, sp, #0
 800c508:	60f8      	str	r0, [r7, #12]
 800c50a:	60b9      	str	r1, [r7, #8]
 800c50c:	4613      	mov	r3, r2
 800c50e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c510:	2301      	movs	r3, #1
 800c512:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	789b      	ldrb	r3, [r3, #2]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d002      	beq.n	800c522 <USBH_CtlReq+0x20>
 800c51c:	2b02      	cmp	r3, #2
 800c51e:	d00f      	beq.n	800c540 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c520:	e027      	b.n	800c572 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	88fa      	ldrh	r2, [r7, #6]
 800c52c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2201      	movs	r2, #1
 800c532:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2202      	movs	r2, #2
 800c538:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c53a:	2301      	movs	r3, #1
 800c53c:	75fb      	strb	r3, [r7, #23]
      break;
 800c53e:	e018      	b.n	800c572 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f000 f81b 	bl	800c57c <USBH_HandleControl>
 800c546:	4603      	mov	r3, r0
 800c548:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c54a:	7dfb      	ldrb	r3, [r7, #23]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d002      	beq.n	800c556 <USBH_CtlReq+0x54>
 800c550:	7dfb      	ldrb	r3, [r7, #23]
 800c552:	2b03      	cmp	r3, #3
 800c554:	d106      	bne.n	800c564 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2201      	movs	r2, #1
 800c55a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	761a      	strb	r2, [r3, #24]
      break;
 800c562:	e005      	b.n	800c570 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c564:	7dfb      	ldrb	r3, [r7, #23]
 800c566:	2b02      	cmp	r3, #2
 800c568:	d102      	bne.n	800c570 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2201      	movs	r2, #1
 800c56e:	709a      	strb	r2, [r3, #2]
      break;
 800c570:	bf00      	nop
  }
  return status;
 800c572:	7dfb      	ldrb	r3, [r7, #23]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af02      	add	r7, sp, #8
 800c582:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c584:	2301      	movs	r3, #1
 800c586:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c588:	2300      	movs	r3, #0
 800c58a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	7e1b      	ldrb	r3, [r3, #24]
 800c590:	3b01      	subs	r3, #1
 800c592:	2b0a      	cmp	r3, #10
 800c594:	f200 8156 	bhi.w	800c844 <USBH_HandleControl+0x2c8>
 800c598:	a201      	add	r2, pc, #4	@ (adr r2, 800c5a0 <USBH_HandleControl+0x24>)
 800c59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c59e:	bf00      	nop
 800c5a0:	0800c5cd 	.word	0x0800c5cd
 800c5a4:	0800c5e7 	.word	0x0800c5e7
 800c5a8:	0800c651 	.word	0x0800c651
 800c5ac:	0800c677 	.word	0x0800c677
 800c5b0:	0800c6af 	.word	0x0800c6af
 800c5b4:	0800c6d9 	.word	0x0800c6d9
 800c5b8:	0800c72b 	.word	0x0800c72b
 800c5bc:	0800c74d 	.word	0x0800c74d
 800c5c0:	0800c789 	.word	0x0800c789
 800c5c4:	0800c7af 	.word	0x0800c7af
 800c5c8:	0800c7ed 	.word	0x0800c7ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f103 0110 	add.w	r1, r3, #16
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	795b      	ldrb	r3, [r3, #5]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 f943 	bl	800c864 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2202      	movs	r2, #2
 800c5e2:	761a      	strb	r2, [r3, #24]
      break;
 800c5e4:	e139      	b.n	800c85a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	795b      	ldrb	r3, [r3, #5]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fcc5 	bl	800cf7c <USBH_LL_GetURBState>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c5f6:	7bbb      	ldrb	r3, [r7, #14]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d11e      	bne.n	800c63a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	7c1b      	ldrb	r3, [r3, #16]
 800c600:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c604:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	8adb      	ldrh	r3, [r3, #22]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00a      	beq.n	800c624 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c60e:	7b7b      	ldrb	r3, [r7, #13]
 800c610:	2b80      	cmp	r3, #128	@ 0x80
 800c612:	d103      	bne.n	800c61c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2203      	movs	r2, #3
 800c618:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c61a:	e115      	b.n	800c848 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2205      	movs	r2, #5
 800c620:	761a      	strb	r2, [r3, #24]
      break;
 800c622:	e111      	b.n	800c848 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c624:	7b7b      	ldrb	r3, [r7, #13]
 800c626:	2b80      	cmp	r3, #128	@ 0x80
 800c628:	d103      	bne.n	800c632 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2209      	movs	r2, #9
 800c62e:	761a      	strb	r2, [r3, #24]
      break;
 800c630:	e10a      	b.n	800c848 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2207      	movs	r2, #7
 800c636:	761a      	strb	r2, [r3, #24]
      break;
 800c638:	e106      	b.n	800c848 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c63a:	7bbb      	ldrb	r3, [r7, #14]
 800c63c:	2b04      	cmp	r3, #4
 800c63e:	d003      	beq.n	800c648 <USBH_HandleControl+0xcc>
 800c640:	7bbb      	ldrb	r3, [r7, #14]
 800c642:	2b02      	cmp	r3, #2
 800c644:	f040 8100 	bne.w	800c848 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	220b      	movs	r2, #11
 800c64c:	761a      	strb	r2, [r3, #24]
      break;
 800c64e:	e0fb      	b.n	800c848 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c656:	b29a      	uxth	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6899      	ldr	r1, [r3, #8]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	899a      	ldrh	r2, [r3, #12]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	791b      	ldrb	r3, [r3, #4]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f93a 	bl	800c8e2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2204      	movs	r2, #4
 800c672:	761a      	strb	r2, [r3, #24]
      break;
 800c674:	e0f1      	b.n	800c85a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	791b      	ldrb	r3, [r3, #4]
 800c67a:	4619      	mov	r1, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 fc7d 	bl	800cf7c <USBH_LL_GetURBState>
 800c682:	4603      	mov	r3, r0
 800c684:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c686:	7bbb      	ldrb	r3, [r7, #14]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d102      	bne.n	800c692 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2209      	movs	r2, #9
 800c690:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c692:	7bbb      	ldrb	r3, [r7, #14]
 800c694:	2b05      	cmp	r3, #5
 800c696:	d102      	bne.n	800c69e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c698:	2303      	movs	r3, #3
 800c69a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c69c:	e0d6      	b.n	800c84c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c69e:	7bbb      	ldrb	r3, [r7, #14]
 800c6a0:	2b04      	cmp	r3, #4
 800c6a2:	f040 80d3 	bne.w	800c84c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	220b      	movs	r2, #11
 800c6aa:	761a      	strb	r2, [r3, #24]
      break;
 800c6ac:	e0ce      	b.n	800c84c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6899      	ldr	r1, [r3, #8]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	899a      	ldrh	r2, [r3, #12]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	795b      	ldrb	r3, [r3, #5]
 800c6ba:	2001      	movs	r0, #1
 800c6bc:	9000      	str	r0, [sp, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f8ea 	bl	800c898 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2206      	movs	r2, #6
 800c6d4:	761a      	strb	r2, [r3, #24]
      break;
 800c6d6:	e0c0      	b.n	800c85a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	795b      	ldrb	r3, [r3, #5]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fc4c 	bl	800cf7c <USBH_LL_GetURBState>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c6e8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d103      	bne.n	800c6f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2207      	movs	r2, #7
 800c6f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c6f4:	e0ac      	b.n	800c850 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c6f6:	7bbb      	ldrb	r3, [r7, #14]
 800c6f8:	2b05      	cmp	r3, #5
 800c6fa:	d105      	bne.n	800c708 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	220c      	movs	r2, #12
 800c700:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c702:	2303      	movs	r3, #3
 800c704:	73fb      	strb	r3, [r7, #15]
      break;
 800c706:	e0a3      	b.n	800c850 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c708:	7bbb      	ldrb	r3, [r7, #14]
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d103      	bne.n	800c716 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2205      	movs	r2, #5
 800c712:	761a      	strb	r2, [r3, #24]
      break;
 800c714:	e09c      	b.n	800c850 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c716:	7bbb      	ldrb	r3, [r7, #14]
 800c718:	2b04      	cmp	r3, #4
 800c71a:	f040 8099 	bne.w	800c850 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	220b      	movs	r2, #11
 800c722:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c724:	2302      	movs	r3, #2
 800c726:	73fb      	strb	r3, [r7, #15]
      break;
 800c728:	e092      	b.n	800c850 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	791b      	ldrb	r3, [r3, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	2100      	movs	r1, #0
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f8d5 	bl	800c8e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c73e:	b29a      	uxth	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2208      	movs	r2, #8
 800c748:	761a      	strb	r2, [r3, #24]

      break;
 800c74a:	e086      	b.n	800c85a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	791b      	ldrb	r3, [r3, #4]
 800c750:	4619      	mov	r1, r3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fc12 	bl	800cf7c <USBH_LL_GetURBState>
 800c758:	4603      	mov	r3, r0
 800c75a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c75c:	7bbb      	ldrb	r3, [r7, #14]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d105      	bne.n	800c76e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	220d      	movs	r2, #13
 800c766:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c76c:	e072      	b.n	800c854 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c76e:	7bbb      	ldrb	r3, [r7, #14]
 800c770:	2b04      	cmp	r3, #4
 800c772:	d103      	bne.n	800c77c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	220b      	movs	r2, #11
 800c778:	761a      	strb	r2, [r3, #24]
      break;
 800c77a:	e06b      	b.n	800c854 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c77c:	7bbb      	ldrb	r3, [r7, #14]
 800c77e:	2b05      	cmp	r3, #5
 800c780:	d168      	bne.n	800c854 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c782:	2303      	movs	r3, #3
 800c784:	73fb      	strb	r3, [r7, #15]
      break;
 800c786:	e065      	b.n	800c854 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	795b      	ldrb	r3, [r3, #5]
 800c78c:	2201      	movs	r2, #1
 800c78e:	9200      	str	r2, [sp, #0]
 800c790:	2200      	movs	r2, #0
 800c792:	2100      	movs	r1, #0
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 f87f 	bl	800c898 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	220a      	movs	r2, #10
 800c7aa:	761a      	strb	r2, [r3, #24]
      break;
 800c7ac:	e055      	b.n	800c85a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	795b      	ldrb	r3, [r3, #5]
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 fbe1 	bl	800cf7c <USBH_LL_GetURBState>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c7be:	7bbb      	ldrb	r3, [r7, #14]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d105      	bne.n	800c7d0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	220d      	movs	r2, #13
 800c7cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c7ce:	e043      	b.n	800c858 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c7d0:	7bbb      	ldrb	r3, [r7, #14]
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d103      	bne.n	800c7de <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2209      	movs	r2, #9
 800c7da:	761a      	strb	r2, [r3, #24]
      break;
 800c7dc:	e03c      	b.n	800c858 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c7de:	7bbb      	ldrb	r3, [r7, #14]
 800c7e0:	2b04      	cmp	r3, #4
 800c7e2:	d139      	bne.n	800c858 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	220b      	movs	r2, #11
 800c7e8:	761a      	strb	r2, [r3, #24]
      break;
 800c7ea:	e035      	b.n	800c858 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	7e5b      	ldrb	r3, [r3, #25]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	b2da      	uxtb	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	765a      	strb	r2, [r3, #25]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	7e5b      	ldrb	r3, [r3, #25]
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d806      	bhi.n	800c80e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2201      	movs	r2, #1
 800c80a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c80c:	e025      	b.n	800c85a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c814:	2106      	movs	r1, #6
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	795b      	ldrb	r3, [r3, #5]
 800c824:	4619      	mov	r1, r3
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f90c 	bl	800ca44 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	791b      	ldrb	r3, [r3, #4]
 800c830:	4619      	mov	r1, r3
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f906 	bl	800ca44 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c83e:	2302      	movs	r3, #2
 800c840:	73fb      	strb	r3, [r7, #15]
      break;
 800c842:	e00a      	b.n	800c85a <USBH_HandleControl+0x2de>

    default:
      break;
 800c844:	bf00      	nop
 800c846:	e008      	b.n	800c85a <USBH_HandleControl+0x2de>
      break;
 800c848:	bf00      	nop
 800c84a:	e006      	b.n	800c85a <USBH_HandleControl+0x2de>
      break;
 800c84c:	bf00      	nop
 800c84e:	e004      	b.n	800c85a <USBH_HandleControl+0x2de>
      break;
 800c850:	bf00      	nop
 800c852:	e002      	b.n	800c85a <USBH_HandleControl+0x2de>
      break;
 800c854:	bf00      	nop
 800c856:	e000      	b.n	800c85a <USBH_HandleControl+0x2de>
      break;
 800c858:	bf00      	nop
  }

  return status;
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3710      	adds	r7, #16
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b088      	sub	sp, #32
 800c868:	af04      	add	r7, sp, #16
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	4613      	mov	r3, r2
 800c870:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c872:	79f9      	ldrb	r1, [r7, #7]
 800c874:	2300      	movs	r3, #0
 800c876:	9303      	str	r3, [sp, #12]
 800c878:	2308      	movs	r3, #8
 800c87a:	9302      	str	r3, [sp, #8]
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	9301      	str	r3, [sp, #4]
 800c880:	2300      	movs	r3, #0
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	2300      	movs	r3, #0
 800c886:	2200      	movs	r2, #0
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f000 fb46 	bl	800cf1a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b088      	sub	sp, #32
 800c89c:	af04      	add	r7, sp, #16
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	80fb      	strh	r3, [r7, #6]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d001      	beq.n	800c8bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c8bc:	7979      	ldrb	r1, [r7, #5]
 800c8be:	7e3b      	ldrb	r3, [r7, #24]
 800c8c0:	9303      	str	r3, [sp, #12]
 800c8c2:	88fb      	ldrh	r3, [r7, #6]
 800c8c4:	9302      	str	r3, [sp, #8]
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	9301      	str	r3, [sp, #4]
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	68f8      	ldr	r0, [r7, #12]
 800c8d4:	f000 fb21 	bl	800cf1a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b088      	sub	sp, #32
 800c8e6:	af04      	add	r7, sp, #16
 800c8e8:	60f8      	str	r0, [r7, #12]
 800c8ea:	60b9      	str	r1, [r7, #8]
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	80fb      	strh	r3, [r7, #6]
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c8f8:	7979      	ldrb	r1, [r7, #5]
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	9303      	str	r3, [sp, #12]
 800c8fe:	88fb      	ldrh	r3, [r7, #6]
 800c900:	9302      	str	r3, [sp, #8]
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	9301      	str	r3, [sp, #4]
 800c906:	2301      	movs	r3, #1
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	2300      	movs	r3, #0
 800c90c:	2201      	movs	r2, #1
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f000 fb03 	bl	800cf1a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c914:	2300      	movs	r3, #0

}
 800c916:	4618      	mov	r0, r3
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b088      	sub	sp, #32
 800c922:	af04      	add	r7, sp, #16
 800c924:	60f8      	str	r0, [r7, #12]
 800c926:	60b9      	str	r1, [r7, #8]
 800c928:	4611      	mov	r1, r2
 800c92a:	461a      	mov	r2, r3
 800c92c:	460b      	mov	r3, r1
 800c92e:	80fb      	strh	r3, [r7, #6]
 800c930:	4613      	mov	r3, r2
 800c932:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d001      	beq.n	800c942 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c93e:	2300      	movs	r3, #0
 800c940:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c942:	7979      	ldrb	r1, [r7, #5]
 800c944:	7e3b      	ldrb	r3, [r7, #24]
 800c946:	9303      	str	r3, [sp, #12]
 800c948:	88fb      	ldrh	r3, [r7, #6]
 800c94a:	9302      	str	r3, [sp, #8]
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	9301      	str	r3, [sp, #4]
 800c950:	2301      	movs	r3, #1
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	2302      	movs	r3, #2
 800c956:	2200      	movs	r2, #0
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f000 fade 	bl	800cf1a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b088      	sub	sp, #32
 800c96c:	af04      	add	r7, sp, #16
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	4611      	mov	r1, r2
 800c974:	461a      	mov	r2, r3
 800c976:	460b      	mov	r3, r1
 800c978:	80fb      	strh	r3, [r7, #6]
 800c97a:	4613      	mov	r3, r2
 800c97c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c97e:	7979      	ldrb	r1, [r7, #5]
 800c980:	2300      	movs	r3, #0
 800c982:	9303      	str	r3, [sp, #12]
 800c984:	88fb      	ldrh	r3, [r7, #6]
 800c986:	9302      	str	r3, [sp, #8]
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	9301      	str	r3, [sp, #4]
 800c98c:	2301      	movs	r3, #1
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	2302      	movs	r3, #2
 800c992:	2201      	movs	r2, #1
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f000 fac0 	bl	800cf1a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af04      	add	r7, sp, #16
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	4608      	mov	r0, r1
 800c9ae:	4611      	mov	r1, r2
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	70fb      	strb	r3, [r7, #3]
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	70bb      	strb	r3, [r7, #2]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c9be:	7878      	ldrb	r0, [r7, #1]
 800c9c0:	78ba      	ldrb	r2, [r7, #2]
 800c9c2:	78f9      	ldrb	r1, [r7, #3]
 800c9c4:	8b3b      	ldrh	r3, [r7, #24]
 800c9c6:	9302      	str	r3, [sp, #8]
 800c9c8:	7d3b      	ldrb	r3, [r7, #20]
 800c9ca:	9301      	str	r3, [sp, #4]
 800c9cc:	7c3b      	ldrb	r3, [r7, #16]
 800c9ce:	9300      	str	r3, [sp, #0]
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 fa53 	bl	800ce7e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c9ee:	78fb      	ldrb	r3, [r7, #3]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 fa72 	bl	800cedc <USBH_LL_ClosePipe>

  return USBH_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b084      	sub	sp, #16
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f836 	bl	800ca80 <USBH_GetFreePipe>
 800ca14:	4603      	mov	r3, r0
 800ca16:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ca18:	89fb      	ldrh	r3, [r7, #14]
 800ca1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d00a      	beq.n	800ca38 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ca22:	78fa      	ldrb	r2, [r7, #3]
 800ca24:	89fb      	ldrh	r3, [r7, #14]
 800ca26:	f003 030f 	and.w	r3, r3, #15
 800ca2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ca2e:	6879      	ldr	r1, [r7, #4]
 800ca30:	33e0      	adds	r3, #224	@ 0xe0
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	440b      	add	r3, r1
 800ca36:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ca38:	89fb      	ldrh	r3, [r7, #14]
 800ca3a:	b2db      	uxtb	r3, r3
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ca50:	78fb      	ldrb	r3, [r7, #3]
 800ca52:	2b0f      	cmp	r3, #15
 800ca54:	d80d      	bhi.n	800ca72 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ca56:	78fb      	ldrb	r3, [r7, #3]
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	33e0      	adds	r3, #224	@ 0xe0
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	4413      	add	r3, r2
 800ca60:	685a      	ldr	r2, [r3, #4]
 800ca62:	78fb      	ldrb	r3, [r7, #3]
 800ca64:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ca68:	6879      	ldr	r1, [r7, #4]
 800ca6a:	33e0      	adds	r3, #224	@ 0xe0
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	440b      	add	r3, r1
 800ca70:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	73fb      	strb	r3, [r7, #15]
 800ca90:	e00f      	b.n	800cab2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	33e0      	adds	r3, #224	@ 0xe0
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	4413      	add	r3, r2
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d102      	bne.n	800caac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	e007      	b.n	800cabc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800caac:	7bfb      	ldrb	r3, [r7, #15]
 800caae:	3301      	adds	r3, #1
 800cab0:	73fb      	strb	r3, [r7, #15]
 800cab2:	7bfb      	ldrb	r3, [r7, #15]
 800cab4:	2b0f      	cmp	r3, #15
 800cab6:	d9ec      	bls.n	800ca92 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cab8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3714      	adds	r7, #20
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800cacc:	2201      	movs	r2, #1
 800cace:	490e      	ldr	r1, [pc, #56]	@ (800cb08 <MX_USB_HOST_Init+0x40>)
 800cad0:	480e      	ldr	r0, [pc, #56]	@ (800cb0c <MX_USB_HOST_Init+0x44>)
 800cad2:	f7fe fb15 	bl	800b100 <USBH_Init>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800cadc:	f7f4 fede 	bl	800189c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800cae0:	490b      	ldr	r1, [pc, #44]	@ (800cb10 <MX_USB_HOST_Init+0x48>)
 800cae2:	480a      	ldr	r0, [pc, #40]	@ (800cb0c <MX_USB_HOST_Init+0x44>)
 800cae4:	f7fe fbb9 	bl	800b25a <USBH_RegisterClass>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d001      	beq.n	800caf2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800caee:	f7f4 fed5 	bl	800189c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800caf2:	4806      	ldr	r0, [pc, #24]	@ (800cb0c <MX_USB_HOST_Init+0x44>)
 800caf4:	f7fe fc3d 	bl	800b372 <USBH_Start>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800cafe:	f7f4 fecd 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cb02:	bf00      	nop
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	0800cb29 	.word	0x0800cb29
 800cb0c:	200023fc 	.word	0x200023fc
 800cb10:	20000010 	.word	0x20000010

0800cb14 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800cb18:	4802      	ldr	r0, [pc, #8]	@ (800cb24 <MX_USB_HOST_Process+0x10>)
 800cb1a:	f7fe fc3b 	bl	800b394 <USBH_Process>
}
 800cb1e:	bf00      	nop
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	200023fc 	.word	0x200023fc

0800cb28 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	460b      	mov	r3, r1
 800cb32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cb34:	78fb      	ldrb	r3, [r7, #3]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	2b04      	cmp	r3, #4
 800cb3a:	d819      	bhi.n	800cb70 <USBH_UserProcess+0x48>
 800cb3c:	a201      	add	r2, pc, #4	@ (adr r2, 800cb44 <USBH_UserProcess+0x1c>)
 800cb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb42:	bf00      	nop
 800cb44:	0800cb71 	.word	0x0800cb71
 800cb48:	0800cb61 	.word	0x0800cb61
 800cb4c:	0800cb71 	.word	0x0800cb71
 800cb50:	0800cb69 	.word	0x0800cb69
 800cb54:	0800cb59 	.word	0x0800cb59
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cb58:	4b09      	ldr	r3, [pc, #36]	@ (800cb80 <USBH_UserProcess+0x58>)
 800cb5a:	2203      	movs	r2, #3
 800cb5c:	701a      	strb	r2, [r3, #0]
  break;
 800cb5e:	e008      	b.n	800cb72 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cb60:	4b07      	ldr	r3, [pc, #28]	@ (800cb80 <USBH_UserProcess+0x58>)
 800cb62:	2202      	movs	r2, #2
 800cb64:	701a      	strb	r2, [r3, #0]
  break;
 800cb66:	e004      	b.n	800cb72 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cb68:	4b05      	ldr	r3, [pc, #20]	@ (800cb80 <USBH_UserProcess+0x58>)
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	701a      	strb	r2, [r3, #0]
  break;
 800cb6e:	e000      	b.n	800cb72 <USBH_UserProcess+0x4a>

  default:
  break;
 800cb70:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cb72:	bf00      	nop
 800cb74:	370c      	adds	r7, #12
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	200027d4 	.word	0x200027d4

0800cb84 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08a      	sub	sp, #40	@ 0x28
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb8c:	f107 0314 	add.w	r3, r7, #20
 800cb90:	2200      	movs	r2, #0
 800cb92:	601a      	str	r2, [r3, #0]
 800cb94:	605a      	str	r2, [r3, #4]
 800cb96:	609a      	str	r2, [r3, #8]
 800cb98:	60da      	str	r2, [r3, #12]
 800cb9a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cba4:	d147      	bne.n	800cc36 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cba6:	2300      	movs	r3, #0
 800cba8:	613b      	str	r3, [r7, #16]
 800cbaa:	4b25      	ldr	r3, [pc, #148]	@ (800cc40 <HAL_HCD_MspInit+0xbc>)
 800cbac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbae:	4a24      	ldr	r2, [pc, #144]	@ (800cc40 <HAL_HCD_MspInit+0xbc>)
 800cbb0:	f043 0301 	orr.w	r3, r3, #1
 800cbb4:	6313      	str	r3, [r2, #48]	@ 0x30
 800cbb6:	4b22      	ldr	r3, [pc, #136]	@ (800cc40 <HAL_HCD_MspInit+0xbc>)
 800cbb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	613b      	str	r3, [r7, #16]
 800cbc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cbc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cbc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cbd0:	f107 0314 	add.w	r3, r7, #20
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	481b      	ldr	r0, [pc, #108]	@ (800cc44 <HAL_HCD_MspInit+0xc0>)
 800cbd8:	f7f6 fc8a 	bl	80034f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800cbdc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800cbe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbe2:	2302      	movs	r3, #2
 800cbe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cbea:	2300      	movs	r3, #0
 800cbec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cbee:	230a      	movs	r3, #10
 800cbf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cbf2:	f107 0314 	add.w	r3, r7, #20
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	4812      	ldr	r0, [pc, #72]	@ (800cc44 <HAL_HCD_MspInit+0xc0>)
 800cbfa:	f7f6 fc79 	bl	80034f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cbfe:	4b10      	ldr	r3, [pc, #64]	@ (800cc40 <HAL_HCD_MspInit+0xbc>)
 800cc00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc02:	4a0f      	ldr	r2, [pc, #60]	@ (800cc40 <HAL_HCD_MspInit+0xbc>)
 800cc04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc08:	6353      	str	r3, [r2, #52]	@ 0x34
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60fb      	str	r3, [r7, #12]
 800cc0e:	4b0c      	ldr	r3, [pc, #48]	@ (800cc40 <HAL_HCD_MspInit+0xbc>)
 800cc10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc12:	4a0b      	ldr	r2, [pc, #44]	@ (800cc40 <HAL_HCD_MspInit+0xbc>)
 800cc14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cc18:	6453      	str	r3, [r2, #68]	@ 0x44
 800cc1a:	4b09      	ldr	r3, [pc, #36]	@ (800cc40 <HAL_HCD_MspInit+0xbc>)
 800cc1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cc26:	2200      	movs	r2, #0
 800cc28:	2100      	movs	r1, #0
 800cc2a:	2043      	movs	r0, #67	@ 0x43
 800cc2c:	f7f6 f8b9 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cc30:	2043      	movs	r0, #67	@ 0x43
 800cc32:	f7f6 f8d2 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cc36:	bf00      	nop
 800cc38:	3728      	adds	r7, #40	@ 0x28
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	40023800 	.word	0x40023800
 800cc44:	40020000 	.word	0x40020000

0800cc48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fe ff73 	bl	800bb42 <USBH_LL_IncTimer>
}
 800cc5c:	bf00      	nop
 800cc5e:	3708      	adds	r7, #8
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fe ffab 	bl	800bbce <USBH_LL_Connect>
}
 800cc78:	bf00      	nop
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fe ffb4 	bl	800bbfc <USBH_LL_Disconnect>
}
 800cc94:	bf00      	nop
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	460b      	mov	r3, r1
 800cca6:	70fb      	strb	r3, [r7, #3]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7fe ff65 	bl	800bb96 <USBH_LL_PortEnabled>
}
 800cccc:	bf00      	nop
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fe ff65 	bl	800bbb2 <USBH_LL_PortDisabled>
}
 800cce8:	bf00      	nop
 800ccea:	3708      	adds	r7, #8
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d12a      	bne.n	800cd58 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cd02:	4a18      	ldr	r2, [pc, #96]	@ (800cd64 <USBH_LL_Init+0x74>)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a15      	ldr	r2, [pc, #84]	@ (800cd64 <USBH_LL_Init+0x74>)
 800cd0e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cd12:	4b14      	ldr	r3, [pc, #80]	@ (800cd64 <USBH_LL_Init+0x74>)
 800cd14:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cd18:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cd1a:	4b12      	ldr	r3, [pc, #72]	@ (800cd64 <USBH_LL_Init+0x74>)
 800cd1c:	2208      	movs	r2, #8
 800cd1e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cd20:	4b10      	ldr	r3, [pc, #64]	@ (800cd64 <USBH_LL_Init+0x74>)
 800cd22:	2201      	movs	r2, #1
 800cd24:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cd26:	4b0f      	ldr	r3, [pc, #60]	@ (800cd64 <USBH_LL_Init+0x74>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cd2c:	4b0d      	ldr	r3, [pc, #52]	@ (800cd64 <USBH_LL_Init+0x74>)
 800cd2e:	2202      	movs	r2, #2
 800cd30:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cd32:	4b0c      	ldr	r3, [pc, #48]	@ (800cd64 <USBH_LL_Init+0x74>)
 800cd34:	2200      	movs	r2, #0
 800cd36:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cd38:	480a      	ldr	r0, [pc, #40]	@ (800cd64 <USBH_LL_Init+0x74>)
 800cd3a:	f7f6 fda8 	bl	800388e <HAL_HCD_Init>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800cd44:	f7f4 fdaa 	bl	800189c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cd48:	4806      	ldr	r0, [pc, #24]	@ (800cd64 <USBH_LL_Init+0x74>)
 800cd4a:	f7f7 fa09 	bl	8004160 <HAL_HCD_GetCurrentFrame>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	4619      	mov	r1, r3
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f7fe fee6 	bl	800bb24 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	200027d8 	.word	0x200027d8

0800cd68 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7f7 f976 	bl	8004070 <HAL_HCD_Start>
 800cd84:	4603      	mov	r3, r0
 800cd86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd88:	7bfb      	ldrb	r3, [r7, #15]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f000 f95e 	bl	800d04c <USBH_Get_USB_Status>
 800cd90:	4603      	mov	r3, r0
 800cd92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd94:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b084      	sub	sp, #16
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cda6:	2300      	movs	r3, #0
 800cda8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7f7 f97e 	bl	80040b6 <HAL_HCD_Stop>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cdbe:	7bfb      	ldrb	r3, [r7, #15]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f000 f943 	bl	800d04c <USBH_Get_USB_Status>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdca:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cddc:	2301      	movs	r3, #1
 800cdde:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7f7 f9c8 	bl	800417c <HAL_HCD_GetCurrentSpeed>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	d00c      	beq.n	800ce0c <USBH_LL_GetSpeed+0x38>
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	d80d      	bhi.n	800ce12 <USBH_LL_GetSpeed+0x3e>
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d002      	beq.n	800ce00 <USBH_LL_GetSpeed+0x2c>
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d003      	beq.n	800ce06 <USBH_LL_GetSpeed+0x32>
 800cdfe:	e008      	b.n	800ce12 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ce00:	2300      	movs	r3, #0
 800ce02:	73fb      	strb	r3, [r7, #15]
    break;
 800ce04:	e008      	b.n	800ce18 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ce06:	2301      	movs	r3, #1
 800ce08:	73fb      	strb	r3, [r7, #15]
    break;
 800ce0a:	e005      	b.n	800ce18 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce10:	e002      	b.n	800ce18 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ce12:	2301      	movs	r3, #1
 800ce14:	73fb      	strb	r3, [r7, #15]
    break;
 800ce16:	bf00      	nop
  }
  return  speed;
 800ce18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3710      	adds	r7, #16
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b084      	sub	sp, #16
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7f7 f959 	bl	80040f0 <HAL_HCD_ResetPort>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
 800ce44:	4618      	mov	r0, r3
 800ce46:	f000 f901 	bl	800d04c <USBH_Get_USB_Status>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3710      	adds	r7, #16
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	460b      	mov	r3, r1
 800ce62:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ce6a:	78fa      	ldrb	r2, [r7, #3]
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7f7 f961 	bl	8004136 <HAL_HCD_HC_GetXferCount>
 800ce74:	4603      	mov	r3, r0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3708      	adds	r7, #8
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ce7e:	b590      	push	{r4, r7, lr}
 800ce80:	b089      	sub	sp, #36	@ 0x24
 800ce82:	af04      	add	r7, sp, #16
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	4608      	mov	r0, r1
 800ce88:	4611      	mov	r1, r2
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	70fb      	strb	r3, [r7, #3]
 800ce90:	460b      	mov	r3, r1
 800ce92:	70bb      	strb	r3, [r7, #2]
 800ce94:	4613      	mov	r3, r2
 800ce96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800cea6:	787c      	ldrb	r4, [r7, #1]
 800cea8:	78ba      	ldrb	r2, [r7, #2]
 800ceaa:	78f9      	ldrb	r1, [r7, #3]
 800ceac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ceae:	9302      	str	r3, [sp, #8]
 800ceb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ceb4:	9301      	str	r3, [sp, #4]
 800ceb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	4623      	mov	r3, r4
 800cebe:	f7f6 fd4d 	bl	800395c <HAL_HCD_HC_Init>
 800cec2:	4603      	mov	r3, r0
 800cec4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f000 f8bf 	bl	800d04c <USBH_Get_USB_Status>
 800cece:	4603      	mov	r3, r0
 800ced0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ced2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3714      	adds	r7, #20
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd90      	pop	{r4, r7, pc}

0800cedc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	460b      	mov	r3, r1
 800cee6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee8:	2300      	movs	r3, #0
 800ceea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ceec:	2300      	movs	r3, #0
 800ceee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cef6:	78fa      	ldrb	r2, [r7, #3]
 800cef8:	4611      	mov	r1, r2
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7f6 fde6 	bl	8003acc <HAL_HCD_HC_Halt>
 800cf00:	4603      	mov	r3, r0
 800cf02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cf04:	7bfb      	ldrb	r3, [r7, #15]
 800cf06:	4618      	mov	r0, r3
 800cf08:	f000 f8a0 	bl	800d04c <USBH_Get_USB_Status>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf10:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cf1a:	b590      	push	{r4, r7, lr}
 800cf1c:	b089      	sub	sp, #36	@ 0x24
 800cf1e:	af04      	add	r7, sp, #16
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	4608      	mov	r0, r1
 800cf24:	4611      	mov	r1, r2
 800cf26:	461a      	mov	r2, r3
 800cf28:	4603      	mov	r3, r0
 800cf2a:	70fb      	strb	r3, [r7, #3]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	70bb      	strb	r3, [r7, #2]
 800cf30:	4613      	mov	r3, r2
 800cf32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800cf42:	787c      	ldrb	r4, [r7, #1]
 800cf44:	78ba      	ldrb	r2, [r7, #2]
 800cf46:	78f9      	ldrb	r1, [r7, #3]
 800cf48:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cf4c:	9303      	str	r3, [sp, #12]
 800cf4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cf50:	9302      	str	r3, [sp, #8]
 800cf52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf54:	9301      	str	r3, [sp, #4]
 800cf56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	4623      	mov	r3, r4
 800cf5e:	f7f6 fdd9 	bl	8003b14 <HAL_HCD_HC_SubmitRequest>
 800cf62:	4603      	mov	r3, r0
 800cf64:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cf66:	7bfb      	ldrb	r3, [r7, #15]
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f000 f86f 	bl	800d04c <USBH_Get_USB_Status>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf72:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3714      	adds	r7, #20
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd90      	pop	{r4, r7, pc}

0800cf7c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	460b      	mov	r3, r1
 800cf86:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cf8e:	78fa      	ldrb	r2, [r7, #3]
 800cf90:	4611      	mov	r1, r2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7f7 f8ba 	bl	800410c <HAL_HCD_HC_GetURBState>
 800cf98:	4603      	mov	r3, r0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3708      	adds	r7, #8
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b082      	sub	sp, #8
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
 800cfaa:	460b      	mov	r3, r1
 800cfac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d103      	bne.n	800cfc0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cfb8:	78fb      	ldrb	r3, [r7, #3]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f000 f872 	bl	800d0a4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cfc0:	20c8      	movs	r0, #200	@ 0xc8
 800cfc2:	f7f5 f9dd 	bl	8002380 <HAL_Delay>
  return USBH_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	460b      	mov	r3, r1
 800cfda:	70fb      	strb	r3, [r7, #3]
 800cfdc:	4613      	mov	r3, r2
 800cfde:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cfe6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cfe8:	78fa      	ldrb	r2, [r7, #3]
 800cfea:	68f9      	ldr	r1, [r7, #12]
 800cfec:	4613      	mov	r3, r2
 800cfee:	011b      	lsls	r3, r3, #4
 800cff0:	1a9b      	subs	r3, r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	440b      	add	r3, r1
 800cff6:	3317      	adds	r3, #23
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00a      	beq.n	800d014 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cffe:	78fa      	ldrb	r2, [r7, #3]
 800d000:	68f9      	ldr	r1, [r7, #12]
 800d002:	4613      	mov	r3, r2
 800d004:	011b      	lsls	r3, r3, #4
 800d006:	1a9b      	subs	r3, r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	440b      	add	r3, r1
 800d00c:	333c      	adds	r3, #60	@ 0x3c
 800d00e:	78ba      	ldrb	r2, [r7, #2]
 800d010:	701a      	strb	r2, [r3, #0]
 800d012:	e009      	b.n	800d028 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d014:	78fa      	ldrb	r2, [r7, #3]
 800d016:	68f9      	ldr	r1, [r7, #12]
 800d018:	4613      	mov	r3, r2
 800d01a:	011b      	lsls	r3, r3, #4
 800d01c:	1a9b      	subs	r3, r3, r2
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	440b      	add	r3, r1
 800d022:	333d      	adds	r3, #61	@ 0x3d
 800d024:	78ba      	ldrb	r2, [r7, #2]
 800d026:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3714      	adds	r7, #20
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr

0800d036 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b082      	sub	sp, #8
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7f5 f99e 	bl	8002380 <HAL_Delay>
}
 800d044:	bf00      	nop
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b085      	sub	sp, #20
 800d050:	af00      	add	r7, sp, #0
 800d052:	4603      	mov	r3, r0
 800d054:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d056:	2300      	movs	r3, #0
 800d058:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d05a:	79fb      	ldrb	r3, [r7, #7]
 800d05c:	2b03      	cmp	r3, #3
 800d05e:	d817      	bhi.n	800d090 <USBH_Get_USB_Status+0x44>
 800d060:	a201      	add	r2, pc, #4	@ (adr r2, 800d068 <USBH_Get_USB_Status+0x1c>)
 800d062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d066:	bf00      	nop
 800d068:	0800d079 	.word	0x0800d079
 800d06c:	0800d07f 	.word	0x0800d07f
 800d070:	0800d085 	.word	0x0800d085
 800d074:	0800d08b 	.word	0x0800d08b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d078:	2300      	movs	r3, #0
 800d07a:	73fb      	strb	r3, [r7, #15]
    break;
 800d07c:	e00b      	b.n	800d096 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d07e:	2302      	movs	r3, #2
 800d080:	73fb      	strb	r3, [r7, #15]
    break;
 800d082:	e008      	b.n	800d096 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d084:	2301      	movs	r3, #1
 800d086:	73fb      	strb	r3, [r7, #15]
    break;
 800d088:	e005      	b.n	800d096 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d08a:	2302      	movs	r3, #2
 800d08c:	73fb      	strb	r3, [r7, #15]
    break;
 800d08e:	e002      	b.n	800d096 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d090:	2302      	movs	r3, #2
 800d092:	73fb      	strb	r3, [r7, #15]
    break;
 800d094:	bf00      	nop
  }
  return usb_status;
 800d096:	7bfb      	ldrb	r3, [r7, #15]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3714      	adds	r7, #20
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b088      	sub	sp, #32
 800d0a8:	af04      	add	r7, sp, #16
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN PREPARE_I2C_REG_VBUS_FS */
  uint8_t Component_Reg  = 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END PREPARE_I2C_REG_VBUS_FS */
  HAL_StatusTypeDef status = HAL_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	73bb      	strb	r3, [r7, #14]
  /* USER CODE BEGIN PREPARE_I2C_ADDR_VBUS_FS */
  uint8_t Component_Addr = 0 << 1;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	737b      	strb	r3, [r7, #13]
  /* USER CODE END PREPARE_I2C_ADDR_VBUS_FS */
  /* USER CODE BEGIN PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data = state;
 800d0ba:	79fb      	ldrb	r3, [r7, #7]
 800d0bc:	733b      	strb	r3, [r7, #12]
  /* USER CODE END PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data_tmp = 0;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	72fb      	strb	r3, [r7, #11]
  status = HAL_I2C_Mem_Read(&hi2c3, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 800d0c2:	7b7b      	ldrb	r3, [r7, #13]
 800d0c4:	b299      	uxth	r1, r3
 800d0c6:	7bfb      	ldrb	r3, [r7, #15]
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	2364      	movs	r3, #100	@ 0x64
 800d0cc:	9302      	str	r3, [sp, #8]
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	9301      	str	r3, [sp, #4]
 800d0d2:	f107 030b 	add.w	r3, r7, #11
 800d0d6:	9300      	str	r3, [sp, #0]
 800d0d8:	2301      	movs	r3, #1
 800d0da:	480f      	ldr	r0, [pc, #60]	@ (800d118 <MX_DriverVbusFS+0x74>)
 800d0dc:	f7f8 ff4a 	bl	8005f74 <HAL_I2C_Mem_Read>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	73bb      	strb	r3, [r7, #14]
  data |= data_tmp;
 800d0e4:	7b3a      	ldrb	r2, [r7, #12]
 800d0e6:	7afb      	ldrb	r3, [r7, #11]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	733b      	strb	r3, [r7, #12]
  status = HAL_I2C_Mem_Write(&hi2c3,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 800d0ee:	7b7b      	ldrb	r3, [r7, #13]
 800d0f0:	b299      	uxth	r1, r3
 800d0f2:	7bfb      	ldrb	r3, [r7, #15]
 800d0f4:	b29a      	uxth	r2, r3
 800d0f6:	2364      	movs	r3, #100	@ 0x64
 800d0f8:	9302      	str	r3, [sp, #8]
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	9301      	str	r3, [sp, #4]
 800d0fe:	f107 030c 	add.w	r3, r7, #12
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	2301      	movs	r3, #1
 800d106:	4804      	ldr	r0, [pc, #16]	@ (800d118 <MX_DriverVbusFS+0x74>)
 800d108:	f7f8 fe3a 	bl	8005d80 <HAL_I2C_Mem_Write>
 800d10c:	4603      	mov	r3, r0
 800d10e:	73bb      	strb	r3, [r7, #14]
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_FS */
}
 800d110:	bf00      	nop
 800d112:	3710      	adds	r7, #16
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	20000144 	.word	0x20000144

0800d11c <malloc>:
 800d11c:	4b02      	ldr	r3, [pc, #8]	@ (800d128 <malloc+0xc>)
 800d11e:	4601      	mov	r1, r0
 800d120:	6818      	ldr	r0, [r3, #0]
 800d122:	f000 b82d 	b.w	800d180 <_malloc_r>
 800d126:	bf00      	nop
 800d128:	20000030 	.word	0x20000030

0800d12c <free>:
 800d12c:	4b02      	ldr	r3, [pc, #8]	@ (800d138 <free+0xc>)
 800d12e:	4601      	mov	r1, r0
 800d130:	6818      	ldr	r0, [r3, #0]
 800d132:	f000 b8f5 	b.w	800d320 <_free_r>
 800d136:	bf00      	nop
 800d138:	20000030 	.word	0x20000030

0800d13c <sbrk_aligned>:
 800d13c:	b570      	push	{r4, r5, r6, lr}
 800d13e:	4e0f      	ldr	r6, [pc, #60]	@ (800d17c <sbrk_aligned+0x40>)
 800d140:	460c      	mov	r4, r1
 800d142:	6831      	ldr	r1, [r6, #0]
 800d144:	4605      	mov	r5, r0
 800d146:	b911      	cbnz	r1, 800d14e <sbrk_aligned+0x12>
 800d148:	f000 f8ae 	bl	800d2a8 <_sbrk_r>
 800d14c:	6030      	str	r0, [r6, #0]
 800d14e:	4621      	mov	r1, r4
 800d150:	4628      	mov	r0, r5
 800d152:	f000 f8a9 	bl	800d2a8 <_sbrk_r>
 800d156:	1c43      	adds	r3, r0, #1
 800d158:	d103      	bne.n	800d162 <sbrk_aligned+0x26>
 800d15a:	f04f 34ff 	mov.w	r4, #4294967295
 800d15e:	4620      	mov	r0, r4
 800d160:	bd70      	pop	{r4, r5, r6, pc}
 800d162:	1cc4      	adds	r4, r0, #3
 800d164:	f024 0403 	bic.w	r4, r4, #3
 800d168:	42a0      	cmp	r0, r4
 800d16a:	d0f8      	beq.n	800d15e <sbrk_aligned+0x22>
 800d16c:	1a21      	subs	r1, r4, r0
 800d16e:	4628      	mov	r0, r5
 800d170:	f000 f89a 	bl	800d2a8 <_sbrk_r>
 800d174:	3001      	adds	r0, #1
 800d176:	d1f2      	bne.n	800d15e <sbrk_aligned+0x22>
 800d178:	e7ef      	b.n	800d15a <sbrk_aligned+0x1e>
 800d17a:	bf00      	nop
 800d17c:	20002bb8 	.word	0x20002bb8

0800d180 <_malloc_r>:
 800d180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d184:	1ccd      	adds	r5, r1, #3
 800d186:	f025 0503 	bic.w	r5, r5, #3
 800d18a:	3508      	adds	r5, #8
 800d18c:	2d0c      	cmp	r5, #12
 800d18e:	bf38      	it	cc
 800d190:	250c      	movcc	r5, #12
 800d192:	2d00      	cmp	r5, #0
 800d194:	4606      	mov	r6, r0
 800d196:	db01      	blt.n	800d19c <_malloc_r+0x1c>
 800d198:	42a9      	cmp	r1, r5
 800d19a:	d904      	bls.n	800d1a6 <_malloc_r+0x26>
 800d19c:	230c      	movs	r3, #12
 800d19e:	6033      	str	r3, [r6, #0]
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d27c <_malloc_r+0xfc>
 800d1aa:	f000 f869 	bl	800d280 <__malloc_lock>
 800d1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d1b2:	461c      	mov	r4, r3
 800d1b4:	bb44      	cbnz	r4, 800d208 <_malloc_r+0x88>
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f7ff ffbf 	bl	800d13c <sbrk_aligned>
 800d1be:	1c43      	adds	r3, r0, #1
 800d1c0:	4604      	mov	r4, r0
 800d1c2:	d158      	bne.n	800d276 <_malloc_r+0xf6>
 800d1c4:	f8d8 4000 	ldr.w	r4, [r8]
 800d1c8:	4627      	mov	r7, r4
 800d1ca:	2f00      	cmp	r7, #0
 800d1cc:	d143      	bne.n	800d256 <_malloc_r+0xd6>
 800d1ce:	2c00      	cmp	r4, #0
 800d1d0:	d04b      	beq.n	800d26a <_malloc_r+0xea>
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	4639      	mov	r1, r7
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	eb04 0903 	add.w	r9, r4, r3
 800d1dc:	f000 f864 	bl	800d2a8 <_sbrk_r>
 800d1e0:	4581      	cmp	r9, r0
 800d1e2:	d142      	bne.n	800d26a <_malloc_r+0xea>
 800d1e4:	6821      	ldr	r1, [r4, #0]
 800d1e6:	1a6d      	subs	r5, r5, r1
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	f7ff ffa6 	bl	800d13c <sbrk_aligned>
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	d03a      	beq.n	800d26a <_malloc_r+0xea>
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	442b      	add	r3, r5
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	f8d8 3000 	ldr.w	r3, [r8]
 800d1fe:	685a      	ldr	r2, [r3, #4]
 800d200:	bb62      	cbnz	r2, 800d25c <_malloc_r+0xdc>
 800d202:	f8c8 7000 	str.w	r7, [r8]
 800d206:	e00f      	b.n	800d228 <_malloc_r+0xa8>
 800d208:	6822      	ldr	r2, [r4, #0]
 800d20a:	1b52      	subs	r2, r2, r5
 800d20c:	d420      	bmi.n	800d250 <_malloc_r+0xd0>
 800d20e:	2a0b      	cmp	r2, #11
 800d210:	d917      	bls.n	800d242 <_malloc_r+0xc2>
 800d212:	1961      	adds	r1, r4, r5
 800d214:	42a3      	cmp	r3, r4
 800d216:	6025      	str	r5, [r4, #0]
 800d218:	bf18      	it	ne
 800d21a:	6059      	strne	r1, [r3, #4]
 800d21c:	6863      	ldr	r3, [r4, #4]
 800d21e:	bf08      	it	eq
 800d220:	f8c8 1000 	streq.w	r1, [r8]
 800d224:	5162      	str	r2, [r4, r5]
 800d226:	604b      	str	r3, [r1, #4]
 800d228:	4630      	mov	r0, r6
 800d22a:	f000 f82f 	bl	800d28c <__malloc_unlock>
 800d22e:	f104 000b 	add.w	r0, r4, #11
 800d232:	1d23      	adds	r3, r4, #4
 800d234:	f020 0007 	bic.w	r0, r0, #7
 800d238:	1ac2      	subs	r2, r0, r3
 800d23a:	bf1c      	itt	ne
 800d23c:	1a1b      	subne	r3, r3, r0
 800d23e:	50a3      	strne	r3, [r4, r2]
 800d240:	e7af      	b.n	800d1a2 <_malloc_r+0x22>
 800d242:	6862      	ldr	r2, [r4, #4]
 800d244:	42a3      	cmp	r3, r4
 800d246:	bf0c      	ite	eq
 800d248:	f8c8 2000 	streq.w	r2, [r8]
 800d24c:	605a      	strne	r2, [r3, #4]
 800d24e:	e7eb      	b.n	800d228 <_malloc_r+0xa8>
 800d250:	4623      	mov	r3, r4
 800d252:	6864      	ldr	r4, [r4, #4]
 800d254:	e7ae      	b.n	800d1b4 <_malloc_r+0x34>
 800d256:	463c      	mov	r4, r7
 800d258:	687f      	ldr	r7, [r7, #4]
 800d25a:	e7b6      	b.n	800d1ca <_malloc_r+0x4a>
 800d25c:	461a      	mov	r2, r3
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	42a3      	cmp	r3, r4
 800d262:	d1fb      	bne.n	800d25c <_malloc_r+0xdc>
 800d264:	2300      	movs	r3, #0
 800d266:	6053      	str	r3, [r2, #4]
 800d268:	e7de      	b.n	800d228 <_malloc_r+0xa8>
 800d26a:	230c      	movs	r3, #12
 800d26c:	6033      	str	r3, [r6, #0]
 800d26e:	4630      	mov	r0, r6
 800d270:	f000 f80c 	bl	800d28c <__malloc_unlock>
 800d274:	e794      	b.n	800d1a0 <_malloc_r+0x20>
 800d276:	6005      	str	r5, [r0, #0]
 800d278:	e7d6      	b.n	800d228 <_malloc_r+0xa8>
 800d27a:	bf00      	nop
 800d27c:	20002bbc 	.word	0x20002bbc

0800d280 <__malloc_lock>:
 800d280:	4801      	ldr	r0, [pc, #4]	@ (800d288 <__malloc_lock+0x8>)
 800d282:	f000 b84b 	b.w	800d31c <__retarget_lock_acquire_recursive>
 800d286:	bf00      	nop
 800d288:	20002cfc 	.word	0x20002cfc

0800d28c <__malloc_unlock>:
 800d28c:	4801      	ldr	r0, [pc, #4]	@ (800d294 <__malloc_unlock+0x8>)
 800d28e:	f000 b846 	b.w	800d31e <__retarget_lock_release_recursive>
 800d292:	bf00      	nop
 800d294:	20002cfc 	.word	0x20002cfc

0800d298 <memset>:
 800d298:	4402      	add	r2, r0
 800d29a:	4603      	mov	r3, r0
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d100      	bne.n	800d2a2 <memset+0xa>
 800d2a0:	4770      	bx	lr
 800d2a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d2a6:	e7f9      	b.n	800d29c <memset+0x4>

0800d2a8 <_sbrk_r>:
 800d2a8:	b538      	push	{r3, r4, r5, lr}
 800d2aa:	4d06      	ldr	r5, [pc, #24]	@ (800d2c4 <_sbrk_r+0x1c>)
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	4608      	mov	r0, r1
 800d2b2:	602b      	str	r3, [r5, #0]
 800d2b4:	f7f4 fdfa 	bl	8001eac <_sbrk>
 800d2b8:	1c43      	adds	r3, r0, #1
 800d2ba:	d102      	bne.n	800d2c2 <_sbrk_r+0x1a>
 800d2bc:	682b      	ldr	r3, [r5, #0]
 800d2be:	b103      	cbz	r3, 800d2c2 <_sbrk_r+0x1a>
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}
 800d2c4:	20002cf8 	.word	0x20002cf8

0800d2c8 <__errno>:
 800d2c8:	4b01      	ldr	r3, [pc, #4]	@ (800d2d0 <__errno+0x8>)
 800d2ca:	6818      	ldr	r0, [r3, #0]
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	20000030 	.word	0x20000030

0800d2d4 <__libc_init_array>:
 800d2d4:	b570      	push	{r4, r5, r6, lr}
 800d2d6:	4d0d      	ldr	r5, [pc, #52]	@ (800d30c <__libc_init_array+0x38>)
 800d2d8:	4c0d      	ldr	r4, [pc, #52]	@ (800d310 <__libc_init_array+0x3c>)
 800d2da:	1b64      	subs	r4, r4, r5
 800d2dc:	10a4      	asrs	r4, r4, #2
 800d2de:	2600      	movs	r6, #0
 800d2e0:	42a6      	cmp	r6, r4
 800d2e2:	d109      	bne.n	800d2f8 <__libc_init_array+0x24>
 800d2e4:	4d0b      	ldr	r5, [pc, #44]	@ (800d314 <__libc_init_array+0x40>)
 800d2e6:	4c0c      	ldr	r4, [pc, #48]	@ (800d318 <__libc_init_array+0x44>)
 800d2e8:	f000 f864 	bl	800d3b4 <_init>
 800d2ec:	1b64      	subs	r4, r4, r5
 800d2ee:	10a4      	asrs	r4, r4, #2
 800d2f0:	2600      	movs	r6, #0
 800d2f2:	42a6      	cmp	r6, r4
 800d2f4:	d105      	bne.n	800d302 <__libc_init_array+0x2e>
 800d2f6:	bd70      	pop	{r4, r5, r6, pc}
 800d2f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2fc:	4798      	blx	r3
 800d2fe:	3601      	adds	r6, #1
 800d300:	e7ee      	b.n	800d2e0 <__libc_init_array+0xc>
 800d302:	f855 3b04 	ldr.w	r3, [r5], #4
 800d306:	4798      	blx	r3
 800d308:	3601      	adds	r6, #1
 800d30a:	e7f2      	b.n	800d2f2 <__libc_init_array+0x1e>
 800d30c:	0800d3f8 	.word	0x0800d3f8
 800d310:	0800d3f8 	.word	0x0800d3f8
 800d314:	0800d3f8 	.word	0x0800d3f8
 800d318:	0800d3fc 	.word	0x0800d3fc

0800d31c <__retarget_lock_acquire_recursive>:
 800d31c:	4770      	bx	lr

0800d31e <__retarget_lock_release_recursive>:
 800d31e:	4770      	bx	lr

0800d320 <_free_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4605      	mov	r5, r0
 800d324:	2900      	cmp	r1, #0
 800d326:	d041      	beq.n	800d3ac <_free_r+0x8c>
 800d328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d32c:	1f0c      	subs	r4, r1, #4
 800d32e:	2b00      	cmp	r3, #0
 800d330:	bfb8      	it	lt
 800d332:	18e4      	addlt	r4, r4, r3
 800d334:	f7ff ffa4 	bl	800d280 <__malloc_lock>
 800d338:	4a1d      	ldr	r2, [pc, #116]	@ (800d3b0 <_free_r+0x90>)
 800d33a:	6813      	ldr	r3, [r2, #0]
 800d33c:	b933      	cbnz	r3, 800d34c <_free_r+0x2c>
 800d33e:	6063      	str	r3, [r4, #4]
 800d340:	6014      	str	r4, [r2, #0]
 800d342:	4628      	mov	r0, r5
 800d344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d348:	f7ff bfa0 	b.w	800d28c <__malloc_unlock>
 800d34c:	42a3      	cmp	r3, r4
 800d34e:	d908      	bls.n	800d362 <_free_r+0x42>
 800d350:	6820      	ldr	r0, [r4, #0]
 800d352:	1821      	adds	r1, r4, r0
 800d354:	428b      	cmp	r3, r1
 800d356:	bf01      	itttt	eq
 800d358:	6819      	ldreq	r1, [r3, #0]
 800d35a:	685b      	ldreq	r3, [r3, #4]
 800d35c:	1809      	addeq	r1, r1, r0
 800d35e:	6021      	streq	r1, [r4, #0]
 800d360:	e7ed      	b.n	800d33e <_free_r+0x1e>
 800d362:	461a      	mov	r2, r3
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	b10b      	cbz	r3, 800d36c <_free_r+0x4c>
 800d368:	42a3      	cmp	r3, r4
 800d36a:	d9fa      	bls.n	800d362 <_free_r+0x42>
 800d36c:	6811      	ldr	r1, [r2, #0]
 800d36e:	1850      	adds	r0, r2, r1
 800d370:	42a0      	cmp	r0, r4
 800d372:	d10b      	bne.n	800d38c <_free_r+0x6c>
 800d374:	6820      	ldr	r0, [r4, #0]
 800d376:	4401      	add	r1, r0
 800d378:	1850      	adds	r0, r2, r1
 800d37a:	4283      	cmp	r3, r0
 800d37c:	6011      	str	r1, [r2, #0]
 800d37e:	d1e0      	bne.n	800d342 <_free_r+0x22>
 800d380:	6818      	ldr	r0, [r3, #0]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	6053      	str	r3, [r2, #4]
 800d386:	4408      	add	r0, r1
 800d388:	6010      	str	r0, [r2, #0]
 800d38a:	e7da      	b.n	800d342 <_free_r+0x22>
 800d38c:	d902      	bls.n	800d394 <_free_r+0x74>
 800d38e:	230c      	movs	r3, #12
 800d390:	602b      	str	r3, [r5, #0]
 800d392:	e7d6      	b.n	800d342 <_free_r+0x22>
 800d394:	6820      	ldr	r0, [r4, #0]
 800d396:	1821      	adds	r1, r4, r0
 800d398:	428b      	cmp	r3, r1
 800d39a:	bf04      	itt	eq
 800d39c:	6819      	ldreq	r1, [r3, #0]
 800d39e:	685b      	ldreq	r3, [r3, #4]
 800d3a0:	6063      	str	r3, [r4, #4]
 800d3a2:	bf04      	itt	eq
 800d3a4:	1809      	addeq	r1, r1, r0
 800d3a6:	6021      	streq	r1, [r4, #0]
 800d3a8:	6054      	str	r4, [r2, #4]
 800d3aa:	e7ca      	b.n	800d342 <_free_r+0x22>
 800d3ac:	bd38      	pop	{r3, r4, r5, pc}
 800d3ae:	bf00      	nop
 800d3b0:	20002bbc 	.word	0x20002bbc

0800d3b4 <_init>:
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	bf00      	nop
 800d3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ba:	bc08      	pop	{r3}
 800d3bc:	469e      	mov	lr, r3
 800d3be:	4770      	bx	lr

0800d3c0 <_fini>:
 800d3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c2:	bf00      	nop
 800d3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3c6:	bc08      	pop	{r3}
 800d3c8:	469e      	mov	lr, r3
 800d3ca:	4770      	bx	lr
