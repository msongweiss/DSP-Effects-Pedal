
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008b48  08008b48  00009b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ba8  08008ba8  0000a070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ba8  08008ba8  00009ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb0  08008bb0  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb0  08008bb0  00009bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bb4  08008bb4  00009bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008bb8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a070  2**0
                  CONTENTS
 10 .bss          00001564  20000070  20000070  0000a070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200015d4  200015d4  0000a070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b63b  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b5d  00000000  00000000  000256db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  0002a238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a0  00000000  00000000  0002b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002740e  00000000  00000000  0002caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020305  00000000  00000000  00053efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de219  00000000  00000000  00074203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015241c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006538  00000000  00000000  00152460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00158998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b30 	.word	0x08008b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008b30 	.word	0x08008b30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005b0:	4a21      	ldr	r2, [pc, #132]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005dc:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005de:	4a17      	ldr	r2, [pc, #92]	@ (800063c <MX_ADC1_Init+0xa0>)
 80005e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fc:	480d      	ldr	r0, [pc, #52]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005fe:	f001 fc1d 	bl	8001e3c <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000608:	f000 fd2a 	bl	8001060 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800060c:	2301      	movs	r3, #1
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	@ (8000634 <MX_ADC1_Init+0x98>)
 800061e:	f001 fe03 	bl	8002228 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000628:	f000 fd1a 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000008c 	.word	0x2000008c
 8000638:	40012000 	.word	0x40012000
 800063c:	0f000001 	.word	0x0f000001

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a2f      	ldr	r2, [pc, #188]	@ (800071c <HAL_ADC_MspInit+0xdc>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d158      	bne.n	8000714 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b2e      	ldr	r3, [pc, #184]	@ (8000720 <HAL_ADC_MspInit+0xe0>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066a:	4a2d      	ldr	r2, [pc, #180]	@ (8000720 <HAL_ADC_MspInit+0xe0>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000670:	6453      	str	r3, [r2, #68]	@ 0x44
 8000672:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <HAL_ADC_MspInit+0xe0>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <HAL_ADC_MspInit+0xe0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a26      	ldr	r2, [pc, #152]	@ (8000720 <HAL_ADC_MspInit+0xe0>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <HAL_ADC_MspInit+0xe0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800069a:	2302      	movs	r3, #2
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	481d      	ldr	r0, [pc, #116]	@ (8000724 <HAL_ADC_MspInit+0xe4>)
 80006ae:	f002 fd57 	bl	8003160 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006b4:	4a1d      	ldr	r2, [pc, #116]	@ (800072c <HAL_ADC_MspInit+0xec>)
 80006b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006be:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006ec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f8:	480b      	ldr	r0, [pc, #44]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006fa:	f002 f9c1 	bl	8002a80 <HAL_DMA_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000704:	f000 fcac 	bl	8001060 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a07      	ldr	r2, [pc, #28]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 800070c:	639a      	str	r2, [r3, #56]	@ 0x38
 800070e:	4a06      	ldr	r2, [pc, #24]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	@ 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40012000 	.word	0x40012000
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000
 8000728:	200000d4 	.word	0x200000d4
 800072c:	40026410 	.word	0x40026410

08000730 <Audio_Init>:

uint16_t adc_buffer[ADC_BUFFER_SIZE];
uint16_t i2s_buffer[I2S_BUFFER_SIZE];

void Audio_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
    // Init codec
    cs43l22_Init(CODEC_ADDRESS, OUTPUT_DEVICE_BOTH, 100, I2S_AUDIOFREQ_48K);
 8000734:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8000738:	2264      	movs	r2, #100	@ 0x64
 800073a:	2103      	movs	r1, #3
 800073c:	2094      	movs	r0, #148	@ 0x94
 800073e:	f000 ff87 	bl	8001650 <cs43l22_Init>
    cs43l22_SetMute(CODEC_ADDRESS, 0);  // unmute
 8000742:	2100      	movs	r1, #0
 8000744:	2094      	movs	r0, #148	@ 0x94
 8000746:	f001 f8ff 	bl	8001948 <cs43l22_SetMute>
    cs43l22_Play(CODEC_ADDRESS, (uint16_t*)i2s_buffer, I2S_BUFFER_SIZE);
 800074a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800074e:	4903      	ldr	r1, [pc, #12]	@ (800075c <Audio_Init+0x2c>)
 8000750:	2094      	movs	r0, #148	@ 0x94
 8000752:	f001 f861 	bl	8001818 <cs43l22_Play>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000534 	.word	0x20000534

08000760 <Audio_Start>:

void Audio_Start(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    // Start DMA streams
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000768:	4905      	ldr	r1, [pc, #20]	@ (8000780 <Audio_Start+0x20>)
 800076a:	4806      	ldr	r0, [pc, #24]	@ (8000784 <Audio_Start+0x24>)
 800076c:	f001 fc34 	bl	8001fd8 <HAL_ADC_Start_DMA>
    HAL_I2S_Transmit_DMA(&hi2s3, i2s_buffer, I2S_BUFFER_SIZE);
 8000770:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000774:	4904      	ldr	r1, [pc, #16]	@ (8000788 <Audio_Start+0x28>)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <Audio_Start+0x2c>)
 8000778:	f003 fdd0 	bl	800431c <HAL_I2S_Transmit_DMA>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000134 	.word	0x20000134
 8000784:	2000008c 	.word	0x2000008c
 8000788:	20000534 	.word	0x20000534
 800078c:	20000d9c 	.word	0x20000d9c

08000790 <HAL_ADC_ConvHalfCpltCallback>:

// === DMA callbacks ===

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < AUDIO_BLOCK_SIZE; i++) {
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	e014      	b.n	80007c8 <HAL_ADC_ConvHalfCpltCallback+0x38>
        uint16_t sample = adc_buffer[i];
 800079e:	4a0f      	ldr	r2, [pc, #60]	@ (80007dc <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a6:	817b      	strh	r3, [r7, #10]
        i2s_buffer[2 * i]     = sample;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	490c      	ldr	r1, [pc, #48]	@ (80007e0 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80007ae:	897a      	ldrh	r2, [r7, #10]
 80007b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        i2s_buffer[2 * i + 1] = sample;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	3301      	adds	r3, #1
 80007ba:	4909      	ldr	r1, [pc, #36]	@ (80007e0 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80007bc:	897a      	ldrh	r2, [r7, #10]
 80007be:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < AUDIO_BLOCK_SIZE; i++) {
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	3301      	adds	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	2bff      	cmp	r3, #255	@ 0xff
 80007cc:	dde7      	ble.n	800079e <HAL_ADC_ConvHalfCpltCallback+0xe>
    }
}
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	20000134 	.word	0x20000134
 80007e0:	20000534 	.word	0x20000534

080007e4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < AUDIO_BLOCK_SIZE; i++) {
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e01a      	b.n	8000828 <HAL_ADC_ConvCpltCallback+0x44>
        uint16_t sample = adc_buffer[AUDIO_BLOCK_SIZE + i];
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80007f8:	4a10      	ldr	r2, [pc, #64]	@ (800083c <HAL_ADC_ConvCpltCallback+0x58>)
 80007fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007fe:	827b      	strh	r3, [r7, #18]
        int j = AUDIO_BLOCK_SIZE + i;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000806:	60fb      	str	r3, [r7, #12]
        i2s_buffer[2 * j]     = sample;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	490c      	ldr	r1, [pc, #48]	@ (8000840 <HAL_ADC_ConvCpltCallback+0x5c>)
 800080e:	8a7a      	ldrh	r2, [r7, #18]
 8000810:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        i2s_buffer[2 * j + 1] = sample;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	3301      	adds	r3, #1
 800081a:	4909      	ldr	r1, [pc, #36]	@ (8000840 <HAL_ADC_ConvCpltCallback+0x5c>)
 800081c:	8a7a      	ldrh	r2, [r7, #18]
 800081e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < AUDIO_BLOCK_SIZE; i++) {
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3301      	adds	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	2bff      	cmp	r3, #255	@ 0xff
 800082c:	dde1      	ble.n	80007f2 <HAL_ADC_ConvCpltCallback+0xe>
    }
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	371c      	adds	r7, #28
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	20000134 	.word	0x20000134
 8000840:	20000534 	.word	0x20000534

08000844 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_DAC_Init+0x4c>)
 8000854:	4a0f      	ldr	r2, [pc, #60]	@ (8000894 <MX_DAC_Init+0x50>)
 8000856:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000858:	480d      	ldr	r0, [pc, #52]	@ (8000890 <MX_DAC_Init+0x4c>)
 800085a:	f002 f896 	bl	800298a <HAL_DAC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000864:	f000 fbfc 	bl	8001060 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <MX_DAC_Init+0x4c>)
 8000878:	f002 f8a9 	bl	80029ce <HAL_DAC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000882:	f000 fbed 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000d34 	.word	0x20000d34
 8000894:	40007400 	.word	0x40007400

08000898 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <HAL_DAC_MspInit+0x7c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d127      	bne.n	800090a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <HAL_DAC_MspInit+0x80>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <HAL_DAC_MspInit+0x80>)
 80008c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80008c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <HAL_DAC_MspInit+0x80>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_DAC_MspInit+0x80>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a0e      	ldr	r2, [pc, #56]	@ (8000918 <HAL_DAC_MspInit+0x80>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <HAL_DAC_MspInit+0x80>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008f2:	2310      	movs	r3, #16
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f6:	2303      	movs	r3, #3
 80008f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <HAL_DAC_MspInit+0x84>)
 8000906:	f002 fc2b 	bl	8003160 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	@ 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40007400 	.word	0x40007400
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000

08000920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_DMA_Init+0x78>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a1a      	ldr	r2, [pc, #104]	@ (8000998 <MX_DMA_Init+0x78>)
 8000930:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_DMA_Init+0x78>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_DMA_Init+0x78>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a13      	ldr	r2, [pc, #76]	@ (8000998 <MX_DMA_Init+0x78>)
 800094c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_DMA_Init+0x78>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	200b      	movs	r0, #11
 8000964:	f001 ffdb 	bl	800291e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000968:	200b      	movs	r0, #11
 800096a:	f001 fff4 	bl	8002956 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2010      	movs	r0, #16
 8000974:	f001 ffd3 	bl	800291e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000978:	2010      	movs	r0, #16
 800097a:	f001 ffec 	bl	8002956 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2038      	movs	r0, #56	@ 0x38
 8000984:	f001 ffcb 	bl	800291e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000988:	2038      	movs	r0, #56	@ 0x38
 800098a:	f001 ffe4 	bl	8002956 <HAL_NVIC_EnableIRQ>

}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	@ 0x30
 80009a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	4b72      	ldr	r3, [pc, #456]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a71      	ldr	r2, [pc, #452]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b6f      	ldr	r3, [pc, #444]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	4b6b      	ldr	r3, [pc, #428]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a6a      	ldr	r2, [pc, #424]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b68      	ldr	r3, [pc, #416]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b64      	ldr	r3, [pc, #400]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a63      	ldr	r2, [pc, #396]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b61      	ldr	r3, [pc, #388]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b5a      	ldr	r3, [pc, #360]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b56      	ldr	r3, [pc, #344]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a55      	ldr	r2, [pc, #340]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b53      	ldr	r3, [pc, #332]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b4f      	ldr	r3, [pc, #316]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a4e      	ldr	r2, [pc, #312]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b4c      	ldr	r3, [pc, #304]	@ (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	4849      	ldr	r0, [pc, #292]	@ (8000b84 <MX_GPIO_Init+0x1e8>)
 8000a60:	f002 fe16 	bl	8003690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2101      	movs	r1, #1
 8000a68:	4847      	ldr	r0, [pc, #284]	@ (8000b88 <MX_GPIO_Init+0x1ec>)
 8000a6a:	f002 fe11 	bl	8003690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a74:	4845      	ldr	r0, [pc, #276]	@ (8000b8c <MX_GPIO_Init+0x1f0>)
 8000a76:	f002 fe0b 	bl	8003690 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	483c      	ldr	r0, [pc, #240]	@ (8000b84 <MX_GPIO_Init+0x1e8>)
 8000a92:	f002 fb65 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4836      	ldr	r0, [pc, #216]	@ (8000b88 <MX_GPIO_Init+0x1ec>)
 8000aae:	f002 fb57 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac2:	2305      	movs	r3, #5
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	482e      	ldr	r0, [pc, #184]	@ (8000b88 <MX_GPIO_Init+0x1ec>)
 8000ace:	f002 fb47 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ad6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	482a      	ldr	r0, [pc, #168]	@ (8000b90 <MX_GPIO_Init+0x1f4>)
 8000ae8:	f002 fb3a 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000aec:	2304      	movs	r3, #4
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4825      	ldr	r0, [pc, #148]	@ (8000b94 <MX_GPIO_Init+0x1f8>)
 8000b00:	f002 fb2e 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b16:	2305      	movs	r3, #5
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481c      	ldr	r0, [pc, #112]	@ (8000b94 <MX_GPIO_Init+0x1f8>)
 8000b22:	f002 fb1d 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b26:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b2a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <MX_GPIO_Init+0x1f0>)
 8000b40:	f002 fb0e 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b44:	2320      	movs	r3, #32
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	480d      	ldr	r0, [pc, #52]	@ (8000b8c <MX_GPIO_Init+0x1f0>)
 8000b58:	f002 fb02 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b60:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <MX_GPIO_Init+0x1e8>)
 8000b72:	f002 faf5 	bl	8003160 <HAL_GPIO_Init>

}
 8000b76:	bf00      	nop
 8000b78:	3730      	adds	r7, #48	@ 0x30
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40020000 	.word	0x40020000
 8000b94:	40020400 	.word	0x40020400

08000b98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000b9e:	4a13      	ldr	r2, [pc, #76]	@ (8000bec <MX_I2C1_Init+0x54>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <MX_I2C1_Init+0x58>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bd6:	f002 fd75 	bl	80036c4 <HAL_I2C_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be0:	f000 fa3e 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000d48 	.word	0x20000d48
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	000186a0 	.word	0x000186a0

08000bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	@ (8000c78 <HAL_I2C_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12c      	bne.n	8000c70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c32:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c38:	2312      	movs	r3, #18
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c44:	2304      	movs	r3, #4
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <HAL_I2C_MspInit+0x8c>)
 8000c50:	f002 fa86 	bl	8003160 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	@ 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020400 	.word	0x40020400

08000c84 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <HAL_I2C_MspDeInit+0x38>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d10e      	bne.n	8000cb4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000c96:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <HAL_I2C_MspDeInit+0x3c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	4a09      	ldr	r2, [pc, #36]	@ (8000cc0 <HAL_I2C_MspDeInit+0x3c>)
 8000c9c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000ca0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8000ca2:	2140      	movs	r1, #64	@ 0x40
 8000ca4:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <HAL_I2C_MspDeInit+0x40>)
 8000ca6:	f002 fbf7 	bl	8003498 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8000caa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cae:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <HAL_I2C_MspDeInit+0x40>)
 8000cb0:	f002 fbf2 	bl	8003498 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <MX_I2S3_Init>:
DMA_HandleTypeDef hdma_i2s3_ext_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <MX_I2S3_Init+0x54>)
 8000cce:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <MX_I2S3_Init+0x58>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_I2S3_Init+0x54>)
 8000cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cd8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <MX_I2S3_Init+0x54>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_I2S3_Init+0x54>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <MX_I2S3_Init+0x54>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <MX_I2S3_Init+0x54>)
 8000cee:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000cf2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_I2S3_Init+0x54>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <MX_I2S3_Init+0x54>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_I2S3_Init+0x54>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_I2S3_Init+0x54>)
 8000d08:	f003 f9c8 	bl	800409c <HAL_I2S_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d12:	f000 f9a5 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000d9c 	.word	0x20000d9c
 8000d20:	40003c00 	.word	0x40003c00

08000d24 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08e      	sub	sp, #56	@ 0x38
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a6c      	ldr	r2, [pc, #432]	@ (8000f00 <HAL_I2S_MspInit+0x1dc>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	f040 80d0 	bne.w	8000ef6 <HAL_I2S_MspInit+0x1d2>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d56:	2301      	movs	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000d5a:	2332      	movs	r3, #50	@ 0x32
 8000d5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4618      	mov	r0, r3
 8000d68:	f005 fbc6 	bl	80064f8 <HAL_RCCEx_PeriphCLKConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000d72:	f000 f975 	bl	8001060 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b62      	ldr	r3, [pc, #392]	@ (8000f04 <HAL_I2S_MspInit+0x1e0>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	4a61      	ldr	r2, [pc, #388]	@ (8000f04 <HAL_I2S_MspInit+0x1e0>)
 8000d80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	4b5f      	ldr	r3, [pc, #380]	@ (8000f04 <HAL_I2S_MspInit+0x1e0>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b5b      	ldr	r3, [pc, #364]	@ (8000f04 <HAL_I2S_MspInit+0x1e0>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a5a      	ldr	r2, [pc, #360]	@ (8000f04 <HAL_I2S_MspInit+0x1e0>)
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b58      	ldr	r3, [pc, #352]	@ (8000f04 <HAL_I2S_MspInit+0x1e0>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b54      	ldr	r3, [pc, #336]	@ (8000f04 <HAL_I2S_MspInit+0x1e0>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a53      	ldr	r2, [pc, #332]	@ (8000f04 <HAL_I2S_MspInit+0x1e0>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b51      	ldr	r3, [pc, #324]	@ (8000f04 <HAL_I2S_MspInit+0x1e0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dca:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ddc:	2306      	movs	r3, #6
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4848      	ldr	r0, [pc, #288]	@ (8000f08 <HAL_I2S_MspInit+0x1e4>)
 8000de8:	f002 f9ba 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dfe:	2306      	movs	r3, #6
 8000e00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	4840      	ldr	r0, [pc, #256]	@ (8000f0c <HAL_I2S_MspInit+0x1e8>)
 8000e0a:	f002 f9a9 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8000e20:	2305      	movs	r3, #5
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4837      	ldr	r0, [pc, #220]	@ (8000f08 <HAL_I2S_MspInit+0x1e4>)
 8000e2c:	f002 f998 	bl	8003160 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8000e30:	4b37      	ldr	r3, [pc, #220]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e32:	4a38      	ldr	r2, [pc, #224]	@ (8000f14 <HAL_I2S_MspInit+0x1f0>)
 8000e34:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000e36:	4b36      	ldr	r3, [pc, #216]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e38:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000e3c:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e3e:	4b34      	ldr	r3, [pc, #208]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e44:	4b32      	ldr	r3, [pc, #200]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e4a:	4b31      	ldr	r3, [pc, #196]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e50:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e52:	4b2f      	ldr	r3, [pc, #188]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e58:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e60:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000e62:	4b2b      	ldr	r3, [pc, #172]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e68:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e6a:	4b29      	ldr	r3, [pc, #164]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e6c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e70:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e72:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 8000e78:	4825      	ldr	r0, [pc, #148]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e7a:	f001 fe01 	bl	8002a80 <HAL_DMA_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_I2S_MspInit+0x164>
    {
      Error_Handler();
 8000e84:	f000 f8ec 	bl	8001060 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s3_ext_rx);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a21      	ldr	r2, [pc, #132]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e8c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e8e:	4a20      	ldr	r2, [pc, #128]	@ (8000f10 <HAL_I2S_MspInit+0x1ec>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000e96:	4a21      	ldr	r2, [pc, #132]	@ (8000f1c <HAL_I2S_MspInit+0x1f8>)
 8000e98:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000ea2:	2240      	movs	r2, #64	@ 0x40
 8000ea4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000eae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eb2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000eb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eba:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000ebe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ec2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000ec6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eca:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000ece:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ed2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000eda:	480f      	ldr	r0, [pc, #60]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000edc:	f001 fdd0 	bl	8002a80 <HAL_DMA_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_I2S_MspInit+0x1c6>
    {
      Error_Handler();
 8000ee6:	f000 f8bb 	bl	8001060 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000eee:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ef0:	4a09      	ldr	r2, [pc, #36]	@ (8000f18 <HAL_I2S_MspInit+0x1f4>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3738      	adds	r7, #56	@ 0x38
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40003c00 	.word	0x40003c00
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	20000de4 	.word	0x20000de4
 8000f14:	40026010 	.word	0x40026010
 8000f18:	20000e44 	.word	0x20000e44
 8000f1c:	40026088 	.word	0x40026088

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f26:	f000 fef3 	bl	8001d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2a:	f000 f82f 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2e:	f7ff fd35 	bl	800099c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f32:	f7ff fcf5 	bl	8000920 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f36:	f7ff fe2f 	bl	8000b98 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f3a:	f000 f8a9 	bl	8001090 <MX_SPI1_Init>
  MX_DAC_Init();
 8000f3e:	f7ff fc81 	bl	8000844 <MX_DAC_Init>
  MX_I2S3_Init();
 8000f42:	f7ff fec1 	bl	8000cc8 <MX_I2S3_Init>
  MX_ADC1_Init();
 8000f46:	f7ff fb29 	bl	800059c <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f4a:	f000 fac7 	bl	80014dc <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000f4e:	f000 fa53 	bl	80013f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Audio_Init();
 8000f52:	f7ff fbed 	bl	8000730 <Audio_Init>
  Audio_Start();
 8000f56:	f7ff fc03 	bl	8000760 <Audio_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f5a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f5e:	4809      	ldr	r0, [pc, #36]	@ (8000f84 <main+0x64>)
 8000f60:	f000 ffaf 	bl	8001ec2 <HAL_ADC_PollForConversion>
	uint16_t val = HAL_ADC_GetValue(&hadc1);
 8000f64:	4807      	ldr	r0, [pc, #28]	@ (8000f84 <main+0x64>)
 8000f66:	f001 f947 	bl	80021f8 <HAL_ADC_GetValue>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
	printf("ADC: %d\n", val);  // Should vary between ~0 to ~4095
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <main+0x68>)
 8000f74:	f006 ff72 	bl	8007e5c <iprintf>
	HAL_Delay(100);  // Delay to control print rate (e.g., every 100ms)
 8000f78:	2064      	movs	r0, #100	@ 0x64
 8000f7a:	f000 ff3b 	bl	8001df4 <HAL_Delay>
  {
 8000f7e:	bf00      	nop
 8000f80:	e7eb      	b.n	8000f5a <main+0x3a>
 8000f82:	bf00      	nop
 8000f84:	2000008c 	.word	0x2000008c
 8000f88:	08008b48 	.word	0x08008b48

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b094      	sub	sp, #80	@ 0x50
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	2230      	movs	r2, #48	@ 0x30
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f006 ff70 	bl	8007e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	4b28      	ldr	r3, [pc, #160]	@ (8001058 <SystemClock_Config+0xcc>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	4a27      	ldr	r2, [pc, #156]	@ (8001058 <SystemClock_Config+0xcc>)
 8000fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc0:	4b25      	ldr	r3, [pc, #148]	@ (8001058 <SystemClock_Config+0xcc>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	4b22      	ldr	r3, [pc, #136]	@ (800105c <SystemClock_Config+0xd0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a21      	ldr	r2, [pc, #132]	@ (800105c <SystemClock_Config+0xd0>)
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <SystemClock_Config+0xd0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001000:	23a8      	movs	r3, #168	@ 0xa8
 8001002:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001004:	2302      	movs	r3, #2
 8001006:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001008:	2307      	movs	r3, #7
 800100a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0320 	add.w	r3, r7, #32
 8001010:	4618      	mov	r0, r3
 8001012:	f004 fddb 	bl	8005bcc <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800101c:	f000 f820 	bl	8001060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	230f      	movs	r3, #15
 8001022:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001024:	2302      	movs	r3, #2
 8001026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800102c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001032:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2105      	movs	r1, #5
 800103e:	4618      	mov	r0, r3
 8001040:	f005 f83c 	bl	80060bc <HAL_RCC_ClockConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800104a:	f000 f809 	bl	8001060 <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	3750      	adds	r7, #80	@ 0x50
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40007000 	.word	0x40007000

08001060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <Error_Handler+0x8>

0800106c <__io_putchar>:
#include "usart.h"
#include "stdio.h"

// Retarget printf to USART2
int __io_putchar(int ch) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    // HAL_UART_Transmit function transmits a single byte
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001074:	1d39      	adds	r1, r7, #4
 8001076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800107a:	2201      	movs	r2, #1
 800107c:	4803      	ldr	r0, [pc, #12]	@ (800108c <__io_putchar+0x20>)
 800107e:	f005 fc54 	bl	800692a <HAL_UART_Transmit>
    return ch;  // Return the character transmitted
 8001082:	687b      	ldr	r3, [r7, #4]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000f00 	.word	0x20000f00

08001090 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_SPI1_Init+0x64>)
 8001096:	4a18      	ldr	r2, [pc, #96]	@ (80010f8 <MX_SPI1_Init+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_SPI1_Init+0x64>)
 800109c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010dc:	220a      	movs	r2, #10
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010e2:	f005 fb49 	bl	8006778 <HAL_SPI_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010ec:	f7ff ffb8 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000ea4 	.word	0x20000ea4
 80010f8:	40013000 	.word	0x40013000

080010fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a19      	ldr	r2, [pc, #100]	@ (8001180 <HAL_SPI_MspInit+0x84>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d12b      	bne.n	8001176 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <HAL_SPI_MspInit+0x88>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	4a17      	ldr	r2, [pc, #92]	@ (8001184 <HAL_SPI_MspInit+0x88>)
 8001128:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800112c:	6453      	str	r3, [r2, #68]	@ 0x44
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_SPI_MspInit+0x88>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_SPI_MspInit+0x88>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a10      	ldr	r2, [pc, #64]	@ (8001184 <HAL_SPI_MspInit+0x88>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <HAL_SPI_MspInit+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001156:	23e0      	movs	r3, #224	@ 0xe0
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001166:	2305      	movs	r3, #5
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <HAL_SPI_MspInit+0x8c>)
 8001172:	f001 fff5 	bl	8003160 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	@ 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40013000 	.word	0x40013000
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <HAL_MspInit+0x4c>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	4a08      	ldr	r2, [pc, #32]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ca:	2007      	movs	r0, #7
 80011cc:	f001 fb9c 	bl	8002908 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <NMI_Handler+0x4>

080011e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <MemManage_Handler+0x4>

080011f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <BusFault_Handler+0x4>

080011fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <UsageFault_Handler+0x4>

08001204 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001232:	f000 fdbf 	bl	8001db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8001240:	4802      	ldr	r0, [pc, #8]	@ (800124c <DMA1_Stream0_IRQHandler+0x10>)
 8001242:	f001 fd23 	bl	8002c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000de4 	.word	0x20000de4

08001250 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001254:	4802      	ldr	r0, [pc, #8]	@ (8001260 <DMA1_Stream5_IRQHandler+0x10>)
 8001256:	f001 fd19 	bl	8002c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000e44 	.word	0x20000e44

08001264 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001268:	4802      	ldr	r0, [pc, #8]	@ (8001274 <DMA2_Stream0_IRQHandler+0x10>)
 800126a:	f001 fd0f 	bl	8002c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200000d4 	.word	0x200000d4

08001278 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <OTG_FS_IRQHandler+0x10>)
 800127e:	f003 fd96 	bl	8004dae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000f48 	.word	0x20000f48

0800128c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e00a      	b.n	80012b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800129e:	f3af 8000 	nop.w
 80012a2:	4601      	mov	r1, r0
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	60ba      	str	r2, [r7, #8]
 80012aa:	b2ca      	uxtb	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf0      	blt.n	800129e <_read+0x12>
  }

  return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e009      	b.n	80012ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	60ba      	str	r2, [r7, #8]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fec3 	bl	800106c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbf1      	blt.n	80012d8 <_write+0x12>
  }
  return len;
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_close>:

int _close(int file)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001326:	605a      	str	r2, [r3, #4]
  return 0;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <_isatty>:

int _isatty(int file)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	@ (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	@ (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f006 fd7a 	bl	8007e90 <__errno>
 800139c:	4603      	mov	r3, r0
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <_sbrk+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20020000 	.word	0x20020000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	20000efc 	.word	0x20000efc
 80013d0:	200015d8 	.word	0x200015d8

080013d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <SystemInit+0x20>)
 80013da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <SystemInit+0x20>)
 80013e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <MX_USART2_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <MX_USART2_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <MX_USART2_UART_Init+0x4c>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <MX_USART2_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <MX_USART2_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <MX_USART2_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <MX_USART2_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	@ (8001444 <MX_USART2_UART_Init+0x4c>)
 8001430:	f005 fa2b 	bl	800688a <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f7ff fe11 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000f00 	.word	0x20000f00
 8001448:	40004400 	.word	0x40004400

0800144c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	@ (80014d0 <HAL_UART_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12b      	bne.n	80014c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	4a17      	ldr	r2, [pc, #92]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800147c:	6413      	str	r3, [r2, #64]	@ 0x40
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a10      	ldr	r2, [pc, #64]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014a6:	230c      	movs	r3, #12
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b6:	2307      	movs	r3, #7
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <HAL_UART_MspInit+0x8c>)
 80014c2:	f001 fe4d 	bl	8003160 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	@ 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40004400 	.word	0x40004400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014e0:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80014e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ea:	2204      	movs	r2, #4
 80014ec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f0:	2202      	movs	r2, #2
 80014f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fc:	2202      	movs	r2, #2
 80014fe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001514:	2201      	movs	r2, #1
 8001516:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001520:	f003 fb36 	bl	8004b90 <HAL_PCD_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800152a:	f7ff fd99 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000f48 	.word	0x20000f48

08001538 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001558:	d147      	bne.n	80015ea <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <HAL_PCD_MspInit+0xbc>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a24      	ldr	r2, [pc, #144]	@ (80015f4 <HAL_PCD_MspInit+0xbc>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <HAL_PCD_MspInit+0xbc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	481b      	ldr	r0, [pc, #108]	@ (80015f8 <HAL_PCD_MspInit+0xc0>)
 800158c:	f001 fde8 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001590:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015a2:	230a      	movs	r3, #10
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4812      	ldr	r0, [pc, #72]	@ (80015f8 <HAL_PCD_MspInit+0xc0>)
 80015ae:	f001 fdd7 	bl	8003160 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <HAL_PCD_MspInit+0xbc>)
 80015b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b6:	4a0f      	ldr	r2, [pc, #60]	@ (80015f4 <HAL_PCD_MspInit+0xbc>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015bc:	6353      	str	r3, [r2, #52]	@ 0x34
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <HAL_PCD_MspInit+0xbc>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <HAL_PCD_MspInit+0xbc>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_PCD_MspInit+0xbc>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2043      	movs	r0, #67	@ 0x43
 80015e0:	f001 f99d 	bl	800291e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80015e4:	2043      	movs	r0, #67	@ 0x43
 80015e6:	f001 f9b6 	bl	8002956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	@ 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000

080015fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001634 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001600:	f7ff fee8 	bl	80013d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	@ (800163c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	@ (8001648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162a:	f006 fc37 	bl	8007e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162e:	f7ff fc77 	bl	8000f20 <main>
  bx  lr    
 8001632:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001640:	08008bb8 	.word	0x08008bb8
  ldr r2, =_sbss
 8001644:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001648:	200015d4 	.word	0x200015d4

0800164c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC_IRQHandler>
	...

08001650 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	4603      	mov	r3, r0
 800165a:	81fb      	strh	r3, [r7, #14]
 800165c:	460b      	mov	r3, r1
 800165e:	81bb      	strh	r3, [r7, #12]
 8001660:	4613      	mov	r3, r2
 8001662:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8001668:	f000 fa9a 	bl	8001ba0 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2201      	movs	r2, #1
 8001672:	2102      	movs	r1, #2
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f9c5 	bl	8001a04 <CODEC_IO_Write>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	4413      	add	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8001684:	89bb      	ldrh	r3, [r7, #12]
 8001686:	3b01      	subs	r3, #1
 8001688:	2b03      	cmp	r3, #3
 800168a:	d81b      	bhi.n	80016c4 <cs43l22_Init+0x74>
 800168c:	a201      	add	r2, pc, #4	@ (adr r2, 8001694 <cs43l22_Init+0x44>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016a5 	.word	0x080016a5
 8001698:	080016ad 	.word	0x080016ad
 800169c:	080016b5 	.word	0x080016b5
 80016a0:	080016bd 	.word	0x080016bd
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 80016a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001814 <cs43l22_Init+0x1c4>)
 80016a6:	22fa      	movs	r2, #250	@ 0xfa
 80016a8:	701a      	strb	r2, [r3, #0]
    break;
 80016aa:	e00f      	b.n	80016cc <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 80016ac:	4b59      	ldr	r3, [pc, #356]	@ (8001814 <cs43l22_Init+0x1c4>)
 80016ae:	22af      	movs	r2, #175	@ 0xaf
 80016b0:	701a      	strb	r2, [r3, #0]
    break;
 80016b2:	e00b      	b.n	80016cc <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 80016b4:	4b57      	ldr	r3, [pc, #348]	@ (8001814 <cs43l22_Init+0x1c4>)
 80016b6:	22aa      	movs	r2, #170	@ 0xaa
 80016b8:	701a      	strb	r2, [r3, #0]
    break;
 80016ba:	e007      	b.n	80016cc <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 80016bc:	4b55      	ldr	r3, [pc, #340]	@ (8001814 <cs43l22_Init+0x1c4>)
 80016be:	2205      	movs	r2, #5
 80016c0:	701a      	strb	r2, [r3, #0]
    break;    
 80016c2:	e003      	b.n	80016cc <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 80016c4:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <cs43l22_Init+0x1c4>)
 80016c6:	2205      	movs	r2, #5
 80016c8:	701a      	strb	r2, [r3, #0]
    break;    
 80016ca:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	4a50      	ldr	r2, [pc, #320]	@ (8001814 <cs43l22_Init+0x1c4>)
 80016d2:	7812      	ldrb	r2, [r2, #0]
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	2104      	movs	r1, #4
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 f993 	bl	8001a04 <CODEC_IO_Write>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	4413      	add	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2281      	movs	r2, #129	@ 0x81
 80016ee:	2105      	movs	r1, #5
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 f987 	bl	8001a04 <CODEC_IO_Write>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	4413      	add	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001700:	89fb      	ldrh	r3, [r7, #14]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2204      	movs	r2, #4
 8001706:	2106      	movs	r1, #6
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f97b 	bl	8001a04 <CODEC_IO_Write>
 800170e:	4603      	mov	r3, r0
 8001710:	461a      	mov	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4413      	add	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8001718:	7afa      	ldrb	r2, [r7, #11]
 800171a:	89fb      	ldrh	r3, [r7, #14]
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f8b4 	bl	800188c <cs43l22_SetVolume>
 8001724:	4602      	mov	r2, r0
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	4413      	add	r3, r2
 800172a:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 800172c:	89bb      	ldrh	r3, [r7, #12]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d023      	beq.n	800177a <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2206      	movs	r2, #6
 8001738:	210f      	movs	r1, #15
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f962 	bl	8001a04 <CODEC_IO_Write>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	4413      	add	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2200      	movs	r2, #0
 8001750:	2124      	movs	r1, #36	@ 0x24
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f956 	bl	8001a04 <CODEC_IO_Write>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	4413      	add	r3, r2
 8001760:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8001762:	89fb      	ldrh	r3, [r7, #14]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2200      	movs	r2, #0
 8001768:	2125      	movs	r1, #37	@ 0x25
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f94a 	bl	8001a04 <CODEC_IO_Write>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	4413      	add	r3, r2
 8001778:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 800177a:	89fb      	ldrh	r3, [r7, #14]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2200      	movs	r2, #0
 8001780:	210a      	movs	r1, #10
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f93e 	bl	8001a04 <CODEC_IO_Write>
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	4413      	add	r3, r2
 8001790:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001792:	89fb      	ldrh	r3, [r7, #14]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2204      	movs	r2, #4
 8001798:	210e      	movs	r1, #14
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f932 	bl	8001a04 <CODEC_IO_Write>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	4413      	add	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 80017aa:	89fb      	ldrh	r3, [r7, #14]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	2127      	movs	r1, #39	@ 0x27
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f926 	bl	8001a04 <CODEC_IO_Write>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	4413      	add	r3, r2
 80017c0:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 80017c2:	89fb      	ldrh	r3, [r7, #14]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	220f      	movs	r2, #15
 80017c8:	211f      	movs	r1, #31
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f91a 	bl	8001a04 <CODEC_IO_Write>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	4413      	add	r3, r2
 80017d8:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	220a      	movs	r2, #10
 80017e0:	211a      	movs	r1, #26
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f90e 	bl	8001a04 <CODEC_IO_Write>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	4413      	add	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 80017f2:	89fb      	ldrh	r3, [r7, #14]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	220a      	movs	r2, #10
 80017f8:	211b      	movs	r1, #27
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f902 	bl	8001a04 <CODEC_IO_Write>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	4413      	add	r3, r2
 8001808:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 800180a:	697b      	ldr	r3, [r7, #20]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2000142c 	.word	0x2000142c

08001818 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	80fb      	strh	r3, [r7, #6]
 8001824:	4613      	mov	r3, r2
 8001826:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 800182c:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <cs43l22_Play+0x70>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d123      	bne.n	800187c <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2206      	movs	r2, #6
 800183a:	210e      	movs	r1, #14
 800183c:	4618      	mov	r0, r3
 800183e:	f000 f8e1 	bl	8001a04 <CODEC_IO_Write>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4413      	add	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f879 	bl	8001948 <cs43l22_SetMute>
 8001856:	4602      	mov	r2, r0
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	229e      	movs	r2, #158	@ 0x9e
 8001864:	2102      	movs	r1, #2
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f8cc 	bl	8001a04 <CODEC_IO_Write>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001876:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <cs43l22_Play+0x70>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 800187c:	68fb      	ldr	r3, [r7, #12]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000004 	.word	0x20000004

0800188c <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	460a      	mov	r2, r1
 8001896:	80fb      	strh	r3, [r7, #6]
 8001898:	4613      	mov	r3, r2
 800189a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80018a0:	797b      	ldrb	r3, [r7, #5]
 80018a2:	2b64      	cmp	r3, #100	@ 0x64
 80018a4:	d80b      	bhi.n	80018be <cs43l22_SetVolume+0x32>
 80018a6:	797a      	ldrb	r2, [r7, #5]
 80018a8:	4613      	mov	r3, r2
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	4a25      	ldr	r2, [pc, #148]	@ (8001944 <cs43l22_SetVolume+0xb8>)
 80018b0:	fb82 1203 	smull	r1, r2, r2, r3
 80018b4:	1152      	asrs	r2, r2, #5
 80018b6:	17db      	asrs	r3, r3, #31
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	e000      	b.n	80018c0 <cs43l22_SetVolume+0x34>
 80018be:	23ff      	movs	r3, #255	@ 0xff
 80018c0:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80018c2:	7afb      	ldrb	r3, [r7, #11]
 80018c4:	2be6      	cmp	r3, #230	@ 0xe6
 80018c6:	d91c      	bls.n	8001902 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	b2d8      	uxtb	r0, r3
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	3319      	adds	r3, #25
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	2120      	movs	r1, #32
 80018d6:	f000 f895 	bl	8001a04 <CODEC_IO_Write>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	7afb      	ldrb	r3, [r7, #11]
 80018ea:	3319      	adds	r3, #25
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	2121      	movs	r1, #33	@ 0x21
 80018f2:	f000 f887 	bl	8001a04 <CODEC_IO_Write>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4413      	add	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e01b      	b.n	800193a <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	b2d8      	uxtb	r0, r3
 8001906:	7afb      	ldrb	r3, [r7, #11]
 8001908:	3319      	adds	r3, #25
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	2120      	movs	r1, #32
 8001910:	f000 f878 	bl	8001a04 <CODEC_IO_Write>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	b2d8      	uxtb	r0, r3
 8001922:	7afb      	ldrb	r3, [r7, #11]
 8001924:	3319      	adds	r3, #25
 8001926:	b2db      	uxtb	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	2121      	movs	r1, #33	@ 0x21
 800192c:	f000 f86a 	bl	8001a04 <CODEC_IO_Write>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800193a:	68fb      	ldr	r3, [r7, #12]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	51eb851f 	.word	0x51eb851f

08001948 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d124      	bne.n	80019a8 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	22ff      	movs	r2, #255	@ 0xff
 8001964:	2104      	movs	r1, #4
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f84c 	bl	8001a04 <CODEC_IO_Write>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2201      	movs	r2, #1
 800197c:	2122      	movs	r1, #34	@ 0x22
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f840 	bl	8001a04 <CODEC_IO_Write>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2201      	movs	r2, #1
 8001994:	2123      	movs	r1, #35	@ 0x23
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f834 	bl	8001a04 <CODEC_IO_Write>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e025      	b.n	80019f4 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2200      	movs	r2, #0
 80019ae:	2122      	movs	r1, #34	@ 0x22
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f827 	bl	8001a04 <CODEC_IO_Write>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4413      	add	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2200      	movs	r2, #0
 80019c6:	2123      	movs	r1, #35	@ 0x23
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f81b 	bl	8001a04 <CODEC_IO_Write>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4413      	add	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4a08      	ldr	r2, [pc, #32]	@ (8001a00 <cs43l22_SetMute+0xb8>)
 80019de:	7812      	ldrb	r2, [r2, #0]
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	2104      	movs	r1, #4
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f80d 	bl	8001a04 <CODEC_IO_Write>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4413      	add	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80019f4:	68fb      	ldr	r3, [r7, #12]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000142c 	.word	0x2000142c

08001a04 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	71bb      	strb	r3, [r7, #6]
 8001a12:	4613      	mov	r3, r2
 8001a14:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001a1a:	797a      	ldrb	r2, [r7, #5]
 8001a1c:	79b9      	ldrb	r1, [r7, #6]
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 f8f5 	bl	8001c10 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	b2db      	uxtb	r3, r3
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001a38:	480e      	ldr	r0, [pc, #56]	@ (8001a74 <I2Cx_Init+0x40>)
 8001a3a:	f002 f8b1 	bl	8003ba0 <HAL_I2C_GetState>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d114      	bne.n	8001a6e <I2Cx_Init+0x3a>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8001a44:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <I2Cx_Init+0x40>)
 8001a46:	4a0c      	ldr	r2, [pc, #48]	@ (8001a78 <I2Cx_Init+0x44>)
 8001a48:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <I2Cx_Init+0x40>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1 = 0x33;
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <I2Cx_Init+0x40>)
 8001a52:	2233      	movs	r2, #51	@ 0x33
 8001a54:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <I2Cx_Init+0x40>)
 8001a58:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a5c:	611a      	str	r2, [r3, #16]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <I2Cx_Init+0x40>)
 8001a60:	4a06      	ldr	r2, [pc, #24]	@ (8001a7c <I2Cx_Init+0x48>)
 8001a62:	601a      	str	r2, [r3, #0]
      
    /* Init the I2C */
    I2Cx_MspInit();
 8001a64:	f000 f848 	bl	8001af8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <I2Cx_Init+0x40>)
 8001a6a:	f001 fe2b 	bl	80036c4 <HAL_I2C_Init>
  }
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20001430 	.word	0x20001430
 8001a78:	000186a0 	.word	0x000186a0
 8001a7c:	40005400 	.word	0x40005400

08001a80 <I2Cx_WriteData>:
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  * @retval HAL status
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af04      	add	r7, sp, #16
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	71bb      	strb	r3, [r7, #6]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	b299      	uxth	r1, r3
 8001a9a:	79bb      	ldrb	r3, [r7, #6]
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <I2Cx_WriteData+0x50>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	9302      	str	r3, [sp, #8]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	1d7b      	adds	r3, r7, #5
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2301      	movs	r3, #1
 8001aae:	4809      	ldr	r0, [pc, #36]	@ (8001ad4 <I2Cx_WriteData+0x54>)
 8001ab0:	f001 ff7c 	bl	80039ac <HAL_I2C_Mem_Write>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <I2Cx_WriteData+0x46>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f809 	bl	8001ad8 <I2Cx_Error>
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20001430 	.word	0x20001430

08001ad8 <I2Cx_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address 
  */
static void I2Cx_Error(uint8_t Addr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&I2cHandle);
 8001ae2:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <I2Cx_Error+0x1c>)
 8001ae4:	f001 ff32 	bl	800394c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
 8001ae8:	f7ff ffa4 	bl	8001a34 <I2Cx_Init>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20001430 	.word	0x20001430

08001af8 <I2Cx_MspInit>:

/**
  * @brief I2C MSP Initialization
  */
static void I2Cx_MspInit(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b25      	ldr	r3, [pc, #148]	@ (8001b98 <I2Cx_MspInit+0xa0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a24      	ldr	r2, [pc, #144]	@ (8001b98 <I2Cx_MspInit+0xa0>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b22      	ldr	r3, [pc, #136]	@ (8001b98 <I2Cx_MspInit+0xa0>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 8001b1a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b20:	2312      	movs	r3, #18
 8001b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001b24:	2302      	movs	r3, #2
 8001b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	4619      	mov	r1, r3
 8001b36:	4819      	ldr	r0, [pc, #100]	@ (8001b9c <I2Cx_MspInit+0xa4>)
 8001b38:	f001 fb12 	bl	8003160 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <I2Cx_MspInit+0xa0>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	4a14      	ldr	r2, [pc, #80]	@ (8001b98 <I2Cx_MspInit+0xa0>)
 8001b46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <I2Cx_MspInit+0xa0>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001b58:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <I2Cx_MspInit+0xa0>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b98 <I2Cx_MspInit+0xa0>)
 8001b5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b62:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <I2Cx_MspInit+0xa0>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a0b      	ldr	r2, [pc, #44]	@ (8001b98 <I2Cx_MspInit+0xa0>)
 8001b6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b6e:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	201f      	movs	r0, #31
 8001b76:	f000 fed2 	bl	800291e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001b7a:	201f      	movs	r0, #31
 8001b7c:	f000 feeb 	bl	8002956 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	2020      	movs	r0, #32
 8001b86:	f000 feca 	bl	800291e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8001b8a:	2020      	movs	r0, #32
 8001b8c:	f000 fee3 	bl	8002956 <HAL_NVIC_EnableIRQ>
}
 8001b90:	bf00      	nop
 8001b92:	3720      	adds	r7, #32
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <AUDIO_IO_Init+0x68>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	4a16      	ldr	r2, [pc, #88]	@ (8001c08 <AUDIO_IO_Init+0x68>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb6:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <AUDIO_IO_Init+0x68>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480d      	ldr	r0, [pc, #52]	@ (8001c0c <AUDIO_IO_Init+0x6c>)
 8001bd8:	f001 fac2 	bl	8003160 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001bdc:	f7ff ff2a 	bl	8001a34 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2110      	movs	r1, #16
 8001be4:	4809      	ldr	r0, [pc, #36]	@ (8001c0c <AUDIO_IO_Init+0x6c>)
 8001be6:	f001 fd53 	bl	8003690 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001bea:	2005      	movs	r0, #5
 8001bec:	f000 f902 	bl	8001df4 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2110      	movs	r1, #16
 8001bf4:	4805      	ldr	r0, [pc, #20]	@ (8001c0c <AUDIO_IO_Init+0x6c>)
 8001bf6:	f001 fd4b 	bl	8003690 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001bfa:	2005      	movs	r0, #5
 8001bfc:	f000 f8fa 	bl	8001df4 <HAL_Delay>
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020c00 	.word	0x40020c00

08001c10 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	71bb      	strb	r3, [r7, #6]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001c22:	797a      	ldrb	r2, [r7, #5]
 8001c24:	79b9      	ldrb	r1, [r7, #6]
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff29 	bl	8001a80 <I2Cx_WriteData>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_I2S_TxCpltCallback+0x20>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d101      	bne.n	8001c4e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8001c4a:	f000 f819 	bl	8001c80 <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40003c00 	.word	0x40003c00

08001c5c <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <HAL_I2S_TxHalfCpltCallback+0x20>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8001c6e:	f000 f80e 	bl	8001c8e <BSP_AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40003c00 	.word	0x40003c00

08001c80 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

/**
  * @brief  Manages the DMA Half Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001cb2:	f000 f804 	bl	8001cbe <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	@ (8001d08 <HAL_I2S_ErrorCallback+0x2c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001cee:	f7ff ffd5 	bl	8001c9c <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a05      	ldr	r2, [pc, #20]	@ (8001d0c <HAL_I2S_ErrorCallback+0x30>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d101      	bne.n	8001d00 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001cfc:	f7ff ffe6 	bl	8001ccc <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40003c00 	.word	0x40003c00
 8001d0c:	40003800 	.word	0x40003800

08001d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d14:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <HAL_Init+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0d      	ldr	r2, [pc, #52]	@ (8001d50 <HAL_Init+0x40>)
 8001d1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d20:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <HAL_Init+0x40>)
 8001d26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a07      	ldr	r2, [pc, #28]	@ (8001d50 <HAL_Init+0x40>)
 8001d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f000 fde5 	bl	8002908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f000 f808 	bl	8001d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d44:	f7ff fa22 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023c00 	.word	0x40023c00

08001d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_InitTick+0x54>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <HAL_InitTick+0x58>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fdfd 	bl	8002972 <HAL_SYSTICK_Config>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00e      	b.n	8001da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b0f      	cmp	r3, #15
 8001d86:	d80a      	bhi.n	8001d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d90:	f000 fdc5 	bl	800291e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d94:	4a06      	ldr	r2, [pc, #24]	@ (8001db0 <HAL_InitTick+0x5c>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000010 	.word	0x20000010
 8001db0:	2000000c 	.word	0x2000000c

08001db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_IncTick+0x20>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_IncTick+0x24>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <HAL_IncTick+0x24>)
 8001dc6:	6013      	str	r3, [r2, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000010 	.word	0x20000010
 8001dd8:	20001484 	.word	0x20001484

08001ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return uwTick;
 8001de0:	4b03      	ldr	r3, [pc, #12]	@ (8001df0 <HAL_GetTick+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20001484 	.word	0x20001484

08001df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dfc:	f7ff ffee 	bl	8001ddc <HAL_GetTick>
 8001e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e0c:	d005      	beq.n	8001e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <HAL_Delay+0x44>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e1a:	bf00      	nop
 8001e1c:	f7ff ffde 	bl	8001ddc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d8f7      	bhi.n	8001e1c <HAL_Delay+0x28>
  {
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000010 	.word	0x20000010

08001e3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e033      	b.n	8001eba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe fbf0 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d118      	bne.n	8001eac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e82:	f023 0302 	bic.w	r3, r3, #2
 8001e86:	f043 0202 	orr.w	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 faec 	bl	800246c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	f043 0201 	orr.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eaa:	e001      	b.n	8001eb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ede:	d113      	bne.n	8001f08 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eee:	d10b      	bne.n	8001f08 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	f043 0220 	orr.w	r2, r3, #32
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e063      	b.n	8001fd0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f08:	f7ff ff68 	bl	8001ddc <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f0e:	e021      	b.n	8001f54 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f16:	d01d      	beq.n	8001f54 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <HAL_ADC_PollForConversion+0x6c>
 8001f1e:	f7ff ff5d 	bl	8001ddc <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d212      	bcs.n	8001f54 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d00b      	beq.n	8001f54 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	f043 0204 	orr.w	r2, r3, #4
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e03d      	b.n	8001fd0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d1d6      	bne.n	8001f10 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f06f 0212 	mvn.w	r2, #18
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d123      	bne.n	8001fce <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d11f      	bne.n	8001fce <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d111      	bne.n	8001fce <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Start_DMA+0x1e>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e0e9      	b.n	80021ca <HAL_ADC_Start_DMA+0x1f2>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d018      	beq.n	800203e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800201c:	4b6d      	ldr	r3, [pc, #436]	@ (80021d4 <HAL_ADC_Start_DMA+0x1fc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a6d      	ldr	r2, [pc, #436]	@ (80021d8 <HAL_ADC_Start_DMA+0x200>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0c9a      	lsrs	r2, r3, #18
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002030:	e002      	b.n	8002038 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	3b01      	subs	r3, #1
 8002036:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f9      	bne.n	8002032 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800204c:	d107      	bne.n	800205e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800205c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	f040 80a1 	bne.w	80021b0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002098:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ac:	d106      	bne.n	80020bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b2:	f023 0206 	bic.w	r2, r3, #6
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80020ba:	e002      	b.n	80020c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ca:	4b44      	ldr	r3, [pc, #272]	@ (80021dc <HAL_ADC_Start_DMA+0x204>)
 80020cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d2:	4a43      	ldr	r2, [pc, #268]	@ (80021e0 <HAL_ADC_Start_DMA+0x208>)
 80020d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020da:	4a42      	ldr	r2, [pc, #264]	@ (80021e4 <HAL_ADC_Start_DMA+0x20c>)
 80020dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e2:	4a41      	ldr	r2, [pc, #260]	@ (80021e8 <HAL_ADC_Start_DMA+0x210>)
 80020e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80020ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80020fe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800210e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	334c      	adds	r3, #76	@ 0x4c
 800211a:	4619      	mov	r1, r3
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f000 fd5c 	bl	8002bdc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	2b00      	cmp	r3, #0
 800212e:	d12a      	bne.n	8002186 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a2d      	ldr	r2, [pc, #180]	@ (80021ec <HAL_ADC_Start_DMA+0x214>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d015      	beq.n	8002166 <HAL_ADC_Start_DMA+0x18e>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a2c      	ldr	r2, [pc, #176]	@ (80021f0 <HAL_ADC_Start_DMA+0x218>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d105      	bne.n	8002150 <HAL_ADC_Start_DMA+0x178>
 8002144:	4b25      	ldr	r3, [pc, #148]	@ (80021dc <HAL_ADC_Start_DMA+0x204>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a27      	ldr	r2, [pc, #156]	@ (80021f4 <HAL_ADC_Start_DMA+0x21c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d136      	bne.n	80021c8 <HAL_ADC_Start_DMA+0x1f0>
 800215a:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <HAL_ADC_Start_DMA+0x204>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	d130      	bne.n	80021c8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d129      	bne.n	80021c8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	e020      	b.n	80021c8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a18      	ldr	r2, [pc, #96]	@ (80021ec <HAL_ADC_Start_DMA+0x214>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d11b      	bne.n	80021c8 <HAL_ADC_Start_DMA+0x1f0>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d114      	bne.n	80021c8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	e00b      	b.n	80021c8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f043 0210 	orr.w	r2, r3, #16
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c0:	f043 0201 	orr.w	r2, r3, #1
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000000 	.word	0x20000000
 80021d8:	431bde83 	.word	0x431bde83
 80021dc:	40012300 	.word	0x40012300
 80021e0:	08002665 	.word	0x08002665
 80021e4:	0800271f 	.word	0x0800271f
 80021e8:	0800273b 	.word	0x0800273b
 80021ec:	40012000 	.word	0x40012000
 80021f0:	40012100 	.word	0x40012100
 80021f4:	40012200 	.word	0x40012200

080021f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1c>
 8002240:	2302      	movs	r3, #2
 8002242:	e105      	b.n	8002450 <HAL_ADC_ConfigChannel+0x228>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b09      	cmp	r3, #9
 8002252:	d925      	bls.n	80022a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68d9      	ldr	r1, [r3, #12]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	3b1e      	subs	r3, #30
 800226a:	2207      	movs	r2, #7
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43da      	mvns	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	400a      	ands	r2, r1
 8002278:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68d9      	ldr	r1, [r3, #12]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4618      	mov	r0, r3
 800228c:	4603      	mov	r3, r0
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4403      	add	r3, r0
 8002292:	3b1e      	subs	r3, #30
 8002294:	409a      	lsls	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	e022      	b.n	80022e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6919      	ldr	r1, [r3, #16]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	2207      	movs	r2, #7
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	400a      	ands	r2, r1
 80022c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6919      	ldr	r1, [r3, #16]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4403      	add	r3, r0
 80022dc:	409a      	lsls	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d824      	bhi.n	8002338 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	3b05      	subs	r3, #5
 8002300:	221f      	movs	r2, #31
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	400a      	ands	r2, r1
 800230e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b05      	subs	r3, #5
 800232a:	fa00 f203 	lsl.w	r2, r0, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	635a      	str	r2, [r3, #52]	@ 0x34
 8002336:	e04c      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d824      	bhi.n	800238a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3b23      	subs	r3, #35	@ 0x23
 8002352:	221f      	movs	r2, #31
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43da      	mvns	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	400a      	ands	r2, r1
 8002360:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	3b23      	subs	r3, #35	@ 0x23
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
 8002388:	e023      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	3b41      	subs	r3, #65	@ 0x41
 800239c:	221f      	movs	r2, #31
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	400a      	ands	r2, r1
 80023aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	3b41      	subs	r3, #65	@ 0x41
 80023c6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d2:	4b22      	ldr	r3, [pc, #136]	@ (800245c <HAL_ADC_ConfigChannel+0x234>)
 80023d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a21      	ldr	r2, [pc, #132]	@ (8002460 <HAL_ADC_ConfigChannel+0x238>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d109      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1cc>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b12      	cmp	r3, #18
 80023e6:	d105      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a19      	ldr	r2, [pc, #100]	@ (8002460 <HAL_ADC_ConfigChannel+0x238>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d123      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x21e>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b10      	cmp	r3, #16
 8002404:	d003      	beq.n	800240e <HAL_ADC_ConfigChannel+0x1e6>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b11      	cmp	r3, #17
 800240c:	d11b      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b10      	cmp	r3, #16
 8002420:	d111      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002422:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <HAL_ADC_ConfigChannel+0x23c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a10      	ldr	r2, [pc, #64]	@ (8002468 <HAL_ADC_ConfigChannel+0x240>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	0c9a      	lsrs	r2, r3, #18
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002438:	e002      	b.n	8002440 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	3b01      	subs	r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f9      	bne.n	800243a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40012300 	.word	0x40012300
 8002460:	40012000 	.word	0x40012000
 8002464:	20000000 	.word	0x20000000
 8002468:	431bde83 	.word	0x431bde83

0800246c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002474:	4b79      	ldr	r3, [pc, #484]	@ (800265c <ADC_Init+0x1f0>)
 8002476:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	431a      	orrs	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	021a      	lsls	r2, r3, #8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6899      	ldr	r1, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	4a58      	ldr	r2, [pc, #352]	@ (8002660 <ADC_Init+0x1f4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d022      	beq.n	800254a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002512:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6899      	ldr	r1, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6899      	ldr	r1, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	e00f      	b.n	800256a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002568:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0202 	bic.w	r2, r2, #2
 8002578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6899      	ldr	r1, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7e1b      	ldrb	r3, [r3, #24]
 8002584:	005a      	lsls	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01b      	beq.n	80025d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	3b01      	subs	r3, #1
 80025c4:	035a      	lsls	r2, r3, #13
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	e007      	b.n	80025e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	051a      	lsls	r2, r3, #20
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6899      	ldr	r1, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002622:	025a      	lsls	r2, r3, #9
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800263a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6899      	ldr	r1, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	029a      	lsls	r2, r3, #10
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40012300 	.word	0x40012300
 8002660:	0f000001 	.word	0x0f000001

08002664 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002670:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800267a:	2b00      	cmp	r3, #0
 800267c:	d13c      	bne.n	80026f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d12b      	bne.n	80026f0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800269c:	2b00      	cmp	r3, #0
 800269e:	d127      	bne.n	80026f0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d119      	bne.n	80026f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0220 	bic.w	r2, r2, #32
 80026ca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7fe f877 	bl	80007e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026f6:	e00e      	b.n	8002716 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff fd84 	bl	8002212 <HAL_ADC_ErrorCallback>
}
 800270a:	e004      	b.n	8002716 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7fe f82f 	bl	8000790 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002746:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2240      	movs	r2, #64	@ 0x40
 800274c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	f043 0204 	orr.w	r2, r3, #4
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff fd59 	bl	8002212 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002778:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279a:	4a04      	ldr	r2, [pc, #16]	@ (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	60d3      	str	r3, [r2, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b4:	4b04      	ldr	r3, [pc, #16]	@ (80027c8 <__NVIC_GetPriorityGrouping+0x18>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	f003 0307 	and.w	r3, r3, #7
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db0b      	blt.n	80027f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	4907      	ldr	r1, [pc, #28]	@ (8002804 <__NVIC_EnableIRQ+0x38>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2001      	movs	r0, #1
 80027ee:	fa00 f202 	lsl.w	r2, r0, r2
 80027f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	db0a      	blt.n	8002832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	490c      	ldr	r1, [pc, #48]	@ (8002854 <__NVIC_SetPriority+0x4c>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002830:	e00a      	b.n	8002848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4908      	ldr	r1, [pc, #32]	@ (8002858 <__NVIC_SetPriority+0x50>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3b04      	subs	r3, #4
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	440b      	add	r3, r1
 8002846:	761a      	strb	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	@ 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f1c3 0307 	rsb	r3, r3, #7
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf28      	it	cs
 800287a:	2304      	movcs	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3304      	adds	r3, #4
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <NVIC_EncodePriority+0x30>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3b03      	subs	r3, #3
 800288a:	e000      	b.n	800288e <NVIC_EncodePriority+0x32>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	4313      	orrs	r3, r2
         );
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	@ 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d4:	d301      	bcc.n	80028da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00f      	b.n	80028fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028da:	4a0a      	ldr	r2, [pc, #40]	@ (8002904 <SysTick_Config+0x40>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028e2:	210f      	movs	r1, #15
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028e8:	f7ff ff8e 	bl	8002808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <SysTick_Config+0x40>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f2:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <SysTick_Config+0x40>)
 80028f4:	2207      	movs	r2, #7
 80028f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	e000e010 	.word	0xe000e010

08002908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff ff29 	bl	8002768 <__NVIC_SetPriorityGrouping>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002930:	f7ff ff3e 	bl	80027b0 <__NVIC_GetPriorityGrouping>
 8002934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	6978      	ldr	r0, [r7, #20]
 800293c:	f7ff ff8e 	bl	800285c <NVIC_EncodePriority>
 8002940:	4602      	mov	r2, r0
 8002942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff5d 	bl	8002808 <__NVIC_SetPriority>
}
 800294e:	bf00      	nop
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff31 	bl	80027cc <__NVIC_EnableIRQ>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ffa2 	bl	80028c4 <SysTick_Config>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e014      	b.n	80029c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	791b      	ldrb	r3, [r3, #4]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d105      	bne.n	80029b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7fd ff73 	bl	8000898 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b089      	sub	sp, #36	@ 0x24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HAL_DAC_ConfigChannel+0x1c>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e042      	b.n	8002a74 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	795b      	ldrb	r3, [r3, #5]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_DAC_ConfigChannel+0x2c>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e03c      	b.n	8002a74 <HAL_DAC_ConfigChannel+0xa6>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2202      	movs	r2, #2
 8002a04:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	22c0      	movs	r2, #192	@ 0xc0
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43da      	mvns	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	400a      	ands	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3724      	adds	r7, #36	@ 0x24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a8c:	f7ff f9a6 	bl	8001ddc <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e099      	b.n	8002bd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002abc:	e00f      	b.n	8002ade <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002abe:	f7ff f98d 	bl	8001ddc <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d908      	bls.n	8002ade <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e078      	b.n	8002bd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e8      	bne.n	8002abe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4b38      	ldr	r3, [pc, #224]	@ (8002bd8 <HAL_DMA_Init+0x158>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d107      	bne.n	8002b48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b40:	4313      	orrs	r3, r2
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f023 0307 	bic.w	r3, r3, #7
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d117      	bne.n	8002ba2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00e      	beq.n	8002ba2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fa6f 	bl	8003068 <DMA_CheckFifoParam>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2240      	movs	r2, #64	@ 0x40
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e016      	b.n	8002bd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa26 	bl	8002ffc <DMA_CalcBaseAndBitshift>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb8:	223f      	movs	r2, #63	@ 0x3f
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	f010803f 	.word	0xf010803f

08002bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_DMA_Start_IT+0x26>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e040      	b.n	8002c84 <HAL_DMA_Start_IT+0xa8>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d12f      	bne.n	8002c76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f9b8 	bl	8002fa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c34:	223f      	movs	r2, #63	@ 0x3f
 8002c36:	409a      	lsls	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0216 	orr.w	r2, r2, #22
 8002c4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0208 	orr.w	r2, r2, #8
 8002c62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e005      	b.n	8002c82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c98:	4b8e      	ldr	r3, [pc, #568]	@ (8002ed4 <HAL_DMA_IRQHandler+0x248>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a8e      	ldr	r2, [pc, #568]	@ (8002ed8 <HAL_DMA_IRQHandler+0x24c>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	0a9b      	lsrs	r3, r3, #10
 8002ca4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002caa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01a      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0204 	bic.w	r2, r2, #4
 8002cde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d012      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d26:	f043 0202 	orr.w	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	2204      	movs	r2, #4
 8002d34:	409a      	lsls	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d012      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00b      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	2204      	movs	r2, #4
 8002d52:	409a      	lsls	r2, r3
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5c:	f043 0204 	orr.w	r2, r3, #4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d68:	2210      	movs	r2, #16
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d043      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d03c      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	2210      	movs	r2, #16
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d018      	beq.n	8002dce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d108      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d024      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
 8002dba:	e01f      	b.n	8002dfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
 8002dcc:	e016      	b.n	8002dfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0208 	bic.w	r2, r2, #8
 8002dea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e00:	2220      	movs	r2, #32
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 808f 	beq.w	8002f2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8087 	beq.w	8002f2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	2220      	movs	r2, #32
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d136      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0216 	bic.w	r2, r2, #22
 8002e44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <HAL_DMA_IRQHandler+0x1da>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0208 	bic.w	r2, r2, #8
 8002e74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	223f      	movs	r2, #63	@ 0x3f
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d07e      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
        }
        return;
 8002ea2:	e079      	b.n	8002f98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d031      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
 8002ed0:	e02c      	b.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d023      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
 8002eec:	e01e      	b.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10f      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0210 	bic.w	r2, r2, #16
 8002f0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d032      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d022      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2205      	movs	r2, #5
 8002f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d307      	bcc.n	8002f74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f2      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x2cc>
 8002f72:	e000      	b.n	8002f76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
 8002f96:	e000      	b.n	8002f9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f98:	bf00      	nop
    }
  }
}
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b40      	cmp	r3, #64	@ 0x40
 8002fcc:	d108      	bne.n	8002fe0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fde:	e007      	b.n	8002ff0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	60da      	str	r2, [r3, #12]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	3b10      	subs	r3, #16
 800300c:	4a14      	ldr	r2, [pc, #80]	@ (8003060 <DMA_CalcBaseAndBitshift+0x64>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003016:	4a13      	ldr	r2, [pc, #76]	@ (8003064 <DMA_CalcBaseAndBitshift+0x68>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d909      	bls.n	800303e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	1d1a      	adds	r2, r3, #4
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	659a      	str	r2, [r3, #88]	@ 0x58
 800303c:	e007      	b.n	800304e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	aaaaaaab 	.word	0xaaaaaaab
 8003064:	08008b6c 	.word	0x08008b6c

08003068 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11f      	bne.n	80030c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d856      	bhi.n	8003136 <DMA_CheckFifoParam+0xce>
 8003088:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <DMA_CheckFifoParam+0x28>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030a1 	.word	0x080030a1
 8003094:	080030b3 	.word	0x080030b3
 8003098:	080030a1 	.word	0x080030a1
 800309c:	08003137 	.word	0x08003137
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d046      	beq.n	800313a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e043      	b.n	800313a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030ba:	d140      	bne.n	800313e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c0:	e03d      	b.n	800313e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ca:	d121      	bne.n	8003110 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d837      	bhi.n	8003142 <DMA_CheckFifoParam+0xda>
 80030d2:	a201      	add	r2, pc, #4	@ (adr r2, 80030d8 <DMA_CheckFifoParam+0x70>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030ef 	.word	0x080030ef
 80030e0:	080030e9 	.word	0x080030e9
 80030e4:	08003101 	.word	0x08003101
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e030      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d025      	beq.n	8003146 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fe:	e022      	b.n	8003146 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003108:	d11f      	bne.n	800314a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800310e:	e01c      	b.n	800314a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d903      	bls.n	800311e <DMA_CheckFifoParam+0xb6>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d003      	beq.n	8003124 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800311c:	e018      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
      break;
 8003122:	e015      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00e      	beq.n	800314e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e00b      	b.n	800314e <DMA_CheckFifoParam+0xe6>
      break;
 8003136:	bf00      	nop
 8003138:	e00a      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800313a:	bf00      	nop
 800313c:	e008      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
 8003140:	e006      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 8003142:	bf00      	nop
 8003144:	e004      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;   
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800314e:	bf00      	nop
    }
  } 
  
  return status; 
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	@ 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e16b      	b.n	8003454 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800317c:	2201      	movs	r2, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	429a      	cmp	r2, r3
 8003196:	f040 815a 	bne.w	800344e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d005      	beq.n	80031b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d130      	bne.n	8003214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 0201 	and.w	r2, r3, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b03      	cmp	r3, #3
 800321e:	d017      	beq.n	8003250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d123      	bne.n	80032a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	08da      	lsrs	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3208      	adds	r2, #8
 8003264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	220f      	movs	r2, #15
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	08da      	lsrs	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0203 	and.w	r2, r3, #3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80b4 	beq.w	800344e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b60      	ldr	r3, [pc, #384]	@ (800346c <HAL_GPIO_Init+0x30c>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	4a5f      	ldr	r2, [pc, #380]	@ (800346c <HAL_GPIO_Init+0x30c>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032f6:	4b5d      	ldr	r3, [pc, #372]	@ (800346c <HAL_GPIO_Init+0x30c>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003302:	4a5b      	ldr	r2, [pc, #364]	@ (8003470 <HAL_GPIO_Init+0x310>)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a52      	ldr	r2, [pc, #328]	@ (8003474 <HAL_GPIO_Init+0x314>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d02b      	beq.n	8003386 <HAL_GPIO_Init+0x226>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a51      	ldr	r2, [pc, #324]	@ (8003478 <HAL_GPIO_Init+0x318>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d025      	beq.n	8003382 <HAL_GPIO_Init+0x222>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a50      	ldr	r2, [pc, #320]	@ (800347c <HAL_GPIO_Init+0x31c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01f      	beq.n	800337e <HAL_GPIO_Init+0x21e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4f      	ldr	r2, [pc, #316]	@ (8003480 <HAL_GPIO_Init+0x320>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d019      	beq.n	800337a <HAL_GPIO_Init+0x21a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4e      	ldr	r2, [pc, #312]	@ (8003484 <HAL_GPIO_Init+0x324>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_GPIO_Init+0x216>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4d      	ldr	r2, [pc, #308]	@ (8003488 <HAL_GPIO_Init+0x328>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00d      	beq.n	8003372 <HAL_GPIO_Init+0x212>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4c      	ldr	r2, [pc, #304]	@ (800348c <HAL_GPIO_Init+0x32c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <HAL_GPIO_Init+0x20e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4b      	ldr	r2, [pc, #300]	@ (8003490 <HAL_GPIO_Init+0x330>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_GPIO_Init+0x20a>
 8003366:	2307      	movs	r3, #7
 8003368:	e00e      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800336a:	2308      	movs	r3, #8
 800336c:	e00c      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800336e:	2306      	movs	r3, #6
 8003370:	e00a      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003372:	2305      	movs	r3, #5
 8003374:	e008      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003376:	2304      	movs	r3, #4
 8003378:	e006      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800337a:	2303      	movs	r3, #3
 800337c:	e004      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800337e:	2302      	movs	r3, #2
 8003380:	e002      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003386:	2300      	movs	r3, #0
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f002 0203 	and.w	r2, r2, #3
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	4093      	lsls	r3, r2
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003398:	4935      	ldr	r1, [pc, #212]	@ (8003470 <HAL_GPIO_Init+0x310>)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ca:	4a32      	ldr	r2, [pc, #200]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d0:	4b30      	ldr	r3, [pc, #192]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f4:	4a27      	ldr	r2, [pc, #156]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033fa:	4b26      	ldr	r3, [pc, #152]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800341e:	4a1d      	ldr	r2, [pc, #116]	@ (8003494 <HAL_GPIO_Init+0x334>)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003424:	4b1b      	ldr	r3, [pc, #108]	@ (8003494 <HAL_GPIO_Init+0x334>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003448:	4a12      	ldr	r2, [pc, #72]	@ (8003494 <HAL_GPIO_Init+0x334>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3301      	adds	r3, #1
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b0f      	cmp	r3, #15
 8003458:	f67f ae90 	bls.w	800317c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3724      	adds	r7, #36	@ 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40013800 	.word	0x40013800
 8003474:	40020000 	.word	0x40020000
 8003478:	40020400 	.word	0x40020400
 800347c:	40020800 	.word	0x40020800
 8003480:	40020c00 	.word	0x40020c00
 8003484:	40021000 	.word	0x40021000
 8003488:	40021400 	.word	0x40021400
 800348c:	40021800 	.word	0x40021800
 8003490:	40021c00 	.word	0x40021c00
 8003494:	40013c00 	.word	0x40013c00

08003498 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e0cd      	b.n	8003650 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034b4:	2201      	movs	r2, #1
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	f040 80bd 	bne.w	800364a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80034d0:	4a65      	ldr	r2, [pc, #404]	@ (8003668 <HAL_GPIO_DeInit+0x1d0>)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	3302      	adds	r3, #2
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	220f      	movs	r2, #15
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a5d      	ldr	r2, [pc, #372]	@ (800366c <HAL_GPIO_DeInit+0x1d4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d02b      	beq.n	8003552 <HAL_GPIO_DeInit+0xba>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003670 <HAL_GPIO_DeInit+0x1d8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d025      	beq.n	800354e <HAL_GPIO_DeInit+0xb6>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a5b      	ldr	r2, [pc, #364]	@ (8003674 <HAL_GPIO_DeInit+0x1dc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d01f      	beq.n	800354a <HAL_GPIO_DeInit+0xb2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a5a      	ldr	r2, [pc, #360]	@ (8003678 <HAL_GPIO_DeInit+0x1e0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d019      	beq.n	8003546 <HAL_GPIO_DeInit+0xae>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a59      	ldr	r2, [pc, #356]	@ (800367c <HAL_GPIO_DeInit+0x1e4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_GPIO_DeInit+0xaa>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a58      	ldr	r2, [pc, #352]	@ (8003680 <HAL_GPIO_DeInit+0x1e8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00d      	beq.n	800353e <HAL_GPIO_DeInit+0xa6>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a57      	ldr	r2, [pc, #348]	@ (8003684 <HAL_GPIO_DeInit+0x1ec>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <HAL_GPIO_DeInit+0xa2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a56      	ldr	r2, [pc, #344]	@ (8003688 <HAL_GPIO_DeInit+0x1f0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_GPIO_DeInit+0x9e>
 8003532:	2307      	movs	r3, #7
 8003534:	e00e      	b.n	8003554 <HAL_GPIO_DeInit+0xbc>
 8003536:	2308      	movs	r3, #8
 8003538:	e00c      	b.n	8003554 <HAL_GPIO_DeInit+0xbc>
 800353a:	2306      	movs	r3, #6
 800353c:	e00a      	b.n	8003554 <HAL_GPIO_DeInit+0xbc>
 800353e:	2305      	movs	r3, #5
 8003540:	e008      	b.n	8003554 <HAL_GPIO_DeInit+0xbc>
 8003542:	2304      	movs	r3, #4
 8003544:	e006      	b.n	8003554 <HAL_GPIO_DeInit+0xbc>
 8003546:	2303      	movs	r3, #3
 8003548:	e004      	b.n	8003554 <HAL_GPIO_DeInit+0xbc>
 800354a:	2302      	movs	r3, #2
 800354c:	e002      	b.n	8003554 <HAL_GPIO_DeInit+0xbc>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_GPIO_DeInit+0xbc>
 8003552:	2300      	movs	r3, #0
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	f002 0203 	and.w	r2, r2, #3
 800355a:	0092      	lsls	r2, r2, #2
 800355c:	4093      	lsls	r3, r2
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	429a      	cmp	r2, r3
 8003562:	d132      	bne.n	80035ca <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003564:	4b49      	ldr	r3, [pc, #292]	@ (800368c <HAL_GPIO_DeInit+0x1f4>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	43db      	mvns	r3, r3
 800356c:	4947      	ldr	r1, [pc, #284]	@ (800368c <HAL_GPIO_DeInit+0x1f4>)
 800356e:	4013      	ands	r3, r2
 8003570:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003572:	4b46      	ldr	r3, [pc, #280]	@ (800368c <HAL_GPIO_DeInit+0x1f4>)
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	43db      	mvns	r3, r3
 800357a:	4944      	ldr	r1, [pc, #272]	@ (800368c <HAL_GPIO_DeInit+0x1f4>)
 800357c:	4013      	ands	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003580:	4b42      	ldr	r3, [pc, #264]	@ (800368c <HAL_GPIO_DeInit+0x1f4>)
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43db      	mvns	r3, r3
 8003588:	4940      	ldr	r1, [pc, #256]	@ (800368c <HAL_GPIO_DeInit+0x1f4>)
 800358a:	4013      	ands	r3, r2
 800358c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800358e:	4b3f      	ldr	r3, [pc, #252]	@ (800368c <HAL_GPIO_DeInit+0x1f4>)
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43db      	mvns	r3, r3
 8003596:	493d      	ldr	r1, [pc, #244]	@ (800368c <HAL_GPIO_DeInit+0x1f4>)
 8003598:	4013      	ands	r3, r2
 800359a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	220f      	movs	r2, #15
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80035ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003668 <HAL_GPIO_DeInit+0x1d0>)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	3302      	adds	r3, #2
 80035b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	43da      	mvns	r2, r3
 80035bc:	482a      	ldr	r0, [pc, #168]	@ (8003668 <HAL_GPIO_DeInit+0x1d0>)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	400a      	ands	r2, r1
 80035c4:	3302      	adds	r3, #2
 80035c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	2103      	movs	r1, #3
 80035d4:	fa01 f303 	lsl.w	r3, r1, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	401a      	ands	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	08da      	lsrs	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3208      	adds	r2, #8
 80035e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	220f      	movs	r2, #15
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	08d2      	lsrs	r2, r2, #3
 8003600:	4019      	ands	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3208      	adds	r2, #8
 8003606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2103      	movs	r1, #3
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	401a      	ands	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	2101      	movs	r1, #1
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2103      	movs	r1, #3
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	401a      	ands	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3301      	adds	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b0f      	cmp	r3, #15
 8003654:	f67f af2e 	bls.w	80034b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40013800 	.word	0x40013800
 800366c:	40020000 	.word	0x40020000
 8003670:	40020400 	.word	0x40020400
 8003674:	40020800 	.word	0x40020800
 8003678:	40020c00 	.word	0x40020c00
 800367c:	40021000 	.word	0x40021000
 8003680:	40021400 	.word	0x40021400
 8003684:	40021800 	.word	0x40021800
 8003688:	40021c00 	.word	0x40021c00
 800368c:	40013c00 	.word	0x40013c00

08003690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	807b      	strh	r3, [r7, #2]
 800369c:	4613      	mov	r3, r2
 800369e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a0:	787b      	ldrb	r3, [r7, #1]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036ac:	e003      	b.n	80036b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	041a      	lsls	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	619a      	str	r2, [r3, #24]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e12b      	b.n	800392e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd fa82 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2224      	movs	r2, #36	@ 0x24
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003716:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003728:	f002 febe 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 800372c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4a81      	ldr	r2, [pc, #516]	@ (8003938 <HAL_I2C_Init+0x274>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d807      	bhi.n	8003748 <HAL_I2C_Init+0x84>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a80      	ldr	r2, [pc, #512]	@ (800393c <HAL_I2C_Init+0x278>)
 800373c:	4293      	cmp	r3, r2
 800373e:	bf94      	ite	ls
 8003740:	2301      	movls	r3, #1
 8003742:	2300      	movhi	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e006      	b.n	8003756 <HAL_I2C_Init+0x92>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a7d      	ldr	r2, [pc, #500]	@ (8003940 <HAL_I2C_Init+0x27c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	bf94      	ite	ls
 8003750:	2301      	movls	r3, #1
 8003752:	2300      	movhi	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0e7      	b.n	800392e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a78      	ldr	r2, [pc, #480]	@ (8003944 <HAL_I2C_Init+0x280>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0c9b      	lsrs	r3, r3, #18
 8003768:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a6a      	ldr	r2, [pc, #424]	@ (8003938 <HAL_I2C_Init+0x274>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d802      	bhi.n	8003798 <HAL_I2C_Init+0xd4>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	3301      	adds	r3, #1
 8003796:	e009      	b.n	80037ac <HAL_I2C_Init+0xe8>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	4a69      	ldr	r2, [pc, #420]	@ (8003948 <HAL_I2C_Init+0x284>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	3301      	adds	r3, #1
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	495c      	ldr	r1, [pc, #368]	@ (8003938 <HAL_I2C_Init+0x274>)
 80037c8:	428b      	cmp	r3, r1
 80037ca:	d819      	bhi.n	8003800 <HAL_I2C_Init+0x13c>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1e59      	subs	r1, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037da:	1c59      	adds	r1, r3, #1
 80037dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037e0:	400b      	ands	r3, r1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_I2C_Init+0x138>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1e59      	subs	r1, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f4:	3301      	adds	r3, #1
 80037f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fa:	e051      	b.n	80038a0 <HAL_I2C_Init+0x1dc>
 80037fc:	2304      	movs	r3, #4
 80037fe:	e04f      	b.n	80038a0 <HAL_I2C_Init+0x1dc>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d111      	bne.n	800382c <HAL_I2C_Init+0x168>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1e58      	subs	r0, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	440b      	add	r3, r1
 8003816:	fbb0 f3f3 	udiv	r3, r0, r3
 800381a:	3301      	adds	r3, #1
 800381c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e012      	b.n	8003852 <HAL_I2C_Init+0x18e>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	0099      	lsls	r1, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003842:	3301      	adds	r3, #1
 8003844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Init+0x196>
 8003856:	2301      	movs	r3, #1
 8003858:	e022      	b.n	80038a0 <HAL_I2C_Init+0x1dc>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10e      	bne.n	8003880 <HAL_I2C_Init+0x1bc>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1e58      	subs	r0, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	440b      	add	r3, r1
 8003870:	fbb0 f3f3 	udiv	r3, r0, r3
 8003874:	3301      	adds	r3, #1
 8003876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800387e:	e00f      	b.n	80038a0 <HAL_I2C_Init+0x1dc>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1e58      	subs	r0, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	0099      	lsls	r1, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	fbb0 f3f3 	udiv	r3, r0, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	6809      	ldr	r1, [r1, #0]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6911      	ldr	r1, [r2, #16]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68d2      	ldr	r2, [r2, #12]
 80038da:	4311      	orrs	r1, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	000186a0 	.word	0x000186a0
 800393c:	001e847f 	.word	0x001e847f
 8003940:	003d08ff 	.word	0x003d08ff
 8003944:	431bde83 	.word	0x431bde83
 8003948:	10624dd3 	.word	0x10624dd3

0800394c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e021      	b.n	80039a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2224      	movs	r2, #36	@ 0x24
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0201 	bic.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd f984 	bl	8000c84 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	4608      	mov	r0, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	461a      	mov	r2, r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	817b      	strh	r3, [r7, #10]
 80039be:	460b      	mov	r3, r1
 80039c0:	813b      	strh	r3, [r7, #8]
 80039c2:	4613      	mov	r3, r2
 80039c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039c6:	f7fe fa09 	bl	8001ddc <HAL_GetTick>
 80039ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	f040 80d9 	bne.w	8003b8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	2319      	movs	r3, #25
 80039e0:	2201      	movs	r2, #1
 80039e2:	496d      	ldr	r1, [pc, #436]	@ (8003b98 <HAL_I2C_Mem_Write+0x1ec>)
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f97f 	bl	8003ce8 <I2C_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
 80039f2:	e0cc      	b.n	8003b8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_I2C_Mem_Write+0x56>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e0c5      	b.n	8003b8e <HAL_I2C_Mem_Write+0x1e2>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d007      	beq.n	8003a28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2221      	movs	r2, #33	@ 0x21
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2240      	movs	r2, #64	@ 0x40
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a3a      	ldr	r2, [r7, #32]
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a4d      	ldr	r2, [pc, #308]	@ (8003b9c <HAL_I2C_Mem_Write+0x1f0>)
 8003a68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a6a:	88f8      	ldrh	r0, [r7, #6]
 8003a6c:	893a      	ldrh	r2, [r7, #8]
 8003a6e:	8979      	ldrh	r1, [r7, #10]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4603      	mov	r3, r0
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f89e 	bl	8003bbc <I2C_RequestMemoryWrite>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d052      	beq.n	8003b2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e081      	b.n	8003b8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fa44 	bl	8003f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d107      	bne.n	8003ab2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06b      	b.n	8003b8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	781a      	ldrb	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d11b      	bne.n	8003b2c <HAL_I2C_Mem_Write+0x180>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d017      	beq.n	8003b2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1aa      	bne.n	8003a8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fa37 	bl	8003fac <I2C_WaitOnBTFFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00d      	beq.n	8003b60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d107      	bne.n	8003b5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e016      	b.n	8003b8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	00100002 	.word	0x00100002
 8003b9c:	ffff0000 	.word	0xffff0000

08003ba0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bae:	b2db      	uxtb	r3, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	817b      	strh	r3, [r7, #10]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	813b      	strh	r3, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f878 	bl	8003ce8 <I2C_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c0c:	d103      	bne.n	8003c16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e05f      	b.n	8003cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c1a:	897b      	ldrh	r3, [r7, #10]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	6a3a      	ldr	r2, [r7, #32]
 8003c2e:	492d      	ldr	r1, [pc, #180]	@ (8003ce4 <I2C_RequestMemoryWrite+0x128>)
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f8d3 	bl	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e04c      	b.n	8003cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c58:	6a39      	ldr	r1, [r7, #32]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f95e 	bl	8003f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d107      	bne.n	8003c7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e02b      	b.n	8003cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c88:	893b      	ldrh	r3, [r7, #8]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	611a      	str	r2, [r3, #16]
 8003c92:	e021      	b.n	8003cd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c94:	893b      	ldrh	r3, [r7, #8]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca4:	6a39      	ldr	r1, [r7, #32]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f938 	bl	8003f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d107      	bne.n	8003cca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e005      	b.n	8003cda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	00010002 	.word	0x00010002

08003ce8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cf8:	e048      	b.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d00:	d044      	beq.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d02:	f7fe f86b 	bl	8001ddc <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d139      	bne.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d10d      	bne.n	8003d3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	43da      	mvns	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	e00c      	b.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	43da      	mvns	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d116      	bne.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	f043 0220 	orr.w	r2, r3, #32
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e023      	b.n	8003dd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d10d      	bne.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4013      	ands	r3, r2
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	e00c      	b.n	8003dcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	43da      	mvns	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d093      	beq.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dea:	e071      	b.n	8003ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfa:	d123      	bne.n	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	f043 0204 	orr.w	r2, r3, #4
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e067      	b.n	8003f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e4a:	d041      	beq.n	8003ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4c:	f7fd ffc6 	bl	8001ddc <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d302      	bcc.n	8003e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d136      	bne.n	8003ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10c      	bne.n	8003e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	43da      	mvns	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4013      	ands	r3, r2
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf14      	ite	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	2300      	moveq	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	e00b      	b.n	8003e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	43da      	mvns	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d016      	beq.n	8003ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e021      	b.n	8003f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10c      	bne.n	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	43da      	mvns	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf14      	ite	ne
 8003eec:	2301      	movne	r3, #1
 8003eee:	2300      	moveq	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	e00b      	b.n	8003f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	43da      	mvns	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4013      	ands	r3, r2
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bf14      	ite	ne
 8003f06:	2301      	movne	r3, #1
 8003f08:	2300      	moveq	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f47f af6d 	bne.w	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f28:	e034      	b.n	8003f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f886 	bl	800403c <I2C_IsAcknowledgeFailed>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e034      	b.n	8003fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f40:	d028      	beq.n	8003f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f42:	f7fd ff4b 	bl	8001ddc <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d302      	bcc.n	8003f58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d11d      	bne.n	8003f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f62:	2b80      	cmp	r3, #128	@ 0x80
 8003f64:	d016      	beq.n	8003f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e007      	b.n	8003fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9e:	2b80      	cmp	r3, #128	@ 0x80
 8003fa0:	d1c3      	bne.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fb8:	e034      	b.n	8004024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f83e 	bl	800403c <I2C_IsAcknowledgeFailed>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e034      	b.n	8004034 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fd0:	d028      	beq.n	8004024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd2:	f7fd ff03 	bl	8001ddc <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d11d      	bne.n	8004024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d016      	beq.n	8004024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e007      	b.n	8004034 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b04      	cmp	r3, #4
 8004030:	d1c3      	bne.n	8003fba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004052:	d11b      	bne.n	800408c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800405c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	f043 0204 	orr.w	r2, r3, #4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e128      	b.n	8004300 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a90      	ldr	r2, [pc, #576]	@ (8004308 <HAL_I2S_Init+0x26c>)
 80040c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7fc fe2b 	bl	8000d24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80040e4:	f023 030f 	bic.w	r3, r3, #15
 80040e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2202      	movs	r2, #2
 80040f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d060      	beq.n	80041bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d102      	bne.n	8004108 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004102:	2310      	movs	r3, #16
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	e001      	b.n	800410c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004108:	2320      	movs	r3, #32
 800410a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b20      	cmp	r3, #32
 8004112:	d802      	bhi.n	800411a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800411a:	2001      	movs	r0, #1
 800411c:	f002 face 	bl	80066bc <HAL_RCCEx_GetPeriphCLKFreq>
 8004120:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412a:	d125      	bne.n	8004178 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d010      	beq.n	8004156 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	fbb2 f2f3 	udiv	r2, r2, r3
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	461a      	mov	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	3305      	adds	r3, #5
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	e01f      	b.n	8004196 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	461a      	mov	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	3305      	adds	r3, #5
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	e00e      	b.n	8004196 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	461a      	mov	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	3305      	adds	r3, #5
 8004194:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4a5c      	ldr	r2, [pc, #368]	@ (800430c <HAL_I2S_Init+0x270>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	08db      	lsrs	r3, r3, #3
 80041a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	e003      	b.n	80041c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80041bc:	2302      	movs	r3, #2
 80041be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d902      	bls.n	80041d0 <HAL_I2S_Init+0x134>
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	2bff      	cmp	r3, #255	@ 0xff
 80041ce:	d907      	bls.n	80041e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d4:	f043 0210 	orr.w	r2, r3, #16
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e08f      	b.n	8004300 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	ea42 0103 	orr.w	r1, r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80041fe:	f023 030f 	bic.w	r3, r3, #15
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6851      	ldr	r1, [r2, #4]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6892      	ldr	r2, [r2, #8]
 800420a:	4311      	orrs	r1, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68d2      	ldr	r2, [r2, #12]
 8004210:	4311      	orrs	r1, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6992      	ldr	r2, [r2, #24]
 8004216:	430a      	orrs	r2, r1
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004222:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d161      	bne.n	80042f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a38      	ldr	r2, [pc, #224]	@ (8004310 <HAL_I2S_Init+0x274>)
 8004230:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a37      	ldr	r2, [pc, #220]	@ (8004314 <HAL_I2S_Init+0x278>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <HAL_I2S_Init+0x1a4>
 800423c:	4b36      	ldr	r3, [pc, #216]	@ (8004318 <HAL_I2S_Init+0x27c>)
 800423e:	e001      	b.n	8004244 <HAL_I2S_Init+0x1a8>
 8004240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	4932      	ldr	r1, [pc, #200]	@ (8004314 <HAL_I2S_Init+0x278>)
 800424c:	428a      	cmp	r2, r1
 800424e:	d101      	bne.n	8004254 <HAL_I2S_Init+0x1b8>
 8004250:	4a31      	ldr	r2, [pc, #196]	@ (8004318 <HAL_I2S_Init+0x27c>)
 8004252:	e001      	b.n	8004258 <HAL_I2S_Init+0x1bc>
 8004254:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004258:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800425c:	f023 030f 	bic.w	r3, r3, #15
 8004260:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2b      	ldr	r2, [pc, #172]	@ (8004314 <HAL_I2S_Init+0x278>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d101      	bne.n	8004270 <HAL_I2S_Init+0x1d4>
 800426c:	4b2a      	ldr	r3, [pc, #168]	@ (8004318 <HAL_I2S_Init+0x27c>)
 800426e:	e001      	b.n	8004274 <HAL_I2S_Init+0x1d8>
 8004270:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004274:	2202      	movs	r2, #2
 8004276:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a25      	ldr	r2, [pc, #148]	@ (8004314 <HAL_I2S_Init+0x278>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <HAL_I2S_Init+0x1ea>
 8004282:	4b25      	ldr	r3, [pc, #148]	@ (8004318 <HAL_I2S_Init+0x27c>)
 8004284:	e001      	b.n	800428a <HAL_I2S_Init+0x1ee>
 8004286:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004296:	d003      	beq.n	80042a0 <HAL_I2S_Init+0x204>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d103      	bne.n	80042a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80042a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	e001      	b.n	80042ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042b6:	4313      	orrs	r3, r2
 80042b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042c0:	4313      	orrs	r3, r2
 80042c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042ca:	4313      	orrs	r3, r2
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	897b      	ldrh	r3, [r7, #10]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80042d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a0d      	ldr	r2, [pc, #52]	@ (8004314 <HAL_I2S_Init+0x278>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <HAL_I2S_Init+0x24c>
 80042e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004318 <HAL_I2S_Init+0x27c>)
 80042e6:	e001      	b.n	80042ec <HAL_I2S_Init+0x250>
 80042e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ec:	897a      	ldrh	r2, [r7, #10]
 80042ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	080045c9 	.word	0x080045c9
 800430c:	cccccccd 	.word	0xcccccccd
 8004310:	080046dd 	.word	0x080046dd
 8004314:	40003800 	.word	0x40003800
 8004318:	40003400 	.word	0x40003400

0800431c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_I2S_Transmit_DMA+0x1a>
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e08a      	b.n	8004450 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b01      	cmp	r3, #1
 8004344:	d001      	beq.n	800434a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8004346:	2302      	movs	r3, #2
 8004348:	e082      	b.n	8004450 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_I2S_Transmit_DMA+0x3e>
 8004356:	2302      	movs	r3, #2
 8004358:	e07a      	b.n	8004450 <HAL_I2S_Transmit_DMA+0x134>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2203      	movs	r2, #3
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d002      	beq.n	800438e <HAL_I2S_Transmit_DMA+0x72>
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b05      	cmp	r3, #5
 800438c:	d10a      	bne.n	80043a4 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004398:	88fb      	ldrh	r3, [r7, #6]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043a2:	e005      	b.n	80043b0 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	4a28      	ldr	r2, [pc, #160]	@ (8004458 <HAL_I2S_Transmit_DMA+0x13c>)
 80043b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	4a27      	ldr	r2, [pc, #156]	@ (800445c <HAL_I2S_Transmit_DMA+0x140>)
 80043be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c4:	4a26      	ldr	r2, [pc, #152]	@ (8004460 <HAL_I2S_Transmit_DMA+0x144>)
 80043c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80043d0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80043d8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80043e0:	f7fe fbfc 	bl	8002bdc <HAL_DMA_Start_IT>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00f      	beq.n	800440a <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	f043 0208 	orr.w	r2, r3, #8
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e022      	b.n	8004450 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d107      	bne.n	8004430 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0202 	orr.w	r2, r2, #2
 800442e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443a:	2b00      	cmp	r3, #0
 800443c:	d107      	bne.n	800444e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800444c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	080044a7 	.word	0x080044a7
 800445c:	08004465 	.word	0x08004465
 8004460:	080044c3 	.word	0x080044c3

08004464 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004470:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10e      	bne.n	8004498 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0202 	bic.w	r2, r2, #2
 8004488:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7fd fbcd 	bl	8001c38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7fd fbd1 	bl	8001c5c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0203 	bic.w	r2, r2, #3
 80044de:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f8:	f043 0208 	orr.w	r2, r3, #8
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7fd fbeb 	bl	8001cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	881a      	ldrh	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	1c9a      	adds	r2, r3, #2
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10e      	bne.n	8004562 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004552:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7fd fb6b 	bl	8001c38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	b292      	uxth	r2, r2
 800457e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	1c9a      	adds	r2, r3, #2
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10e      	bne.n	80045c0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fd fb75 	bl	8001caa <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d13a      	bne.n	800465a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d109      	bne.n	8004602 <I2S_IRQHandler+0x3a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f8:	2b40      	cmp	r3, #64	@ 0x40
 80045fa:	d102      	bne.n	8004602 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ffb4 	bl	800456a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004608:	2b40      	cmp	r3, #64	@ 0x40
 800460a:	d126      	bne.n	800465a <I2S_IRQHandler+0x92>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b20      	cmp	r3, #32
 8004618:	d11f      	bne.n	800465a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004628:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464c:	f043 0202 	orr.w	r2, r3, #2
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fd fb41 	bl	8001cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b03      	cmp	r3, #3
 8004664:	d136      	bne.n	80046d4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b02      	cmp	r3, #2
 800466e:	d109      	bne.n	8004684 <I2S_IRQHandler+0xbc>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467a:	2b80      	cmp	r3, #128	@ 0x80
 800467c:	d102      	bne.n	8004684 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff ff45 	bl	800450e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b08      	cmp	r3, #8
 800468c:	d122      	bne.n	80046d4 <I2S_IRQHandler+0x10c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b20      	cmp	r3, #32
 800469a:	d11b      	bne.n	80046d4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046aa:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c6:	f043 0204 	orr.w	r2, r3, #4
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fd fb04 	bl	8001cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046d4:	bf00      	nop
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a92      	ldr	r2, [pc, #584]	@ (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80046f6:	4b92      	ldr	r3, [pc, #584]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046f8:	e001      	b.n	80046fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80046fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a8b      	ldr	r2, [pc, #556]	@ (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004714:	4b8a      	ldr	r3, [pc, #552]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004716:	e001      	b.n	800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004718:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004728:	d004      	beq.n	8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f040 8099 	bne.w	8004866 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b02      	cmp	r3, #2
 800473c:	d107      	bne.n	800474e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f925 	bl	8004998 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b01      	cmp	r3, #1
 8004756:	d107      	bne.n	8004768 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f9c8 	bl	8004af8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476e:	2b40      	cmp	r3, #64	@ 0x40
 8004770:	d13a      	bne.n	80047e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d035      	beq.n	80047e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a6e      	ldr	r2, [pc, #440]	@ (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d101      	bne.n	800478a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004786:	4b6e      	ldr	r3, [pc, #440]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004788:	e001      	b.n	800478e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800478a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4969      	ldr	r1, [pc, #420]	@ (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004796:	428b      	cmp	r3, r1
 8004798:	d101      	bne.n	800479e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800479a:	4b69      	ldr	r3, [pc, #420]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800479c:	e001      	b.n	80047a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800479e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047da:	f043 0202 	orr.w	r2, r3, #2
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd fa7a 	bl	8001cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	f040 80c3 	bne.w	800497a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 80bd 	beq.w	800497a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800480e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a49      	ldr	r2, [pc, #292]	@ (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d101      	bne.n	800481e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800481a:	4b49      	ldr	r3, [pc, #292]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800481c:	e001      	b.n	8004822 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800481e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4944      	ldr	r1, [pc, #272]	@ (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800482a:	428b      	cmp	r3, r1
 800482c:	d101      	bne.n	8004832 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800482e:	4b44      	ldr	r3, [pc, #272]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004830:	e001      	b.n	8004836 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004832:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004836:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800483a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800483c:	2300      	movs	r3, #0
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004856:	f043 0204 	orr.w	r2, r3, #4
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fd fa3c 	bl	8001cdc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004864:	e089      	b.n	800497a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b02      	cmp	r3, #2
 800486e:	d107      	bne.n	8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8be 	bl	80049fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b01      	cmp	r3, #1
 8004888:	d107      	bne.n	800489a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f8fd 	bl	8004a94 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a0:	2b40      	cmp	r3, #64	@ 0x40
 80048a2:	d12f      	bne.n	8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d02a      	beq.n	8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1e      	ldr	r2, [pc, #120]	@ (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d101      	bne.n	80048cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80048c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048ca:	e001      	b.n	80048d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80048cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4919      	ldr	r1, [pc, #100]	@ (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048d8:	428b      	cmp	r3, r1
 80048da:	d101      	bne.n	80048e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80048dc:	4b18      	ldr	r3, [pc, #96]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048de:	e001      	b.n	80048e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80048e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f6:	f043 0202 	orr.w	r2, r3, #2
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fd f9ec 	bl	8001cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b08      	cmp	r3, #8
 800490c:	d136      	bne.n	800497c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b00      	cmp	r3, #0
 8004916:	d031      	beq.n	800497c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a07      	ldr	r2, [pc, #28]	@ (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004922:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004924:	e001      	b.n	800492a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004926:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4902      	ldr	r1, [pc, #8]	@ (800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004932:	428b      	cmp	r3, r1
 8004934:	d106      	bne.n	8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004936:	4b02      	ldr	r3, [pc, #8]	@ (8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004938:	e006      	b.n	8004948 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800493a:	bf00      	nop
 800493c:	40003800 	.word	0x40003800
 8004940:	40003400 	.word	0x40003400
 8004944:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004948:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800494c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800495c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496a:	f043 0204 	orr.w	r2, r3, #4
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fd f9b2 	bl	8001cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004978:	e000      	b.n	800497c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800497a:	bf00      	nop
}
 800497c:	bf00      	nop
 800497e:	3720      	adds	r7, #32
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	1c99      	adds	r1, r3, #2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6251      	str	r1, [r2, #36]	@ 0x24
 80049aa:	881a      	ldrh	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d113      	bne.n	80049f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff ffc9 	bl	8004984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	1c99      	adds	r1, r3, #2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6251      	str	r1, [r2, #36]	@ 0x24
 8004a0e:	8819      	ldrh	r1, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1d      	ldr	r2, [pc, #116]	@ (8004a8c <I2SEx_TxISR_I2SExt+0x90>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <I2SEx_TxISR_I2SExt+0x22>
 8004a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a90 <I2SEx_TxISR_I2SExt+0x94>)
 8004a1c:	e001      	b.n	8004a22 <I2SEx_TxISR_I2SExt+0x26>
 8004a1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a22:	460a      	mov	r2, r1
 8004a24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d121      	bne.n	8004a82 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a12      	ldr	r2, [pc, #72]	@ (8004a8c <I2SEx_TxISR_I2SExt+0x90>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <I2SEx_TxISR_I2SExt+0x50>
 8004a48:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <I2SEx_TxISR_I2SExt+0x94>)
 8004a4a:	e001      	b.n	8004a50 <I2SEx_TxISR_I2SExt+0x54>
 8004a4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	490d      	ldr	r1, [pc, #52]	@ (8004a8c <I2SEx_TxISR_I2SExt+0x90>)
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	d101      	bne.n	8004a60 <I2SEx_TxISR_I2SExt+0x64>
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <I2SEx_TxISR_I2SExt+0x94>)
 8004a5e:	e001      	b.n	8004a64 <I2SEx_TxISR_I2SExt+0x68>
 8004a60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ff81 	bl	8004984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40003800 	.word	0x40003800
 8004a90:	40003400 	.word	0x40003400

08004a94 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68d8      	ldr	r0, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	1c99      	adds	r1, r3, #2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004aac:	b282      	uxth	r2, r0
 8004aae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d113      	bne.n	8004af0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ad6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ff4a 	bl	8004984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a20      	ldr	r2, [pc, #128]	@ (8004b88 <I2SEx_RxISR_I2SExt+0x90>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d101      	bne.n	8004b0e <I2SEx_RxISR_I2SExt+0x16>
 8004b0a:	4b20      	ldr	r3, [pc, #128]	@ (8004b8c <I2SEx_RxISR_I2SExt+0x94>)
 8004b0c:	e001      	b.n	8004b12 <I2SEx_RxISR_I2SExt+0x1a>
 8004b0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b12:	68d8      	ldr	r0, [r3, #12]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	1c99      	adds	r1, r3, #2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004b1e:	b282      	uxth	r2, r0
 8004b20:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d121      	bne.n	8004b7e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a12      	ldr	r2, [pc, #72]	@ (8004b88 <I2SEx_RxISR_I2SExt+0x90>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d101      	bne.n	8004b48 <I2SEx_RxISR_I2SExt+0x50>
 8004b44:	4b11      	ldr	r3, [pc, #68]	@ (8004b8c <I2SEx_RxISR_I2SExt+0x94>)
 8004b46:	e001      	b.n	8004b4c <I2SEx_RxISR_I2SExt+0x54>
 8004b48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	490d      	ldr	r1, [pc, #52]	@ (8004b88 <I2SEx_RxISR_I2SExt+0x90>)
 8004b54:	428b      	cmp	r3, r1
 8004b56:	d101      	bne.n	8004b5c <I2SEx_RxISR_I2SExt+0x64>
 8004b58:	4b0c      	ldr	r3, [pc, #48]	@ (8004b8c <I2SEx_RxISR_I2SExt+0x94>)
 8004b5a:	e001      	b.n	8004b60 <I2SEx_RxISR_I2SExt+0x68>
 8004b5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b64:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d106      	bne.n	8004b7e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff ff03 	bl	8004984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b7e:	bf00      	nop
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40003800 	.word	0x40003800
 8004b8c:	40003400 	.word	0x40003400

08004b90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e101      	b.n	8004da6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7fc fcbb 	bl	8001538 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bd0:	d102      	bne.n	8004bd8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f002 fb65 	bl	80072ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	7c1a      	ldrb	r2, [r3, #16]
 8004bea:	f88d 2000 	strb.w	r2, [sp]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bf2:	f002 fa55 	bl	80070a0 <USB_CoreInit>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0ce      	b.n	8004da6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f002 fb5d 	bl	80072ce <USB_SetCurrentMode>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e0bf      	b.n	8004da6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]
 8004c2a:	e04a      	b.n	8004cc2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c2c:	7bfa      	ldrb	r2, [r7, #15]
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	4613      	mov	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	3315      	adds	r3, #21
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c40:	7bfa      	ldrb	r2, [r7, #15]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3314      	adds	r3, #20
 8004c50:	7bfa      	ldrb	r2, [r7, #15]
 8004c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c54:	7bfa      	ldrb	r2, [r7, #15]
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	b298      	uxth	r0, r3
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	332e      	adds	r3, #46	@ 0x2e
 8004c68:	4602      	mov	r2, r0
 8004c6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c6c:	7bfa      	ldrb	r2, [r7, #15]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	3318      	adds	r3, #24
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	331c      	adds	r3, #28
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	3320      	adds	r3, #32
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ca8:	7bfa      	ldrb	r2, [r7, #15]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	3324      	adds	r3, #36	@ 0x24
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	791b      	ldrb	r3, [r3, #4]
 8004cc6:	7bfa      	ldrb	r2, [r7, #15]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d3af      	bcc.n	8004c2c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73fb      	strb	r3, [r7, #15]
 8004cd0:	e044      	b.n	8004d5c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cd2:	7bfa      	ldrb	r2, [r7, #15]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ce8:	7bfa      	ldrb	r2, [r7, #15]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004cfa:	7bfa      	ldrb	r2, [r7, #15]
 8004cfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cfe:	7bfa      	ldrb	r2, [r7, #15]
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d14:	7bfa      	ldrb	r2, [r7, #15]
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d2a:	7bfa      	ldrb	r2, [r7, #15]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d40:	7bfa      	ldrb	r2, [r7, #15]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	791b      	ldrb	r3, [r3, #4]
 8004d60:	7bfa      	ldrb	r2, [r7, #15]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d3b5      	bcc.n	8004cd2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	7c1a      	ldrb	r2, [r3, #16]
 8004d6e:	f88d 2000 	strb.w	r2, [sp]
 8004d72:	3304      	adds	r3, #4
 8004d74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d76:	f002 faf7 	bl	8007368 <USB_DevInit>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e00c      	b.n	8004da6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f002 fe24 	bl	80079ec <USB_DevDisconnect>

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004dae:	b590      	push	{r4, r7, lr}
 8004db0:	b08d      	sub	sp, #52	@ 0x34
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f002 fec5 	bl	8007b54 <USB_GetMode>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 848c 	bne.w	80056ea <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f002 fe29 	bl	8007a2e <USB_ReadInterrupts>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8482 	beq.w	80056e8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	0a1b      	lsrs	r3, r3, #8
 8004dee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f002 fe16 	bl	8007a2e <USB_ReadInterrupts>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d107      	bne.n	8004e1c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695a      	ldr	r2, [r3, #20]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f002 0202 	and.w	r2, r2, #2
 8004e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f002 fe04 	bl	8007a2e <USB_ReadInterrupts>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d161      	bne.n	8004ef4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0210 	bic.w	r2, r2, #16
 8004e3e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	f003 020f 	and.w	r2, r3, #15
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004e66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e6a:	d124      	bne.n	8004eb6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d035      	beq.n	8004ee4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	091b      	lsrs	r3, r3, #4
 8004e80:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6a38      	ldr	r0, [r7, #32]
 8004e8c:	f002 fd56 	bl	800793c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	091b      	lsrs	r3, r3, #4
 8004e98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e9c:	441a      	add	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	091b      	lsrs	r3, r3, #4
 8004eaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eae:	441a      	add	r2, r3
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	615a      	str	r2, [r3, #20]
 8004eb4:	e016      	b.n	8004ee4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004ebc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ec0:	d110      	bne.n	8004ee4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ec8:	2208      	movs	r2, #8
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6a38      	ldr	r0, [r7, #32]
 8004ece:	f002 fd35 	bl	800793c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	695a      	ldr	r2, [r3, #20]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	091b      	lsrs	r3, r3, #4
 8004eda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ede:	441a      	add	r2, r3
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0210 	orr.w	r2, r2, #16
 8004ef2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f002 fd98 	bl	8007a2e <USB_ReadInterrupts>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f04:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f08:	f040 80a7 	bne.w	800505a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f002 fd9d 	bl	8007a54 <USB_ReadDevAllOutEpInterrupt>
 8004f1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004f1c:	e099      	b.n	8005052 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 808e 	beq.w	8005046 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f002 fdc1 	bl	8007abc <USB_ReadDevOutEPInterrupt>
 8004f3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00c      	beq.n	8004f60 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f52:	461a      	mov	r2, r3
 8004f54:	2301      	movs	r3, #1
 8004f56:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fcfc 	bl	8005958 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f76:	461a      	mov	r2, r3
 8004f78:	2308      	movs	r3, #8
 8004f7a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fdd2 	bl	8005b28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d030      	beq.n	800500c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb2:	2b80      	cmp	r3, #128	@ 0x80
 8004fb4:	d109      	bne.n	8004fca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fc8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fcc:	4613      	mov	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4413      	add	r3, r2
 8004fdc:	3304      	adds	r3, #4
 8004fde:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	78db      	ldrb	r3, [r3, #3]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d108      	bne.n	8004ffa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2200      	movs	r2, #0
 8004fec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fbc5 	bl	8005784 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005006:	461a      	mov	r2, r3
 8005008:	2302      	movs	r3, #2
 800500a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d008      	beq.n	8005028 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005022:	461a      	mov	r2, r3
 8005024:	2320      	movs	r3, #32
 8005026:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800503e:	461a      	mov	r2, r3
 8005040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005044:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	3301      	adds	r3, #1
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800504c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	f47f af62 	bne.w	8004f1e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f002 fce5 	bl	8007a2e <USB_ReadInterrupts>
 8005064:	4603      	mov	r3, r0
 8005066:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800506a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800506e:	f040 80db 	bne.w	8005228 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f002 fd06 	bl	8007a88 <USB_ReadDevAllInEpInterrupt>
 800507c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005082:	e0cd      	b.n	8005220 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 80c2 	beq.w	8005214 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	4611      	mov	r1, r2
 800509a:	4618      	mov	r0, r3
 800509c:	f002 fd2c 	bl	8007af8 <USB_ReadDevInEPInterrupt>
 80050a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d057      	beq.n	800515c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	2201      	movs	r2, #1
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	43db      	mvns	r3, r3
 80050c6:	69f9      	ldr	r1, [r7, #28]
 80050c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050cc:	4013      	ands	r3, r2
 80050ce:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050dc:	461a      	mov	r2, r3
 80050de:	2301      	movs	r3, #1
 80050e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	799b      	ldrb	r3, [r3, #6]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d132      	bne.n	8005150 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ee:	4613      	mov	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	3320      	adds	r3, #32
 80050fa:	6819      	ldr	r1, [r3, #0]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4403      	add	r3, r0
 800510a:	331c      	adds	r3, #28
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4419      	add	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4403      	add	r3, r0
 800511e:	3320      	adds	r3, #32
 8005120:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d113      	bne.n	8005150 <HAL_PCD_IRQHandler+0x3a2>
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512c:	4613      	mov	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	3324      	adds	r3, #36	@ 0x24
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d108      	bne.n	8005150 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005148:	461a      	mov	r2, r3
 800514a:	2101      	movs	r1, #1
 800514c:	f002 fd34 	bl	8007bb8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	b2db      	uxtb	r3, r3
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fad6 	bl	8005708 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005172:	461a      	mov	r2, r3
 8005174:	2308      	movs	r3, #8
 8005176:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800518e:	461a      	mov	r2, r3
 8005190:	2310      	movs	r3, #16
 8005192:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d008      	beq.n	80051b0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051aa:	461a      	mov	r2, r3
 80051ac:	2340      	movs	r3, #64	@ 0x40
 80051ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d023      	beq.n	8005202 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80051ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051bc:	6a38      	ldr	r0, [r7, #32]
 80051be:	f002 fa37 	bl	8007630 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80051c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c4:	4613      	mov	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	3310      	adds	r3, #16
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	3304      	adds	r3, #4
 80051d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	78db      	ldrb	r3, [r3, #3]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d108      	bne.n	80051f0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2200      	movs	r2, #0
 80051e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fad6 	bl	800579c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fc:	461a      	mov	r2, r3
 80051fe:	2302      	movs	r3, #2
 8005200:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800520c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fb15 	bl	800583e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	3301      	adds	r3, #1
 8005218:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800521a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005222:	2b00      	cmp	r3, #0
 8005224:	f47f af2e 	bne.w	8005084 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f002 fbfe 	bl	8007a2e <USB_ReadInterrupts>
 8005232:	4603      	mov	r3, r0
 8005234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800523c:	d122      	bne.n	8005284 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005258:	2b01      	cmp	r3, #1
 800525a:	d108      	bne.n	800526e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005264:	2100      	movs	r1, #0
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fca4 	bl	8005bb4 <HAL_PCDEx_LPM_Callback>
 800526c:	e002      	b.n	8005274 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa7e 	bl	8005770 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f002 fbd0 	bl	8007a2e <USB_ReadInterrupts>
 800528e:	4603      	mov	r3, r0
 8005290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005294:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005298:	d112      	bne.n	80052c0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d102      	bne.n	80052b0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fa56 	bl	800575c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80052be:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f002 fbb2 	bl	8007a2e <USB_ReadInterrupts>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d4:	f040 80b7 	bne.w	8005446 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052e6:	f023 0301 	bic.w	r3, r3, #1
 80052ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2110      	movs	r1, #16
 80052f2:	4618      	mov	r0, r3
 80052f4:	f002 f99c 	bl	8007630 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052f8:	2300      	movs	r3, #0
 80052fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052fc:	e046      	b.n	800538c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80052fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800530a:	461a      	mov	r2, r3
 800530c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005310:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005322:	0151      	lsls	r1, r2, #5
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	440a      	add	r2, r1
 8005328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800532c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005330:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800533e:	461a      	mov	r2, r3
 8005340:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005344:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	440a      	add	r2, r1
 800535c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005360:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005364:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005380:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005384:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005388:	3301      	adds	r3, #1
 800538a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	791b      	ldrb	r3, [r3, #4]
 8005390:	461a      	mov	r2, r3
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	4293      	cmp	r3, r2
 8005396:	d3b2      	bcc.n	80052fe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053a6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80053aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	7bdb      	ldrb	r3, [r3, #15]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d016      	beq.n	80053e2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053c4:	f043 030b 	orr.w	r3, r3, #11
 80053c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053da:	f043 030b 	orr.w	r3, r3, #11
 80053de:	6453      	str	r3, [r2, #68]	@ 0x44
 80053e0:	e015      	b.n	800540e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80053f4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80053f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005408:	f043 030b 	orr.w	r3, r3, #11
 800540c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800541c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005420:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005430:	461a      	mov	r2, r3
 8005432:	f002 fbc1 	bl	8007bb8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f002 faef 	bl	8007a2e <USB_ReadInterrupts>
 8005450:	4603      	mov	r3, r0
 8005452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800545a:	d123      	bne.n	80054a4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4618      	mov	r0, r3
 8005462:	f002 fb85 	bl	8007b70 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f002 f959 	bl	8007722 <USB_GetDevSpeed>
 8005470:	4603      	mov	r3, r0
 8005472:	461a      	mov	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681c      	ldr	r4, [r3, #0]
 800547c:	f001 f808 	bl	8006490 <HAL_RCC_GetHCLKFreq>
 8005480:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005486:	461a      	mov	r2, r3
 8005488:	4620      	mov	r0, r4
 800548a:	f001 fe6d 	bl	8007168 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f95a 	bl	8005748 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80054a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f002 fac0 	bl	8007a2e <USB_ReadInterrupts>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d10a      	bne.n	80054ce <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f93b 	bl	8005734 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f002 0208 	and.w	r2, r2, #8
 80054cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f002 faab 	bl	8007a2e <USB_ReadInterrupts>
 80054d8:	4603      	mov	r3, r0
 80054da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054de:	2b80      	cmp	r3, #128	@ 0x80
 80054e0:	d123      	bne.n	800552a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054ee:	2301      	movs	r3, #1
 80054f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f2:	e014      	b.n	800551e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f8:	4613      	mov	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d105      	bne.n	8005518 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	b2db      	uxtb	r3, r3
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f962 	bl	80057dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551a:	3301      	adds	r3, #1
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	791b      	ldrb	r3, [r3, #4]
 8005522:	461a      	mov	r2, r3
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	4293      	cmp	r3, r2
 8005528:	d3e4      	bcc.n	80054f4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f002 fa7d 	bl	8007a2e <USB_ReadInterrupts>
 8005534:	4603      	mov	r3, r0
 8005536:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800553a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800553e:	d13c      	bne.n	80055ba <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005540:	2301      	movs	r3, #1
 8005542:	627b      	str	r3, [r7, #36]	@ 0x24
 8005544:	e02b      	b.n	800559e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555a:	4613      	mov	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	3318      	adds	r3, #24
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d115      	bne.n	8005598 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800556c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800556e:	2b00      	cmp	r3, #0
 8005570:	da12      	bge.n	8005598 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005576:	4613      	mov	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	3317      	adds	r3, #23
 8005582:	2201      	movs	r2, #1
 8005584:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	b2db      	uxtb	r3, r3
 800558a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800558e:	b2db      	uxtb	r3, r3
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f922 	bl	80057dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	3301      	adds	r3, #1
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	791b      	ldrb	r3, [r3, #4]
 80055a2:	461a      	mov	r2, r3
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d3cd      	bcc.n	8005546 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80055b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f002 fa35 	bl	8007a2e <USB_ReadInterrupts>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055ce:	d156      	bne.n	800567e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055d0:	2301      	movs	r3, #1
 80055d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d4:	e045      	b.n	8005662 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ea:	4613      	mov	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	4413      	add	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d12e      	bne.n	800565c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80055fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005600:	2b00      	cmp	r3, #0
 8005602:	da2b      	bge.n	800565c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005610:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005614:	429a      	cmp	r2, r3
 8005616:	d121      	bne.n	800565c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800561c:	4613      	mov	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005654:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005658:	6053      	str	r3, [r2, #4]
            break;
 800565a:	e008      	b.n	800566e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800565c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565e:	3301      	adds	r3, #1
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	791b      	ldrb	r3, [r3, #4]
 8005666:	461a      	mov	r2, r3
 8005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566a:	4293      	cmp	r3, r2
 800566c:	d3b3      	bcc.n	80055d6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800567c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f002 f9d3 	bl	8007a2e <USB_ReadInterrupts>
 8005688:	4603      	mov	r3, r0
 800568a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800568e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005692:	d10a      	bne.n	80056aa <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f88d 	bl	80057b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80056a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f002 f9bd 	bl	8007a2e <USB_ReadInterrupts>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d115      	bne.n	80056ea <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f879 	bl	80057c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6859      	ldr	r1, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	e000      	b.n	80056ea <HAL_PCD_IRQHandler+0x93c>
      return;
 80056e8:	bf00      	nop
    }
  }
}
 80056ea:	3734      	adds	r7, #52	@ 0x34
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd90      	pop	{r4, r7, pc}

080056f0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80057e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	da0c      	bge.n	800580a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	f003 020f 	and.w	r2, r3, #15
 80057f6:	4613      	mov	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	3310      	adds	r3, #16
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	4413      	add	r3, r2
 8005804:	3304      	adds	r3, #4
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	e00c      	b.n	8005824 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	f003 020f 	and.w	r2, r3, #15
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	4413      	add	r3, r2
 8005820:	3304      	adds	r3, #4
 8005822:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68f9      	ldr	r1, [r7, #12]
 800582a:	4618      	mov	r0, r3
 800582c:	f001 ff9e 	bl	800776c <USB_EPStopXfer>
 8005830:	4603      	mov	r3, r0
 8005832:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005834:	7afb      	ldrb	r3, [r7, #11]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b08a      	sub	sp, #40	@ 0x28
 8005842:	af02      	add	r7, sp, #8
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	4613      	mov	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	3310      	adds	r3, #16
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	4413      	add	r3, r2
 8005862:	3304      	adds	r3, #4
 8005864:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	695a      	ldr	r2, [r3, #20]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	429a      	cmp	r2, r3
 8005870:	d901      	bls.n	8005876 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e06b      	b.n	800594e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	429a      	cmp	r2, r3
 800588a:	d902      	bls.n	8005892 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3303      	adds	r3, #3
 8005896:	089b      	lsrs	r3, r3, #2
 8005898:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800589a:	e02a      	b.n	80058f2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d902      	bls.n	80058b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	3303      	adds	r3, #3
 80058bc:	089b      	lsrs	r3, r3, #2
 80058be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	68d9      	ldr	r1, [r3, #12]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	4603      	mov	r3, r0
 80058d4:	6978      	ldr	r0, [r7, #20]
 80058d6:	f001 fff3 	bl	80078c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	441a      	add	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	441a      	add	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	429a      	cmp	r2, r3
 8005906:	d809      	bhi.n	800591c <PCD_WriteEmptyTxFifo+0xde>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	695a      	ldr	r2, [r3, #20]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005910:	429a      	cmp	r2, r3
 8005912:	d203      	bcs.n	800591c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1bf      	bne.n	800589c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	429a      	cmp	r2, r3
 8005926:	d811      	bhi.n	800594c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	2201      	movs	r2, #1
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800593c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	43db      	mvns	r3, r3
 8005942:	6939      	ldr	r1, [r7, #16]
 8005944:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005948:	4013      	ands	r3, r2
 800594a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	333c      	adds	r3, #60	@ 0x3c
 8005970:	3304      	adds	r3, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	799b      	ldrb	r3, [r3, #6]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d17b      	bne.n	8005a86 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d015      	beq.n	80059c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	4a61      	ldr	r2, [pc, #388]	@ (8005b20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	f240 80b9 	bls.w	8005b14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80b3 	beq.w	8005b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ba:	461a      	mov	r2, r3
 80059bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059c0:	6093      	str	r3, [r2, #8]
 80059c2:	e0a7      	b.n	8005b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059da:	461a      	mov	r2, r3
 80059dc:	2320      	movs	r3, #32
 80059de:	6093      	str	r3, [r2, #8]
 80059e0:	e098      	b.n	8005b14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f040 8093 	bne.w	8005b14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	4a4b      	ldr	r2, [pc, #300]	@ (8005b20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d90f      	bls.n	8005a16 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a12:	6093      	str	r3, [r2, #8]
 8005a14:	e07e      	b.n	8005b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4413      	add	r3, r2
 8005a28:	3304      	adds	r3, #4
 8005a2a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a1a      	ldr	r2, [r3, #32]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	0159      	lsls	r1, r3, #5
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	440b      	add	r3, r1
 8005a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a42:	1ad2      	subs	r2, r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d114      	bne.n	8005a78 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a60:	461a      	mov	r2, r3
 8005a62:	2101      	movs	r1, #1
 8005a64:	f002 f8a8 	bl	8007bb8 <USB_EP0_OutStart>
 8005a68:	e006      	b.n	8005a78 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	441a      	add	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff fe36 	bl	80056f0 <HAL_PCD_DataOutStageCallback>
 8005a84:	e046      	b.n	8005b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	4a26      	ldr	r2, [pc, #152]	@ (8005b24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d124      	bne.n	8005ad8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aaa:	6093      	str	r3, [r2, #8]
 8005aac:	e032      	b.n	8005b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2320      	movs	r3, #32
 8005ac8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff fe0d 	bl	80056f0 <HAL_PCD_DataOutStageCallback>
 8005ad6:	e01d      	b.n	8005b14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d114      	bne.n	8005b08 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d108      	bne.n	8005b08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b00:	461a      	mov	r2, r3
 8005b02:	2100      	movs	r1, #0
 8005b04:	f002 f858 	bl	8007bb8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff fdee 	bl	80056f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3720      	adds	r7, #32
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	4f54300a 	.word	0x4f54300a
 8005b24:	4f54310a 	.word	0x4f54310a

08005b28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	333c      	adds	r3, #60	@ 0x3c
 8005b40:	3304      	adds	r3, #4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4a15      	ldr	r2, [pc, #84]	@ (8005bb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d90e      	bls.n	8005b7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d009      	beq.n	8005b7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b74:	461a      	mov	r2, r3
 8005b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff fdcf 	bl	8005720 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4a0a      	ldr	r2, [pc, #40]	@ (8005bb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d90c      	bls.n	8005ba4 <PCD_EP_OutSetupPacket_int+0x7c>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	799b      	ldrb	r3, [r3, #6]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d108      	bne.n	8005ba4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	f002 f80a 	bl	8007bb8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	4f54300a 	.word	0x4f54300a

08005bb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e267      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d075      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bea:	4b88      	ldr	r3, [pc, #544]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 030c 	and.w	r3, r3, #12
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d00c      	beq.n	8005c10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bf6:	4b85      	ldr	r3, [pc, #532]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d112      	bne.n	8005c28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c02:	4b82      	ldr	r3, [pc, #520]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c0e:	d10b      	bne.n	8005c28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c10:	4b7e      	ldr	r3, [pc, #504]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d05b      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x108>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d157      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e242      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c30:	d106      	bne.n	8005c40 <HAL_RCC_OscConfig+0x74>
 8005c32:	4b76      	ldr	r3, [pc, #472]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a75      	ldr	r2, [pc, #468]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c3c:	6013      	str	r3, [r2, #0]
 8005c3e:	e01d      	b.n	8005c7c <HAL_RCC_OscConfig+0xb0>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c48:	d10c      	bne.n	8005c64 <HAL_RCC_OscConfig+0x98>
 8005c4a:	4b70      	ldr	r3, [pc, #448]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a6f      	ldr	r2, [pc, #444]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	4b6d      	ldr	r3, [pc, #436]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a6c      	ldr	r2, [pc, #432]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	e00b      	b.n	8005c7c <HAL_RCC_OscConfig+0xb0>
 8005c64:	4b69      	ldr	r3, [pc, #420]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a68      	ldr	r2, [pc, #416]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	4b66      	ldr	r3, [pc, #408]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a65      	ldr	r2, [pc, #404]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d013      	beq.n	8005cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c84:	f7fc f8aa 	bl	8001ddc <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c8c:	f7fc f8a6 	bl	8001ddc <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b64      	cmp	r3, #100	@ 0x64
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e207      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9e:	4b5b      	ldr	r3, [pc, #364]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f0      	beq.n	8005c8c <HAL_RCC_OscConfig+0xc0>
 8005caa:	e014      	b.n	8005cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cac:	f7fc f896 	bl	8001ddc <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cb4:	f7fc f892 	bl	8001ddc <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b64      	cmp	r3, #100	@ 0x64
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e1f3      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cc6:	4b51      	ldr	r3, [pc, #324]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f0      	bne.n	8005cb4 <HAL_RCC_OscConfig+0xe8>
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d063      	beq.n	8005daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 030c 	and.w	r3, r3, #12
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00b      	beq.n	8005d06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cee:	4b47      	ldr	r3, [pc, #284]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cf6:	2b08      	cmp	r3, #8
 8005cf8:	d11c      	bne.n	8005d34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cfa:	4b44      	ldr	r3, [pc, #272]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d116      	bne.n	8005d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d06:	4b41      	ldr	r3, [pc, #260]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <HAL_RCC_OscConfig+0x152>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d001      	beq.n	8005d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e1c7      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	4937      	ldr	r1, [pc, #220]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d32:	e03a      	b.n	8005daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d020      	beq.n	8005d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d3c:	4b34      	ldr	r3, [pc, #208]	@ (8005e10 <HAL_RCC_OscConfig+0x244>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d42:	f7fc f84b 	bl	8001ddc <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d4a:	f7fc f847 	bl	8001ddc <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e1a8      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0f0      	beq.n	8005d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d68:	4b28      	ldr	r3, [pc, #160]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	4925      	ldr	r1, [pc, #148]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	600b      	str	r3, [r1, #0]
 8005d7c:	e015      	b.n	8005daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d7e:	4b24      	ldr	r3, [pc, #144]	@ (8005e10 <HAL_RCC_OscConfig+0x244>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d84:	f7fc f82a 	bl	8001ddc <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d8c:	f7fc f826 	bl	8001ddc <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e187      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1f0      	bne.n	8005d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d036      	beq.n	8005e24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d016      	beq.n	8005dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dbe:	4b15      	ldr	r3, [pc, #84]	@ (8005e14 <HAL_RCC_OscConfig+0x248>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc4:	f7fc f80a 	bl	8001ddc <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dcc:	f7fc f806 	bl	8001ddc <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e167      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dde:	4b0b      	ldr	r3, [pc, #44]	@ (8005e0c <HAL_RCC_OscConfig+0x240>)
 8005de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCC_OscConfig+0x200>
 8005dea:	e01b      	b.n	8005e24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dec:	4b09      	ldr	r3, [pc, #36]	@ (8005e14 <HAL_RCC_OscConfig+0x248>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005df2:	f7fb fff3 	bl	8001ddc <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005df8:	e00e      	b.n	8005e18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dfa:	f7fb ffef 	bl	8001ddc <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d907      	bls.n	8005e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e150      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	42470000 	.word	0x42470000
 8005e14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e18:	4b88      	ldr	r3, [pc, #544]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1ea      	bne.n	8005dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8097 	beq.w	8005f60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e32:	2300      	movs	r3, #0
 8005e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e36:	4b81      	ldr	r3, [pc, #516]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10f      	bne.n	8005e62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e42:	2300      	movs	r3, #0
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	4b7d      	ldr	r3, [pc, #500]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	4a7c      	ldr	r2, [pc, #496]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e52:	4b7a      	ldr	r3, [pc, #488]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e5a:	60bb      	str	r3, [r7, #8]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e62:	4b77      	ldr	r3, [pc, #476]	@ (8006040 <HAL_RCC_OscConfig+0x474>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d118      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e6e:	4b74      	ldr	r3, [pc, #464]	@ (8006040 <HAL_RCC_OscConfig+0x474>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a73      	ldr	r2, [pc, #460]	@ (8006040 <HAL_RCC_OscConfig+0x474>)
 8005e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e7a:	f7fb ffaf 	bl	8001ddc <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e80:	e008      	b.n	8005e94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e82:	f7fb ffab 	bl	8001ddc <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e10c      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e94:	4b6a      	ldr	r3, [pc, #424]	@ (8006040 <HAL_RCC_OscConfig+0x474>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f0      	beq.n	8005e82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d106      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x2ea>
 8005ea8:	4b64      	ldr	r3, [pc, #400]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eac:	4a63      	ldr	r2, [pc, #396]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005eae:	f043 0301 	orr.w	r3, r3, #1
 8005eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eb4:	e01c      	b.n	8005ef0 <HAL_RCC_OscConfig+0x324>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d10c      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x30c>
 8005ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005ec4:	f043 0304 	orr.w	r3, r3, #4
 8005ec8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eca:	4b5c      	ldr	r3, [pc, #368]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ece:	4a5b      	ldr	r2, [pc, #364]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005ed0:	f043 0301 	orr.w	r3, r3, #1
 8005ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ed6:	e00b      	b.n	8005ef0 <HAL_RCC_OscConfig+0x324>
 8005ed8:	4b58      	ldr	r3, [pc, #352]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005edc:	4a57      	ldr	r2, [pc, #348]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005ede:	f023 0301 	bic.w	r3, r3, #1
 8005ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ee4:	4b55      	ldr	r3, [pc, #340]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee8:	4a54      	ldr	r2, [pc, #336]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005eea:	f023 0304 	bic.w	r3, r3, #4
 8005eee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d015      	beq.n	8005f24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef8:	f7fb ff70 	bl	8001ddc <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005efe:	e00a      	b.n	8005f16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f00:	f7fb ff6c 	bl	8001ddc <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e0cb      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f16:	4b49      	ldr	r3, [pc, #292]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0ee      	beq.n	8005f00 <HAL_RCC_OscConfig+0x334>
 8005f22:	e014      	b.n	8005f4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f24:	f7fb ff5a 	bl	8001ddc <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f2a:	e00a      	b.n	8005f42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f2c:	f7fb ff56 	bl	8001ddc <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e0b5      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f42:	4b3e      	ldr	r3, [pc, #248]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1ee      	bne.n	8005f2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f4e:	7dfb      	ldrb	r3, [r7, #23]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d105      	bne.n	8005f60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f54:	4b39      	ldr	r3, [pc, #228]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f58:	4a38      	ldr	r2, [pc, #224]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005f5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80a1 	beq.w	80060ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f6a:	4b34      	ldr	r3, [pc, #208]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d05c      	beq.n	8006030 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d141      	bne.n	8006002 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f7e:	4b31      	ldr	r3, [pc, #196]	@ (8006044 <HAL_RCC_OscConfig+0x478>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f84:	f7fb ff2a 	bl	8001ddc <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f8c:	f7fb ff26 	bl	8001ddc <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e087      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9e:	4b27      	ldr	r3, [pc, #156]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f0      	bne.n	8005f8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69da      	ldr	r2, [r3, #28]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	019b      	lsls	r3, r3, #6
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fcc:	061b      	lsls	r3, r3, #24
 8005fce:	491b      	ldr	r1, [pc, #108]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006044 <HAL_RCC_OscConfig+0x478>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fda:	f7fb feff 	bl	8001ddc <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe2:	f7fb fefb 	bl	8001ddc <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e05c      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff4:	4b11      	ldr	r3, [pc, #68]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0f0      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x416>
 8006000:	e054      	b.n	80060ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006002:	4b10      	ldr	r3, [pc, #64]	@ (8006044 <HAL_RCC_OscConfig+0x478>)
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006008:	f7fb fee8 	bl	8001ddc <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600e:	e008      	b.n	8006022 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006010:	f7fb fee4 	bl	8001ddc <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e045      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006022:	4b06      	ldr	r3, [pc, #24]	@ (800603c <HAL_RCC_OscConfig+0x470>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1f0      	bne.n	8006010 <HAL_RCC_OscConfig+0x444>
 800602e:	e03d      	b.n	80060ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d107      	bne.n	8006048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e038      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
 800603c:	40023800 	.word	0x40023800
 8006040:	40007000 	.word	0x40007000
 8006044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006048:	4b1b      	ldr	r3, [pc, #108]	@ (80060b8 <HAL_RCC_OscConfig+0x4ec>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d028      	beq.n	80060a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006060:	429a      	cmp	r2, r3
 8006062:	d121      	bne.n	80060a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800606e:	429a      	cmp	r2, r3
 8006070:	d11a      	bne.n	80060a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006078:	4013      	ands	r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800607e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006080:	4293      	cmp	r3, r2
 8006082:	d111      	bne.n	80060a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	3b01      	subs	r3, #1
 8006092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006094:	429a      	cmp	r2, r3
 8006096:	d107      	bne.n	80060a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d001      	beq.n	80060ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40023800 	.word	0x40023800

080060bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0cc      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060d0:	4b68      	ldr	r3, [pc, #416]	@ (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d90c      	bls.n	80060f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060de:	4b65      	ldr	r3, [pc, #404]	@ (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e6:	4b63      	ldr	r3, [pc, #396]	@ (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d001      	beq.n	80060f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e0b8      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d020      	beq.n	8006146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006110:	4b59      	ldr	r3, [pc, #356]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	4a58      	ldr	r2, [pc, #352]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006116:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800611a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006128:	4b53      	ldr	r3, [pc, #332]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	4a52      	ldr	r2, [pc, #328]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800612e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006134:	4b50      	ldr	r3, [pc, #320]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	494d      	ldr	r1, [pc, #308]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006142:	4313      	orrs	r3, r2
 8006144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d044      	beq.n	80061dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d107      	bne.n	800616a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800615a:	4b47      	ldr	r3, [pc, #284]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d119      	bne.n	800619a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e07f      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b02      	cmp	r3, #2
 8006170:	d003      	beq.n	800617a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006176:	2b03      	cmp	r3, #3
 8006178:	d107      	bne.n	800618a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800617a:	4b3f      	ldr	r3, [pc, #252]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e06f      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800618a:	4b3b      	ldr	r3, [pc, #236]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e067      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800619a:	4b37      	ldr	r3, [pc, #220]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f023 0203 	bic.w	r2, r3, #3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4934      	ldr	r1, [pc, #208]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061ac:	f7fb fe16 	bl	8001ddc <HAL_GetTick>
 80061b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b2:	e00a      	b.n	80061ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b4:	f7fb fe12 	bl	8001ddc <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e04f      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 020c 	and.w	r2, r3, #12
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	429a      	cmp	r2, r3
 80061da:	d1eb      	bne.n	80061b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061dc:	4b25      	ldr	r3, [pc, #148]	@ (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d20c      	bcs.n	8006204 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ea:	4b22      	ldr	r3, [pc, #136]	@ (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f2:	4b20      	ldr	r3, [pc, #128]	@ (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d001      	beq.n	8006204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e032      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d008      	beq.n	8006222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006210:	4b19      	ldr	r3, [pc, #100]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4916      	ldr	r1, [pc, #88]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	4313      	orrs	r3, r2
 8006220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800622e:	4b12      	ldr	r3, [pc, #72]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	490e      	ldr	r1, [pc, #56]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	4313      	orrs	r3, r2
 8006240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006242:	f000 f821 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 8006246:	4602      	mov	r2, r0
 8006248:	4b0b      	ldr	r3, [pc, #44]	@ (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	490a      	ldr	r1, [pc, #40]	@ (800627c <HAL_RCC_ClockConfig+0x1c0>)
 8006254:	5ccb      	ldrb	r3, [r1, r3]
 8006256:	fa22 f303 	lsr.w	r3, r2, r3
 800625a:	4a09      	ldr	r2, [pc, #36]	@ (8006280 <HAL_RCC_ClockConfig+0x1c4>)
 800625c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800625e:	4b09      	ldr	r3, [pc, #36]	@ (8006284 <HAL_RCC_ClockConfig+0x1c8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f7fb fd76 	bl	8001d54 <HAL_InitTick>

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40023c00 	.word	0x40023c00
 8006278:	40023800 	.word	0x40023800
 800627c:	08008b54 	.word	0x08008b54
 8006280:	20000000 	.word	0x20000000
 8006284:	2000000c 	.word	0x2000000c

08006288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800628c:	b094      	sub	sp, #80	@ 0x50
 800628e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062a0:	4b79      	ldr	r3, [pc, #484]	@ (8006488 <HAL_RCC_GetSysClockFreq+0x200>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 030c 	and.w	r3, r3, #12
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d00d      	beq.n	80062c8 <HAL_RCC_GetSysClockFreq+0x40>
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	f200 80e1 	bhi.w	8006474 <HAL_RCC_GetSysClockFreq+0x1ec>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_RCC_GetSysClockFreq+0x34>
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d003      	beq.n	80062c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80062ba:	e0db      	b.n	8006474 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062bc:	4b73      	ldr	r3, [pc, #460]	@ (800648c <HAL_RCC_GetSysClockFreq+0x204>)
 80062be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062c0:	e0db      	b.n	800647a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062c2:	4b72      	ldr	r3, [pc, #456]	@ (800648c <HAL_RCC_GetSysClockFreq+0x204>)
 80062c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062c6:	e0d8      	b.n	800647a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062c8:	4b6f      	ldr	r3, [pc, #444]	@ (8006488 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062d2:	4b6d      	ldr	r3, [pc, #436]	@ (8006488 <HAL_RCC_GetSysClockFreq+0x200>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d063      	beq.n	80063a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062de:	4b6a      	ldr	r3, [pc, #424]	@ (8006488 <HAL_RCC_GetSysClockFreq+0x200>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	099b      	lsrs	r3, r3, #6
 80062e4:	2200      	movs	r2, #0
 80062e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062f2:	2300      	movs	r3, #0
 80062f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80062fa:	4622      	mov	r2, r4
 80062fc:	462b      	mov	r3, r5
 80062fe:	f04f 0000 	mov.w	r0, #0
 8006302:	f04f 0100 	mov.w	r1, #0
 8006306:	0159      	lsls	r1, r3, #5
 8006308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800630c:	0150      	lsls	r0, r2, #5
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4621      	mov	r1, r4
 8006314:	1a51      	subs	r1, r2, r1
 8006316:	6139      	str	r1, [r7, #16]
 8006318:	4629      	mov	r1, r5
 800631a:	eb63 0301 	sbc.w	r3, r3, r1
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800632c:	4659      	mov	r1, fp
 800632e:	018b      	lsls	r3, r1, #6
 8006330:	4651      	mov	r1, sl
 8006332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006336:	4651      	mov	r1, sl
 8006338:	018a      	lsls	r2, r1, #6
 800633a:	4651      	mov	r1, sl
 800633c:	ebb2 0801 	subs.w	r8, r2, r1
 8006340:	4659      	mov	r1, fp
 8006342:	eb63 0901 	sbc.w	r9, r3, r1
 8006346:	f04f 0200 	mov.w	r2, #0
 800634a:	f04f 0300 	mov.w	r3, #0
 800634e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800635a:	4690      	mov	r8, r2
 800635c:	4699      	mov	r9, r3
 800635e:	4623      	mov	r3, r4
 8006360:	eb18 0303 	adds.w	r3, r8, r3
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	462b      	mov	r3, r5
 8006368:	eb49 0303 	adc.w	r3, r9, r3
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800637a:	4629      	mov	r1, r5
 800637c:	028b      	lsls	r3, r1, #10
 800637e:	4621      	mov	r1, r4
 8006380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006384:	4621      	mov	r1, r4
 8006386:	028a      	lsls	r2, r1, #10
 8006388:	4610      	mov	r0, r2
 800638a:	4619      	mov	r1, r3
 800638c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800638e:	2200      	movs	r2, #0
 8006390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006398:	f7f9 ff6a 	bl	8000270 <__aeabi_uldivmod>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4613      	mov	r3, r2
 80063a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063a4:	e058      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063a6:	4b38      	ldr	r3, [pc, #224]	@ (8006488 <HAL_RCC_GetSysClockFreq+0x200>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	099b      	lsrs	r3, r3, #6
 80063ac:	2200      	movs	r2, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	4611      	mov	r1, r2
 80063b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063b6:	623b      	str	r3, [r7, #32]
 80063b8:	2300      	movs	r3, #0
 80063ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80063bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063c0:	4642      	mov	r2, r8
 80063c2:	464b      	mov	r3, r9
 80063c4:	f04f 0000 	mov.w	r0, #0
 80063c8:	f04f 0100 	mov.w	r1, #0
 80063cc:	0159      	lsls	r1, r3, #5
 80063ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063d2:	0150      	lsls	r0, r2, #5
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4641      	mov	r1, r8
 80063da:	ebb2 0a01 	subs.w	sl, r2, r1
 80063de:	4649      	mov	r1, r9
 80063e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	f04f 0300 	mov.w	r3, #0
 80063ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063f8:	ebb2 040a 	subs.w	r4, r2, sl
 80063fc:	eb63 050b 	sbc.w	r5, r3, fp
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	00eb      	lsls	r3, r5, #3
 800640a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800640e:	00e2      	lsls	r2, r4, #3
 8006410:	4614      	mov	r4, r2
 8006412:	461d      	mov	r5, r3
 8006414:	4643      	mov	r3, r8
 8006416:	18e3      	adds	r3, r4, r3
 8006418:	603b      	str	r3, [r7, #0]
 800641a:	464b      	mov	r3, r9
 800641c:	eb45 0303 	adc.w	r3, r5, r3
 8006420:	607b      	str	r3, [r7, #4]
 8006422:	f04f 0200 	mov.w	r2, #0
 8006426:	f04f 0300 	mov.w	r3, #0
 800642a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800642e:	4629      	mov	r1, r5
 8006430:	028b      	lsls	r3, r1, #10
 8006432:	4621      	mov	r1, r4
 8006434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006438:	4621      	mov	r1, r4
 800643a:	028a      	lsls	r2, r1, #10
 800643c:	4610      	mov	r0, r2
 800643e:	4619      	mov	r1, r3
 8006440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006442:	2200      	movs	r2, #0
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	61fa      	str	r2, [r7, #28]
 8006448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800644c:	f7f9 ff10 	bl	8000270 <__aeabi_uldivmod>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4613      	mov	r3, r2
 8006456:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006458:	4b0b      	ldr	r3, [pc, #44]	@ (8006488 <HAL_RCC_GetSysClockFreq+0x200>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	0c1b      	lsrs	r3, r3, #16
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	3301      	adds	r3, #1
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006468:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800646a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800646c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006470:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006472:	e002      	b.n	800647a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006474:	4b05      	ldr	r3, [pc, #20]	@ (800648c <HAL_RCC_GetSysClockFreq+0x204>)
 8006476:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800647a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800647c:	4618      	mov	r0, r3
 800647e:	3750      	adds	r7, #80	@ 0x50
 8006480:	46bd      	mov	sp, r7
 8006482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006486:	bf00      	nop
 8006488:	40023800 	.word	0x40023800
 800648c:	00f42400 	.word	0x00f42400

08006490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006494:	4b03      	ldr	r3, [pc, #12]	@ (80064a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006496:	681b      	ldr	r3, [r3, #0]
}
 8006498:	4618      	mov	r0, r3
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000000 	.word	0x20000000

080064a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064ac:	f7ff fff0 	bl	8006490 <HAL_RCC_GetHCLKFreq>
 80064b0:	4602      	mov	r2, r0
 80064b2:	4b05      	ldr	r3, [pc, #20]	@ (80064c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	0a9b      	lsrs	r3, r3, #10
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	4903      	ldr	r1, [pc, #12]	@ (80064cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064be:	5ccb      	ldrb	r3, [r1, r3]
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	40023800 	.word	0x40023800
 80064cc:	08008b64 	.word	0x08008b64

080064d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064d4:	f7ff ffdc 	bl	8006490 <HAL_RCC_GetHCLKFreq>
 80064d8:	4602      	mov	r2, r0
 80064da:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	0b5b      	lsrs	r3, r3, #13
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	4903      	ldr	r1, [pc, #12]	@ (80064f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064e6:	5ccb      	ldrb	r3, [r1, r3]
 80064e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40023800 	.word	0x40023800
 80064f4:	08008b64 	.word	0x08008b64

080064f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d105      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800651c:	2b00      	cmp	r3, #0
 800651e:	d035      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006520:	4b62      	ldr	r3, [pc, #392]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006526:	f7fb fc59 	bl	8001ddc <HAL_GetTick>
 800652a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800652c:	e008      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800652e:	f7fb fc55 	bl	8001ddc <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e0b0      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006540:	4b5b      	ldr	r3, [pc, #364]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1f0      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	019a      	lsls	r2, r3, #6
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	071b      	lsls	r3, r3, #28
 8006558:	4955      	ldr	r1, [pc, #340]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006560:	4b52      	ldr	r3, [pc, #328]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006562:	2201      	movs	r2, #1
 8006564:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006566:	f7fb fc39 	bl	8001ddc <HAL_GetTick>
 800656a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800656c:	e008      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800656e:	f7fb fc35 	bl	8001ddc <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e090      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006580:	4b4b      	ldr	r3, [pc, #300]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f0      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 8083 	beq.w	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	4b44      	ldr	r3, [pc, #272]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	4a43      	ldr	r2, [pc, #268]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80065aa:	4b41      	ldr	r3, [pc, #260]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80065b6:	4b3f      	ldr	r3, [pc, #252]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a3e      	ldr	r2, [pc, #248]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065c2:	f7fb fc0b 	bl	8001ddc <HAL_GetTick>
 80065c6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80065c8:	e008      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ca:	f7fb fc07 	bl	8001ddc <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e062      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80065dc:	4b35      	ldr	r3, [pc, #212]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0f0      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065e8:	4b31      	ldr	r3, [pc, #196]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065f0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d02f      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	429a      	cmp	r2, r3
 8006604:	d028      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006606:	4b2a      	ldr	r3, [pc, #168]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006610:	4b29      	ldr	r3, [pc, #164]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006612:	2201      	movs	r2, #1
 8006614:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006616:	4b28      	ldr	r3, [pc, #160]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800661c:	4a24      	ldr	r2, [pc, #144]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006622:	4b23      	ldr	r3, [pc, #140]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b01      	cmp	r3, #1
 800662c:	d114      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800662e:	f7fb fbd5 	bl	8001ddc <HAL_GetTick>
 8006632:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006634:	e00a      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006636:	f7fb fbd1 	bl	8001ddc <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006644:	4293      	cmp	r3, r2
 8006646:	d901      	bls.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e02a      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800664c:	4b18      	ldr	r3, [pc, #96]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0ee      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006660:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006664:	d10d      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006666:	4b12      	ldr	r3, [pc, #72]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800667a:	490d      	ldr	r1, [pc, #52]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800667c:	4313      	orrs	r3, r2
 800667e:	608b      	str	r3, [r1, #8]
 8006680:	e005      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006682:	4b0b      	ldr	r3, [pc, #44]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	4a0a      	ldr	r2, [pc, #40]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006688:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800668c:	6093      	str	r3, [r2, #8]
 800668e:	4b08      	ldr	r3, [pc, #32]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006690:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800669a:	4905      	ldr	r1, [pc, #20]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800669c:	4313      	orrs	r3, r2
 800669e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	42470068 	.word	0x42470068
 80066b0:	40023800 	.word	0x40023800
 80066b4:	40007000 	.word	0x40007000
 80066b8:	42470e40 	.word	0x42470e40

080066bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d13f      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80066da:	4b24      	ldr	r3, [pc, #144]	@ (800676c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066e2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d006      	beq.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066f0:	d12f      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80066f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80066f4:	617b      	str	r3, [r7, #20]
          break;
 80066f6:	e02f      	b.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80066f8:	4b1c      	ldr	r3, [pc, #112]	@ (800676c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006700:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006704:	d108      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006706:	4b19      	ldr	r3, [pc, #100]	@ (800676c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800670e:	4a19      	ldr	r2, [pc, #100]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006710:	fbb2 f3f3 	udiv	r3, r2, r3
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	e007      	b.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006718:	4b14      	ldr	r3, [pc, #80]	@ (800676c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006720:	4a14      	ldr	r2, [pc, #80]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006722:	fbb2 f3f3 	udiv	r3, r2, r3
 8006726:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006728:	4b10      	ldr	r3, [pc, #64]	@ (800676c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800672a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800672e:	099b      	lsrs	r3, r3, #6
 8006730:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	fb02 f303 	mul.w	r3, r2, r3
 800673a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800673c:	4b0b      	ldr	r3, [pc, #44]	@ (800676c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800673e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006742:	0f1b      	lsrs	r3, r3, #28
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	fbb2 f3f3 	udiv	r3, r2, r3
 800674e:	617b      	str	r3, [r7, #20]
          break;
 8006750:	e002      	b.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
          break;
 8006756:	bf00      	nop
        }
      }
      break;
 8006758:	e000      	b.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800675a:	bf00      	nop
    }
  }
  return frequency;
 800675c:	697b      	ldr	r3, [r7, #20]
}
 800675e:	4618      	mov	r0, r3
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40023800 	.word	0x40023800
 8006770:	00bb8000 	.word	0x00bb8000
 8006774:	00f42400 	.word	0x00f42400

08006778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e07b      	b.n	8006882 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678e:	2b00      	cmp	r3, #0
 8006790:	d108      	bne.n	80067a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800679a:	d009      	beq.n	80067b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	61da      	str	r2, [r3, #28]
 80067a2:	e005      	b.n	80067b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fa fc96 	bl	80010fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	431a      	orrs	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006834:	ea42 0103 	orr.w	r1, r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	0c1b      	lsrs	r3, r3, #16
 800684e:	f003 0104 	and.w	r1, r3, #4
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006856:	f003 0210 	and.w	r2, r3, #16
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006870:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e042      	b.n	8006922 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d106      	bne.n	80068b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7fa fdcb 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2224      	movs	r2, #36	@ 0x24
 80068ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f972 	bl	8006bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695a      	ldr	r2, [r3, #20]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006902:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b08a      	sub	sp, #40	@ 0x28
 800692e:	af02      	add	r7, sp, #8
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	603b      	str	r3, [r7, #0]
 8006936:	4613      	mov	r3, r2
 8006938:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b20      	cmp	r3, #32
 8006948:	d175      	bne.n	8006a36 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <HAL_UART_Transmit+0x2c>
 8006950:	88fb      	ldrh	r3, [r7, #6]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e06e      	b.n	8006a38 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2221      	movs	r2, #33	@ 0x21
 8006964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006968:	f7fb fa38 	bl	8001ddc <HAL_GetTick>
 800696c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	88fa      	ldrh	r2, [r7, #6]
 8006972:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	88fa      	ldrh	r2, [r7, #6]
 8006978:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006982:	d108      	bne.n	8006996 <HAL_UART_Transmit+0x6c>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800698c:	2300      	movs	r3, #0
 800698e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	e003      	b.n	800699e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800699e:	e02e      	b.n	80069fe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2200      	movs	r2, #0
 80069a8:	2180      	movs	r1, #128	@ 0x80
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 f848 	bl	8006a40 <UART_WaitOnFlagUntilTimeout>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d005      	beq.n	80069c2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e03a      	b.n	8006a38 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10b      	bne.n	80069e0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	3302      	adds	r3, #2
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	e007      	b.n	80069f0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	781a      	ldrb	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	3301      	adds	r3, #1
 80069ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1cb      	bne.n	80069a0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2140      	movs	r1, #64	@ 0x40
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 f814 	bl	8006a40 <UART_WaitOnFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e006      	b.n	8006a38 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e000      	b.n	8006a38 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a36:	2302      	movs	r3, #2
  }
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3720      	adds	r7, #32
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a50:	e03b      	b.n	8006aca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a58:	d037      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5a:	f7fb f9bf 	bl	8001ddc <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	6a3a      	ldr	r2, [r7, #32]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d302      	bcc.n	8006a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e03a      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d023      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b80      	cmp	r3, #128	@ 0x80
 8006a86:	d020      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b40      	cmp	r3, #64	@ 0x40
 8006a8c:	d01d      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d116      	bne.n	8006aca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 f81d 	bl	8006af2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2208      	movs	r2, #8
 8006abc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e00f      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	bf0c      	ite	eq
 8006ada:	2301      	moveq	r3, #1
 8006adc:	2300      	movne	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d0b4      	beq.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b095      	sub	sp, #84	@ 0x54
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	330c      	adds	r3, #12
 8006b00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	330c      	adds	r3, #12
 8006b18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e5      	bne.n	8006afa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3314      	adds	r3, #20
 8006b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3314      	adds	r3, #20
 8006b4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e5      	bne.n	8006b2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d119      	bne.n	8006b9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f023 0310 	bic.w	r3, r3, #16
 8006b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	330c      	adds	r3, #12
 8006b88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b8a:	61ba      	str	r2, [r7, #24]
 8006b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6979      	ldr	r1, [r7, #20]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	613b      	str	r3, [r7, #16]
   return(result);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e5      	bne.n	8006b6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006bac:	bf00      	nop
 8006bae:	3754      	adds	r7, #84	@ 0x54
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bbc:	b0c0      	sub	sp, #256	@ 0x100
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd4:	68d9      	ldr	r1, [r3, #12]
 8006bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	ea40 0301 	orr.w	r3, r0, r1
 8006be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c10:	f021 010c 	bic.w	r1, r1, #12
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c1e:	430b      	orrs	r3, r1
 8006c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c32:	6999      	ldr	r1, [r3, #24]
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	ea40 0301 	orr.w	r3, r0, r1
 8006c3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4b8f      	ldr	r3, [pc, #572]	@ (8006e84 <UART_SetConfig+0x2cc>)
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d005      	beq.n	8006c58 <UART_SetConfig+0xa0>
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b8d      	ldr	r3, [pc, #564]	@ (8006e88 <UART_SetConfig+0x2d0>)
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d104      	bne.n	8006c62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c58:	f7ff fc3a 	bl	80064d0 <HAL_RCC_GetPCLK2Freq>
 8006c5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c60:	e003      	b.n	8006c6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c62:	f7ff fc21 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8006c66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c74:	f040 810c 	bne.w	8006e90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	462b      	mov	r3, r5
 8006c8e:	1891      	adds	r1, r2, r2
 8006c90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c92:	415b      	adcs	r3, r3
 8006c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	eb12 0801 	adds.w	r8, r2, r1
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	eb43 0901 	adc.w	r9, r3, r1
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cba:	4690      	mov	r8, r2
 8006cbc:	4699      	mov	r9, r3
 8006cbe:	4623      	mov	r3, r4
 8006cc0:	eb18 0303 	adds.w	r3, r8, r3
 8006cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cc8:	462b      	mov	r3, r5
 8006cca:	eb49 0303 	adc.w	r3, r9, r3
 8006cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	18db      	adds	r3, r3, r3
 8006cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cec:	4613      	mov	r3, r2
 8006cee:	eb42 0303 	adc.w	r3, r2, r3
 8006cf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006cfc:	f7f9 fab8 	bl	8000270 <__aeabi_uldivmod>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4b61      	ldr	r3, [pc, #388]	@ (8006e8c <UART_SetConfig+0x2d4>)
 8006d06:	fba3 2302 	umull	r2, r3, r3, r2
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	011c      	lsls	r4, r3, #4
 8006d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d20:	4642      	mov	r2, r8
 8006d22:	464b      	mov	r3, r9
 8006d24:	1891      	adds	r1, r2, r2
 8006d26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d28:	415b      	adcs	r3, r3
 8006d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d30:	4641      	mov	r1, r8
 8006d32:	eb12 0a01 	adds.w	sl, r2, r1
 8006d36:	4649      	mov	r1, r9
 8006d38:	eb43 0b01 	adc.w	fp, r3, r1
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d50:	4692      	mov	sl, r2
 8006d52:	469b      	mov	fp, r3
 8006d54:	4643      	mov	r3, r8
 8006d56:	eb1a 0303 	adds.w	r3, sl, r3
 8006d5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d5e:	464b      	mov	r3, r9
 8006d60:	eb4b 0303 	adc.w	r3, fp, r3
 8006d64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	18db      	adds	r3, r3, r3
 8006d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d82:	4613      	mov	r3, r2
 8006d84:	eb42 0303 	adc.w	r3, r2, r3
 8006d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d92:	f7f9 fa6d 	bl	8000270 <__aeabi_uldivmod>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8006e8c <UART_SetConfig+0x2d4>)
 8006d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	2264      	movs	r2, #100	@ 0x64
 8006da6:	fb02 f303 	mul.w	r3, r2, r3
 8006daa:	1acb      	subs	r3, r1, r3
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006db2:	4b36      	ldr	r3, [pc, #216]	@ (8006e8c <UART_SetConfig+0x2d4>)
 8006db4:	fba3 2302 	umull	r2, r3, r3, r2
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006dc0:	441c      	add	r4, r3
 8006dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006dd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006dd4:	4642      	mov	r2, r8
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	1891      	adds	r1, r2, r2
 8006dda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ddc:	415b      	adcs	r3, r3
 8006dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006de4:	4641      	mov	r1, r8
 8006de6:	1851      	adds	r1, r2, r1
 8006de8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006dea:	4649      	mov	r1, r9
 8006dec:	414b      	adcs	r3, r1
 8006dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006dfc:	4659      	mov	r1, fp
 8006dfe:	00cb      	lsls	r3, r1, #3
 8006e00:	4651      	mov	r1, sl
 8006e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e06:	4651      	mov	r1, sl
 8006e08:	00ca      	lsls	r2, r1, #3
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4603      	mov	r3, r0
 8006e10:	4642      	mov	r2, r8
 8006e12:	189b      	adds	r3, r3, r2
 8006e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e18:	464b      	mov	r3, r9
 8006e1a:	460a      	mov	r2, r1
 8006e1c:	eb42 0303 	adc.w	r3, r2, r3
 8006e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e38:	460b      	mov	r3, r1
 8006e3a:	18db      	adds	r3, r3, r3
 8006e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e3e:	4613      	mov	r3, r2
 8006e40:	eb42 0303 	adc.w	r3, r2, r3
 8006e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e4e:	f7f9 fa0f 	bl	8000270 <__aeabi_uldivmod>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	4b0d      	ldr	r3, [pc, #52]	@ (8006e8c <UART_SetConfig+0x2d4>)
 8006e58:	fba3 1302 	umull	r1, r3, r3, r2
 8006e5c:	095b      	lsrs	r3, r3, #5
 8006e5e:	2164      	movs	r1, #100	@ 0x64
 8006e60:	fb01 f303 	mul.w	r3, r1, r3
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	3332      	adds	r3, #50	@ 0x32
 8006e6a:	4a08      	ldr	r2, [pc, #32]	@ (8006e8c <UART_SetConfig+0x2d4>)
 8006e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e70:	095b      	lsrs	r3, r3, #5
 8006e72:	f003 0207 	and.w	r2, r3, #7
 8006e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4422      	add	r2, r4
 8006e7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e80:	e106      	b.n	8007090 <UART_SetConfig+0x4d8>
 8006e82:	bf00      	nop
 8006e84:	40011000 	.word	0x40011000
 8006e88:	40011400 	.word	0x40011400
 8006e8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ea2:	4642      	mov	r2, r8
 8006ea4:	464b      	mov	r3, r9
 8006ea6:	1891      	adds	r1, r2, r2
 8006ea8:	6239      	str	r1, [r7, #32]
 8006eaa:	415b      	adcs	r3, r3
 8006eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eb2:	4641      	mov	r1, r8
 8006eb4:	1854      	adds	r4, r2, r1
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	eb43 0501 	adc.w	r5, r3, r1
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	00eb      	lsls	r3, r5, #3
 8006ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eca:	00e2      	lsls	r2, r4, #3
 8006ecc:	4614      	mov	r4, r2
 8006ece:	461d      	mov	r5, r3
 8006ed0:	4643      	mov	r3, r8
 8006ed2:	18e3      	adds	r3, r4, r3
 8006ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ed8:	464b      	mov	r3, r9
 8006eda:	eb45 0303 	adc.w	r3, r5, r3
 8006ede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006eee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006efe:	4629      	mov	r1, r5
 8006f00:	008b      	lsls	r3, r1, #2
 8006f02:	4621      	mov	r1, r4
 8006f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f08:	4621      	mov	r1, r4
 8006f0a:	008a      	lsls	r2, r1, #2
 8006f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f10:	f7f9 f9ae 	bl	8000270 <__aeabi_uldivmod>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4b60      	ldr	r3, [pc, #384]	@ (800709c <UART_SetConfig+0x4e4>)
 8006f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	011c      	lsls	r4, r3, #4
 8006f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f34:	4642      	mov	r2, r8
 8006f36:	464b      	mov	r3, r9
 8006f38:	1891      	adds	r1, r2, r2
 8006f3a:	61b9      	str	r1, [r7, #24]
 8006f3c:	415b      	adcs	r3, r3
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f44:	4641      	mov	r1, r8
 8006f46:	1851      	adds	r1, r2, r1
 8006f48:	6139      	str	r1, [r7, #16]
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	414b      	adcs	r3, r1
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f5c:	4659      	mov	r1, fp
 8006f5e:	00cb      	lsls	r3, r1, #3
 8006f60:	4651      	mov	r1, sl
 8006f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f66:	4651      	mov	r1, sl
 8006f68:	00ca      	lsls	r2, r1, #3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4642      	mov	r2, r8
 8006f72:	189b      	adds	r3, r3, r2
 8006f74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f78:	464b      	mov	r3, r9
 8006f7a:	460a      	mov	r2, r1
 8006f7c:	eb42 0303 	adc.w	r3, r2, r3
 8006f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	008b      	lsls	r3, r1, #2
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fa6:	4641      	mov	r1, r8
 8006fa8:	008a      	lsls	r2, r1, #2
 8006faa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fae:	f7f9 f95f 	bl	8000270 <__aeabi_uldivmod>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	4b38      	ldr	r3, [pc, #224]	@ (800709c <UART_SetConfig+0x4e4>)
 8006fba:	fba3 2301 	umull	r2, r3, r3, r1
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	2264      	movs	r2, #100	@ 0x64
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	1acb      	subs	r3, r1, r3
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	3332      	adds	r3, #50	@ 0x32
 8006fcc:	4a33      	ldr	r2, [pc, #204]	@ (800709c <UART_SetConfig+0x4e4>)
 8006fce:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd2:	095b      	lsrs	r3, r3, #5
 8006fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fd8:	441c      	add	r4, r3
 8006fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fde:	2200      	movs	r2, #0
 8006fe0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fe2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fe4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fe8:	4642      	mov	r2, r8
 8006fea:	464b      	mov	r3, r9
 8006fec:	1891      	adds	r1, r2, r2
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	415b      	adcs	r3, r3
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ff8:	4641      	mov	r1, r8
 8006ffa:	1851      	adds	r1, r2, r1
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	4649      	mov	r1, r9
 8007000:	414b      	adcs	r3, r1
 8007002:	607b      	str	r3, [r7, #4]
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007010:	4659      	mov	r1, fp
 8007012:	00cb      	lsls	r3, r1, #3
 8007014:	4651      	mov	r1, sl
 8007016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800701a:	4651      	mov	r1, sl
 800701c:	00ca      	lsls	r2, r1, #3
 800701e:	4610      	mov	r0, r2
 8007020:	4619      	mov	r1, r3
 8007022:	4603      	mov	r3, r0
 8007024:	4642      	mov	r2, r8
 8007026:	189b      	adds	r3, r3, r2
 8007028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800702a:	464b      	mov	r3, r9
 800702c:	460a      	mov	r2, r1
 800702e:	eb42 0303 	adc.w	r3, r2, r3
 8007032:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	663b      	str	r3, [r7, #96]	@ 0x60
 800703e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800704c:	4649      	mov	r1, r9
 800704e:	008b      	lsls	r3, r1, #2
 8007050:	4641      	mov	r1, r8
 8007052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007056:	4641      	mov	r1, r8
 8007058:	008a      	lsls	r2, r1, #2
 800705a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800705e:	f7f9 f907 	bl	8000270 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <UART_SetConfig+0x4e4>)
 8007068:	fba3 1302 	umull	r1, r3, r3, r2
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	2164      	movs	r1, #100	@ 0x64
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	3332      	adds	r3, #50	@ 0x32
 800707a:	4a08      	ldr	r2, [pc, #32]	@ (800709c <UART_SetConfig+0x4e4>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	f003 020f 	and.w	r2, r3, #15
 8007086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4422      	add	r2, r4
 800708e:	609a      	str	r2, [r3, #8]
}
 8007090:	bf00      	nop
 8007092:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007096:	46bd      	mov	sp, r7
 8007098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800709c:	51eb851f 	.word	0x51eb851f

080070a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070a0:	b084      	sub	sp, #16
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	f107 001c 	add.w	r0, r7, #28
 80070ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d123      	bne.n	8007102 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80070ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80070e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d105      	bne.n	80070f6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fdbc 	bl	8007c74 <USB_CoreReset>
 80070fc:	4603      	mov	r3, r0
 80070fe:	73fb      	strb	r3, [r7, #15]
 8007100:	e01b      	b.n	800713a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fdb0 	bl	8007c74 <USB_CoreReset>
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007118:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800711c:	2b00      	cmp	r3, #0
 800711e:	d106      	bne.n	800712e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007124:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	639a      	str	r2, [r3, #56]	@ 0x38
 800712c:	e005      	b.n	800713a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007132:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800713a:	7fbb      	ldrb	r3, [r7, #30]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d10b      	bne.n	8007158 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f043 0206 	orr.w	r2, r3, #6
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f043 0220 	orr.w	r2, r3, #32
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007164:	b004      	add	sp, #16
 8007166:	4770      	bx	lr

08007168 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	4613      	mov	r3, r2
 8007174:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d165      	bne.n	8007248 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4a41      	ldr	r2, [pc, #260]	@ (8007284 <USB_SetTurnaroundTime+0x11c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d906      	bls.n	8007192 <USB_SetTurnaroundTime+0x2a>
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4a40      	ldr	r2, [pc, #256]	@ (8007288 <USB_SetTurnaroundTime+0x120>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d202      	bcs.n	8007192 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800718c:	230f      	movs	r3, #15
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	e062      	b.n	8007258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	4a3c      	ldr	r2, [pc, #240]	@ (8007288 <USB_SetTurnaroundTime+0x120>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d306      	bcc.n	80071a8 <USB_SetTurnaroundTime+0x40>
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	4a3b      	ldr	r2, [pc, #236]	@ (800728c <USB_SetTurnaroundTime+0x124>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d202      	bcs.n	80071a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80071a2:	230e      	movs	r3, #14
 80071a4:	617b      	str	r3, [r7, #20]
 80071a6:	e057      	b.n	8007258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4a38      	ldr	r2, [pc, #224]	@ (800728c <USB_SetTurnaroundTime+0x124>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d306      	bcc.n	80071be <USB_SetTurnaroundTime+0x56>
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	4a37      	ldr	r2, [pc, #220]	@ (8007290 <USB_SetTurnaroundTime+0x128>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d202      	bcs.n	80071be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80071b8:	230d      	movs	r3, #13
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	e04c      	b.n	8007258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	4a33      	ldr	r2, [pc, #204]	@ (8007290 <USB_SetTurnaroundTime+0x128>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d306      	bcc.n	80071d4 <USB_SetTurnaroundTime+0x6c>
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	4a32      	ldr	r2, [pc, #200]	@ (8007294 <USB_SetTurnaroundTime+0x12c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d802      	bhi.n	80071d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80071ce:	230c      	movs	r3, #12
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	e041      	b.n	8007258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	4a2f      	ldr	r2, [pc, #188]	@ (8007294 <USB_SetTurnaroundTime+0x12c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d906      	bls.n	80071ea <USB_SetTurnaroundTime+0x82>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4a2e      	ldr	r2, [pc, #184]	@ (8007298 <USB_SetTurnaroundTime+0x130>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d802      	bhi.n	80071ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80071e4:	230b      	movs	r3, #11
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	e036      	b.n	8007258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	4a2a      	ldr	r2, [pc, #168]	@ (8007298 <USB_SetTurnaroundTime+0x130>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d906      	bls.n	8007200 <USB_SetTurnaroundTime+0x98>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4a29      	ldr	r2, [pc, #164]	@ (800729c <USB_SetTurnaroundTime+0x134>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d802      	bhi.n	8007200 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80071fa:	230a      	movs	r3, #10
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	e02b      	b.n	8007258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4a26      	ldr	r2, [pc, #152]	@ (800729c <USB_SetTurnaroundTime+0x134>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d906      	bls.n	8007216 <USB_SetTurnaroundTime+0xae>
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4a25      	ldr	r2, [pc, #148]	@ (80072a0 <USB_SetTurnaroundTime+0x138>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d202      	bcs.n	8007216 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007210:	2309      	movs	r3, #9
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	e020      	b.n	8007258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	4a21      	ldr	r2, [pc, #132]	@ (80072a0 <USB_SetTurnaroundTime+0x138>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d306      	bcc.n	800722c <USB_SetTurnaroundTime+0xc4>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	4a20      	ldr	r2, [pc, #128]	@ (80072a4 <USB_SetTurnaroundTime+0x13c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d802      	bhi.n	800722c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007226:	2308      	movs	r3, #8
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	e015      	b.n	8007258 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4a1d      	ldr	r2, [pc, #116]	@ (80072a4 <USB_SetTurnaroundTime+0x13c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d906      	bls.n	8007242 <USB_SetTurnaroundTime+0xda>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4a1c      	ldr	r2, [pc, #112]	@ (80072a8 <USB_SetTurnaroundTime+0x140>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d202      	bcs.n	8007242 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800723c:	2307      	movs	r3, #7
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	e00a      	b.n	8007258 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007242:	2306      	movs	r3, #6
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e007      	b.n	8007258 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d102      	bne.n	8007254 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800724e:	2309      	movs	r3, #9
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e001      	b.n	8007258 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007254:	2309      	movs	r3, #9
 8007256:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	029b      	lsls	r3, r3, #10
 800726c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007270:	431a      	orrs	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	00d8acbf 	.word	0x00d8acbf
 8007288:	00e4e1c0 	.word	0x00e4e1c0
 800728c:	00f42400 	.word	0x00f42400
 8007290:	01067380 	.word	0x01067380
 8007294:	011a499f 	.word	0x011a499f
 8007298:	01312cff 	.word	0x01312cff
 800729c:	014ca43f 	.word	0x014ca43f
 80072a0:	016e3600 	.word	0x016e3600
 80072a4:	01a6ab1f 	.word	0x01a6ab1f
 80072a8:	01e84800 	.word	0x01e84800

080072ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f023 0201 	bic.w	r2, r3, #1
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d115      	bne.n	800731c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80072fc:	200a      	movs	r0, #10
 80072fe:	f7fa fd79 	bl	8001df4 <HAL_Delay>
      ms += 10U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	330a      	adds	r3, #10
 8007306:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fc23 	bl	8007b54 <USB_GetMode>
 800730e:	4603      	mov	r3, r0
 8007310:	2b01      	cmp	r3, #1
 8007312:	d01e      	beq.n	8007352 <USB_SetCurrentMode+0x84>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2bc7      	cmp	r3, #199	@ 0xc7
 8007318:	d9f0      	bls.n	80072fc <USB_SetCurrentMode+0x2e>
 800731a:	e01a      	b.n	8007352 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d115      	bne.n	800734e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800732e:	200a      	movs	r0, #10
 8007330:	f7fa fd60 	bl	8001df4 <HAL_Delay>
      ms += 10U;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	330a      	adds	r3, #10
 8007338:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fc0a 	bl	8007b54 <USB_GetMode>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <USB_SetCurrentMode+0x84>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2bc7      	cmp	r3, #199	@ 0xc7
 800734a:	d9f0      	bls.n	800732e <USB_SetCurrentMode+0x60>
 800734c:	e001      	b.n	8007352 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e005      	b.n	800735e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2bc8      	cmp	r3, #200	@ 0xc8
 8007356:	d101      	bne.n	800735c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e000      	b.n	800735e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007368:	b084      	sub	sp, #16
 800736a:	b580      	push	{r7, lr}
 800736c:	b086      	sub	sp, #24
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	e009      	b.n	800739c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	3340      	adds	r3, #64	@ 0x40
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	2200      	movs	r2, #0
 8007394:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	3301      	adds	r3, #1
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b0e      	cmp	r3, #14
 80073a0:	d9f2      	bls.n	8007388 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d11c      	bne.n	80073e4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073b8:	f043 0302 	orr.w	r3, r3, #2
 80073bc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073da:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80073e2:	e00b      	b.n	80073fc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007402:	461a      	mov	r2, r3
 8007404:	2300      	movs	r3, #0
 8007406:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007408:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800740c:	2b01      	cmp	r3, #1
 800740e:	d10d      	bne.n	800742c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007414:	2b00      	cmp	r3, #0
 8007416:	d104      	bne.n	8007422 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007418:	2100      	movs	r1, #0
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f968 	bl	80076f0 <USB_SetDevSpeed>
 8007420:	e008      	b.n	8007434 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007422:	2101      	movs	r1, #1
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f963 	bl	80076f0 <USB_SetDevSpeed>
 800742a:	e003      	b.n	8007434 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800742c:	2103      	movs	r1, #3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f95e 	bl	80076f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007434:	2110      	movs	r1, #16
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f8fa 	bl	8007630 <USB_FlushTxFifo>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f924 	bl	8007694 <USB_FlushRxFifo>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800745c:	461a      	mov	r2, r3
 800745e:	2300      	movs	r3, #0
 8007460:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007468:	461a      	mov	r2, r3
 800746a:	2300      	movs	r3, #0
 800746c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007474:	461a      	mov	r2, r3
 8007476:	2300      	movs	r3, #0
 8007478:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800747a:	2300      	movs	r3, #0
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	e043      	b.n	8007508 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007492:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007496:	d118      	bne.n	80074ca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074aa:	461a      	mov	r2, r3
 80074ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	e013      	b.n	80074dc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c0:	461a      	mov	r2, r3
 80074c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	e008      	b.n	80074dc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d6:	461a      	mov	r2, r3
 80074d8:	2300      	movs	r3, #0
 80074da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e8:	461a      	mov	r2, r3
 80074ea:	2300      	movs	r3, #0
 80074ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074fa:	461a      	mov	r2, r3
 80074fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007500:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	3301      	adds	r3, #1
 8007506:	613b      	str	r3, [r7, #16]
 8007508:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800750c:	461a      	mov	r2, r3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	4293      	cmp	r3, r2
 8007512:	d3b5      	bcc.n	8007480 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007514:	2300      	movs	r3, #0
 8007516:	613b      	str	r3, [r7, #16]
 8007518:	e043      	b.n	80075a2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800752c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007530:	d118      	bne.n	8007564 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007544:	461a      	mov	r2, r3
 8007546:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	e013      	b.n	8007576 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800755a:	461a      	mov	r2, r3
 800755c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	e008      	b.n	8007576 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007570:	461a      	mov	r2, r3
 8007572:	2300      	movs	r3, #0
 8007574:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007582:	461a      	mov	r2, r3
 8007584:	2300      	movs	r3, #0
 8007586:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007594:	461a      	mov	r2, r3
 8007596:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800759a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	3301      	adds	r3, #1
 80075a0:	613b      	str	r3, [r7, #16]
 80075a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80075a6:	461a      	mov	r2, r3
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d3b5      	bcc.n	800751a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80075ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d105      	bne.n	80075e4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f043 0210 	orr.w	r2, r3, #16
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699a      	ldr	r2, [r3, #24]
 80075e8:	4b10      	ldr	r3, [pc, #64]	@ (800762c <USB_DevInit+0x2c4>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	f043 0208 	orr.w	r2, r3, #8
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007604:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007608:	2b01      	cmp	r3, #1
 800760a:	d107      	bne.n	800761c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007614:	f043 0304 	orr.w	r3, r3, #4
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007628:	b004      	add	sp, #16
 800762a:	4770      	bx	lr
 800762c:	803c3800 	.word	0x803c3800

08007630 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800764a:	d901      	bls.n	8007650 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e01b      	b.n	8007688 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	daf2      	bge.n	800763e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	019b      	lsls	r3, r3, #6
 8007660:	f043 0220 	orr.w	r2, r3, #32
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007674:	d901      	bls.n	800767a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e006      	b.n	8007688 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b20      	cmp	r3, #32
 8007684:	d0f0      	beq.n	8007668 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076ac:	d901      	bls.n	80076b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e018      	b.n	80076e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	daf2      	bge.n	80076a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2210      	movs	r2, #16
 80076c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3301      	adds	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076d0:	d901      	bls.n	80076d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e006      	b.n	80076e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0310 	and.w	r3, r3, #16
 80076de:	2b10      	cmp	r3, #16
 80076e0:	d0f0      	beq.n	80076c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	68f9      	ldr	r1, [r7, #12]
 800770c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007710:	4313      	orrs	r3, r2
 8007712:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007722:	b480      	push	{r7}
 8007724:	b087      	sub	sp, #28
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 0306 	and.w	r3, r3, #6
 800773a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]
 8007746:	e00a      	b.n	800775e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b02      	cmp	r3, #2
 800774c:	d002      	beq.n	8007754 <USB_GetDevSpeed+0x32>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b06      	cmp	r3, #6
 8007752:	d102      	bne.n	800775a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007754:	2302      	movs	r3, #2
 8007756:	75fb      	strb	r3, [r7, #23]
 8007758:	e001      	b.n	800775e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800775a:	230f      	movs	r3, #15
 800775c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007760:	4618      	mov	r0, r3
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	785b      	ldrb	r3, [r3, #1]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d14a      	bne.n	8007820 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800779e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077a2:	f040 8086 	bne.w	80078b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	7812      	ldrb	r2, [r2, #0]
 80077ba:	0151      	lsls	r1, r2, #5
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	440a      	add	r2, r1
 80077c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	7812      	ldrb	r2, [r2, #0]
 80077de:	0151      	lsls	r1, r2, #5
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	440a      	add	r2, r1
 80077e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d902      	bls.n	8007804 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]
          break;
 8007802:	e056      	b.n	80078b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800781c:	d0e7      	beq.n	80077ee <USB_EPStopXfer+0x82>
 800781e:	e048      	b.n	80078b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007834:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007838:	d13b      	bne.n	80078b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	7812      	ldrb	r2, [r2, #0]
 800784e:	0151      	lsls	r1, r2, #5
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	440a      	add	r2, r1
 8007854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007858:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800785c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	7812      	ldrb	r2, [r2, #0]
 8007872:	0151      	lsls	r1, r2, #5
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	440a      	add	r2, r1
 8007878:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800787c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007880:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3301      	adds	r3, #1
 8007886:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800788e:	4293      	cmp	r3, r2
 8007890:	d902      	bls.n	8007898 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	75fb      	strb	r3, [r7, #23]
          break;
 8007896:	e00c      	b.n	80078b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078b0:	d0e7      	beq.n	8007882 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b089      	sub	sp, #36	@ 0x24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	4611      	mov	r1, r2
 80078cc:	461a      	mov	r2, r3
 80078ce:	460b      	mov	r3, r1
 80078d0:	71fb      	strb	r3, [r7, #7]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80078de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d123      	bne.n	800792e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80078e6:	88bb      	ldrh	r3, [r7, #4]
 80078e8:	3303      	adds	r3, #3
 80078ea:	089b      	lsrs	r3, r3, #2
 80078ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078ee:	2300      	movs	r3, #0
 80078f0:	61bb      	str	r3, [r7, #24]
 80078f2:	e018      	b.n	8007926 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	031a      	lsls	r2, r3, #12
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007900:	461a      	mov	r2, r3
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	3301      	adds	r3, #1
 800790c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	3301      	adds	r3, #1
 8007912:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	3301      	adds	r3, #1
 8007918:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	3301      	adds	r3, #1
 800791e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	3301      	adds	r3, #1
 8007924:	61bb      	str	r3, [r7, #24]
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	429a      	cmp	r2, r3
 800792c:	d3e2      	bcc.n	80078f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3724      	adds	r7, #36	@ 0x24
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800793c:	b480      	push	{r7}
 800793e:	b08b      	sub	sp, #44	@ 0x2c
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	4613      	mov	r3, r2
 8007948:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	089b      	lsrs	r3, r3, #2
 8007956:	b29b      	uxth	r3, r3
 8007958:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800795a:	88fb      	ldrh	r3, [r7, #6]
 800795c:	f003 0303 	and.w	r3, r3, #3
 8007960:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007962:	2300      	movs	r3, #0
 8007964:	623b      	str	r3, [r7, #32]
 8007966:	e014      	b.n	8007992 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	601a      	str	r2, [r3, #0]
    pDest++;
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	3301      	adds	r3, #1
 8007978:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800797a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797c:	3301      	adds	r3, #1
 800797e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007982:	3301      	adds	r3, #1
 8007984:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007988:	3301      	adds	r3, #1
 800798a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	3301      	adds	r3, #1
 8007990:	623b      	str	r3, [r7, #32]
 8007992:	6a3a      	ldr	r2, [r7, #32]
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	429a      	cmp	r2, r3
 8007998:	d3e6      	bcc.n	8007968 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800799a:	8bfb      	ldrh	r3, [r7, #30]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d01e      	beq.n	80079de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079aa:	461a      	mov	r2, r3
 80079ac:	f107 0310 	add.w	r3, r7, #16
 80079b0:	6812      	ldr	r2, [r2, #0]
 80079b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	fa22 f303 	lsr.w	r3, r2, r3
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	701a      	strb	r2, [r3, #0]
      i++;
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	3301      	adds	r3, #1
 80079ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	3301      	adds	r3, #1
 80079d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80079d2:	8bfb      	ldrh	r3, [r7, #30]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80079d8:	8bfb      	ldrh	r3, [r7, #30]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1ea      	bne.n	80079b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	372c      	adds	r7, #44	@ 0x2c
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a1a:	f043 0302 	orr.w	r3, r3, #2
 8007a1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b085      	sub	sp, #20
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4013      	ands	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a46:	68fb      	ldr	r3, [r7, #12]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	4013      	ands	r3, r2
 8007a76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	0c1b      	lsrs	r3, r3, #16
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	b29b      	uxth	r3, r3
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007aea:	68bb      	ldr	r3, [r7, #8]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b1a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	f003 030f 	and.w	r3, r3, #15
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	fa22 f303 	lsr.w	r3, r2, r3
 8007b28:	01db      	lsls	r3, r3, #7
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	4013      	ands	r3, r2
 8007b44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b46:	68bb      	ldr	r3, [r7, #8]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	371c      	adds	r7, #28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	f003 0301 	and.w	r3, r3, #1
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b8a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007b8e:	f023 0307 	bic.w	r3, r3, #7
 8007b92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ba6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
	...

08007bb8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	333c      	adds	r3, #60	@ 0x3c
 8007bce:	3304      	adds	r3, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	4a26      	ldr	r2, [pc, #152]	@ (8007c70 <USB_EP0_OutStart+0xb8>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d90a      	bls.n	8007bf2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007be8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bec:	d101      	bne.n	8007bf2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e037      	b.n	8007c62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c20:	f043 0318 	orr.w	r3, r3, #24
 8007c24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c34:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007c38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d10f      	bne.n	8007c60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c46:	461a      	mov	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c5a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007c5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	4f54300a 	.word	0x4f54300a

08007c74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3301      	adds	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c8c:	d901      	bls.n	8007c92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e01b      	b.n	8007cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	daf2      	bge.n	8007c80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f043 0201 	orr.w	r2, r3, #1
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3301      	adds	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cb6:	d901      	bls.n	8007cbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e006      	b.n	8007cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d0f0      	beq.n	8007caa <USB_CoreReset+0x36>

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
	...

08007cd8 <std>:
 8007cd8:	2300      	movs	r3, #0
 8007cda:	b510      	push	{r4, lr}
 8007cdc:	4604      	mov	r4, r0
 8007cde:	e9c0 3300 	strd	r3, r3, [r0]
 8007ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ce6:	6083      	str	r3, [r0, #8]
 8007ce8:	8181      	strh	r1, [r0, #12]
 8007cea:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cec:	81c2      	strh	r2, [r0, #14]
 8007cee:	6183      	str	r3, [r0, #24]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	2208      	movs	r2, #8
 8007cf4:	305c      	adds	r0, #92	@ 0x5c
 8007cf6:	f000 f8c3 	bl	8007e80 <memset>
 8007cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8007d30 <std+0x58>)
 8007cfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8007d34 <std+0x5c>)
 8007d00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d02:	4b0d      	ldr	r3, [pc, #52]	@ (8007d38 <std+0x60>)
 8007d04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d06:	4b0d      	ldr	r3, [pc, #52]	@ (8007d3c <std+0x64>)
 8007d08:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d40 <std+0x68>)
 8007d0c:	6224      	str	r4, [r4, #32]
 8007d0e:	429c      	cmp	r4, r3
 8007d10:	d006      	beq.n	8007d20 <std+0x48>
 8007d12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d16:	4294      	cmp	r4, r2
 8007d18:	d002      	beq.n	8007d20 <std+0x48>
 8007d1a:	33d0      	adds	r3, #208	@ 0xd0
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	d105      	bne.n	8007d2c <std+0x54>
 8007d20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d28:	f000 b8dc 	b.w	8007ee4 <__retarget_lock_init_recursive>
 8007d2c:	bd10      	pop	{r4, pc}
 8007d2e:	bf00      	nop
 8007d30:	08008739 	.word	0x08008739
 8007d34:	0800875b 	.word	0x0800875b
 8007d38:	08008793 	.word	0x08008793
 8007d3c:	080087b7 	.word	0x080087b7
 8007d40:	20001488 	.word	0x20001488

08007d44 <stdio_exit_handler>:
 8007d44:	4a02      	ldr	r2, [pc, #8]	@ (8007d50 <stdio_exit_handler+0xc>)
 8007d46:	4903      	ldr	r1, [pc, #12]	@ (8007d54 <stdio_exit_handler+0x10>)
 8007d48:	4803      	ldr	r0, [pc, #12]	@ (8007d58 <stdio_exit_handler+0x14>)
 8007d4a:	f000 b869 	b.w	8007e20 <_fwalk_sglue>
 8007d4e:	bf00      	nop
 8007d50:	20000014 	.word	0x20000014
 8007d54:	080086d1 	.word	0x080086d1
 8007d58:	20000024 	.word	0x20000024

08007d5c <cleanup_stdio>:
 8007d5c:	6841      	ldr	r1, [r0, #4]
 8007d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d90 <cleanup_stdio+0x34>)
 8007d60:	4299      	cmp	r1, r3
 8007d62:	b510      	push	{r4, lr}
 8007d64:	4604      	mov	r4, r0
 8007d66:	d001      	beq.n	8007d6c <cleanup_stdio+0x10>
 8007d68:	f000 fcb2 	bl	80086d0 <_fflush_r>
 8007d6c:	68a1      	ldr	r1, [r4, #8]
 8007d6e:	4b09      	ldr	r3, [pc, #36]	@ (8007d94 <cleanup_stdio+0x38>)
 8007d70:	4299      	cmp	r1, r3
 8007d72:	d002      	beq.n	8007d7a <cleanup_stdio+0x1e>
 8007d74:	4620      	mov	r0, r4
 8007d76:	f000 fcab 	bl	80086d0 <_fflush_r>
 8007d7a:	68e1      	ldr	r1, [r4, #12]
 8007d7c:	4b06      	ldr	r3, [pc, #24]	@ (8007d98 <cleanup_stdio+0x3c>)
 8007d7e:	4299      	cmp	r1, r3
 8007d80:	d004      	beq.n	8007d8c <cleanup_stdio+0x30>
 8007d82:	4620      	mov	r0, r4
 8007d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d88:	f000 bca2 	b.w	80086d0 <_fflush_r>
 8007d8c:	bd10      	pop	{r4, pc}
 8007d8e:	bf00      	nop
 8007d90:	20001488 	.word	0x20001488
 8007d94:	200014f0 	.word	0x200014f0
 8007d98:	20001558 	.word	0x20001558

08007d9c <global_stdio_init.part.0>:
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8007dcc <global_stdio_init.part.0+0x30>)
 8007da0:	4c0b      	ldr	r4, [pc, #44]	@ (8007dd0 <global_stdio_init.part.0+0x34>)
 8007da2:	4a0c      	ldr	r2, [pc, #48]	@ (8007dd4 <global_stdio_init.part.0+0x38>)
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	4620      	mov	r0, r4
 8007da8:	2200      	movs	r2, #0
 8007daa:	2104      	movs	r1, #4
 8007dac:	f7ff ff94 	bl	8007cd8 <std>
 8007db0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007db4:	2201      	movs	r2, #1
 8007db6:	2109      	movs	r1, #9
 8007db8:	f7ff ff8e 	bl	8007cd8 <std>
 8007dbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc6:	2112      	movs	r1, #18
 8007dc8:	f7ff bf86 	b.w	8007cd8 <std>
 8007dcc:	200015c0 	.word	0x200015c0
 8007dd0:	20001488 	.word	0x20001488
 8007dd4:	08007d45 	.word	0x08007d45

08007dd8 <__sfp_lock_acquire>:
 8007dd8:	4801      	ldr	r0, [pc, #4]	@ (8007de0 <__sfp_lock_acquire+0x8>)
 8007dda:	f000 b884 	b.w	8007ee6 <__retarget_lock_acquire_recursive>
 8007dde:	bf00      	nop
 8007de0:	200015c5 	.word	0x200015c5

08007de4 <__sfp_lock_release>:
 8007de4:	4801      	ldr	r0, [pc, #4]	@ (8007dec <__sfp_lock_release+0x8>)
 8007de6:	f000 b87f 	b.w	8007ee8 <__retarget_lock_release_recursive>
 8007dea:	bf00      	nop
 8007dec:	200015c5 	.word	0x200015c5

08007df0 <__sinit>:
 8007df0:	b510      	push	{r4, lr}
 8007df2:	4604      	mov	r4, r0
 8007df4:	f7ff fff0 	bl	8007dd8 <__sfp_lock_acquire>
 8007df8:	6a23      	ldr	r3, [r4, #32]
 8007dfa:	b11b      	cbz	r3, 8007e04 <__sinit+0x14>
 8007dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e00:	f7ff bff0 	b.w	8007de4 <__sfp_lock_release>
 8007e04:	4b04      	ldr	r3, [pc, #16]	@ (8007e18 <__sinit+0x28>)
 8007e06:	6223      	str	r3, [r4, #32]
 8007e08:	4b04      	ldr	r3, [pc, #16]	@ (8007e1c <__sinit+0x2c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1f5      	bne.n	8007dfc <__sinit+0xc>
 8007e10:	f7ff ffc4 	bl	8007d9c <global_stdio_init.part.0>
 8007e14:	e7f2      	b.n	8007dfc <__sinit+0xc>
 8007e16:	bf00      	nop
 8007e18:	08007d5d 	.word	0x08007d5d
 8007e1c:	200015c0 	.word	0x200015c0

08007e20 <_fwalk_sglue>:
 8007e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e24:	4607      	mov	r7, r0
 8007e26:	4688      	mov	r8, r1
 8007e28:	4614      	mov	r4, r2
 8007e2a:	2600      	movs	r6, #0
 8007e2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e30:	f1b9 0901 	subs.w	r9, r9, #1
 8007e34:	d505      	bpl.n	8007e42 <_fwalk_sglue+0x22>
 8007e36:	6824      	ldr	r4, [r4, #0]
 8007e38:	2c00      	cmp	r4, #0
 8007e3a:	d1f7      	bne.n	8007e2c <_fwalk_sglue+0xc>
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e42:	89ab      	ldrh	r3, [r5, #12]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d907      	bls.n	8007e58 <_fwalk_sglue+0x38>
 8007e48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	d003      	beq.n	8007e58 <_fwalk_sglue+0x38>
 8007e50:	4629      	mov	r1, r5
 8007e52:	4638      	mov	r0, r7
 8007e54:	47c0      	blx	r8
 8007e56:	4306      	orrs	r6, r0
 8007e58:	3568      	adds	r5, #104	@ 0x68
 8007e5a:	e7e9      	b.n	8007e30 <_fwalk_sglue+0x10>

08007e5c <iprintf>:
 8007e5c:	b40f      	push	{r0, r1, r2, r3}
 8007e5e:	b507      	push	{r0, r1, r2, lr}
 8007e60:	4906      	ldr	r1, [pc, #24]	@ (8007e7c <iprintf+0x20>)
 8007e62:	ab04      	add	r3, sp, #16
 8007e64:	6808      	ldr	r0, [r1, #0]
 8007e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e6a:	6881      	ldr	r1, [r0, #8]
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	f000 f865 	bl	8007f3c <_vfiprintf_r>
 8007e72:	b003      	add	sp, #12
 8007e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e78:	b004      	add	sp, #16
 8007e7a:	4770      	bx	lr
 8007e7c:	20000020 	.word	0x20000020

08007e80 <memset>:
 8007e80:	4402      	add	r2, r0
 8007e82:	4603      	mov	r3, r0
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d100      	bne.n	8007e8a <memset+0xa>
 8007e88:	4770      	bx	lr
 8007e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e8e:	e7f9      	b.n	8007e84 <memset+0x4>

08007e90 <__errno>:
 8007e90:	4b01      	ldr	r3, [pc, #4]	@ (8007e98 <__errno+0x8>)
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	20000020 	.word	0x20000020

08007e9c <__libc_init_array>:
 8007e9c:	b570      	push	{r4, r5, r6, lr}
 8007e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007ed4 <__libc_init_array+0x38>)
 8007ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ed8 <__libc_init_array+0x3c>)
 8007ea2:	1b64      	subs	r4, r4, r5
 8007ea4:	10a4      	asrs	r4, r4, #2
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	42a6      	cmp	r6, r4
 8007eaa:	d109      	bne.n	8007ec0 <__libc_init_array+0x24>
 8007eac:	4d0b      	ldr	r5, [pc, #44]	@ (8007edc <__libc_init_array+0x40>)
 8007eae:	4c0c      	ldr	r4, [pc, #48]	@ (8007ee0 <__libc_init_array+0x44>)
 8007eb0:	f000 fe3e 	bl	8008b30 <_init>
 8007eb4:	1b64      	subs	r4, r4, r5
 8007eb6:	10a4      	asrs	r4, r4, #2
 8007eb8:	2600      	movs	r6, #0
 8007eba:	42a6      	cmp	r6, r4
 8007ebc:	d105      	bne.n	8007eca <__libc_init_array+0x2e>
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec4:	4798      	blx	r3
 8007ec6:	3601      	adds	r6, #1
 8007ec8:	e7ee      	b.n	8007ea8 <__libc_init_array+0xc>
 8007eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ece:	4798      	blx	r3
 8007ed0:	3601      	adds	r6, #1
 8007ed2:	e7f2      	b.n	8007eba <__libc_init_array+0x1e>
 8007ed4:	08008bb0 	.word	0x08008bb0
 8007ed8:	08008bb0 	.word	0x08008bb0
 8007edc:	08008bb0 	.word	0x08008bb0
 8007ee0:	08008bb4 	.word	0x08008bb4

08007ee4 <__retarget_lock_init_recursive>:
 8007ee4:	4770      	bx	lr

08007ee6 <__retarget_lock_acquire_recursive>:
 8007ee6:	4770      	bx	lr

08007ee8 <__retarget_lock_release_recursive>:
 8007ee8:	4770      	bx	lr

08007eea <__sfputc_r>:
 8007eea:	6893      	ldr	r3, [r2, #8]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	b410      	push	{r4}
 8007ef2:	6093      	str	r3, [r2, #8]
 8007ef4:	da08      	bge.n	8007f08 <__sfputc_r+0x1e>
 8007ef6:	6994      	ldr	r4, [r2, #24]
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	db01      	blt.n	8007f00 <__sfputc_r+0x16>
 8007efc:	290a      	cmp	r1, #10
 8007efe:	d103      	bne.n	8007f08 <__sfputc_r+0x1e>
 8007f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f04:	f000 bc5b 	b.w	80087be <__swbuf_r>
 8007f08:	6813      	ldr	r3, [r2, #0]
 8007f0a:	1c58      	adds	r0, r3, #1
 8007f0c:	6010      	str	r0, [r2, #0]
 8007f0e:	7019      	strb	r1, [r3, #0]
 8007f10:	4608      	mov	r0, r1
 8007f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <__sfputs_r>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	460f      	mov	r7, r1
 8007f1e:	4614      	mov	r4, r2
 8007f20:	18d5      	adds	r5, r2, r3
 8007f22:	42ac      	cmp	r4, r5
 8007f24:	d101      	bne.n	8007f2a <__sfputs_r+0x12>
 8007f26:	2000      	movs	r0, #0
 8007f28:	e007      	b.n	8007f3a <__sfputs_r+0x22>
 8007f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2e:	463a      	mov	r2, r7
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7ff ffda 	bl	8007eea <__sfputc_r>
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	d1f3      	bne.n	8007f22 <__sfputs_r+0xa>
 8007f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f3c <_vfiprintf_r>:
 8007f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f40:	460d      	mov	r5, r1
 8007f42:	b09d      	sub	sp, #116	@ 0x74
 8007f44:	4614      	mov	r4, r2
 8007f46:	4698      	mov	r8, r3
 8007f48:	4606      	mov	r6, r0
 8007f4a:	b118      	cbz	r0, 8007f54 <_vfiprintf_r+0x18>
 8007f4c:	6a03      	ldr	r3, [r0, #32]
 8007f4e:	b90b      	cbnz	r3, 8007f54 <_vfiprintf_r+0x18>
 8007f50:	f7ff ff4e 	bl	8007df0 <__sinit>
 8007f54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f56:	07d9      	lsls	r1, r3, #31
 8007f58:	d405      	bmi.n	8007f66 <_vfiprintf_r+0x2a>
 8007f5a:	89ab      	ldrh	r3, [r5, #12]
 8007f5c:	059a      	lsls	r2, r3, #22
 8007f5e:	d402      	bmi.n	8007f66 <_vfiprintf_r+0x2a>
 8007f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f62:	f7ff ffc0 	bl	8007ee6 <__retarget_lock_acquire_recursive>
 8007f66:	89ab      	ldrh	r3, [r5, #12]
 8007f68:	071b      	lsls	r3, r3, #28
 8007f6a:	d501      	bpl.n	8007f70 <_vfiprintf_r+0x34>
 8007f6c:	692b      	ldr	r3, [r5, #16]
 8007f6e:	b99b      	cbnz	r3, 8007f98 <_vfiprintf_r+0x5c>
 8007f70:	4629      	mov	r1, r5
 8007f72:	4630      	mov	r0, r6
 8007f74:	f000 fc62 	bl	800883c <__swsetup_r>
 8007f78:	b170      	cbz	r0, 8007f98 <_vfiprintf_r+0x5c>
 8007f7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f7c:	07dc      	lsls	r4, r3, #31
 8007f7e:	d504      	bpl.n	8007f8a <_vfiprintf_r+0x4e>
 8007f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f84:	b01d      	add	sp, #116	@ 0x74
 8007f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8a:	89ab      	ldrh	r3, [r5, #12]
 8007f8c:	0598      	lsls	r0, r3, #22
 8007f8e:	d4f7      	bmi.n	8007f80 <_vfiprintf_r+0x44>
 8007f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f92:	f7ff ffa9 	bl	8007ee8 <__retarget_lock_release_recursive>
 8007f96:	e7f3      	b.n	8007f80 <_vfiprintf_r+0x44>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f9c:	2320      	movs	r3, #32
 8007f9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fa6:	2330      	movs	r3, #48	@ 0x30
 8007fa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008158 <_vfiprintf_r+0x21c>
 8007fac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fb0:	f04f 0901 	mov.w	r9, #1
 8007fb4:	4623      	mov	r3, r4
 8007fb6:	469a      	mov	sl, r3
 8007fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fbc:	b10a      	cbz	r2, 8007fc2 <_vfiprintf_r+0x86>
 8007fbe:	2a25      	cmp	r2, #37	@ 0x25
 8007fc0:	d1f9      	bne.n	8007fb6 <_vfiprintf_r+0x7a>
 8007fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8007fc6:	d00b      	beq.n	8007fe0 <_vfiprintf_r+0xa4>
 8007fc8:	465b      	mov	r3, fp
 8007fca:	4622      	mov	r2, r4
 8007fcc:	4629      	mov	r1, r5
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f7ff ffa2 	bl	8007f18 <__sfputs_r>
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	f000 80a7 	beq.w	8008128 <_vfiprintf_r+0x1ec>
 8007fda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fdc:	445a      	add	r2, fp
 8007fde:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 809f 	beq.w	8008128 <_vfiprintf_r+0x1ec>
 8007fea:	2300      	movs	r3, #0
 8007fec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ff4:	f10a 0a01 	add.w	sl, sl, #1
 8007ff8:	9304      	str	r3, [sp, #16]
 8007ffa:	9307      	str	r3, [sp, #28]
 8007ffc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008000:	931a      	str	r3, [sp, #104]	@ 0x68
 8008002:	4654      	mov	r4, sl
 8008004:	2205      	movs	r2, #5
 8008006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800a:	4853      	ldr	r0, [pc, #332]	@ (8008158 <_vfiprintf_r+0x21c>)
 800800c:	f7f8 f8e0 	bl	80001d0 <memchr>
 8008010:	9a04      	ldr	r2, [sp, #16]
 8008012:	b9d8      	cbnz	r0, 800804c <_vfiprintf_r+0x110>
 8008014:	06d1      	lsls	r1, r2, #27
 8008016:	bf44      	itt	mi
 8008018:	2320      	movmi	r3, #32
 800801a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800801e:	0713      	lsls	r3, r2, #28
 8008020:	bf44      	itt	mi
 8008022:	232b      	movmi	r3, #43	@ 0x2b
 8008024:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008028:	f89a 3000 	ldrb.w	r3, [sl]
 800802c:	2b2a      	cmp	r3, #42	@ 0x2a
 800802e:	d015      	beq.n	800805c <_vfiprintf_r+0x120>
 8008030:	9a07      	ldr	r2, [sp, #28]
 8008032:	4654      	mov	r4, sl
 8008034:	2000      	movs	r0, #0
 8008036:	f04f 0c0a 	mov.w	ip, #10
 800803a:	4621      	mov	r1, r4
 800803c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008040:	3b30      	subs	r3, #48	@ 0x30
 8008042:	2b09      	cmp	r3, #9
 8008044:	d94b      	bls.n	80080de <_vfiprintf_r+0x1a2>
 8008046:	b1b0      	cbz	r0, 8008076 <_vfiprintf_r+0x13a>
 8008048:	9207      	str	r2, [sp, #28]
 800804a:	e014      	b.n	8008076 <_vfiprintf_r+0x13a>
 800804c:	eba0 0308 	sub.w	r3, r0, r8
 8008050:	fa09 f303 	lsl.w	r3, r9, r3
 8008054:	4313      	orrs	r3, r2
 8008056:	9304      	str	r3, [sp, #16]
 8008058:	46a2      	mov	sl, r4
 800805a:	e7d2      	b.n	8008002 <_vfiprintf_r+0xc6>
 800805c:	9b03      	ldr	r3, [sp, #12]
 800805e:	1d19      	adds	r1, r3, #4
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	9103      	str	r1, [sp, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	bfbb      	ittet	lt
 8008068:	425b      	neglt	r3, r3
 800806a:	f042 0202 	orrlt.w	r2, r2, #2
 800806e:	9307      	strge	r3, [sp, #28]
 8008070:	9307      	strlt	r3, [sp, #28]
 8008072:	bfb8      	it	lt
 8008074:	9204      	strlt	r2, [sp, #16]
 8008076:	7823      	ldrb	r3, [r4, #0]
 8008078:	2b2e      	cmp	r3, #46	@ 0x2e
 800807a:	d10a      	bne.n	8008092 <_vfiprintf_r+0x156>
 800807c:	7863      	ldrb	r3, [r4, #1]
 800807e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008080:	d132      	bne.n	80080e8 <_vfiprintf_r+0x1ac>
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	1d1a      	adds	r2, r3, #4
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	9203      	str	r2, [sp, #12]
 800808a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800808e:	3402      	adds	r4, #2
 8008090:	9305      	str	r3, [sp, #20]
 8008092:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008168 <_vfiprintf_r+0x22c>
 8008096:	7821      	ldrb	r1, [r4, #0]
 8008098:	2203      	movs	r2, #3
 800809a:	4650      	mov	r0, sl
 800809c:	f7f8 f898 	bl	80001d0 <memchr>
 80080a0:	b138      	cbz	r0, 80080b2 <_vfiprintf_r+0x176>
 80080a2:	9b04      	ldr	r3, [sp, #16]
 80080a4:	eba0 000a 	sub.w	r0, r0, sl
 80080a8:	2240      	movs	r2, #64	@ 0x40
 80080aa:	4082      	lsls	r2, r0
 80080ac:	4313      	orrs	r3, r2
 80080ae:	3401      	adds	r4, #1
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b6:	4829      	ldr	r0, [pc, #164]	@ (800815c <_vfiprintf_r+0x220>)
 80080b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080bc:	2206      	movs	r2, #6
 80080be:	f7f8 f887 	bl	80001d0 <memchr>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d03f      	beq.n	8008146 <_vfiprintf_r+0x20a>
 80080c6:	4b26      	ldr	r3, [pc, #152]	@ (8008160 <_vfiprintf_r+0x224>)
 80080c8:	bb1b      	cbnz	r3, 8008112 <_vfiprintf_r+0x1d6>
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	3307      	adds	r3, #7
 80080ce:	f023 0307 	bic.w	r3, r3, #7
 80080d2:	3308      	adds	r3, #8
 80080d4:	9303      	str	r3, [sp, #12]
 80080d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d8:	443b      	add	r3, r7
 80080da:	9309      	str	r3, [sp, #36]	@ 0x24
 80080dc:	e76a      	b.n	8007fb4 <_vfiprintf_r+0x78>
 80080de:	fb0c 3202 	mla	r2, ip, r2, r3
 80080e2:	460c      	mov	r4, r1
 80080e4:	2001      	movs	r0, #1
 80080e6:	e7a8      	b.n	800803a <_vfiprintf_r+0xfe>
 80080e8:	2300      	movs	r3, #0
 80080ea:	3401      	adds	r4, #1
 80080ec:	9305      	str	r3, [sp, #20]
 80080ee:	4619      	mov	r1, r3
 80080f0:	f04f 0c0a 	mov.w	ip, #10
 80080f4:	4620      	mov	r0, r4
 80080f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080fa:	3a30      	subs	r2, #48	@ 0x30
 80080fc:	2a09      	cmp	r2, #9
 80080fe:	d903      	bls.n	8008108 <_vfiprintf_r+0x1cc>
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0c6      	beq.n	8008092 <_vfiprintf_r+0x156>
 8008104:	9105      	str	r1, [sp, #20]
 8008106:	e7c4      	b.n	8008092 <_vfiprintf_r+0x156>
 8008108:	fb0c 2101 	mla	r1, ip, r1, r2
 800810c:	4604      	mov	r4, r0
 800810e:	2301      	movs	r3, #1
 8008110:	e7f0      	b.n	80080f4 <_vfiprintf_r+0x1b8>
 8008112:	ab03      	add	r3, sp, #12
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	462a      	mov	r2, r5
 8008118:	4b12      	ldr	r3, [pc, #72]	@ (8008164 <_vfiprintf_r+0x228>)
 800811a:	a904      	add	r1, sp, #16
 800811c:	4630      	mov	r0, r6
 800811e:	f3af 8000 	nop.w
 8008122:	4607      	mov	r7, r0
 8008124:	1c78      	adds	r0, r7, #1
 8008126:	d1d6      	bne.n	80080d6 <_vfiprintf_r+0x19a>
 8008128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800812a:	07d9      	lsls	r1, r3, #31
 800812c:	d405      	bmi.n	800813a <_vfiprintf_r+0x1fe>
 800812e:	89ab      	ldrh	r3, [r5, #12]
 8008130:	059a      	lsls	r2, r3, #22
 8008132:	d402      	bmi.n	800813a <_vfiprintf_r+0x1fe>
 8008134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008136:	f7ff fed7 	bl	8007ee8 <__retarget_lock_release_recursive>
 800813a:	89ab      	ldrh	r3, [r5, #12]
 800813c:	065b      	lsls	r3, r3, #25
 800813e:	f53f af1f 	bmi.w	8007f80 <_vfiprintf_r+0x44>
 8008142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008144:	e71e      	b.n	8007f84 <_vfiprintf_r+0x48>
 8008146:	ab03      	add	r3, sp, #12
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	462a      	mov	r2, r5
 800814c:	4b05      	ldr	r3, [pc, #20]	@ (8008164 <_vfiprintf_r+0x228>)
 800814e:	a904      	add	r1, sp, #16
 8008150:	4630      	mov	r0, r6
 8008152:	f000 f91b 	bl	800838c <_printf_i>
 8008156:	e7e4      	b.n	8008122 <_vfiprintf_r+0x1e6>
 8008158:	08008b74 	.word	0x08008b74
 800815c:	08008b7e 	.word	0x08008b7e
 8008160:	00000000 	.word	0x00000000
 8008164:	08007f19 	.word	0x08007f19
 8008168:	08008b7a 	.word	0x08008b7a

0800816c <sbrk_aligned>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	4e0f      	ldr	r6, [pc, #60]	@ (80081ac <sbrk_aligned+0x40>)
 8008170:	460c      	mov	r4, r1
 8008172:	6831      	ldr	r1, [r6, #0]
 8008174:	4605      	mov	r5, r0
 8008176:	b911      	cbnz	r1, 800817e <sbrk_aligned+0x12>
 8008178:	f000 fc4c 	bl	8008a14 <_sbrk_r>
 800817c:	6030      	str	r0, [r6, #0]
 800817e:	4621      	mov	r1, r4
 8008180:	4628      	mov	r0, r5
 8008182:	f000 fc47 	bl	8008a14 <_sbrk_r>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	d103      	bne.n	8008192 <sbrk_aligned+0x26>
 800818a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800818e:	4620      	mov	r0, r4
 8008190:	bd70      	pop	{r4, r5, r6, pc}
 8008192:	1cc4      	adds	r4, r0, #3
 8008194:	f024 0403 	bic.w	r4, r4, #3
 8008198:	42a0      	cmp	r0, r4
 800819a:	d0f8      	beq.n	800818e <sbrk_aligned+0x22>
 800819c:	1a21      	subs	r1, r4, r0
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 fc38 	bl	8008a14 <_sbrk_r>
 80081a4:	3001      	adds	r0, #1
 80081a6:	d1f2      	bne.n	800818e <sbrk_aligned+0x22>
 80081a8:	e7ef      	b.n	800818a <sbrk_aligned+0x1e>
 80081aa:	bf00      	nop
 80081ac:	200015c8 	.word	0x200015c8

080081b0 <_malloc_r>:
 80081b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b4:	1ccd      	adds	r5, r1, #3
 80081b6:	f025 0503 	bic.w	r5, r5, #3
 80081ba:	3508      	adds	r5, #8
 80081bc:	2d0c      	cmp	r5, #12
 80081be:	bf38      	it	cc
 80081c0:	250c      	movcc	r5, #12
 80081c2:	2d00      	cmp	r5, #0
 80081c4:	4606      	mov	r6, r0
 80081c6:	db01      	blt.n	80081cc <_malloc_r+0x1c>
 80081c8:	42a9      	cmp	r1, r5
 80081ca:	d904      	bls.n	80081d6 <_malloc_r+0x26>
 80081cc:	230c      	movs	r3, #12
 80081ce:	6033      	str	r3, [r6, #0]
 80081d0:	2000      	movs	r0, #0
 80081d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082ac <_malloc_r+0xfc>
 80081da:	f000 faa1 	bl	8008720 <__malloc_lock>
 80081de:	f8d8 3000 	ldr.w	r3, [r8]
 80081e2:	461c      	mov	r4, r3
 80081e4:	bb44      	cbnz	r4, 8008238 <_malloc_r+0x88>
 80081e6:	4629      	mov	r1, r5
 80081e8:	4630      	mov	r0, r6
 80081ea:	f7ff ffbf 	bl	800816c <sbrk_aligned>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	4604      	mov	r4, r0
 80081f2:	d158      	bne.n	80082a6 <_malloc_r+0xf6>
 80081f4:	f8d8 4000 	ldr.w	r4, [r8]
 80081f8:	4627      	mov	r7, r4
 80081fa:	2f00      	cmp	r7, #0
 80081fc:	d143      	bne.n	8008286 <_malloc_r+0xd6>
 80081fe:	2c00      	cmp	r4, #0
 8008200:	d04b      	beq.n	800829a <_malloc_r+0xea>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	4639      	mov	r1, r7
 8008206:	4630      	mov	r0, r6
 8008208:	eb04 0903 	add.w	r9, r4, r3
 800820c:	f000 fc02 	bl	8008a14 <_sbrk_r>
 8008210:	4581      	cmp	r9, r0
 8008212:	d142      	bne.n	800829a <_malloc_r+0xea>
 8008214:	6821      	ldr	r1, [r4, #0]
 8008216:	1a6d      	subs	r5, r5, r1
 8008218:	4629      	mov	r1, r5
 800821a:	4630      	mov	r0, r6
 800821c:	f7ff ffa6 	bl	800816c <sbrk_aligned>
 8008220:	3001      	adds	r0, #1
 8008222:	d03a      	beq.n	800829a <_malloc_r+0xea>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	442b      	add	r3, r5
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	f8d8 3000 	ldr.w	r3, [r8]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	bb62      	cbnz	r2, 800828c <_malloc_r+0xdc>
 8008232:	f8c8 7000 	str.w	r7, [r8]
 8008236:	e00f      	b.n	8008258 <_malloc_r+0xa8>
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	1b52      	subs	r2, r2, r5
 800823c:	d420      	bmi.n	8008280 <_malloc_r+0xd0>
 800823e:	2a0b      	cmp	r2, #11
 8008240:	d917      	bls.n	8008272 <_malloc_r+0xc2>
 8008242:	1961      	adds	r1, r4, r5
 8008244:	42a3      	cmp	r3, r4
 8008246:	6025      	str	r5, [r4, #0]
 8008248:	bf18      	it	ne
 800824a:	6059      	strne	r1, [r3, #4]
 800824c:	6863      	ldr	r3, [r4, #4]
 800824e:	bf08      	it	eq
 8008250:	f8c8 1000 	streq.w	r1, [r8]
 8008254:	5162      	str	r2, [r4, r5]
 8008256:	604b      	str	r3, [r1, #4]
 8008258:	4630      	mov	r0, r6
 800825a:	f000 fa67 	bl	800872c <__malloc_unlock>
 800825e:	f104 000b 	add.w	r0, r4, #11
 8008262:	1d23      	adds	r3, r4, #4
 8008264:	f020 0007 	bic.w	r0, r0, #7
 8008268:	1ac2      	subs	r2, r0, r3
 800826a:	bf1c      	itt	ne
 800826c:	1a1b      	subne	r3, r3, r0
 800826e:	50a3      	strne	r3, [r4, r2]
 8008270:	e7af      	b.n	80081d2 <_malloc_r+0x22>
 8008272:	6862      	ldr	r2, [r4, #4]
 8008274:	42a3      	cmp	r3, r4
 8008276:	bf0c      	ite	eq
 8008278:	f8c8 2000 	streq.w	r2, [r8]
 800827c:	605a      	strne	r2, [r3, #4]
 800827e:	e7eb      	b.n	8008258 <_malloc_r+0xa8>
 8008280:	4623      	mov	r3, r4
 8008282:	6864      	ldr	r4, [r4, #4]
 8008284:	e7ae      	b.n	80081e4 <_malloc_r+0x34>
 8008286:	463c      	mov	r4, r7
 8008288:	687f      	ldr	r7, [r7, #4]
 800828a:	e7b6      	b.n	80081fa <_malloc_r+0x4a>
 800828c:	461a      	mov	r2, r3
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	42a3      	cmp	r3, r4
 8008292:	d1fb      	bne.n	800828c <_malloc_r+0xdc>
 8008294:	2300      	movs	r3, #0
 8008296:	6053      	str	r3, [r2, #4]
 8008298:	e7de      	b.n	8008258 <_malloc_r+0xa8>
 800829a:	230c      	movs	r3, #12
 800829c:	6033      	str	r3, [r6, #0]
 800829e:	4630      	mov	r0, r6
 80082a0:	f000 fa44 	bl	800872c <__malloc_unlock>
 80082a4:	e794      	b.n	80081d0 <_malloc_r+0x20>
 80082a6:	6005      	str	r5, [r0, #0]
 80082a8:	e7d6      	b.n	8008258 <_malloc_r+0xa8>
 80082aa:	bf00      	nop
 80082ac:	200015cc 	.word	0x200015cc

080082b0 <_printf_common>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	4616      	mov	r6, r2
 80082b6:	4698      	mov	r8, r3
 80082b8:	688a      	ldr	r2, [r1, #8]
 80082ba:	690b      	ldr	r3, [r1, #16]
 80082bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082c0:	4293      	cmp	r3, r2
 80082c2:	bfb8      	it	lt
 80082c4:	4613      	movlt	r3, r2
 80082c6:	6033      	str	r3, [r6, #0]
 80082c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082cc:	4607      	mov	r7, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	b10a      	cbz	r2, 80082d6 <_printf_common+0x26>
 80082d2:	3301      	adds	r3, #1
 80082d4:	6033      	str	r3, [r6, #0]
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	0699      	lsls	r1, r3, #26
 80082da:	bf42      	ittt	mi
 80082dc:	6833      	ldrmi	r3, [r6, #0]
 80082de:	3302      	addmi	r3, #2
 80082e0:	6033      	strmi	r3, [r6, #0]
 80082e2:	6825      	ldr	r5, [r4, #0]
 80082e4:	f015 0506 	ands.w	r5, r5, #6
 80082e8:	d106      	bne.n	80082f8 <_printf_common+0x48>
 80082ea:	f104 0a19 	add.w	sl, r4, #25
 80082ee:	68e3      	ldr	r3, [r4, #12]
 80082f0:	6832      	ldr	r2, [r6, #0]
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	42ab      	cmp	r3, r5
 80082f6:	dc26      	bgt.n	8008346 <_printf_common+0x96>
 80082f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082fc:	6822      	ldr	r2, [r4, #0]
 80082fe:	3b00      	subs	r3, #0
 8008300:	bf18      	it	ne
 8008302:	2301      	movne	r3, #1
 8008304:	0692      	lsls	r2, r2, #26
 8008306:	d42b      	bmi.n	8008360 <_printf_common+0xb0>
 8008308:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800830c:	4641      	mov	r1, r8
 800830e:	4638      	mov	r0, r7
 8008310:	47c8      	blx	r9
 8008312:	3001      	adds	r0, #1
 8008314:	d01e      	beq.n	8008354 <_printf_common+0xa4>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	6922      	ldr	r2, [r4, #16]
 800831a:	f003 0306 	and.w	r3, r3, #6
 800831e:	2b04      	cmp	r3, #4
 8008320:	bf02      	ittt	eq
 8008322:	68e5      	ldreq	r5, [r4, #12]
 8008324:	6833      	ldreq	r3, [r6, #0]
 8008326:	1aed      	subeq	r5, r5, r3
 8008328:	68a3      	ldr	r3, [r4, #8]
 800832a:	bf0c      	ite	eq
 800832c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008330:	2500      	movne	r5, #0
 8008332:	4293      	cmp	r3, r2
 8008334:	bfc4      	itt	gt
 8008336:	1a9b      	subgt	r3, r3, r2
 8008338:	18ed      	addgt	r5, r5, r3
 800833a:	2600      	movs	r6, #0
 800833c:	341a      	adds	r4, #26
 800833e:	42b5      	cmp	r5, r6
 8008340:	d11a      	bne.n	8008378 <_printf_common+0xc8>
 8008342:	2000      	movs	r0, #0
 8008344:	e008      	b.n	8008358 <_printf_common+0xa8>
 8008346:	2301      	movs	r3, #1
 8008348:	4652      	mov	r2, sl
 800834a:	4641      	mov	r1, r8
 800834c:	4638      	mov	r0, r7
 800834e:	47c8      	blx	r9
 8008350:	3001      	adds	r0, #1
 8008352:	d103      	bne.n	800835c <_printf_common+0xac>
 8008354:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835c:	3501      	adds	r5, #1
 800835e:	e7c6      	b.n	80082ee <_printf_common+0x3e>
 8008360:	18e1      	adds	r1, r4, r3
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	2030      	movs	r0, #48	@ 0x30
 8008366:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800836a:	4422      	add	r2, r4
 800836c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008370:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008374:	3302      	adds	r3, #2
 8008376:	e7c7      	b.n	8008308 <_printf_common+0x58>
 8008378:	2301      	movs	r3, #1
 800837a:	4622      	mov	r2, r4
 800837c:	4641      	mov	r1, r8
 800837e:	4638      	mov	r0, r7
 8008380:	47c8      	blx	r9
 8008382:	3001      	adds	r0, #1
 8008384:	d0e6      	beq.n	8008354 <_printf_common+0xa4>
 8008386:	3601      	adds	r6, #1
 8008388:	e7d9      	b.n	800833e <_printf_common+0x8e>
	...

0800838c <_printf_i>:
 800838c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	7e0f      	ldrb	r7, [r1, #24]
 8008392:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008394:	2f78      	cmp	r7, #120	@ 0x78
 8008396:	4691      	mov	r9, r2
 8008398:	4680      	mov	r8, r0
 800839a:	460c      	mov	r4, r1
 800839c:	469a      	mov	sl, r3
 800839e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083a2:	d807      	bhi.n	80083b4 <_printf_i+0x28>
 80083a4:	2f62      	cmp	r7, #98	@ 0x62
 80083a6:	d80a      	bhi.n	80083be <_printf_i+0x32>
 80083a8:	2f00      	cmp	r7, #0
 80083aa:	f000 80d1 	beq.w	8008550 <_printf_i+0x1c4>
 80083ae:	2f58      	cmp	r7, #88	@ 0x58
 80083b0:	f000 80b8 	beq.w	8008524 <_printf_i+0x198>
 80083b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083bc:	e03a      	b.n	8008434 <_printf_i+0xa8>
 80083be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083c2:	2b15      	cmp	r3, #21
 80083c4:	d8f6      	bhi.n	80083b4 <_printf_i+0x28>
 80083c6:	a101      	add	r1, pc, #4	@ (adr r1, 80083cc <_printf_i+0x40>)
 80083c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083cc:	08008425 	.word	0x08008425
 80083d0:	08008439 	.word	0x08008439
 80083d4:	080083b5 	.word	0x080083b5
 80083d8:	080083b5 	.word	0x080083b5
 80083dc:	080083b5 	.word	0x080083b5
 80083e0:	080083b5 	.word	0x080083b5
 80083e4:	08008439 	.word	0x08008439
 80083e8:	080083b5 	.word	0x080083b5
 80083ec:	080083b5 	.word	0x080083b5
 80083f0:	080083b5 	.word	0x080083b5
 80083f4:	080083b5 	.word	0x080083b5
 80083f8:	08008537 	.word	0x08008537
 80083fc:	08008463 	.word	0x08008463
 8008400:	080084f1 	.word	0x080084f1
 8008404:	080083b5 	.word	0x080083b5
 8008408:	080083b5 	.word	0x080083b5
 800840c:	08008559 	.word	0x08008559
 8008410:	080083b5 	.word	0x080083b5
 8008414:	08008463 	.word	0x08008463
 8008418:	080083b5 	.word	0x080083b5
 800841c:	080083b5 	.word	0x080083b5
 8008420:	080084f9 	.word	0x080084f9
 8008424:	6833      	ldr	r3, [r6, #0]
 8008426:	1d1a      	adds	r2, r3, #4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6032      	str	r2, [r6, #0]
 800842c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008430:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008434:	2301      	movs	r3, #1
 8008436:	e09c      	b.n	8008572 <_printf_i+0x1e6>
 8008438:	6833      	ldr	r3, [r6, #0]
 800843a:	6820      	ldr	r0, [r4, #0]
 800843c:	1d19      	adds	r1, r3, #4
 800843e:	6031      	str	r1, [r6, #0]
 8008440:	0606      	lsls	r6, r0, #24
 8008442:	d501      	bpl.n	8008448 <_printf_i+0xbc>
 8008444:	681d      	ldr	r5, [r3, #0]
 8008446:	e003      	b.n	8008450 <_printf_i+0xc4>
 8008448:	0645      	lsls	r5, r0, #25
 800844a:	d5fb      	bpl.n	8008444 <_printf_i+0xb8>
 800844c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008450:	2d00      	cmp	r5, #0
 8008452:	da03      	bge.n	800845c <_printf_i+0xd0>
 8008454:	232d      	movs	r3, #45	@ 0x2d
 8008456:	426d      	negs	r5, r5
 8008458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800845c:	4858      	ldr	r0, [pc, #352]	@ (80085c0 <_printf_i+0x234>)
 800845e:	230a      	movs	r3, #10
 8008460:	e011      	b.n	8008486 <_printf_i+0xfa>
 8008462:	6821      	ldr	r1, [r4, #0]
 8008464:	6833      	ldr	r3, [r6, #0]
 8008466:	0608      	lsls	r0, r1, #24
 8008468:	f853 5b04 	ldr.w	r5, [r3], #4
 800846c:	d402      	bmi.n	8008474 <_printf_i+0xe8>
 800846e:	0649      	lsls	r1, r1, #25
 8008470:	bf48      	it	mi
 8008472:	b2ad      	uxthmi	r5, r5
 8008474:	2f6f      	cmp	r7, #111	@ 0x6f
 8008476:	4852      	ldr	r0, [pc, #328]	@ (80085c0 <_printf_i+0x234>)
 8008478:	6033      	str	r3, [r6, #0]
 800847a:	bf14      	ite	ne
 800847c:	230a      	movne	r3, #10
 800847e:	2308      	moveq	r3, #8
 8008480:	2100      	movs	r1, #0
 8008482:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008486:	6866      	ldr	r6, [r4, #4]
 8008488:	60a6      	str	r6, [r4, #8]
 800848a:	2e00      	cmp	r6, #0
 800848c:	db05      	blt.n	800849a <_printf_i+0x10e>
 800848e:	6821      	ldr	r1, [r4, #0]
 8008490:	432e      	orrs	r6, r5
 8008492:	f021 0104 	bic.w	r1, r1, #4
 8008496:	6021      	str	r1, [r4, #0]
 8008498:	d04b      	beq.n	8008532 <_printf_i+0x1a6>
 800849a:	4616      	mov	r6, r2
 800849c:	fbb5 f1f3 	udiv	r1, r5, r3
 80084a0:	fb03 5711 	mls	r7, r3, r1, r5
 80084a4:	5dc7      	ldrb	r7, [r0, r7]
 80084a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084aa:	462f      	mov	r7, r5
 80084ac:	42bb      	cmp	r3, r7
 80084ae:	460d      	mov	r5, r1
 80084b0:	d9f4      	bls.n	800849c <_printf_i+0x110>
 80084b2:	2b08      	cmp	r3, #8
 80084b4:	d10b      	bne.n	80084ce <_printf_i+0x142>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	07df      	lsls	r7, r3, #31
 80084ba:	d508      	bpl.n	80084ce <_printf_i+0x142>
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	6861      	ldr	r1, [r4, #4]
 80084c0:	4299      	cmp	r1, r3
 80084c2:	bfde      	ittt	le
 80084c4:	2330      	movle	r3, #48	@ 0x30
 80084c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084ca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80084ce:	1b92      	subs	r2, r2, r6
 80084d0:	6122      	str	r2, [r4, #16]
 80084d2:	f8cd a000 	str.w	sl, [sp]
 80084d6:	464b      	mov	r3, r9
 80084d8:	aa03      	add	r2, sp, #12
 80084da:	4621      	mov	r1, r4
 80084dc:	4640      	mov	r0, r8
 80084de:	f7ff fee7 	bl	80082b0 <_printf_common>
 80084e2:	3001      	adds	r0, #1
 80084e4:	d14a      	bne.n	800857c <_printf_i+0x1f0>
 80084e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084ea:	b004      	add	sp, #16
 80084ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	f043 0320 	orr.w	r3, r3, #32
 80084f6:	6023      	str	r3, [r4, #0]
 80084f8:	4832      	ldr	r0, [pc, #200]	@ (80085c4 <_printf_i+0x238>)
 80084fa:	2778      	movs	r7, #120	@ 0x78
 80084fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	6831      	ldr	r1, [r6, #0]
 8008504:	061f      	lsls	r7, r3, #24
 8008506:	f851 5b04 	ldr.w	r5, [r1], #4
 800850a:	d402      	bmi.n	8008512 <_printf_i+0x186>
 800850c:	065f      	lsls	r7, r3, #25
 800850e:	bf48      	it	mi
 8008510:	b2ad      	uxthmi	r5, r5
 8008512:	6031      	str	r1, [r6, #0]
 8008514:	07d9      	lsls	r1, r3, #31
 8008516:	bf44      	itt	mi
 8008518:	f043 0320 	orrmi.w	r3, r3, #32
 800851c:	6023      	strmi	r3, [r4, #0]
 800851e:	b11d      	cbz	r5, 8008528 <_printf_i+0x19c>
 8008520:	2310      	movs	r3, #16
 8008522:	e7ad      	b.n	8008480 <_printf_i+0xf4>
 8008524:	4826      	ldr	r0, [pc, #152]	@ (80085c0 <_printf_i+0x234>)
 8008526:	e7e9      	b.n	80084fc <_printf_i+0x170>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	f023 0320 	bic.w	r3, r3, #32
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	e7f6      	b.n	8008520 <_printf_i+0x194>
 8008532:	4616      	mov	r6, r2
 8008534:	e7bd      	b.n	80084b2 <_printf_i+0x126>
 8008536:	6833      	ldr	r3, [r6, #0]
 8008538:	6825      	ldr	r5, [r4, #0]
 800853a:	6961      	ldr	r1, [r4, #20]
 800853c:	1d18      	adds	r0, r3, #4
 800853e:	6030      	str	r0, [r6, #0]
 8008540:	062e      	lsls	r6, r5, #24
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	d501      	bpl.n	800854a <_printf_i+0x1be>
 8008546:	6019      	str	r1, [r3, #0]
 8008548:	e002      	b.n	8008550 <_printf_i+0x1c4>
 800854a:	0668      	lsls	r0, r5, #25
 800854c:	d5fb      	bpl.n	8008546 <_printf_i+0x1ba>
 800854e:	8019      	strh	r1, [r3, #0]
 8008550:	2300      	movs	r3, #0
 8008552:	6123      	str	r3, [r4, #16]
 8008554:	4616      	mov	r6, r2
 8008556:	e7bc      	b.n	80084d2 <_printf_i+0x146>
 8008558:	6833      	ldr	r3, [r6, #0]
 800855a:	1d1a      	adds	r2, r3, #4
 800855c:	6032      	str	r2, [r6, #0]
 800855e:	681e      	ldr	r6, [r3, #0]
 8008560:	6862      	ldr	r2, [r4, #4]
 8008562:	2100      	movs	r1, #0
 8008564:	4630      	mov	r0, r6
 8008566:	f7f7 fe33 	bl	80001d0 <memchr>
 800856a:	b108      	cbz	r0, 8008570 <_printf_i+0x1e4>
 800856c:	1b80      	subs	r0, r0, r6
 800856e:	6060      	str	r0, [r4, #4]
 8008570:	6863      	ldr	r3, [r4, #4]
 8008572:	6123      	str	r3, [r4, #16]
 8008574:	2300      	movs	r3, #0
 8008576:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800857a:	e7aa      	b.n	80084d2 <_printf_i+0x146>
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	4632      	mov	r2, r6
 8008580:	4649      	mov	r1, r9
 8008582:	4640      	mov	r0, r8
 8008584:	47d0      	blx	sl
 8008586:	3001      	adds	r0, #1
 8008588:	d0ad      	beq.n	80084e6 <_printf_i+0x15a>
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	079b      	lsls	r3, r3, #30
 800858e:	d413      	bmi.n	80085b8 <_printf_i+0x22c>
 8008590:	68e0      	ldr	r0, [r4, #12]
 8008592:	9b03      	ldr	r3, [sp, #12]
 8008594:	4298      	cmp	r0, r3
 8008596:	bfb8      	it	lt
 8008598:	4618      	movlt	r0, r3
 800859a:	e7a6      	b.n	80084ea <_printf_i+0x15e>
 800859c:	2301      	movs	r3, #1
 800859e:	4632      	mov	r2, r6
 80085a0:	4649      	mov	r1, r9
 80085a2:	4640      	mov	r0, r8
 80085a4:	47d0      	blx	sl
 80085a6:	3001      	adds	r0, #1
 80085a8:	d09d      	beq.n	80084e6 <_printf_i+0x15a>
 80085aa:	3501      	adds	r5, #1
 80085ac:	68e3      	ldr	r3, [r4, #12]
 80085ae:	9903      	ldr	r1, [sp, #12]
 80085b0:	1a5b      	subs	r3, r3, r1
 80085b2:	42ab      	cmp	r3, r5
 80085b4:	dcf2      	bgt.n	800859c <_printf_i+0x210>
 80085b6:	e7eb      	b.n	8008590 <_printf_i+0x204>
 80085b8:	2500      	movs	r5, #0
 80085ba:	f104 0619 	add.w	r6, r4, #25
 80085be:	e7f5      	b.n	80085ac <_printf_i+0x220>
 80085c0:	08008b85 	.word	0x08008b85
 80085c4:	08008b96 	.word	0x08008b96

080085c8 <__sflush_r>:
 80085c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d0:	0716      	lsls	r6, r2, #28
 80085d2:	4605      	mov	r5, r0
 80085d4:	460c      	mov	r4, r1
 80085d6:	d454      	bmi.n	8008682 <__sflush_r+0xba>
 80085d8:	684b      	ldr	r3, [r1, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	dc02      	bgt.n	80085e4 <__sflush_r+0x1c>
 80085de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	dd48      	ble.n	8008676 <__sflush_r+0xae>
 80085e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085e6:	2e00      	cmp	r6, #0
 80085e8:	d045      	beq.n	8008676 <__sflush_r+0xae>
 80085ea:	2300      	movs	r3, #0
 80085ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085f0:	682f      	ldr	r7, [r5, #0]
 80085f2:	6a21      	ldr	r1, [r4, #32]
 80085f4:	602b      	str	r3, [r5, #0]
 80085f6:	d030      	beq.n	800865a <__sflush_r+0x92>
 80085f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	0759      	lsls	r1, r3, #29
 80085fe:	d505      	bpl.n	800860c <__sflush_r+0x44>
 8008600:	6863      	ldr	r3, [r4, #4]
 8008602:	1ad2      	subs	r2, r2, r3
 8008604:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008606:	b10b      	cbz	r3, 800860c <__sflush_r+0x44>
 8008608:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800860a:	1ad2      	subs	r2, r2, r3
 800860c:	2300      	movs	r3, #0
 800860e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008610:	6a21      	ldr	r1, [r4, #32]
 8008612:	4628      	mov	r0, r5
 8008614:	47b0      	blx	r6
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	d106      	bne.n	800862a <__sflush_r+0x62>
 800861c:	6829      	ldr	r1, [r5, #0]
 800861e:	291d      	cmp	r1, #29
 8008620:	d82b      	bhi.n	800867a <__sflush_r+0xb2>
 8008622:	4a2a      	ldr	r2, [pc, #168]	@ (80086cc <__sflush_r+0x104>)
 8008624:	40ca      	lsrs	r2, r1
 8008626:	07d6      	lsls	r6, r2, #31
 8008628:	d527      	bpl.n	800867a <__sflush_r+0xb2>
 800862a:	2200      	movs	r2, #0
 800862c:	6062      	str	r2, [r4, #4]
 800862e:	04d9      	lsls	r1, r3, #19
 8008630:	6922      	ldr	r2, [r4, #16]
 8008632:	6022      	str	r2, [r4, #0]
 8008634:	d504      	bpl.n	8008640 <__sflush_r+0x78>
 8008636:	1c42      	adds	r2, r0, #1
 8008638:	d101      	bne.n	800863e <__sflush_r+0x76>
 800863a:	682b      	ldr	r3, [r5, #0]
 800863c:	b903      	cbnz	r3, 8008640 <__sflush_r+0x78>
 800863e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008642:	602f      	str	r7, [r5, #0]
 8008644:	b1b9      	cbz	r1, 8008676 <__sflush_r+0xae>
 8008646:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800864a:	4299      	cmp	r1, r3
 800864c:	d002      	beq.n	8008654 <__sflush_r+0x8c>
 800864e:	4628      	mov	r0, r5
 8008650:	f000 fa24 	bl	8008a9c <_free_r>
 8008654:	2300      	movs	r3, #0
 8008656:	6363      	str	r3, [r4, #52]	@ 0x34
 8008658:	e00d      	b.n	8008676 <__sflush_r+0xae>
 800865a:	2301      	movs	r3, #1
 800865c:	4628      	mov	r0, r5
 800865e:	47b0      	blx	r6
 8008660:	4602      	mov	r2, r0
 8008662:	1c50      	adds	r0, r2, #1
 8008664:	d1c9      	bne.n	80085fa <__sflush_r+0x32>
 8008666:	682b      	ldr	r3, [r5, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0c6      	beq.n	80085fa <__sflush_r+0x32>
 800866c:	2b1d      	cmp	r3, #29
 800866e:	d001      	beq.n	8008674 <__sflush_r+0xac>
 8008670:	2b16      	cmp	r3, #22
 8008672:	d11e      	bne.n	80086b2 <__sflush_r+0xea>
 8008674:	602f      	str	r7, [r5, #0]
 8008676:	2000      	movs	r0, #0
 8008678:	e022      	b.n	80086c0 <__sflush_r+0xf8>
 800867a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800867e:	b21b      	sxth	r3, r3
 8008680:	e01b      	b.n	80086ba <__sflush_r+0xf2>
 8008682:	690f      	ldr	r7, [r1, #16]
 8008684:	2f00      	cmp	r7, #0
 8008686:	d0f6      	beq.n	8008676 <__sflush_r+0xae>
 8008688:	0793      	lsls	r3, r2, #30
 800868a:	680e      	ldr	r6, [r1, #0]
 800868c:	bf08      	it	eq
 800868e:	694b      	ldreq	r3, [r1, #20]
 8008690:	600f      	str	r7, [r1, #0]
 8008692:	bf18      	it	ne
 8008694:	2300      	movne	r3, #0
 8008696:	eba6 0807 	sub.w	r8, r6, r7
 800869a:	608b      	str	r3, [r1, #8]
 800869c:	f1b8 0f00 	cmp.w	r8, #0
 80086a0:	dde9      	ble.n	8008676 <__sflush_r+0xae>
 80086a2:	6a21      	ldr	r1, [r4, #32]
 80086a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086a6:	4643      	mov	r3, r8
 80086a8:	463a      	mov	r2, r7
 80086aa:	4628      	mov	r0, r5
 80086ac:	47b0      	blx	r6
 80086ae:	2800      	cmp	r0, #0
 80086b0:	dc08      	bgt.n	80086c4 <__sflush_r+0xfc>
 80086b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ba:	81a3      	strh	r3, [r4, #12]
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c4:	4407      	add	r7, r0
 80086c6:	eba8 0800 	sub.w	r8, r8, r0
 80086ca:	e7e7      	b.n	800869c <__sflush_r+0xd4>
 80086cc:	20400001 	.word	0x20400001

080086d0 <_fflush_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	690b      	ldr	r3, [r1, #16]
 80086d4:	4605      	mov	r5, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	b913      	cbnz	r3, 80086e0 <_fflush_r+0x10>
 80086da:	2500      	movs	r5, #0
 80086dc:	4628      	mov	r0, r5
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	b118      	cbz	r0, 80086ea <_fflush_r+0x1a>
 80086e2:	6a03      	ldr	r3, [r0, #32]
 80086e4:	b90b      	cbnz	r3, 80086ea <_fflush_r+0x1a>
 80086e6:	f7ff fb83 	bl	8007df0 <__sinit>
 80086ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0f3      	beq.n	80086da <_fflush_r+0xa>
 80086f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086f4:	07d0      	lsls	r0, r2, #31
 80086f6:	d404      	bmi.n	8008702 <_fflush_r+0x32>
 80086f8:	0599      	lsls	r1, r3, #22
 80086fa:	d402      	bmi.n	8008702 <_fflush_r+0x32>
 80086fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086fe:	f7ff fbf2 	bl	8007ee6 <__retarget_lock_acquire_recursive>
 8008702:	4628      	mov	r0, r5
 8008704:	4621      	mov	r1, r4
 8008706:	f7ff ff5f 	bl	80085c8 <__sflush_r>
 800870a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800870c:	07da      	lsls	r2, r3, #31
 800870e:	4605      	mov	r5, r0
 8008710:	d4e4      	bmi.n	80086dc <_fflush_r+0xc>
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	059b      	lsls	r3, r3, #22
 8008716:	d4e1      	bmi.n	80086dc <_fflush_r+0xc>
 8008718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800871a:	f7ff fbe5 	bl	8007ee8 <__retarget_lock_release_recursive>
 800871e:	e7dd      	b.n	80086dc <_fflush_r+0xc>

08008720 <__malloc_lock>:
 8008720:	4801      	ldr	r0, [pc, #4]	@ (8008728 <__malloc_lock+0x8>)
 8008722:	f7ff bbe0 	b.w	8007ee6 <__retarget_lock_acquire_recursive>
 8008726:	bf00      	nop
 8008728:	200015c4 	.word	0x200015c4

0800872c <__malloc_unlock>:
 800872c:	4801      	ldr	r0, [pc, #4]	@ (8008734 <__malloc_unlock+0x8>)
 800872e:	f7ff bbdb 	b.w	8007ee8 <__retarget_lock_release_recursive>
 8008732:	bf00      	nop
 8008734:	200015c4 	.word	0x200015c4

08008738 <__sread>:
 8008738:	b510      	push	{r4, lr}
 800873a:	460c      	mov	r4, r1
 800873c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008740:	f000 f956 	bl	80089f0 <_read_r>
 8008744:	2800      	cmp	r0, #0
 8008746:	bfab      	itete	ge
 8008748:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800874a:	89a3      	ldrhlt	r3, [r4, #12]
 800874c:	181b      	addge	r3, r3, r0
 800874e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008752:	bfac      	ite	ge
 8008754:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008756:	81a3      	strhlt	r3, [r4, #12]
 8008758:	bd10      	pop	{r4, pc}

0800875a <__swrite>:
 800875a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800875e:	461f      	mov	r7, r3
 8008760:	898b      	ldrh	r3, [r1, #12]
 8008762:	05db      	lsls	r3, r3, #23
 8008764:	4605      	mov	r5, r0
 8008766:	460c      	mov	r4, r1
 8008768:	4616      	mov	r6, r2
 800876a:	d505      	bpl.n	8008778 <__swrite+0x1e>
 800876c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008770:	2302      	movs	r3, #2
 8008772:	2200      	movs	r2, #0
 8008774:	f000 f92a 	bl	80089cc <_lseek_r>
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800877e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008782:	81a3      	strh	r3, [r4, #12]
 8008784:	4632      	mov	r2, r6
 8008786:	463b      	mov	r3, r7
 8008788:	4628      	mov	r0, r5
 800878a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800878e:	f000 b951 	b.w	8008a34 <_write_r>

08008792 <__sseek>:
 8008792:	b510      	push	{r4, lr}
 8008794:	460c      	mov	r4, r1
 8008796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800879a:	f000 f917 	bl	80089cc <_lseek_r>
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	bf15      	itete	ne
 80087a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80087a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80087aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80087ae:	81a3      	strheq	r3, [r4, #12]
 80087b0:	bf18      	it	ne
 80087b2:	81a3      	strhne	r3, [r4, #12]
 80087b4:	bd10      	pop	{r4, pc}

080087b6 <__sclose>:
 80087b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ba:	f000 b94d 	b.w	8008a58 <_close_r>

080087be <__swbuf_r>:
 80087be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c0:	460e      	mov	r6, r1
 80087c2:	4614      	mov	r4, r2
 80087c4:	4605      	mov	r5, r0
 80087c6:	b118      	cbz	r0, 80087d0 <__swbuf_r+0x12>
 80087c8:	6a03      	ldr	r3, [r0, #32]
 80087ca:	b90b      	cbnz	r3, 80087d0 <__swbuf_r+0x12>
 80087cc:	f7ff fb10 	bl	8007df0 <__sinit>
 80087d0:	69a3      	ldr	r3, [r4, #24]
 80087d2:	60a3      	str	r3, [r4, #8]
 80087d4:	89a3      	ldrh	r3, [r4, #12]
 80087d6:	071a      	lsls	r2, r3, #28
 80087d8:	d501      	bpl.n	80087de <__swbuf_r+0x20>
 80087da:	6923      	ldr	r3, [r4, #16]
 80087dc:	b943      	cbnz	r3, 80087f0 <__swbuf_r+0x32>
 80087de:	4621      	mov	r1, r4
 80087e0:	4628      	mov	r0, r5
 80087e2:	f000 f82b 	bl	800883c <__swsetup_r>
 80087e6:	b118      	cbz	r0, 80087f0 <__swbuf_r+0x32>
 80087e8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80087ec:	4638      	mov	r0, r7
 80087ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	6922      	ldr	r2, [r4, #16]
 80087f4:	1a98      	subs	r0, r3, r2
 80087f6:	6963      	ldr	r3, [r4, #20]
 80087f8:	b2f6      	uxtb	r6, r6
 80087fa:	4283      	cmp	r3, r0
 80087fc:	4637      	mov	r7, r6
 80087fe:	dc05      	bgt.n	800880c <__swbuf_r+0x4e>
 8008800:	4621      	mov	r1, r4
 8008802:	4628      	mov	r0, r5
 8008804:	f7ff ff64 	bl	80086d0 <_fflush_r>
 8008808:	2800      	cmp	r0, #0
 800880a:	d1ed      	bne.n	80087e8 <__swbuf_r+0x2a>
 800880c:	68a3      	ldr	r3, [r4, #8]
 800880e:	3b01      	subs	r3, #1
 8008810:	60a3      	str	r3, [r4, #8]
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	6022      	str	r2, [r4, #0]
 8008818:	701e      	strb	r6, [r3, #0]
 800881a:	6962      	ldr	r2, [r4, #20]
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	429a      	cmp	r2, r3
 8008820:	d004      	beq.n	800882c <__swbuf_r+0x6e>
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	07db      	lsls	r3, r3, #31
 8008826:	d5e1      	bpl.n	80087ec <__swbuf_r+0x2e>
 8008828:	2e0a      	cmp	r6, #10
 800882a:	d1df      	bne.n	80087ec <__swbuf_r+0x2e>
 800882c:	4621      	mov	r1, r4
 800882e:	4628      	mov	r0, r5
 8008830:	f7ff ff4e 	bl	80086d0 <_fflush_r>
 8008834:	2800      	cmp	r0, #0
 8008836:	d0d9      	beq.n	80087ec <__swbuf_r+0x2e>
 8008838:	e7d6      	b.n	80087e8 <__swbuf_r+0x2a>
	...

0800883c <__swsetup_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4b29      	ldr	r3, [pc, #164]	@ (80088e4 <__swsetup_r+0xa8>)
 8008840:	4605      	mov	r5, r0
 8008842:	6818      	ldr	r0, [r3, #0]
 8008844:	460c      	mov	r4, r1
 8008846:	b118      	cbz	r0, 8008850 <__swsetup_r+0x14>
 8008848:	6a03      	ldr	r3, [r0, #32]
 800884a:	b90b      	cbnz	r3, 8008850 <__swsetup_r+0x14>
 800884c:	f7ff fad0 	bl	8007df0 <__sinit>
 8008850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008854:	0719      	lsls	r1, r3, #28
 8008856:	d422      	bmi.n	800889e <__swsetup_r+0x62>
 8008858:	06da      	lsls	r2, r3, #27
 800885a:	d407      	bmi.n	800886c <__swsetup_r+0x30>
 800885c:	2209      	movs	r2, #9
 800885e:	602a      	str	r2, [r5, #0]
 8008860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800886a:	e033      	b.n	80088d4 <__swsetup_r+0x98>
 800886c:	0758      	lsls	r0, r3, #29
 800886e:	d512      	bpl.n	8008896 <__swsetup_r+0x5a>
 8008870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008872:	b141      	cbz	r1, 8008886 <__swsetup_r+0x4a>
 8008874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008878:	4299      	cmp	r1, r3
 800887a:	d002      	beq.n	8008882 <__swsetup_r+0x46>
 800887c:	4628      	mov	r0, r5
 800887e:	f000 f90d 	bl	8008a9c <_free_r>
 8008882:	2300      	movs	r3, #0
 8008884:	6363      	str	r3, [r4, #52]	@ 0x34
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	2300      	movs	r3, #0
 8008890:	6063      	str	r3, [r4, #4]
 8008892:	6923      	ldr	r3, [r4, #16]
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	f043 0308 	orr.w	r3, r3, #8
 800889c:	81a3      	strh	r3, [r4, #12]
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	b94b      	cbnz	r3, 80088b6 <__swsetup_r+0x7a>
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ac:	d003      	beq.n	80088b6 <__swsetup_r+0x7a>
 80088ae:	4621      	mov	r1, r4
 80088b0:	4628      	mov	r0, r5
 80088b2:	f000 f83f 	bl	8008934 <__smakebuf_r>
 80088b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ba:	f013 0201 	ands.w	r2, r3, #1
 80088be:	d00a      	beq.n	80088d6 <__swsetup_r+0x9a>
 80088c0:	2200      	movs	r2, #0
 80088c2:	60a2      	str	r2, [r4, #8]
 80088c4:	6962      	ldr	r2, [r4, #20]
 80088c6:	4252      	negs	r2, r2
 80088c8:	61a2      	str	r2, [r4, #24]
 80088ca:	6922      	ldr	r2, [r4, #16]
 80088cc:	b942      	cbnz	r2, 80088e0 <__swsetup_r+0xa4>
 80088ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088d2:	d1c5      	bne.n	8008860 <__swsetup_r+0x24>
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	0799      	lsls	r1, r3, #30
 80088d8:	bf58      	it	pl
 80088da:	6962      	ldrpl	r2, [r4, #20]
 80088dc:	60a2      	str	r2, [r4, #8]
 80088de:	e7f4      	b.n	80088ca <__swsetup_r+0x8e>
 80088e0:	2000      	movs	r0, #0
 80088e2:	e7f7      	b.n	80088d4 <__swsetup_r+0x98>
 80088e4:	20000020 	.word	0x20000020

080088e8 <__swhatbuf_r>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	460c      	mov	r4, r1
 80088ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f0:	2900      	cmp	r1, #0
 80088f2:	b096      	sub	sp, #88	@ 0x58
 80088f4:	4615      	mov	r5, r2
 80088f6:	461e      	mov	r6, r3
 80088f8:	da0d      	bge.n	8008916 <__swhatbuf_r+0x2e>
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008900:	f04f 0100 	mov.w	r1, #0
 8008904:	bf14      	ite	ne
 8008906:	2340      	movne	r3, #64	@ 0x40
 8008908:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800890c:	2000      	movs	r0, #0
 800890e:	6031      	str	r1, [r6, #0]
 8008910:	602b      	str	r3, [r5, #0]
 8008912:	b016      	add	sp, #88	@ 0x58
 8008914:	bd70      	pop	{r4, r5, r6, pc}
 8008916:	466a      	mov	r2, sp
 8008918:	f000 f8ae 	bl	8008a78 <_fstat_r>
 800891c:	2800      	cmp	r0, #0
 800891e:	dbec      	blt.n	80088fa <__swhatbuf_r+0x12>
 8008920:	9901      	ldr	r1, [sp, #4]
 8008922:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008926:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800892a:	4259      	negs	r1, r3
 800892c:	4159      	adcs	r1, r3
 800892e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008932:	e7eb      	b.n	800890c <__swhatbuf_r+0x24>

08008934 <__smakebuf_r>:
 8008934:	898b      	ldrh	r3, [r1, #12]
 8008936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008938:	079d      	lsls	r5, r3, #30
 800893a:	4606      	mov	r6, r0
 800893c:	460c      	mov	r4, r1
 800893e:	d507      	bpl.n	8008950 <__smakebuf_r+0x1c>
 8008940:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	6123      	str	r3, [r4, #16]
 8008948:	2301      	movs	r3, #1
 800894a:	6163      	str	r3, [r4, #20]
 800894c:	b003      	add	sp, #12
 800894e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008950:	ab01      	add	r3, sp, #4
 8008952:	466a      	mov	r2, sp
 8008954:	f7ff ffc8 	bl	80088e8 <__swhatbuf_r>
 8008958:	9f00      	ldr	r7, [sp, #0]
 800895a:	4605      	mov	r5, r0
 800895c:	4639      	mov	r1, r7
 800895e:	4630      	mov	r0, r6
 8008960:	f7ff fc26 	bl	80081b0 <_malloc_r>
 8008964:	b948      	cbnz	r0, 800897a <__smakebuf_r+0x46>
 8008966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800896a:	059a      	lsls	r2, r3, #22
 800896c:	d4ee      	bmi.n	800894c <__smakebuf_r+0x18>
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	f043 0302 	orr.w	r3, r3, #2
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	e7e2      	b.n	8008940 <__smakebuf_r+0xc>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	6020      	str	r0, [r4, #0]
 800897e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008982:	81a3      	strh	r3, [r4, #12]
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800898a:	b15b      	cbz	r3, 80089a4 <__smakebuf_r+0x70>
 800898c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008990:	4630      	mov	r0, r6
 8008992:	f000 f80b 	bl	80089ac <_isatty_r>
 8008996:	b128      	cbz	r0, 80089a4 <__smakebuf_r+0x70>
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	f023 0303 	bic.w	r3, r3, #3
 800899e:	f043 0301 	orr.w	r3, r3, #1
 80089a2:	81a3      	strh	r3, [r4, #12]
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	431d      	orrs	r5, r3
 80089a8:	81a5      	strh	r5, [r4, #12]
 80089aa:	e7cf      	b.n	800894c <__smakebuf_r+0x18>

080089ac <_isatty_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4d06      	ldr	r5, [pc, #24]	@ (80089c8 <_isatty_r+0x1c>)
 80089b0:	2300      	movs	r3, #0
 80089b2:	4604      	mov	r4, r0
 80089b4:	4608      	mov	r0, r1
 80089b6:	602b      	str	r3, [r5, #0]
 80089b8:	f7f8 fcbd 	bl	8001336 <_isatty>
 80089bc:	1c43      	adds	r3, r0, #1
 80089be:	d102      	bne.n	80089c6 <_isatty_r+0x1a>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	b103      	cbz	r3, 80089c6 <_isatty_r+0x1a>
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	200015d0 	.word	0x200015d0

080089cc <_lseek_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4d07      	ldr	r5, [pc, #28]	@ (80089ec <_lseek_r+0x20>)
 80089d0:	4604      	mov	r4, r0
 80089d2:	4608      	mov	r0, r1
 80089d4:	4611      	mov	r1, r2
 80089d6:	2200      	movs	r2, #0
 80089d8:	602a      	str	r2, [r5, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	f7f8 fcb6 	bl	800134c <_lseek>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_lseek_r+0x1e>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_lseek_r+0x1e>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	200015d0 	.word	0x200015d0

080089f0 <_read_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4d07      	ldr	r5, [pc, #28]	@ (8008a10 <_read_r+0x20>)
 80089f4:	4604      	mov	r4, r0
 80089f6:	4608      	mov	r0, r1
 80089f8:	4611      	mov	r1, r2
 80089fa:	2200      	movs	r2, #0
 80089fc:	602a      	str	r2, [r5, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	f7f8 fc44 	bl	800128c <_read>
 8008a04:	1c43      	adds	r3, r0, #1
 8008a06:	d102      	bne.n	8008a0e <_read_r+0x1e>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	b103      	cbz	r3, 8008a0e <_read_r+0x1e>
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	200015d0 	.word	0x200015d0

08008a14 <_sbrk_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	4d06      	ldr	r5, [pc, #24]	@ (8008a30 <_sbrk_r+0x1c>)
 8008a18:	2300      	movs	r3, #0
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	4608      	mov	r0, r1
 8008a1e:	602b      	str	r3, [r5, #0]
 8008a20:	f7f8 fca2 	bl	8001368 <_sbrk>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d102      	bne.n	8008a2e <_sbrk_r+0x1a>
 8008a28:	682b      	ldr	r3, [r5, #0]
 8008a2a:	b103      	cbz	r3, 8008a2e <_sbrk_r+0x1a>
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	200015d0 	.word	0x200015d0

08008a34 <_write_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d07      	ldr	r5, [pc, #28]	@ (8008a54 <_write_r+0x20>)
 8008a38:	4604      	mov	r4, r0
 8008a3a:	4608      	mov	r0, r1
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	2200      	movs	r2, #0
 8008a40:	602a      	str	r2, [r5, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	f7f8 fc3f 	bl	80012c6 <_write>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_write_r+0x1e>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_write_r+0x1e>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	200015d0 	.word	0x200015d0

08008a58 <_close_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	@ (8008a74 <_close_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7f8 fc4b 	bl	80012fe <_close>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_close_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_close_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	200015d0 	.word	0x200015d0

08008a78 <_fstat_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	@ (8008a98 <_fstat_r+0x20>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	4611      	mov	r1, r2
 8008a84:	602b      	str	r3, [r5, #0]
 8008a86:	f7f8 fc46 	bl	8001316 <_fstat>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	d102      	bne.n	8008a94 <_fstat_r+0x1c>
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	b103      	cbz	r3, 8008a94 <_fstat_r+0x1c>
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	bd38      	pop	{r3, r4, r5, pc}
 8008a96:	bf00      	nop
 8008a98:	200015d0 	.word	0x200015d0

08008a9c <_free_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	d041      	beq.n	8008b28 <_free_r+0x8c>
 8008aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa8:	1f0c      	subs	r4, r1, #4
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfb8      	it	lt
 8008aae:	18e4      	addlt	r4, r4, r3
 8008ab0:	f7ff fe36 	bl	8008720 <__malloc_lock>
 8008ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b2c <_free_r+0x90>)
 8008ab6:	6813      	ldr	r3, [r2, #0]
 8008ab8:	b933      	cbnz	r3, 8008ac8 <_free_r+0x2c>
 8008aba:	6063      	str	r3, [r4, #4]
 8008abc:	6014      	str	r4, [r2, #0]
 8008abe:	4628      	mov	r0, r5
 8008ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ac4:	f7ff be32 	b.w	800872c <__malloc_unlock>
 8008ac8:	42a3      	cmp	r3, r4
 8008aca:	d908      	bls.n	8008ade <_free_r+0x42>
 8008acc:	6820      	ldr	r0, [r4, #0]
 8008ace:	1821      	adds	r1, r4, r0
 8008ad0:	428b      	cmp	r3, r1
 8008ad2:	bf01      	itttt	eq
 8008ad4:	6819      	ldreq	r1, [r3, #0]
 8008ad6:	685b      	ldreq	r3, [r3, #4]
 8008ad8:	1809      	addeq	r1, r1, r0
 8008ada:	6021      	streq	r1, [r4, #0]
 8008adc:	e7ed      	b.n	8008aba <_free_r+0x1e>
 8008ade:	461a      	mov	r2, r3
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	b10b      	cbz	r3, 8008ae8 <_free_r+0x4c>
 8008ae4:	42a3      	cmp	r3, r4
 8008ae6:	d9fa      	bls.n	8008ade <_free_r+0x42>
 8008ae8:	6811      	ldr	r1, [r2, #0]
 8008aea:	1850      	adds	r0, r2, r1
 8008aec:	42a0      	cmp	r0, r4
 8008aee:	d10b      	bne.n	8008b08 <_free_r+0x6c>
 8008af0:	6820      	ldr	r0, [r4, #0]
 8008af2:	4401      	add	r1, r0
 8008af4:	1850      	adds	r0, r2, r1
 8008af6:	4283      	cmp	r3, r0
 8008af8:	6011      	str	r1, [r2, #0]
 8008afa:	d1e0      	bne.n	8008abe <_free_r+0x22>
 8008afc:	6818      	ldr	r0, [r3, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	6053      	str	r3, [r2, #4]
 8008b02:	4408      	add	r0, r1
 8008b04:	6010      	str	r0, [r2, #0]
 8008b06:	e7da      	b.n	8008abe <_free_r+0x22>
 8008b08:	d902      	bls.n	8008b10 <_free_r+0x74>
 8008b0a:	230c      	movs	r3, #12
 8008b0c:	602b      	str	r3, [r5, #0]
 8008b0e:	e7d6      	b.n	8008abe <_free_r+0x22>
 8008b10:	6820      	ldr	r0, [r4, #0]
 8008b12:	1821      	adds	r1, r4, r0
 8008b14:	428b      	cmp	r3, r1
 8008b16:	bf04      	itt	eq
 8008b18:	6819      	ldreq	r1, [r3, #0]
 8008b1a:	685b      	ldreq	r3, [r3, #4]
 8008b1c:	6063      	str	r3, [r4, #4]
 8008b1e:	bf04      	itt	eq
 8008b20:	1809      	addeq	r1, r1, r0
 8008b22:	6021      	streq	r1, [r4, #0]
 8008b24:	6054      	str	r4, [r2, #4]
 8008b26:	e7ca      	b.n	8008abe <_free_r+0x22>
 8008b28:	bd38      	pop	{r3, r4, r5, pc}
 8008b2a:	bf00      	nop
 8008b2c:	200015cc 	.word	0x200015cc

08008b30 <_init>:
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	bf00      	nop
 8008b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b36:	bc08      	pop	{r3}
 8008b38:	469e      	mov	lr, r3
 8008b3a:	4770      	bx	lr

08008b3c <_fini>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	bf00      	nop
 8008b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b42:	bc08      	pop	{r3}
 8008b44:	469e      	mov	lr, r3
 8008b46:	4770      	bx	lr
