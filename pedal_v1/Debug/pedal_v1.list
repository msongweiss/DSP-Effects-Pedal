
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800964c  0800964c  0000a64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096c8  080096c8  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080096c8  080096c8  0000a6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096d0  080096d0  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096d0  080096d0  0000a6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096d4  080096d4  0000a6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080096d8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b070  2**0
                  CONTENTS
 10 .bss          00000d58  20000070  20000070  0000b070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000dc8  20000dc8  0000b070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e7cc  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bd1  00000000  00000000  0002986c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b08  00000000  00000000  0002e440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014f9  00000000  00000000  0002ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027aa6  00000000  00000000  00031441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023fb6  00000000  00000000  00058ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5bff  00000000  00000000  0007ce9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00162a9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007898  00000000  00000000  00162ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0016a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009634 	.word	0x08009634

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009634 	.word	0x08009634

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005b0:	4a22      	ldr	r2, [pc, #136]	@ (800063c <MX_ADC1_Init+0xa0>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b20      	ldr	r3, [pc, #128]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005d6:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80005de:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005e0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <MX_ADC1_Init+0x9c>)
 8000602:	f001 fb67 	bl	8001cd4 <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800060c:	f000 ff0c 	bl	8001428 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000610:	2301      	movs	r3, #1
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000618:	2304      	movs	r3, #4
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_ADC1_Init+0x9c>)
 8000622:	f001 fde3 	bl	80021ec <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800062c:	f000 fefc 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000008c 	.word	0x2000008c
 800063c:	40012000 	.word	0x40012000

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a33      	ldr	r2, [pc, #204]	@ (800072c <HAL_ADC_MspInit+0xec>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d160      	bne.n	8000724 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066a:	4a31      	ldr	r2, [pc, #196]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000670:	6453      	str	r3, [r2, #68]	@ 0x44
 8000672:	4b2f      	ldr	r3, [pc, #188]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a2a      	ldr	r2, [pc, #168]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800069a:	2302      	movs	r3, #2
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4821      	ldr	r0, [pc, #132]	@ (8000734 <HAL_ADC_MspInit+0xf4>)
 80006ae:	f002 fd39 	bl	8003124 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006b2:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006b4:	4a21      	ldr	r2, [pc, #132]	@ (800073c <HAL_ADC_MspInit+0xfc>)
 80006b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006be:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d2:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006da:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006ec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f8:	480f      	ldr	r0, [pc, #60]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006fa:	f002 f933 	bl	8002964 <HAL_DMA_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000704:	f000 fe90 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a0b      	ldr	r2, [pc, #44]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 800070c:	639a      	str	r2, [r3, #56]	@ 0x38
 800070e:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	2012      	movs	r0, #18
 800071a:	f002 f8ec 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800071e:	2012      	movs	r0, #18
 8000720:	f002 f905 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	@ 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40012000 	.word	0x40012000
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000
 8000738:	200000d4 	.word	0x200000d4
 800073c:	40026410 	.word	0x40026410

08000740 <cs43l22_mute>:
#include <stdio.h>

static codec_state cs43l22_state = NOTREADY;

int cs43l22_mute()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af04      	add	r7, sp, #16
	uint8_t i2c_data;
	HAL_StatusTypeDef status_i2c = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	71fb      	strb	r3, [r7, #7]

	// headphone channel is off, page 38
	i2c_data = 0xff;
 800074a:	23ff      	movs	r3, #255	@ 0xff
 800074c:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 800074e:	2364      	movs	r3, #100	@ 0x64
 8000750:	9302      	str	r3, [sp, #8]
 8000752:	2301      	movs	r3, #1
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	1dbb      	adds	r3, r7, #6
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	2204      	movs	r2, #4
 800075e:	2194      	movs	r1, #148	@ 0x94
 8000760:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <cs43l22_mute+0x70>)
 8000762:	f002 ffd9 	bl	8003718 <HAL_I2C_Mem_Write>
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
					                                    1, &i2c_data, 1, 100);

	// mute headphone A and B, page 52
	i2c_data = 0x01;
 800076a:	2301      	movs	r3, #1
 800076c:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADAVOL_REG,
 800076e:	2364      	movs	r3, #100	@ 0x64
 8000770:	9302      	str	r3, [sp, #8]
 8000772:	2301      	movs	r3, #1
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	1dbb      	adds	r3, r7, #6
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2301      	movs	r3, #1
 800077c:	2222      	movs	r2, #34	@ 0x22
 800077e:	2194      	movs	r1, #148	@ 0x94
 8000780:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <cs43l22_mute+0x70>)
 8000782:	f002 ffc9 	bl	8003718 <HAL_I2C_Mem_Write>
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
		                                    1, &i2c_data, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADBVOL_REG,
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	9302      	str	r3, [sp, #8]
 800078e:	2301      	movs	r3, #1
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	1dbb      	adds	r3, r7, #6
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2301      	movs	r3, #1
 8000798:	2223      	movs	r2, #35	@ 0x23
 800079a:	2194      	movs	r1, #148	@ 0x94
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <cs43l22_mute+0x70>)
 800079e:	f002 ffbb 	bl	8003718 <HAL_I2C_Mem_Write>
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
			                                    1, &i2c_data, 1, 100);
	return status_i2c;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000134 	.word	0x20000134

080007b4 <cs43l22_unmute>:

int cs43l22_unmute()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af04      	add	r7, sp, #16
	uint8_t i2c_data;
	HAL_StatusTypeDef status_i2c = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	71fb      	strb	r3, [r7, #7]
	// unmute headphone A and B, page 52
	i2c_data = 0x00;
 80007be:	2300      	movs	r3, #0
 80007c0:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADAVOL_REG,
 80007c2:	2364      	movs	r3, #100	@ 0x64
 80007c4:	9302      	str	r3, [sp, #8]
 80007c6:	2301      	movs	r3, #1
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	1dbb      	adds	r3, r7, #6
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	2222      	movs	r2, #34	@ 0x22
 80007d2:	2194      	movs	r1, #148	@ 0x94
 80007d4:	4813      	ldr	r0, [pc, #76]	@ (8000824 <cs43l22_unmute+0x70>)
 80007d6:	f002 ff9f 	bl	8003718 <HAL_I2C_Mem_Write>
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
		                                    1, &i2c_data, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADBVOL_REG,
 80007de:	2364      	movs	r3, #100	@ 0x64
 80007e0:	9302      	str	r3, [sp, #8]
 80007e2:	2301      	movs	r3, #1
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	1dbb      	adds	r3, r7, #6
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2301      	movs	r3, #1
 80007ec:	2223      	movs	r2, #35	@ 0x23
 80007ee:	2194      	movs	r1, #148	@ 0x94
 80007f0:	480c      	ldr	r0, [pc, #48]	@ (8000824 <cs43l22_unmute+0x70>)
 80007f2:	f002 ff91 	bl	8003718 <HAL_I2C_Mem_Write>
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
			                                    1, &i2c_data, 1, 100);
	// turn on headphone
	i2c_data = 0xaf;
 80007fa:	23af      	movs	r3, #175	@ 0xaf
 80007fc:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 80007fe:	2364      	movs	r3, #100	@ 0x64
 8000800:	9302      	str	r3, [sp, #8]
 8000802:	2301      	movs	r3, #1
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	1dbb      	adds	r3, r7, #6
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	2204      	movs	r2, #4
 800080e:	2194      	movs	r1, #148	@ 0x94
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <cs43l22_unmute+0x70>)
 8000812:	f002 ff81 	bl	8003718 <HAL_I2C_Mem_Write>
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
				                                    1, &i2c_data, 1, 100);

	return status_i2c;
 800081a:	79fb      	ldrb	r3, [r7, #7]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000134 	.word	0x20000134

08000828 <cs43l22_init>:
codec_state get_cs43l22_state()
{
	return cs43l22_state;
}
int cs43l22_init()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status_i2c = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_data;
	HAL_GPIO_WritePin(CS43L22_RST_Port, CS43L22_RST_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2110      	movs	r1, #16
 8000836:	4853      	ldr	r0, [pc, #332]	@ (8000984 <cs43l22_init+0x15c>)
 8000838:	f002 fe10 	bl	800345c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800083c:	2064      	movs	r0, #100	@ 0x64
 800083e:	f001 fa25 	bl	8001c8c <HAL_Delay>
	HAL_GPIO_WritePin(CS43L22_RST_Port, CS43L22_RST_Pin, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2110      	movs	r1, #16
 8000846:	484f      	ldr	r0, [pc, #316]	@ (8000984 <cs43l22_init+0x15c>)
 8000848:	f002 fe08 	bl	800345c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800084c:	2064      	movs	r0, #100	@ 0x64
 800084e:	f001 fa1d 	bl	8001c8c <HAL_Delay>
	// power off the codec, page 38
	i2c_data = 0x01;
 8000852:	2301      	movs	r3, #1
 8000854:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 8000856:	2364      	movs	r3, #100	@ 0x64
 8000858:	9302      	str	r3, [sp, #8]
 800085a:	2301      	movs	r3, #1
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	1dbb      	adds	r3, r7, #6
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2301      	movs	r3, #1
 8000864:	2202      	movs	r2, #2
 8000866:	2194      	movs	r1, #148	@ 0x94
 8000868:	4847      	ldr	r0, [pc, #284]	@ (8000988 <cs43l22_init+0x160>)
 800086a:	f002 ff55 	bl	8003718 <HAL_I2C_Mem_Write>
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
	                                    1, &i2c_data, 1, 100);

	// output device is headphone 0xaf, page 38
	i2c_data = 0b10101111;
 8000872:	23af      	movs	r3, #175	@ 0xaf
 8000874:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 8000876:	2364      	movs	r3, #100	@ 0x64
 8000878:	9302      	str	r3, [sp, #8]
 800087a:	2301      	movs	r3, #1
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	1dbb      	adds	r3, r7, #6
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2301      	movs	r3, #1
 8000884:	2204      	movs	r2, #4
 8000886:	2194      	movs	r1, #148	@ 0x94
 8000888:	483f      	ldr	r0, [pc, #252]	@ (8000988 <cs43l22_init+0x160>)
 800088a:	f002 ff45 	bl	8003718 <HAL_I2C_Mem_Write>
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <cs43l22_init+0x74>
	{
		return status_i2c;
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	e06f      	b.n	800097c <cs43l22_init+0x154>
	}

	// clock auto-detect and divide mclk by 2
	i2c_data = 0b10000001;
 800089c:	2381      	movs	r3, #129	@ 0x81
 800089e:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_CLKCON_REG,
 80008a0:	2364      	movs	r3, #100	@ 0x64
 80008a2:	9302      	str	r3, [sp, #8]
 80008a4:	2301      	movs	r3, #1
 80008a6:	9301      	str	r3, [sp, #4]
 80008a8:	1dbb      	adds	r3, r7, #6
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2301      	movs	r3, #1
 80008ae:	2205      	movs	r2, #5
 80008b0:	2194      	movs	r1, #148	@ 0x94
 80008b2:	4835      	ldr	r0, [pc, #212]	@ (8000988 <cs43l22_init+0x160>)
 80008b4:	f002 ff30 	bl	8003718 <HAL_I2C_Mem_Write>
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <cs43l22_init+0x9e>
	{
		return status_i2c;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	e05a      	b.n	800097c <cs43l22_init+0x154>
	}

	cs43l22_set_volume(200);
 80008c6:	20c8      	movs	r0, #200	@ 0xc8
 80008c8:	f000 f8da 	bl	8000a80 <cs43l22_set_volume>

	// i2s up to 24-bit interface, 16-bit data length, page 41
	i2c_data = 0b00000111;
 80008cc:	2307      	movs	r3, #7
 80008ce:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_INTERCON1_REG,
 80008d0:	2364      	movs	r3, #100	@ 0x64
 80008d2:	9302      	str	r3, [sp, #8]
 80008d4:	2301      	movs	r3, #1
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	1dbb      	adds	r3, r7, #6
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	2206      	movs	r2, #6
 80008e0:	2194      	movs	r1, #148	@ 0x94
 80008e2:	4829      	ldr	r0, [pc, #164]	@ (8000988 <cs43l22_init+0x160>)
 80008e4:	f002 ff18 	bl	8003718 <HAL_I2C_Mem_Write>
 80008e8:	4603      	mov	r3, r0
 80008ea:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <cs43l22_init+0xce>
	{
		return status_i2c;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	e042      	b.n	800097c <cs43l22_init+0x154>
	}

	// enable digital soft ramp and de-emphasis filter
	i2c_data = 0b00000110;
 80008f6:	2306      	movs	r3, #6
 80008f8:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MISCON_REG,
 80008fa:	2364      	movs	r3, #100	@ 0x64
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	2301      	movs	r3, #1
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	1dbb      	adds	r3, r7, #6
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2301      	movs	r3, #1
 8000908:	220e      	movs	r2, #14
 800090a:	2194      	movs	r1, #148	@ 0x94
 800090c:	481e      	ldr	r0, [pc, #120]	@ (8000988 <cs43l22_init+0x160>)
 800090e:	f002 ff03 	bl	8003718 <HAL_I2C_Mem_Write>
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
											1, &i2c_data, 1, 100);
	if (status_i2c)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <cs43l22_init+0xf8>
	{
		return status_i2c;
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	e02d      	b.n	800097c <cs43l22_init+0x154>
	}

	//  PCM VOlume adjust, page 47
	i2c_data = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMAVOLCON_REG,
 8000924:	2364      	movs	r3, #100	@ 0x64
 8000926:	9302      	str	r3, [sp, #8]
 8000928:	2301      	movs	r3, #1
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	1dbb      	adds	r3, r7, #6
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2301      	movs	r3, #1
 8000932:	221a      	movs	r2, #26
 8000934:	2194      	movs	r1, #148	@ 0x94
 8000936:	4814      	ldr	r0, [pc, #80]	@ (8000988 <cs43l22_init+0x160>)
 8000938:	f002 feee 	bl	8003718 <HAL_I2C_Mem_Write>
 800093c:	4603      	mov	r3, r0
 800093e:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <cs43l22_init+0x122>
	{
		return status_i2c;
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	e018      	b.n	800097c <cs43l22_init+0x154>
	}

	i2c_data = 0x00;
 800094a:	2300      	movs	r3, #0
 800094c:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMBVOLCON_REG,
 800094e:	2364      	movs	r3, #100	@ 0x64
 8000950:	9302      	str	r3, [sp, #8]
 8000952:	2301      	movs	r3, #1
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	1dbb      	adds	r3, r7, #6
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2301      	movs	r3, #1
 800095c:	221b      	movs	r2, #27
 800095e:	2194      	movs	r1, #148	@ 0x94
 8000960:	4809      	ldr	r0, [pc, #36]	@ (8000988 <cs43l22_init+0x160>)
 8000962:	f002 fed9 	bl	8003718 <HAL_I2C_Mem_Write>
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <cs43l22_init+0x14c>
	{
		return status_i2c;
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	e003      	b.n	800097c <cs43l22_init+0x154>
	}

	cs43l22_state = READY;
 8000974:	4b05      	ldr	r3, [pc, #20]	@ (800098c <cs43l22_init+0x164>)
 8000976:	2205      	movs	r2, #5
 8000978:	701a      	strb	r2, [r3, #0]
	return 0;
 800097a:	2300      	movs	r3, #0

}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40020c00 	.word	0x40020c00
 8000988:	20000134 	.word	0x20000134
 800098c:	20000000 	.word	0x20000000

08000990 <cs43l22_play>:

int cs43l22_play(int16_t *pbuffer, uint32_t size)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af04      	add	r7, sp, #16
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status_i2c = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	73fb      	strb	r3, [r7, #15]
	uint8_t i2c_data;
	if (cs43l22_state != PLAY)
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <cs43l22_play+0x74>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d028      	beq.n	80009f8 <cs43l22_play+0x68>
	{
		status_i2c = cs43l22_unmute();
 80009a6:	f7ff ff05 	bl	80007b4 <cs43l22_unmute>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]
		if (status_i2c)
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <cs43l22_play+0x28>
		{
			return status_i2c;
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	e020      	b.n	80009fa <cs43l22_play+0x6a>
		}
		// powered up, page 38
		i2c_data = 0b10011110;
 80009b8:	239e      	movs	r3, #158	@ 0x9e
 80009ba:	73bb      	strb	r3, [r7, #14]
		status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 80009bc:	2364      	movs	r3, #100	@ 0x64
 80009be:	9302      	str	r3, [sp, #8]
 80009c0:	2301      	movs	r3, #1
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	f107 030e 	add.w	r3, r7, #14
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2301      	movs	r3, #1
 80009cc:	2202      	movs	r2, #2
 80009ce:	2194      	movs	r1, #148	@ 0x94
 80009d0:	480d      	ldr	r0, [pc, #52]	@ (8000a08 <cs43l22_play+0x78>)
 80009d2:	f002 fea1 	bl	8003718 <HAL_I2C_Mem_Write>
 80009d6:	4603      	mov	r3, r0
 80009d8:	73fb      	strb	r3, [r7, #15]
												1, &i2c_data, 1, 100);
		if (status_i2c)
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <cs43l22_play+0x54>
		{
			return status_i2c;
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	e00a      	b.n	80009fa <cs43l22_play+0x6a>
		}
		cs43l22_state = PLAY;
 80009e4:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <cs43l22_play+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
		HAL_I2S_Transmit_DMA(&CS43L22_I2S, (uint16_t * )pbuffer, size);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	4806      	ldr	r0, [pc, #24]	@ (8000a0c <cs43l22_play+0x7c>)
 80009f4:	f003 fb3a 	bl	800406c <HAL_I2S_Transmit_DMA>
	}
	return 0;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000134 	.word	0x20000134
 8000a0c:	20000188 	.word	0x20000188

08000a10 <cs43l22_stop>:
	}
	return 0;
}

int cs43l22_stop()
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status_i2c = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_data;
	if (cs43l22_state != STOP)
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <cs43l22_stop+0x64>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d023      	beq.n	8000a6a <cs43l22_stop+0x5a>
	{
		status_i2c = cs43l22_mute();
 8000a22:	f7ff fe8d 	bl	8000740 <cs43l22_mute>
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
		if (status_i2c)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <cs43l22_stop+0x24>
		{
			return status_i2c;
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	e01b      	b.n	8000a6c <cs43l22_stop+0x5c>
		}
		// powered off, page 38
		i2c_data = 0x9f;
 8000a34:	239f      	movs	r3, #159	@ 0x9f
 8000a36:	71bb      	strb	r3, [r7, #6]
		status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 8000a38:	2364      	movs	r3, #100	@ 0x64
 8000a3a:	9302      	str	r3, [sp, #8]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	1dbb      	adds	r3, r7, #6
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2301      	movs	r3, #1
 8000a46:	2202      	movs	r2, #2
 8000a48:	2194      	movs	r1, #148	@ 0x94
 8000a4a:	480b      	ldr	r0, [pc, #44]	@ (8000a78 <cs43l22_stop+0x68>)
 8000a4c:	f002 fe64 	bl	8003718 <HAL_I2C_Mem_Write>
 8000a50:	4603      	mov	r3, r0
 8000a52:	71fb      	strb	r3, [r7, #7]
												1, &i2c_data, 1, 100);
		if (status_i2c)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <cs43l22_stop+0x4e>
		{
			return status_i2c;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	e006      	b.n	8000a6c <cs43l22_stop+0x5c>
		}
		cs43l22_state = STOP;
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <cs43l22_stop+0x64>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
		HAL_I2S_DMAStop(&CS43L22_I2S);
 8000a64:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <cs43l22_stop+0x6c>)
 8000a66:	f003 fba5 	bl	80041b4 <HAL_I2S_DMAStop>
	}
	return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000134 	.word	0x20000134
 8000a7c:	20000188 	.word	0x20000188

08000a80 <cs43l22_set_volume>:
	HAL_I2C_Mem_Read(&CS43L22_I2C, CS43L22_I2C_ADDRESS, reg,
			1, reg_value, 1, 100);
}

int cs43l22_set_volume(uint8_t volume)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af04      	add	r7, sp, #16
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status_i2c = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73fb      	strb	r3, [r7, #15]
	// page 52
	if (volume > 0xe6)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2be6      	cmp	r3, #230	@ 0xe6
 8000a92:	d904      	bls.n	8000a9e <cs43l22_set_volume+0x1e>
	{
		volume -= 0xe7;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	3319      	adds	r3, #25
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	e003      	b.n	8000aa6 <cs43l22_set_volume+0x26>
	}
	else
	{
		volume += 0x19;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	3319      	adds	r3, #25
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	71fb      	strb	r3, [r7, #7]
	}
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASAVOL_REG,
 8000aa6:	2364      	movs	r3, #100	@ 0x64
 8000aa8:	9302      	str	r3, [sp, #8]
 8000aaa:	2301      	movs	r3, #1
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	2220      	movs	r2, #32
 8000ab6:	2194      	movs	r1, #148	@ 0x94
 8000ab8:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <cs43l22_set_volume+0x68>)
 8000aba:	f002 fe2d 	bl	8003718 <HAL_I2C_Mem_Write>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	73fb      	strb	r3, [r7, #15]
											1, &volume, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASBVOL_REG,
 8000ac2:	2364      	movs	r3, #100	@ 0x64
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	2221      	movs	r2, #33	@ 0x21
 8000ad2:	2194      	movs	r1, #148	@ 0x94
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <cs43l22_set_volume+0x68>)
 8000ad6:	f002 fe1f 	bl	8003718 <HAL_I2C_Mem_Write>
 8000ada:	4603      	mov	r3, r0
 8000adc:	73fb      	strb	r3, [r7, #15]
												1, &volume, 1, 100);
	return status_i2c;
 8000ade:	7bfb      	ldrb	r3, [r7, #15]

}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000134 	.word	0x20000134

08000aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <MX_DMA_Init+0x78>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a1a      	ldr	r2, [pc, #104]	@ (8000b64 <MX_DMA_Init+0x78>)
 8000afc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <MX_DMA_Init+0x78>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <MX_DMA_Init+0x78>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a13      	ldr	r2, [pc, #76]	@ (8000b64 <MX_DMA_Init+0x78>)
 8000b18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <MX_DMA_Init+0x78>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	200b      	movs	r0, #11
 8000b30:	f001 fee1 	bl	80028f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b34:	200b      	movs	r0, #11
 8000b36:	f001 fefa 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2010      	movs	r0, #16
 8000b40:	f001 fed9 	bl	80028f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b44:	2010      	movs	r0, #16
 8000b46:	f001 fef2 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2038      	movs	r0, #56	@ 0x38
 8000b50:	f001 fed1 	bl	80028f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b54:	2038      	movs	r0, #56	@ 0x38
 8000b56:	f001 feea 	bl	800292e <HAL_NVIC_EnableIRQ>

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <MX_GPIO_Init>:
     PC3   ------> I2S2_SD
     PA4   ------> COMP_DAC1_group
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	@ 0x30
 8000b6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	4b78      	ldr	r3, [pc, #480]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a77      	ldr	r2, [pc, #476]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000b88:	f043 0310 	orr.w	r3, r3, #16
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b75      	ldr	r3, [pc, #468]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0310 	and.w	r3, r3, #16
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	4b71      	ldr	r3, [pc, #452]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a70      	ldr	r2, [pc, #448]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b6e      	ldr	r3, [pc, #440]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b6a      	ldr	r3, [pc, #424]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a69      	ldr	r2, [pc, #420]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b67      	ldr	r3, [pc, #412]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b63      	ldr	r3, [pc, #396]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a62      	ldr	r2, [pc, #392]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b60      	ldr	r3, [pc, #384]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	4b5c      	ldr	r3, [pc, #368]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a5b      	ldr	r2, [pc, #364]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b59      	ldr	r3, [pc, #356]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b55      	ldr	r3, [pc, #340]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a54      	ldr	r2, [pc, #336]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b52      	ldr	r3, [pc, #328]	@ (8000d64 <MX_GPIO_Init+0x1fc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2108      	movs	r1, #8
 8000c2a:	484f      	ldr	r0, [pc, #316]	@ (8000d68 <MX_GPIO_Init+0x200>)
 8000c2c:	f002 fc16 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2101      	movs	r1, #1
 8000c34:	484d      	ldr	r0, [pc, #308]	@ (8000d6c <MX_GPIO_Init+0x204>)
 8000c36:	f002 fc11 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000c40:	484b      	ldr	r0, [pc, #300]	@ (8000d70 <MX_GPIO_Init+0x208>)
 8000c42:	f002 fc0b 	bl	800345c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c46:	2308      	movs	r3, #8
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4842      	ldr	r0, [pc, #264]	@ (8000d68 <MX_GPIO_Init+0x200>)
 8000c5e:	f002 fa61 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	483c      	ldr	r0, [pc, #240]	@ (8000d6c <MX_GPIO_Init+0x204>)
 8000c7a:	f002 fa53 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4834      	ldr	r0, [pc, #208]	@ (8000d6c <MX_GPIO_Init+0x204>)
 8000c9a:	f002 fa43 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ca2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4830      	ldr	r0, [pc, #192]	@ (8000d74 <MX_GPIO_Init+0x20c>)
 8000cb4:	f002 fa36 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cb8:	2310      	movs	r3, #16
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	482a      	ldr	r0, [pc, #168]	@ (8000d74 <MX_GPIO_Init+0x20c>)
 8000ccc:	f002 fa2a 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4825      	ldr	r0, [pc, #148]	@ (8000d78 <MX_GPIO_Init+0x210>)
 8000ce4:	f002 fa1e 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cfa:	2305      	movs	r3, #5
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	481c      	ldr	r0, [pc, #112]	@ (8000d78 <MX_GPIO_Init+0x210>)
 8000d06:	f002 fa0d 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d0a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000d0e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	4813      	ldr	r0, [pc, #76]	@ (8000d70 <MX_GPIO_Init+0x208>)
 8000d24:	f002 f9fe 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d28:	2320      	movs	r3, #32
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	@ (8000d70 <MX_GPIO_Init+0x208>)
 8000d3c:	f002 f9f2 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d44:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_GPIO_Init+0x200>)
 8000d56:	f002 f9e5 	bl	8003124 <HAL_GPIO_Init>

}
 8000d5a:	bf00      	nop
 8000d5c:	3730      	adds	r7, #48	@ 0x30
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020c00 	.word	0x40020c00
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40020400 	.word	0x40020400

08000d7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d82:	4a13      	ldr	r2, [pc, #76]	@ (8000dd0 <MX_I2C1_Init+0x54>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d88:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <MX_I2C1_Init+0x58>)
 8000d8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dac:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000dba:	f002 fb69 	bl	8003490 <HAL_I2C_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dc4:	f000 fb30 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000134 	.word	0x20000134
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	000186a0 	.word	0x000186a0

08000dd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	@ 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a19      	ldr	r2, [pc, #100]	@ (8000e5c <HAL_I2C_MspInit+0x84>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d12c      	bne.n	8000e54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a17      	ldr	r2, [pc, #92]	@ (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e16:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1c:	2312      	movs	r3, #18
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <HAL_I2C_MspInit+0x8c>)
 8000e34:	f002 f976 	bl	8003124 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e40:	4a07      	ldr	r2, [pc, #28]	@ (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_I2C_MspInit+0x88>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	@ 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020400 	.word	0x40020400

08000e68 <MX_I2S3_Init>:
DMA_HandleTypeDef hdma_i2s3_ext_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <MX_I2S3_Init+0x54>)
 8000e6e:	4a14      	ldr	r2, [pc, #80]	@ (8000ec0 <MX_I2S3_Init+0x58>)
 8000e70:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000e72:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <MX_I2S3_Init+0x54>)
 8000e74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e78:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <MX_I2S3_Init+0x54>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e80:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <MX_I2S3_Init+0x54>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <MX_I2S3_Init+0x54>)
 8000e88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e8c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <MX_I2S3_Init+0x54>)
 8000e90:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000e94:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <MX_I2S3_Init+0x54>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <MX_I2S3_Init+0x54>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <MX_I2S3_Init+0x54>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <MX_I2S3_Init+0x54>)
 8000eaa:	f002 ff9f 	bl	8003dec <HAL_I2S_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000eb4:	f000 fab8 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000188 	.word	0x20000188
 8000ec0:	40003c00 	.word	0x40003c00

08000ec4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	@ 0x38
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a6c      	ldr	r2, [pc, #432]	@ (80010a0 <HAL_I2S_MspInit+0x1dc>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	f040 80d0 	bne.w	8001096 <HAL_I2S_MspInit+0x1d2>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000efa:	2332      	movs	r3, #50	@ 0x32
 8000efc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4618      	mov	r0, r3
 8000f08:	f005 fbb2 	bl	8006670 <HAL_RCCEx_PeriphCLKConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000f12:	f000 fa89 	bl	8001428 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b62      	ldr	r3, [pc, #392]	@ (80010a4 <HAL_I2S_MspInit+0x1e0>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	4a61      	ldr	r2, [pc, #388]	@ (80010a4 <HAL_I2S_MspInit+0x1e0>)
 8000f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f26:	4b5f      	ldr	r3, [pc, #380]	@ (80010a4 <HAL_I2S_MspInit+0x1e0>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b5b      	ldr	r3, [pc, #364]	@ (80010a4 <HAL_I2S_MspInit+0x1e0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a5a      	ldr	r2, [pc, #360]	@ (80010a4 <HAL_I2S_MspInit+0x1e0>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b58      	ldr	r3, [pc, #352]	@ (80010a4 <HAL_I2S_MspInit+0x1e0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b54      	ldr	r3, [pc, #336]	@ (80010a4 <HAL_I2S_MspInit+0x1e0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a53      	ldr	r2, [pc, #332]	@ (80010a4 <HAL_I2S_MspInit+0x1e0>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b51      	ldr	r3, [pc, #324]	@ (80010a4 <HAL_I2S_MspInit+0x1e0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f6a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4848      	ldr	r0, [pc, #288]	@ (80010a8 <HAL_I2S_MspInit+0x1e4>)
 8000f88:	f002 f8cc 	bl	8003124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4840      	ldr	r0, [pc, #256]	@ (80010ac <HAL_I2S_MspInit+0x1e8>)
 8000faa:	f002 f8bb 	bl	8003124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4837      	ldr	r0, [pc, #220]	@ (80010a8 <HAL_I2S_MspInit+0x1e4>)
 8000fcc:	f002 f8aa 	bl	8003124 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8000fd0:	4b37      	ldr	r3, [pc, #220]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 8000fd2:	4a38      	ldr	r2, [pc, #224]	@ (80010b4 <HAL_I2S_MspInit+0x1f0>)
 8000fd4:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000fd6:	4b36      	ldr	r3, [pc, #216]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 8000fd8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000fdc:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fde:	4b34      	ldr	r3, [pc, #208]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe4:	4b32      	ldr	r3, [pc, #200]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fea:	4b31      	ldr	r3, [pc, #196]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 8000fec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ff0:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 8000ff4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ff8:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 8000ffc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001000:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001002:	4b2b      	ldr	r3, [pc, #172]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 8001004:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001008:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800100a:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 800100c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001010:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001012:	4b27      	ldr	r3, [pc, #156]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 8001018:	4825      	ldr	r0, [pc, #148]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 800101a:	f001 fca3 	bl	8002964 <HAL_DMA_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_I2S_MspInit+0x164>
    {
      Error_Handler();
 8001024:	f000 fa00 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s3_ext_rx);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 800102c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800102e:	4a20      	ldr	r2, [pc, #128]	@ (80010b0 <HAL_I2S_MspInit+0x1ec>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001034:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 8001036:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <HAL_I2S_MspInit+0x1f8>)
 8001038:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800103a:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001040:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 8001042:	2240      	movs	r2, #64	@ 0x40
 8001044:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001046:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800104c:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 800104e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001052:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 8001056:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800105a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 800105e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001062:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 8001066:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800106a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 800106e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001072:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001074:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800107a:	480f      	ldr	r0, [pc, #60]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 800107c:	f001 fc72 	bl	8002964 <HAL_DMA_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_I2S_MspInit+0x1c6>
    {
      Error_Handler();
 8001086:	f000 f9cf 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 800108e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001090:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <HAL_I2S_MspInit+0x1f4>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001096:	bf00      	nop
 8001098:	3738      	adds	r7, #56	@ 0x38
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40003c00 	.word	0x40003c00
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020000 	.word	0x40020000
 80010b0:	200001d0 	.word	0x200001d0
 80010b4:	40026010 	.word	0x40026010
 80010b8:	20000230 	.word	0x20000230
 80010bc:	40026088 	.word	0x40026088

080010c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d013      	beq.n	8001100 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80010e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010e8:	e000      	b.n	80010ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80010ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f9      	beq.n	80010ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <printDACData>:
    for (uint16_t i = 0; i < ADC_BUFFER_SIZE; i++) {
        printf("adcData[%d] = %u\n", i, adcData[i]);
    }
}

void printDACData(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < DAC_BUFFER_SIZE; i++) {
 8001116:	2300      	movs	r3, #0
 8001118:	80fb      	strh	r3, [r7, #6]
 800111a:	e00c      	b.n	8001136 <printDACData+0x26>
        printf("dacData[%d] = %u\n", i, (uint16_t)dacData[i]);
 800111c:	88f9      	ldrh	r1, [r7, #6]
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	4a09      	ldr	r2, [pc, #36]	@ (8001148 <printDACData+0x38>)
 8001122:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	4808      	ldr	r0, [pc, #32]	@ (800114c <printDACData+0x3c>)
 800112c:	f007 fc18 	bl	8008960 <iprintf>
    for (uint16_t i = 0; i < DAC_BUFFER_SIZE; i++) {
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	3301      	adds	r3, #1
 8001134:	80fb      	strh	r3, [r7, #6]
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	2bff      	cmp	r3, #255	@ 0xff
 800113a:	d9ef      	bls.n	800111c <printDACData+0xc>
    }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000490 	.word	0x20000490
 800114c:	08009660 	.word	0x08009660

08001150 <processData>:

void processData() {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	printDACData();
 8001156:	f7ff ffdb 	bl	8001110 <printDACData>

	for (uint8_t n = 0; n < (AUDIO_BLOCK_SIZE / 2) - 1; n += 2) {
 800115a:	2300      	movs	r3, #0
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	e052      	b.n	8001206 <processData+0xb6>

		static float leftIn, leftOut;
		static float rightIn, rightOut;
		// Left channel
		leftIn = ((int16_t)inBufPtr[n] - 2300);  // for ADC values
 8001160:	4b2e      	ldr	r3, [pc, #184]	@ (800121c <processData+0xcc>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	b21b      	sxth	r3, r3
 8001170:	f6a3 03fc 	subw	r3, r3, #2300	@ 0x8fc
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117c:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <processData+0xd0>)
 800117e:	edc3 7a00 	vstr	s15, [r3]
		leftOut = leftIn;
 8001182:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <processData+0xd0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a27      	ldr	r2, [pc, #156]	@ (8001224 <processData+0xd4>)
 8001188:	6013      	str	r3, [r2, #0]

		outBufPtr[n] = (int16_t) (16 * leftOut);
 800118a:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <processData+0xd4>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001198:	4b23      	ldr	r3, [pc, #140]	@ (8001228 <processData+0xd8>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a6:	ee17 2a90 	vmov	r2, s15
 80011aa:	b212      	sxth	r2, r2
 80011ac:	801a      	strh	r2, [r3, #0]
//		printf("LeftOut[%u]: %hd\n", n, (int16_t) (16 * leftOut));

		// Right channel
		rightIn = ((int16_t)inBufPtr[n + 1] - 2300);  // for ADC values
 80011ae:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <processData+0xcc>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	3301      	adds	r3, #1
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	b21b      	sxth	r3, r3
 80011c0:	f6a3 03fc 	subw	r3, r3, #2300	@ 0x8fc
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011cc:	4b17      	ldr	r3, [pc, #92]	@ (800122c <processData+0xdc>)
 80011ce:	edc3 7a00 	vstr	s15, [r3]
		rightOut = rightIn;
 80011d2:	4b16      	ldr	r3, [pc, #88]	@ (800122c <processData+0xdc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a16      	ldr	r2, [pc, #88]	@ (8001230 <processData+0xe0>)
 80011d8:	6013      	str	r3, [r2, #0]

		outBufPtr[n + 1] = (int16_t) (16 * rightOut);
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <processData+0xe0>)
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80011e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <processData+0xd8>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	3301      	adds	r3, #1
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f8:	ee17 2a90 	vmov	r2, s15
 80011fc:	b212      	sxth	r2, r2
 80011fe:	801a      	strh	r2, [r3, #0]
	for (uint8_t n = 0; n < (AUDIO_BLOCK_SIZE / 2) - 1; n += 2) {
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	3302      	adds	r3, #2
 8001204:	71fb      	strb	r3, [r7, #7]
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b7e      	cmp	r3, #126	@ 0x7e
 800120a:	d9a9      	bls.n	8001160 <processData+0x10>
//		printf("RightOut[%u]: %hd\n", n+1, (int16_t) (16 * rightOut));
	}
	dataReadyFlag = 0;
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <processData+0xe4>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000690 	.word	0x20000690
 8001220:	20000698 	.word	0x20000698
 8001224:	2000069c 	.word	0x2000069c
 8001228:	20000004 	.word	0x20000004
 800122c:	200006a0 	.word	0x200006a0
 8001230:	200006a4 	.word	0x200006a4
 8001234:	20000694 	.word	0x20000694

08001238 <HAL_I2S_TxHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// === DMA callbacks ===

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    inBufPtr = &adcData[0];
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8001242:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 8001244:	601a      	str	r2, [r3, #0]
    outBufPtr = &dacData[0];
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_I2S_TxHalfCpltCallback+0x30>)
 8001248:	4a08      	ldr	r2, [pc, #32]	@ (800126c <HAL_I2S_TxHalfCpltCallback+0x34>)
 800124a:	601a      	str	r2, [r3, #0]

    dataReadyFlag = 1;
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <HAL_I2S_TxHalfCpltCallback+0x38>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
    processData();
 8001252:	f7ff ff7d 	bl	8001150 <processData>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000690 	.word	0x20000690
 8001264:	20000290 	.word	0x20000290
 8001268:	20000004 	.word	0x20000004
 800126c:	20000490 	.word	0x20000490
 8001270:	20000694 	.word	0x20000694

08001274 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
    inBufPtr = &adcData[ADC_BUFFER_SIZE / 2];
 800127c:	4b07      	ldr	r3, [pc, #28]	@ (800129c <HAL_I2S_TxCpltCallback+0x28>)
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <HAL_I2S_TxCpltCallback+0x2c>)
 8001280:	601a      	str	r2, [r3, #0]
    outBufPtr = &dacData[DAC_BUFFER_SIZE / 2];
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <HAL_I2S_TxCpltCallback+0x30>)
 8001284:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <HAL_I2S_TxCpltCallback+0x34>)
 8001286:	601a      	str	r2, [r3, #0]

    dataReadyFlag = 1;
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <HAL_I2S_TxCpltCallback+0x38>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
    processData();
 800128e:	f7ff ff5f 	bl	8001150 <processData>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000690 	.word	0x20000690
 80012a0:	20000390 	.word	0x20000390
 80012a4:	20000004 	.word	0x20000004
 80012a8:	20000590 	.word	0x20000590
 80012ac:	20000694 	.word	0x20000694

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b4:	f000 fc78 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b8:	f000 f830 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012bc:	f7ff fc54 	bl	8000b68 <MX_GPIO_Init>
  MX_DMA_Init();
 80012c0:	f7ff fc14 	bl	8000aec <MX_DMA_Init>
  MX_I2C1_Init();
 80012c4:	f7ff fd5a 	bl	8000d7c <MX_I2C1_Init>
  MX_I2S3_Init();
 80012c8:	f7ff fdce 	bl	8000e68 <MX_I2S3_Init>
  MX_ADC1_Init();
 80012cc:	f7ff f966 	bl	800059c <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012d0:	f000 fb78 	bl	80019c4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80012d4:	f000 fa50 	bl	8001778 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80012d8:	f000 fae0 	bl	800189c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80012dc:	f000 f8aa 	bl	8001434 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  cs43l22_init();
 80012e0:	f7ff faa2 	bl	8000828 <cs43l22_init>
  cs43l22_unmute();  // unmute
 80012e4:	f7ff fa66 	bl	80007b4 <cs43l22_unmute>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_BUFFER_SIZE);
 80012e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ec:	4907      	ldr	r1, [pc, #28]	@ (800130c <main+0x5c>)
 80012ee:	4808      	ldr	r0, [pc, #32]	@ (8001310 <main+0x60>)
 80012f0:	f000 fe44 	bl	8001f7c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 80012f4:	4807      	ldr	r0, [pc, #28]	@ (8001314 <main+0x64>)
 80012f6:	f005 fbd3 	bl	8006aa0 <HAL_TIM_Base_Start>
  cs43l22_stop();
 80012fa:	f7ff fb89 	bl	8000a10 <cs43l22_stop>
  cs43l22_play((int16_t*)dacData, DAC_BUFFER_SIZE);
 80012fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <main+0x68>)
 8001304:	f7ff fb44 	bl	8000990 <cs43l22_play>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dataReadyFlag) {
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <main+0x58>
 800130c:	20000290 	.word	0x20000290
 8001310:	2000008c 	.word	0x2000008c
 8001314:	20000704 	.word	0x20000704
 8001318:	20000490 	.word	0x20000490

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b094      	sub	sp, #80	@ 0x50
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	2230      	movs	r2, #48	@ 0x30
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f007 fb2a 	bl	8008984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <SystemClock_Config+0xcc>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	4a27      	ldr	r2, [pc, #156]	@ (80013e8 <SystemClock_Config+0xcc>)
 800134a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001350:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <SystemClock_Config+0xcc>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <SystemClock_Config+0xd0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a21      	ldr	r2, [pc, #132]	@ (80013ec <SystemClock_Config+0xd0>)
 8001366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <SystemClock_Config+0xd0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001382:	2302      	movs	r3, #2
 8001384:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001386:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800138c:	2308      	movs	r3, #8
 800138e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001390:	23a8      	movs	r3, #168	@ 0xa8
 8001392:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001394:	2302      	movs	r3, #2
 8001396:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001398:	2307      	movs	r3, #7
 800139a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 fccf 	bl	8005d44 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013ac:	f000 f83c 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2302      	movs	r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2105      	movs	r1, #5
 80013ce:	4618      	mov	r0, r3
 80013d0:	f004 ff30 	bl	8006234 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013da:	f000 f825 	bl	8001428 <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	@ 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e009      	b.n	8001416 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	60ba      	str	r2, [r7, #8]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fe58 	bl	80010c0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	dbf1      	blt.n	8001402 <_write+0x12>
  }
  return len;
 800141e:	687b      	ldr	r3, [r7, #4]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <Error_Handler+0x8>

08001434 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001438:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <MX_SPI1_Init+0x64>)
 800143a:	4a18      	ldr	r2, [pc, #96]	@ (800149c <MX_SPI1_Init+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001440:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001444:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <MX_SPI1_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_SPI1_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001464:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001466:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146c:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <MX_SPI1_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001472:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <MX_SPI1_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001480:	220a      	movs	r2, #10
 8001482:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	@ (8001498 <MX_SPI1_Init+0x64>)
 8001486:	f005 fa33 	bl	80068f0 <HAL_SPI_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001490:	f7ff ffca 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200006a8 	.word	0x200006a8
 800149c:	40013000 	.word	0x40013000

080014a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a19      	ldr	r2, [pc, #100]	@ (8001524 <HAL_SPI_MspInit+0x84>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12b      	bne.n	800151a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <HAL_SPI_MspInit+0x88>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a17      	ldr	r2, [pc, #92]	@ (8001528 <HAL_SPI_MspInit+0x88>)
 80014cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_SPI_MspInit+0x88>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <HAL_SPI_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a10      	ldr	r2, [pc, #64]	@ (8001528 <HAL_SPI_MspInit+0x88>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <HAL_SPI_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014fa:	23e0      	movs	r3, #224	@ 0xe0
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800150a:	2305      	movs	r3, #5
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <HAL_SPI_MspInit+0x8c>)
 8001516:	f001 fe05 	bl	8003124 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	@ 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40013000 	.word	0x40013000
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_MspInit+0x4c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	4a0f      	ldr	r2, [pc, #60]	@ (800157c <HAL_MspInit+0x4c>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001544:	6453      	str	r3, [r2, #68]	@ 0x44
 8001546:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <HAL_MspInit+0x4c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	4a08      	ldr	r2, [pc, #32]	@ (800157c <HAL_MspInit+0x4c>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	@ 0x40
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800156e:	2007      	movs	r0, #7
 8001570:	f001 f9b6 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <NMI_Handler+0x4>

08001588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <MemManage_Handler+0x4>

08001598 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d6:	f000 fb39 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <DMA1_Stream0_IRQHandler+0x10>)
 80015e6:	f001 fb33 	bl	8002c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200001d0 	.word	0x200001d0

080015f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <DMA1_Stream5_IRQHandler+0x10>)
 80015fa:	f001 fb29 	bl	8002c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000230 	.word	0x20000230

08001608 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <ADC_IRQHandler+0x10>)
 800160e:	f000 fba4 	bl	8001d5a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000008c 	.word	0x2000008c

0800161c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <DMA2_Stream0_IRQHandler+0x10>)
 8001622:	f001 fb15 	bl	8002c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200000d4 	.word	0x200000d4

08001630 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <OTG_FS_IRQHandler+0x10>)
 8001636:	f003 fc76 	bl	8004f26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000794 	.word	0x20000794

08001644 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e00a      	b.n	800166c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001656:	f3af 8000 	nop.w
 800165a:	4601      	mov	r1, r0
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	b2ca      	uxtb	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	dbf0      	blt.n	8001656 <_read+0x12>
  }

  return len;
 8001674:	687b      	ldr	r3, [r7, #4]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_close>:
  }
  return len;
}

int _close(int file)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a6:	605a      	str	r2, [r3, #4]
  return 0;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_isatty>:

int _isatty(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	@ (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	@ (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	@ (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f007 f93c 	bl	8008994 <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	@ (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20020000 	.word	0x20020000
 8001748:	00000400 	.word	0x00000400
 800174c:	20000700 	.word	0x20000700
 8001750:	20000dc8 	.word	0x20000dc8

08001754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	@ 0x38
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178c:	f107 0320 	add.w	r3, r7, #32
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <MX_TIM2_Init+0xe0>)
 80017aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 80017b0:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <MX_TIM2_Init+0xe0>)
 80017b2:	2205      	movs	r2, #5
 80017b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b28      	ldr	r3, [pc, #160]	@ (8001858 <MX_TIM2_Init+0xe0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 291;
 80017bc:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <MX_TIM2_Init+0xe0>)
 80017be:	f240 1223 	movw	r2, #291	@ 0x123
 80017c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <MX_TIM2_Init+0xe0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ca:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <MX_TIM2_Init+0xe0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017d0:	4821      	ldr	r0, [pc, #132]	@ (8001858 <MX_TIM2_Init+0xe0>)
 80017d2:	f005 f916 	bl	8006a02 <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017dc:	f7ff fe24 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ea:	4619      	mov	r1, r3
 80017ec:	481a      	ldr	r0, [pc, #104]	@ (8001858 <MX_TIM2_Init+0xe0>)
 80017ee:	f005 fadb 	bl	8006da8 <HAL_TIM_ConfigClockSource>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017f8:	f7ff fe16 	bl	8001428 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017fc:	4816      	ldr	r0, [pc, #88]	@ (8001858 <MX_TIM2_Init+0xe0>)
 80017fe:	f005 f9b7 	bl	8006b70 <HAL_TIM_PWM_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001808:	f7ff fe0e 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800180c:	2320      	movs	r3, #32
 800180e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001814:	f107 0320 	add.w	r3, r7, #32
 8001818:	4619      	mov	r1, r3
 800181a:	480f      	ldr	r0, [pc, #60]	@ (8001858 <MX_TIM2_Init+0xe0>)
 800181c:	f005 fe82 	bl	8007524 <HAL_TIMEx_MasterConfigSynchronization>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001826:	f7ff fdff 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182a:	2360      	movs	r3, #96	@ 0x60
 800182c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_TIM2_Init+0xe0>)
 8001842:	f005 f9ef 	bl	8006c24 <HAL_TIM_PWM_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800184c:	f7ff fdec 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	3738      	adds	r7, #56	@ 0x38
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000704 	.word	0x20000704

0800185c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800186c:	d10d      	bne.n	800188a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_TIM_Base_MspInit+0x3c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	4a08      	ldr	r2, [pc, #32]	@ (8001898 <HAL_TIM_Base_MspInit+0x3c>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_TIM_Base_MspInit+0x3c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	@ (80018ec <MX_USART3_UART_Init+0x50>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <MX_USART3_UART_Init+0x4c>)
 80018d4:	f005 fea2 	bl	800761c <HAL_UART_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018de:	f7ff fda3 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000074c 	.word	0x2000074c
 80018ec:	40004800 	.word	0x40004800

080018f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	@ 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a29      	ldr	r2, [pc, #164]	@ (80019b4 <HAL_UART_MspInit+0xc4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d14b      	bne.n	80019aa <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <HAL_UART_MspInit+0xc8>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	4a27      	ldr	r2, [pc, #156]	@ (80019b8 <HAL_UART_MspInit+0xc8>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001920:	6413      	str	r3, [r2, #64]	@ 0x40
 8001922:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <HAL_UART_MspInit+0xc8>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <HAL_UART_MspInit+0xc8>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a20      	ldr	r2, [pc, #128]	@ (80019b8 <HAL_UART_MspInit+0xc8>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <HAL_UART_MspInit+0xc8>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_UART_MspInit+0xc8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_UART_MspInit+0xc8>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_UART_MspInit+0xc8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001966:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001978:	2307      	movs	r3, #7
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	480e      	ldr	r0, [pc, #56]	@ (80019bc <HAL_UART_MspInit+0xcc>)
 8001984:	f001 fbce 	bl	8003124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800199a:	2307      	movs	r3, #7
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	4806      	ldr	r0, [pc, #24]	@ (80019c0 <HAL_UART_MspInit+0xd0>)
 80019a6:	f001 fbbd 	bl	8003124 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	@ 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40004800 	.word	0x40004800
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020400 	.word	0x40020400
 80019c0:	40020c00 	.word	0x40020c00

080019c4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019c8:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80019ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d2:	2204      	movs	r2, #4
 80019d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d8:	2202      	movs	r2, #2
 80019da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019f4:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a08:	f003 f97e 	bl	8004d08 <HAL_PCD_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a12:	f7ff fd09 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000794 	.word	0x20000794

08001a20 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a40:	d147      	bne.n	8001ad2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <HAL_PCD_MspInit+0xbc>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a24      	ldr	r2, [pc, #144]	@ (8001adc <HAL_PCD_MspInit+0xbc>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <HAL_PCD_MspInit+0xbc>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001a5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	481b      	ldr	r0, [pc, #108]	@ (8001ae0 <HAL_PCD_MspInit+0xc0>)
 8001a74:	f001 fb56 	bl	8003124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001a78:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4812      	ldr	r0, [pc, #72]	@ (8001ae0 <HAL_PCD_MspInit+0xc0>)
 8001a96:	f001 fb45 	bl	8003124 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <HAL_PCD_MspInit+0xbc>)
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001adc <HAL_PCD_MspInit+0xbc>)
 8001aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aa4:	6353      	str	r3, [r2, #52]	@ 0x34
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_PCD_MspInit+0xbc>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <HAL_PCD_MspInit+0xbc>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_PCD_MspInit+0xbc>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2043      	movs	r0, #67	@ 0x43
 8001ac8:	f000 ff15 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001acc:	2043      	movs	r0, #67	@ 0x43
 8001ace:	f000 ff2e 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	@ 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ae8:	f7ff fe34 	bl	8001754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aec:	480c      	ldr	r0, [pc, #48]	@ (8001b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aee:	490d      	ldr	r1, [pc, #52]	@ (8001b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b04:	4c0a      	ldr	r4, [pc, #40]	@ (8001b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b12:	f006 ff45 	bl	80089a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b16:	f7ff fbcb 	bl	80012b0 <main>
  bx  lr    
 8001b1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b28:	080096d8 	.word	0x080096d8
  ldr r2, =_sbss
 8001b2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b30:	20000dc8 	.word	0x20000dc8

08001b34 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <CAN1_RX0_IRQHandler>

08001b36 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001b4c:	f000 f804 	bl	8001b58 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a07      	ldr	r2, [pc, #28]	@ (8001ba0 <HAL_I2S_ErrorCallback+0x2c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001b86:	f7ff ffd6 	bl	8001b36 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ba4 <HAL_I2S_ErrorCallback+0x30>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d101      	bne.n	8001b98 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001b94:	f7ff ffe7 	bl	8001b66 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40003c00 	.word	0x40003c00
 8001ba4:	40003800 	.word	0x40003800

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <HAL_Init+0x40>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <HAL_Init+0x40>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	@ (8001be8 <HAL_Init+0x40>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 fe85 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 f808 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff fca8 	bl	8001530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_InitTick+0x54>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_InitTick+0x58>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fe9d 	bl	800294a <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00e      	b.n	8001c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d80a      	bhi.n	8001c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c28:	f000 fe65 	bl	80028f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c2c:	4a06      	ldr	r2, [pc, #24]	@ (8001c48 <HAL_InitTick+0x5c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000008 	.word	0x20000008
 8001c44:	20000010 	.word	0x20000010
 8001c48:	2000000c 	.word	0x2000000c

08001c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_IncTick+0x20>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_IncTick+0x24>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	@ (8001c70 <HAL_IncTick+0x24>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000010 	.word	0x20000010
 8001c70:	20000c78 	.word	0x20000c78

08001c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <HAL_GetTick+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000c78 	.word	0x20000c78

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff ffee 	bl	8001c74 <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb2:	bf00      	nop
 8001cb4:	f7ff ffde 	bl	8001c74 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000010 	.word	0x20000010

08001cd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e033      	b.n	8001d52 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fca4 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d118      	bne.n	8001d44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d1a:	f023 0302 	bic.w	r3, r3, #2
 8001d1e:	f043 0202 	orr.w	r2, r3, #2
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fb82 	bl	8002430 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d42:	e001      	b.n	8001d48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d049      	beq.n	8001e24 <HAL_ADC_IRQHandler+0xca>
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d046      	beq.n	8001e24 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d12b      	bne.n	8001e14 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d127      	bne.n	8001e14 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d006      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d119      	bne.n	8001e14 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0220 	bic.w	r2, r2, #32
 8001dee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	f043 0201 	orr.w	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f9c1 	bl	800219c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f06f 0212 	mvn.w	r2, #18
 8001e22:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e32:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d057      	beq.n	8001eea <HAL_ADC_IRQHandler+0x190>
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d054      	beq.n	8001eea <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d139      	bne.n	8001eda <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d12b      	bne.n	8001eda <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d124      	bne.n	8001eda <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d11d      	bne.n	8001eda <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d119      	bne.n	8001eda <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001eb4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d105      	bne.n	8001eda <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fc26 	bl	800272c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 020c 	mvn.w	r2, #12
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d017      	beq.n	8001f30 <HAL_ADC_IRQHandler+0x1d6>
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d014      	beq.n	8001f30 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10d      	bne.n	8001f30 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f94f 	bl	80021c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f06f 0201 	mvn.w	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f3e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d015      	beq.n	8001f72 <HAL_ADC_IRQHandler+0x218>
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d012      	beq.n	8001f72 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f50:	f043 0202 	orr.w	r2, r3, #2
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0220 	mvn.w	r2, #32
 8001f60:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f938 	bl	80021d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0220 	mvn.w	r2, #32
 8001f70:	601a      	str	r2, [r3, #0]
  }
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Start_DMA+0x1e>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e0e9      	b.n	800216e <HAL_ADC_Start_DMA+0x1f2>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d018      	beq.n	8001fe2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc0:	4b6d      	ldr	r3, [pc, #436]	@ (8002178 <HAL_ADC_Start_DMA+0x1fc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6d      	ldr	r2, [pc, #436]	@ (800217c <HAL_ADC_Start_DMA+0x200>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0c9a      	lsrs	r2, r3, #18
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001fd4:	e002      	b.n	8001fdc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f9      	bne.n	8001fd6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ff0:	d107      	bne.n	8002002 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002000:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	f040 80a1 	bne.w	8002154 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800203c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800204c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002050:	d106      	bne.n	8002060 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	f023 0206 	bic.w	r2, r3, #6
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44
 800205e:	e002      	b.n	8002066 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206e:	4b44      	ldr	r3, [pc, #272]	@ (8002180 <HAL_ADC_Start_DMA+0x204>)
 8002070:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002076:	4a43      	ldr	r2, [pc, #268]	@ (8002184 <HAL_ADC_Start_DMA+0x208>)
 8002078:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207e:	4a42      	ldr	r2, [pc, #264]	@ (8002188 <HAL_ADC_Start_DMA+0x20c>)
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002086:	4a41      	ldr	r2, [pc, #260]	@ (800218c <HAL_ADC_Start_DMA+0x210>)
 8002088:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002092:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80020a2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020b2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	334c      	adds	r3, #76	@ 0x4c
 80020be:	4619      	mov	r1, r3
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f000 fcfc 	bl	8002ac0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d12a      	bne.n	800212a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002190 <HAL_ADC_Start_DMA+0x214>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d015      	beq.n	800210a <HAL_ADC_Start_DMA+0x18e>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002194 <HAL_ADC_Start_DMA+0x218>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d105      	bne.n	80020f4 <HAL_ADC_Start_DMA+0x178>
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <HAL_ADC_Start_DMA+0x204>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a27      	ldr	r2, [pc, #156]	@ (8002198 <HAL_ADC_Start_DMA+0x21c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d136      	bne.n	800216c <HAL_ADC_Start_DMA+0x1f0>
 80020fe:	4b20      	ldr	r3, [pc, #128]	@ (8002180 <HAL_ADC_Start_DMA+0x204>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b00      	cmp	r3, #0
 8002108:	d130      	bne.n	800216c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d129      	bne.n	800216c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	e020      	b.n	800216c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a18      	ldr	r2, [pc, #96]	@ (8002190 <HAL_ADC_Start_DMA+0x214>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d11b      	bne.n	800216c <HAL_ADC_Start_DMA+0x1f0>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d114      	bne.n	800216c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	e00b      	b.n	800216c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	f043 0210 	orr.w	r2, r3, #16
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000008 	.word	0x20000008
 800217c:	431bde83 	.word	0x431bde83
 8002180:	40012300 	.word	0x40012300
 8002184:	08002629 	.word	0x08002629
 8002188:	080026e3 	.word	0x080026e3
 800218c:	080026ff 	.word	0x080026ff
 8002190:	40012000 	.word	0x40012000
 8002194:	40012100 	.word	0x40012100
 8002198:	40012200 	.word	0x40012200

0800219c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1c>
 8002204:	2302      	movs	r3, #2
 8002206:	e105      	b.n	8002414 <HAL_ADC_ConfigChannel+0x228>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b09      	cmp	r3, #9
 8002216:	d925      	bls.n	8002264 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68d9      	ldr	r1, [r3, #12]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	3b1e      	subs	r3, #30
 800222e:	2207      	movs	r2, #7
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43da      	mvns	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	400a      	ands	r2, r1
 800223c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68d9      	ldr	r1, [r3, #12]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b29b      	uxth	r3, r3
 800224e:	4618      	mov	r0, r3
 8002250:	4603      	mov	r3, r0
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4403      	add	r3, r0
 8002256:	3b1e      	subs	r3, #30
 8002258:	409a      	lsls	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	e022      	b.n	80022aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6919      	ldr	r1, [r3, #16]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	461a      	mov	r2, r3
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	2207      	movs	r2, #7
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	400a      	ands	r2, r1
 8002286:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6919      	ldr	r1, [r3, #16]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	4603      	mov	r3, r0
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4403      	add	r3, r0
 80022a0:	409a      	lsls	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d824      	bhi.n	80022fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	3b05      	subs	r3, #5
 80022c4:	221f      	movs	r2, #31
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43da      	mvns	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	400a      	ands	r2, r1
 80022d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	3b05      	subs	r3, #5
 80022ee:	fa00 f203 	lsl.w	r2, r0, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80022fa:	e04c      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b0c      	cmp	r3, #12
 8002302:	d824      	bhi.n	800234e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	3b23      	subs	r3, #35	@ 0x23
 8002316:	221f      	movs	r2, #31
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43da      	mvns	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	400a      	ands	r2, r1
 8002324:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	4618      	mov	r0, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	3b23      	subs	r3, #35	@ 0x23
 8002340:	fa00 f203 	lsl.w	r2, r0, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	631a      	str	r2, [r3, #48]	@ 0x30
 800234c:	e023      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	3b41      	subs	r3, #65	@ 0x41
 8002360:	221f      	movs	r2, #31
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	400a      	ands	r2, r1
 800236e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	3b41      	subs	r3, #65	@ 0x41
 800238a:	fa00 f203 	lsl.w	r2, r0, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002396:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <HAL_ADC_ConfigChannel+0x234>)
 8002398:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a21      	ldr	r2, [pc, #132]	@ (8002424 <HAL_ADC_ConfigChannel+0x238>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d109      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1cc>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b12      	cmp	r3, #18
 80023aa:	d105      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a19      	ldr	r2, [pc, #100]	@ (8002424 <HAL_ADC_ConfigChannel+0x238>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d123      	bne.n	800240a <HAL_ADC_ConfigChannel+0x21e>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d003      	beq.n	80023d2 <HAL_ADC_ConfigChannel+0x1e6>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b11      	cmp	r3, #17
 80023d0:	d11b      	bne.n	800240a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d111      	bne.n	800240a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023e6:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <HAL_ADC_ConfigChannel+0x23c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a10      	ldr	r2, [pc, #64]	@ (800242c <HAL_ADC_ConfigChannel+0x240>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	0c9a      	lsrs	r2, r3, #18
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023fc:	e002      	b.n	8002404 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3b01      	subs	r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f9      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40012300 	.word	0x40012300
 8002424:	40012000 	.word	0x40012000
 8002428:	20000008 	.word	0x20000008
 800242c:	431bde83 	.word	0x431bde83

08002430 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002438:	4b79      	ldr	r3, [pc, #484]	@ (8002620 <ADC_Init+0x1f0>)
 800243a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	431a      	orrs	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002464:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	021a      	lsls	r2, r3, #8
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6899      	ldr	r1, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c2:	4a58      	ldr	r2, [pc, #352]	@ (8002624 <ADC_Init+0x1f4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d022      	beq.n	800250e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6899      	ldr	r1, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	e00f      	b.n	800252e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800251c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800252c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0202 	bic.w	r2, r2, #2
 800253c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6899      	ldr	r1, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7e1b      	ldrb	r3, [r3, #24]
 8002548:	005a      	lsls	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01b      	beq.n	8002594 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800256a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800257a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	3b01      	subs	r3, #1
 8002588:	035a      	lsls	r2, r3, #13
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	e007      	b.n	80025a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	3b01      	subs	r3, #1
 80025c0:	051a      	lsls	r2, r3, #20
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6899      	ldr	r1, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025e6:	025a      	lsls	r2, r3, #9
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6899      	ldr	r1, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	029a      	lsls	r2, r3, #10
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	609a      	str	r2, [r3, #8]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	40012300 	.word	0x40012300
 8002624:	0f000001 	.word	0x0f000001

08002628 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002634:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800263e:	2b00      	cmp	r3, #0
 8002640:	d13c      	bne.n	80026bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d12b      	bne.n	80026b4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002660:	2b00      	cmp	r3, #0
 8002662:	d127      	bne.n	80026b4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800267c:	2b00      	cmp	r3, #0
 800267e:	d119      	bne.n	80026b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0220 	bic.w	r2, r2, #32
 800268e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff fd71 	bl	800219c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026ba:	e00e      	b.n	80026da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f7ff fd85 	bl	80021d8 <HAL_ADC_ErrorCallback>
}
 80026ce:	e004      	b.n	80026da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff fd5d 	bl	80021b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2240      	movs	r2, #64	@ 0x40
 8002710:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f7ff fd5a 	bl	80021d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <__NVIC_SetPriorityGrouping>:
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002750:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800275c:	4013      	ands	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800276c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002772:	4a04      	ldr	r2, [pc, #16]	@ (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	60d3      	str	r3, [r2, #12]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_GetPriorityGrouping>:
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800278c:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <__NVIC_GetPriorityGrouping+0x18>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	f003 0307 	and.w	r3, r3, #7
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_EnableIRQ>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db0b      	blt.n	80027ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4907      	ldr	r1, [pc, #28]	@ (80027dc <__NVIC_EnableIRQ+0x38>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2001      	movs	r0, #1
 80027c6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100

080027e0 <__NVIC_SetPriority>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	db0a      	blt.n	800280a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	490c      	ldr	r1, [pc, #48]	@ (800282c <__NVIC_SetPriority+0x4c>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	0112      	lsls	r2, r2, #4
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	440b      	add	r3, r1
 8002804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002808:	e00a      	b.n	8002820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4908      	ldr	r1, [pc, #32]	@ (8002830 <__NVIC_SetPriority+0x50>)
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3b04      	subs	r3, #4
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	440b      	add	r3, r1
 800281e:	761a      	strb	r2, [r3, #24]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000e100 	.word	0xe000e100
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <NVIC_EncodePriority>:
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	@ 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f1c3 0307 	rsb	r3, r3, #7
 800284e:	2b04      	cmp	r3, #4
 8002850:	bf28      	it	cs
 8002852:	2304      	movcs	r3, #4
 8002854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3304      	adds	r3, #4
 800285a:	2b06      	cmp	r3, #6
 800285c:	d902      	bls.n	8002864 <NVIC_EncodePriority+0x30>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3b03      	subs	r3, #3
 8002862:	e000      	b.n	8002866 <NVIC_EncodePriority+0x32>
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	401a      	ands	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800287c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	43d9      	mvns	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	4313      	orrs	r3, r2
}
 800288e:	4618      	mov	r0, r3
 8002890:	3724      	adds	r7, #36	@ 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <SysTick_Config>:
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028ac:	d301      	bcc.n	80028b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	4a0a      	ldr	r2, [pc, #40]	@ (80028dc <SysTick_Config+0x40>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ba:	210f      	movs	r1, #15
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028c0:	f7ff ff8e 	bl	80027e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <SysTick_Config+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <SysTick_Config+0x40>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff29 	bl	8002740 <__NVIC_SetPriorityGrouping>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002908:	f7ff ff3e 	bl	8002788 <__NVIC_GetPriorityGrouping>
 800290c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff8e 	bl	8002834 <NVIC_EncodePriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff5d 	bl	80027e0 <__NVIC_SetPriority>
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff31 	bl	80027a4 <__NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ffa2 	bl	800289c <SysTick_Config>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002970:	f7ff f980 	bl	8001c74 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e099      	b.n	8002ab4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a0:	e00f      	b.n	80029c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029a2:	f7ff f967 	bl	8001c74 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d908      	bls.n	80029c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2203      	movs	r2, #3
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e078      	b.n	8002ab4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e8      	bne.n	80029a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4b38      	ldr	r3, [pc, #224]	@ (8002abc <HAL_DMA_Init+0x158>)
 80029dc:	4013      	ands	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d107      	bne.n	8002a2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	4313      	orrs	r3, r2
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f023 0307 	bic.w	r3, r3, #7
 8002a42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d117      	bne.n	8002a86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00e      	beq.n	8002a86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fadf 	bl	800302c <DMA_CheckFifoParam>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2240      	movs	r2, #64	@ 0x40
 8002a78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a82:	2301      	movs	r3, #1
 8002a84:	e016      	b.n	8002ab4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa96 	bl	8002fc0 <DMA_CalcBaseAndBitshift>
 8002a94:	4603      	mov	r3, r0
 8002a96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9c:	223f      	movs	r2, #63	@ 0x3f
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	f010803f 	.word	0xf010803f

08002ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_DMA_Start_IT+0x26>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e040      	b.n	8002b68 <HAL_DMA_Start_IT+0xa8>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d12f      	bne.n	8002b5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fa28 	bl	8002f64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b18:	223f      	movs	r2, #63	@ 0x3f
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0216 	orr.w	r2, r2, #22
 8002b2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0208 	orr.w	r2, r2, #8
 8002b46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	e005      	b.n	8002b66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
 8002b64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b7e:	f7ff f879 	bl	8001c74 <HAL_GetTick>
 8002b82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d008      	beq.n	8002ba2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2280      	movs	r2, #128	@ 0x80
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e052      	b.n	8002c48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0216 	bic.w	r2, r2, #22
 8002bb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d103      	bne.n	8002bd2 <HAL_DMA_Abort+0x62>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0208 	bic.w	r2, r2, #8
 8002be0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf2:	e013      	b.n	8002c1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bf4:	f7ff f83e 	bl	8001c74 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b05      	cmp	r3, #5
 8002c00:	d90c      	bls.n	8002c1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e015      	b.n	8002c48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e4      	bne.n	8002bf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2e:	223f      	movs	r2, #63	@ 0x3f
 8002c30:	409a      	lsls	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c5c:	4b8e      	ldr	r3, [pc, #568]	@ (8002e98 <HAL_DMA_IRQHandler+0x248>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a8e      	ldr	r2, [pc, #568]	@ (8002e9c <HAL_DMA_IRQHandler+0x24c>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	0a9b      	lsrs	r3, r3, #10
 8002c68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01a      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d013      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0204 	bic.w	r2, r2, #4
 8002ca2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	2208      	movs	r2, #8
 8002caa:	409a      	lsls	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d012      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	2201      	movs	r2, #1
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cea:	f043 0202 	orr.w	r2, r3, #2
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d012      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d14:	2204      	movs	r2, #4
 8002d16:	409a      	lsls	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d20:	f043 0204 	orr.w	r2, r3, #4
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d043      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03c      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d018      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d108      	bne.n	8002d80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d024      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
 8002d7e:	e01f      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01b      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
 8002d90:	e016      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d107      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0208 	bic.w	r2, r2, #8
 8002dae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 808f 	beq.w	8002ef0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8087 	beq.w	8002ef0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de6:	2220      	movs	r2, #32
 8002de8:	409a      	lsls	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d136      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0216 	bic.w	r2, r2, #22
 8002e08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d103      	bne.n	8002e2a <HAL_DMA_IRQHandler+0x1da>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0208 	bic.w	r2, r2, #8
 8002e38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3e:	223f      	movs	r2, #63	@ 0x3f
 8002e40:	409a      	lsls	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d07e      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
        }
        return;
 8002e66:	e079      	b.n	8002f5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01d      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10d      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d031      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
 8002e94:	e02c      	b.n	8002ef0 <HAL_DMA_IRQHandler+0x2a0>
 8002e96:	bf00      	nop
 8002e98:	20000008 	.word	0x20000008
 8002e9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d023      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	4798      	blx	r3
 8002eb0:	e01e      	b.n	8002ef0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10f      	bne.n	8002ee0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0210 	bic.w	r2, r2, #16
 8002ece:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d032      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d022      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2205      	movs	r2, #5
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d307      	bcc.n	8002f38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f2      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x2cc>
 8002f36:	e000      	b.n	8002f3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
 8002f5a:	e000      	b.n	8002f5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f5c:	bf00      	nop
    }
  }
}
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b40      	cmp	r3, #64	@ 0x40
 8002f90:	d108      	bne.n	8002fa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fa2:	e007      	b.n	8002fb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	60da      	str	r2, [r3, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	3b10      	subs	r3, #16
 8002fd0:	4a14      	ldr	r2, [pc, #80]	@ (8003024 <DMA_CalcBaseAndBitshift+0x64>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fda:	4a13      	ldr	r2, [pc, #76]	@ (8003028 <DMA_CalcBaseAndBitshift+0x68>)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d909      	bls.n	8003002 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ff6:	f023 0303 	bic.w	r3, r3, #3
 8002ffa:	1d1a      	adds	r2, r3, #4
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003000:	e007      	b.n	8003012 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	aaaaaaab 	.word	0xaaaaaaab
 8003028:	0800968c 	.word	0x0800968c

0800302c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d11f      	bne.n	8003086 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d856      	bhi.n	80030fa <DMA_CheckFifoParam+0xce>
 800304c:	a201      	add	r2, pc, #4	@ (adr r2, 8003054 <DMA_CheckFifoParam+0x28>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	08003065 	.word	0x08003065
 8003058:	08003077 	.word	0x08003077
 800305c:	08003065 	.word	0x08003065
 8003060:	080030fb 	.word	0x080030fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d046      	beq.n	80030fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003074:	e043      	b.n	80030fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800307e:	d140      	bne.n	8003102 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003084:	e03d      	b.n	8003102 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800308e:	d121      	bne.n	80030d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d837      	bhi.n	8003106 <DMA_CheckFifoParam+0xda>
 8003096:	a201      	add	r2, pc, #4	@ (adr r2, 800309c <DMA_CheckFifoParam+0x70>)
 8003098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030b3 	.word	0x080030b3
 80030a4:	080030ad 	.word	0x080030ad
 80030a8:	080030c5 	.word	0x080030c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      break;
 80030b0:	e030      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d025      	beq.n	800310a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c2:	e022      	b.n	800310a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030cc:	d11f      	bne.n	800310e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030d2:	e01c      	b.n	800310e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d903      	bls.n	80030e2 <DMA_CheckFifoParam+0xb6>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d003      	beq.n	80030e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030e0:	e018      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
      break;
 80030e6:	e015      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00e      	beq.n	8003112 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      break;
 80030f8:	e00b      	b.n	8003112 <DMA_CheckFifoParam+0xe6>
      break;
 80030fa:	bf00      	nop
 80030fc:	e00a      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      break;
 80030fe:	bf00      	nop
 8003100:	e008      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      break;
 8003102:	bf00      	nop
 8003104:	e006      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      break;
 8003106:	bf00      	nop
 8003108:	e004      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      break;
 800310a:	bf00      	nop
 800310c:	e002      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      break;   
 800310e:	bf00      	nop
 8003110:	e000      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
    }
  } 
  
  return status; 
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	@ 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	e16b      	b.n	8003418 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003140:	2201      	movs	r2, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	429a      	cmp	r2, r3
 800315a:	f040 815a 	bne.w	8003412 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d005      	beq.n	8003176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003172:	2b02      	cmp	r3, #2
 8003174:	d130      	bne.n	80031d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2203      	movs	r2, #3
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ac:	2201      	movs	r2, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 0201 	and.w	r2, r3, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d017      	beq.n	8003214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d123      	bne.n	8003268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	08da      	lsrs	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3208      	adds	r2, #8
 8003228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	220f      	movs	r2, #15
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	08da      	lsrs	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3208      	adds	r2, #8
 8003262:	69b9      	ldr	r1, [r7, #24]
 8003264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2203      	movs	r2, #3
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0203 	and.w	r2, r3, #3
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80b4 	beq.w	8003412 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b60      	ldr	r3, [pc, #384]	@ (8003430 <HAL_GPIO_Init+0x30c>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003430 <HAL_GPIO_Init+0x30c>)
 80032b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003430 <HAL_GPIO_Init+0x30c>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003434 <HAL_GPIO_Init+0x310>)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	3302      	adds	r3, #2
 80032ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a52      	ldr	r2, [pc, #328]	@ (8003438 <HAL_GPIO_Init+0x314>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d02b      	beq.n	800334a <HAL_GPIO_Init+0x226>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a51      	ldr	r2, [pc, #324]	@ (800343c <HAL_GPIO_Init+0x318>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d025      	beq.n	8003346 <HAL_GPIO_Init+0x222>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a50      	ldr	r2, [pc, #320]	@ (8003440 <HAL_GPIO_Init+0x31c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <HAL_GPIO_Init+0x21e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4f      	ldr	r2, [pc, #316]	@ (8003444 <HAL_GPIO_Init+0x320>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d019      	beq.n	800333e <HAL_GPIO_Init+0x21a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4e      	ldr	r2, [pc, #312]	@ (8003448 <HAL_GPIO_Init+0x324>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_GPIO_Init+0x216>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4d      	ldr	r2, [pc, #308]	@ (800344c <HAL_GPIO_Init+0x328>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00d      	beq.n	8003336 <HAL_GPIO_Init+0x212>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4c      	ldr	r2, [pc, #304]	@ (8003450 <HAL_GPIO_Init+0x32c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <HAL_GPIO_Init+0x20e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4b      	ldr	r2, [pc, #300]	@ (8003454 <HAL_GPIO_Init+0x330>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_GPIO_Init+0x20a>
 800332a:	2307      	movs	r3, #7
 800332c:	e00e      	b.n	800334c <HAL_GPIO_Init+0x228>
 800332e:	2308      	movs	r3, #8
 8003330:	e00c      	b.n	800334c <HAL_GPIO_Init+0x228>
 8003332:	2306      	movs	r3, #6
 8003334:	e00a      	b.n	800334c <HAL_GPIO_Init+0x228>
 8003336:	2305      	movs	r3, #5
 8003338:	e008      	b.n	800334c <HAL_GPIO_Init+0x228>
 800333a:	2304      	movs	r3, #4
 800333c:	e006      	b.n	800334c <HAL_GPIO_Init+0x228>
 800333e:	2303      	movs	r3, #3
 8003340:	e004      	b.n	800334c <HAL_GPIO_Init+0x228>
 8003342:	2302      	movs	r3, #2
 8003344:	e002      	b.n	800334c <HAL_GPIO_Init+0x228>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_GPIO_Init+0x228>
 800334a:	2300      	movs	r3, #0
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	f002 0203 	and.w	r2, r2, #3
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	4093      	lsls	r3, r2
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800335c:	4935      	ldr	r1, [pc, #212]	@ (8003434 <HAL_GPIO_Init+0x310>)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	3302      	adds	r3, #2
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336a:	4b3b      	ldr	r3, [pc, #236]	@ (8003458 <HAL_GPIO_Init+0x334>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800338e:	4a32      	ldr	r2, [pc, #200]	@ (8003458 <HAL_GPIO_Init+0x334>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003394:	4b30      	ldr	r3, [pc, #192]	@ (8003458 <HAL_GPIO_Init+0x334>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033b8:	4a27      	ldr	r2, [pc, #156]	@ (8003458 <HAL_GPIO_Init+0x334>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033be:	4b26      	ldr	r3, [pc, #152]	@ (8003458 <HAL_GPIO_Init+0x334>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003458 <HAL_GPIO_Init+0x334>)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <HAL_GPIO_Init+0x334>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800340c:	4a12      	ldr	r2, [pc, #72]	@ (8003458 <HAL_GPIO_Init+0x334>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3301      	adds	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	f67f ae90 	bls.w	8003140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	3724      	adds	r7, #36	@ 0x24
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	40013800 	.word	0x40013800
 8003438:	40020000 	.word	0x40020000
 800343c:	40020400 	.word	0x40020400
 8003440:	40020800 	.word	0x40020800
 8003444:	40020c00 	.word	0x40020c00
 8003448:	40021000 	.word	0x40021000
 800344c:	40021400 	.word	0x40021400
 8003450:	40021800 	.word	0x40021800
 8003454:	40021c00 	.word	0x40021c00
 8003458:	40013c00 	.word	0x40013c00

0800345c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	807b      	strh	r3, [r7, #2]
 8003468:	4613      	mov	r3, r2
 800346a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800346c:	787b      	ldrb	r3, [r7, #1]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003472:	887a      	ldrh	r2, [r7, #2]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003478:	e003      	b.n	8003482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800347a:	887b      	ldrh	r3, [r7, #2]
 800347c:	041a      	lsls	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	619a      	str	r2, [r3, #24]
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e12b      	b.n	80036fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd fc8e 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2224      	movs	r2, #36	@ 0x24
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034f4:	f003 f894 	bl	8006620 <HAL_RCC_GetPCLK1Freq>
 80034f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4a81      	ldr	r2, [pc, #516]	@ (8003704 <HAL_I2C_Init+0x274>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d807      	bhi.n	8003514 <HAL_I2C_Init+0x84>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a80      	ldr	r2, [pc, #512]	@ (8003708 <HAL_I2C_Init+0x278>)
 8003508:	4293      	cmp	r3, r2
 800350a:	bf94      	ite	ls
 800350c:	2301      	movls	r3, #1
 800350e:	2300      	movhi	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e006      	b.n	8003522 <HAL_I2C_Init+0x92>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a7d      	ldr	r2, [pc, #500]	@ (800370c <HAL_I2C_Init+0x27c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	bf94      	ite	ls
 800351c:	2301      	movls	r3, #1
 800351e:	2300      	movhi	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0e7      	b.n	80036fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a78      	ldr	r2, [pc, #480]	@ (8003710 <HAL_I2C_Init+0x280>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0c9b      	lsrs	r3, r3, #18
 8003534:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a6a      	ldr	r2, [pc, #424]	@ (8003704 <HAL_I2C_Init+0x274>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d802      	bhi.n	8003564 <HAL_I2C_Init+0xd4>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	3301      	adds	r3, #1
 8003562:	e009      	b.n	8003578 <HAL_I2C_Init+0xe8>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	4a69      	ldr	r2, [pc, #420]	@ (8003714 <HAL_I2C_Init+0x284>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	099b      	lsrs	r3, r3, #6
 8003576:	3301      	adds	r3, #1
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	430b      	orrs	r3, r1
 800357e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800358a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	495c      	ldr	r1, [pc, #368]	@ (8003704 <HAL_I2C_Init+0x274>)
 8003594:	428b      	cmp	r3, r1
 8003596:	d819      	bhi.n	80035cc <HAL_I2C_Init+0x13c>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1e59      	subs	r1, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a6:	1c59      	adds	r1, r3, #1
 80035a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035ac:	400b      	ands	r3, r1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_I2C_Init+0x138>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1e59      	subs	r1, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c6:	e051      	b.n	800366c <HAL_I2C_Init+0x1dc>
 80035c8:	2304      	movs	r3, #4
 80035ca:	e04f      	b.n	800366c <HAL_I2C_Init+0x1dc>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d111      	bne.n	80035f8 <HAL_I2C_Init+0x168>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	440b      	add	r3, r1
 80035e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	e012      	b.n	800361e <HAL_I2C_Init+0x18e>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1e58      	subs	r0, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	0099      	lsls	r1, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	fbb0 f3f3 	udiv	r3, r0, r3
 800360e:	3301      	adds	r3, #1
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Init+0x196>
 8003622:	2301      	movs	r3, #1
 8003624:	e022      	b.n	800366c <HAL_I2C_Init+0x1dc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10e      	bne.n	800364c <HAL_I2C_Init+0x1bc>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1e58      	subs	r0, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	440b      	add	r3, r1
 800363c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003640:	3301      	adds	r3, #1
 8003642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800364a:	e00f      	b.n	800366c <HAL_I2C_Init+0x1dc>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1e58      	subs	r0, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	0099      	lsls	r1, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003662:	3301      	adds	r3, #1
 8003664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003668:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	6809      	ldr	r1, [r1, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800369a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6911      	ldr	r1, [r2, #16]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68d2      	ldr	r2, [r2, #12]
 80036a6:	4311      	orrs	r1, r2
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	000186a0 	.word	0x000186a0
 8003708:	001e847f 	.word	0x001e847f
 800370c:	003d08ff 	.word	0x003d08ff
 8003710:	431bde83 	.word	0x431bde83
 8003714:	10624dd3 	.word	0x10624dd3

08003718 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	461a      	mov	r2, r3
 8003726:	4603      	mov	r3, r0
 8003728:	817b      	strh	r3, [r7, #10]
 800372a:	460b      	mov	r3, r1
 800372c:	813b      	strh	r3, [r7, #8]
 800372e:	4613      	mov	r3, r2
 8003730:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003732:	f7fe fa9f 	bl	8001c74 <HAL_GetTick>
 8003736:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b20      	cmp	r3, #32
 8003742:	f040 80d9 	bne.w	80038f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2319      	movs	r3, #25
 800374c:	2201      	movs	r2, #1
 800374e:	496d      	ldr	r1, [pc, #436]	@ (8003904 <HAL_I2C_Mem_Write+0x1ec>)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f971 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
 800375e:	e0cc      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_I2C_Mem_Write+0x56>
 800376a:	2302      	movs	r3, #2
 800376c:	e0c5      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d007      	beq.n	8003794 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2221      	movs	r2, #33	@ 0x21
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2240      	movs	r2, #64	@ 0x40
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003908 <HAL_I2C_Mem_Write+0x1f0>)
 80037d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037d6:	88f8      	ldrh	r0, [r7, #6]
 80037d8:	893a      	ldrh	r2, [r7, #8]
 80037da:	8979      	ldrh	r1, [r7, #10]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	4603      	mov	r3, r0
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f890 	bl	800390c <I2C_RequestMemoryWrite>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d052      	beq.n	8003898 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e081      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa36 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	2b04      	cmp	r3, #4
 800380c:	d107      	bne.n	800381e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e06b      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	781a      	ldrb	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d11b      	bne.n	8003898 <HAL_I2C_Mem_Write+0x180>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d017      	beq.n	8003898 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1aa      	bne.n	80037f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fa29 	bl	8003cfc <I2C_WaitOnBTFFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d107      	bne.n	80038c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e016      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	00100002 	.word	0x00100002
 8003908:	ffff0000 	.word	0xffff0000

0800390c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af02      	add	r7, sp, #8
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	4608      	mov	r0, r1
 8003916:	4611      	mov	r1, r2
 8003918:	461a      	mov	r2, r3
 800391a:	4603      	mov	r3, r0
 800391c:	817b      	strh	r3, [r7, #10]
 800391e:	460b      	mov	r3, r1
 8003920:	813b      	strh	r3, [r7, #8]
 8003922:	4613      	mov	r3, r2
 8003924:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003934:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	2200      	movs	r2, #0
 800393e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f878 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800395c:	d103      	bne.n	8003966 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003964:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e05f      	b.n	8003a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800396a:	897b      	ldrh	r3, [r7, #10]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003978:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	492d      	ldr	r1, [pc, #180]	@ (8003a34 <I2C_RequestMemoryWrite+0x128>)
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f8d3 	bl	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e04c      	b.n	8003a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a8:	6a39      	ldr	r1, [r7, #32]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f95e 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00d      	beq.n	80039d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d107      	bne.n	80039ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e02b      	b.n	8003a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d105      	bne.n	80039e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039d8:	893b      	ldrh	r3, [r7, #8]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	611a      	str	r2, [r3, #16]
 80039e2:	e021      	b.n	8003a28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039e4:	893b      	ldrh	r3, [r7, #8]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f4:	6a39      	ldr	r1, [r7, #32]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f938 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00d      	beq.n	8003a1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d107      	bne.n	8003a1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e005      	b.n	8003a2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a1e:	893b      	ldrh	r3, [r7, #8]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	00010002 	.word	0x00010002

08003a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a48:	e048      	b.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a50:	d044      	beq.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a52:	f7fe f90f 	bl	8001c74 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d302      	bcc.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d139      	bne.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	0c1b      	lsrs	r3, r3, #16
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d10d      	bne.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	43da      	mvns	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	e00c      	b.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	43da      	mvns	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d116      	bne.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	f043 0220 	orr.w	r2, r3, #32
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e023      	b.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	0c1b      	lsrs	r3, r3, #16
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d10d      	bne.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	43da      	mvns	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4013      	ands	r3, r2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	e00c      	b.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	43da      	mvns	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d093      	beq.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b3a:	e071      	b.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b4a:	d123      	bne.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f043 0204 	orr.w	r2, r3, #4
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e067      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b9a:	d041      	beq.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9c:	f7fe f86a 	bl	8001c74 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d302      	bcc.n	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d136      	bne.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d10c      	bne.n	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	43da      	mvns	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	e00b      	b.n	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4013      	ands	r3, r2
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d016      	beq.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	f043 0220 	orr.w	r2, r3, #32
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e021      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	0c1b      	lsrs	r3, r3, #16
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d10c      	bne.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	43da      	mvns	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4013      	ands	r3, r2
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	e00b      	b.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf14      	ite	ne
 8003c56:	2301      	movne	r3, #1
 8003c58:	2300      	moveq	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f47f af6d 	bne.w	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c78:	e034      	b.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f886 	bl	8003d8c <I2C_IsAcknowledgeFailed>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e034      	b.n	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c90:	d028      	beq.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7fd ffef 	bl	8001c74 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d11d      	bne.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb2:	2b80      	cmp	r3, #128	@ 0x80
 8003cb4:	d016      	beq.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e007      	b.n	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b80      	cmp	r3, #128	@ 0x80
 8003cf0:	d1c3      	bne.n	8003c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d08:	e034      	b.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f83e 	bl	8003d8c <I2C_IsAcknowledgeFailed>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e034      	b.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d20:	d028      	beq.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fd ffa7 	bl	8001c74 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11d      	bne.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d016      	beq.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e007      	b.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d1c3      	bne.n	8003d0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da2:	d11b      	bne.n	8003ddc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	f043 0204 	orr.w	r2, r3, #4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e128      	b.n	8004050 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a90      	ldr	r2, [pc, #576]	@ (8004058 <HAL_I2S_Init+0x26c>)
 8003e16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fd f853 	bl	8000ec4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e34:	f023 030f 	bic.w	r3, r3, #15
 8003e38:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d060      	beq.n	8003f0c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003e52:	2310      	movs	r3, #16
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	e001      	b.n	8003e5c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003e58:	2320      	movs	r3, #32
 8003e5a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d802      	bhi.n	8003e6a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	f002 fce2 	bl	8006834 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e70:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e7a:	d125      	bne.n	8003ec8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d010      	beq.n	8003ea6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	461a      	mov	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	3305      	adds	r3, #5
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	e01f      	b.n	8003ee6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	461a      	mov	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	3305      	adds	r3, #5
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	e00e      	b.n	8003ee6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	461a      	mov	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	3305      	adds	r3, #5
 8003ee4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4a5c      	ldr	r2, [pc, #368]	@ (800405c <HAL_I2S_Init+0x270>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	08db      	lsrs	r3, r3, #3
 8003ef0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	085b      	lsrs	r3, r3, #1
 8003f02:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	e003      	b.n	8003f14 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d902      	bls.n	8003f20 <HAL_I2S_Init+0x134>
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	2bff      	cmp	r3, #255	@ 0xff
 8003f1e:	d907      	bls.n	8003f30 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f24:	f043 0210 	orr.w	r2, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e08f      	b.n	8004050 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	ea42 0103 	orr.w	r1, r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003f4e:	f023 030f 	bic.w	r3, r3, #15
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6851      	ldr	r1, [r2, #4]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6892      	ldr	r2, [r2, #8]
 8003f5a:	4311      	orrs	r1, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68d2      	ldr	r2, [r2, #12]
 8003f60:	4311      	orrs	r1, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6992      	ldr	r2, [r2, #24]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f72:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d161      	bne.n	8004040 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a38      	ldr	r2, [pc, #224]	@ (8004060 <HAL_I2S_Init+0x274>)
 8003f80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a37      	ldr	r2, [pc, #220]	@ (8004064 <HAL_I2S_Init+0x278>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <HAL_I2S_Init+0x1a4>
 8003f8c:	4b36      	ldr	r3, [pc, #216]	@ (8004068 <HAL_I2S_Init+0x27c>)
 8003f8e:	e001      	b.n	8003f94 <HAL_I2S_Init+0x1a8>
 8003f90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	4932      	ldr	r1, [pc, #200]	@ (8004064 <HAL_I2S_Init+0x278>)
 8003f9c:	428a      	cmp	r2, r1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_I2S_Init+0x1b8>
 8003fa0:	4a31      	ldr	r2, [pc, #196]	@ (8004068 <HAL_I2S_Init+0x27c>)
 8003fa2:	e001      	b.n	8003fa8 <HAL_I2S_Init+0x1bc>
 8003fa4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003fa8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003fac:	f023 030f 	bic.w	r3, r3, #15
 8003fb0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8004064 <HAL_I2S_Init+0x278>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d101      	bne.n	8003fc0 <HAL_I2S_Init+0x1d4>
 8003fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004068 <HAL_I2S_Init+0x27c>)
 8003fbe:	e001      	b.n	8003fc4 <HAL_I2S_Init+0x1d8>
 8003fc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a25      	ldr	r2, [pc, #148]	@ (8004064 <HAL_I2S_Init+0x278>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d101      	bne.n	8003fd6 <HAL_I2S_Init+0x1ea>
 8003fd2:	4b25      	ldr	r3, [pc, #148]	@ (8004068 <HAL_I2S_Init+0x27c>)
 8003fd4:	e001      	b.n	8003fda <HAL_I2S_Init+0x1ee>
 8003fd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fe6:	d003      	beq.n	8003ff0 <HAL_I2S_Init+0x204>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ff0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	e001      	b.n	8003ffc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004006:	4313      	orrs	r3, r2
 8004008:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004010:	4313      	orrs	r3, r2
 8004012:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800401a:	4313      	orrs	r3, r2
 800401c:	b29a      	uxth	r2, r3
 800401e:	897b      	ldrh	r3, [r7, #10]
 8004020:	4313      	orrs	r3, r2
 8004022:	b29b      	uxth	r3, r3
 8004024:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004028:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a0d      	ldr	r2, [pc, #52]	@ (8004064 <HAL_I2S_Init+0x278>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d101      	bne.n	8004038 <HAL_I2S_Init+0x24c>
 8004034:	4b0c      	ldr	r3, [pc, #48]	@ (8004068 <HAL_I2S_Init+0x27c>)
 8004036:	e001      	b.n	800403c <HAL_I2S_Init+0x250>
 8004038:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800403c:	897a      	ldrh	r2, [r7, #10]
 800403e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3720      	adds	r7, #32
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	080046cd 	.word	0x080046cd
 800405c:	cccccccd 	.word	0xcccccccd
 8004060:	08004855 	.word	0x08004855
 8004064:	40003800 	.word	0x40003800
 8004068:	40003400 	.word	0x40003400

0800406c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_I2S_Transmit_DMA+0x1a>
 8004080:	88fb      	ldrh	r3, [r7, #6]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e08a      	b.n	80041a0 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b01      	cmp	r3, #1
 8004094:	d001      	beq.n	800409a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8004096:	2302      	movs	r3, #2
 8004098:	e082      	b.n	80041a0 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_I2S_Transmit_DMA+0x3e>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e07a      	b.n	80041a0 <HAL_I2S_Transmit_DMA+0x134>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2203      	movs	r2, #3
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d002      	beq.n	80040de <HAL_I2S_Transmit_DMA+0x72>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b05      	cmp	r3, #5
 80040dc:	d10a      	bne.n	80040f4 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040f2:	e005      	b.n	8004100 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004104:	4a28      	ldr	r2, [pc, #160]	@ (80041a8 <HAL_I2S_Transmit_DMA+0x13c>)
 8004106:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	4a27      	ldr	r2, [pc, #156]	@ (80041ac <HAL_I2S_Transmit_DMA+0x140>)
 800410e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004114:	4a26      	ldr	r2, [pc, #152]	@ (80041b0 <HAL_I2S_Transmit_DMA+0x144>)
 8004116:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004120:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004128:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004130:	f7fe fcc6 	bl	8002ac0 <HAL_DMA_Start_IT>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00f      	beq.n	800415a <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f043 0208 	orr.w	r2, r3, #8
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e022      	b.n	80041a0 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d107      	bne.n	8004180 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0202 	orr.w	r2, r2, #2
 800417e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800418a:	2b00      	cmp	r3, #0
 800418c:	d107      	bne.n	800419e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69da      	ldr	r2, [r3, #28]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800419c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	080045ab 	.word	0x080045ab
 80041ac:	08004569 	.word	0x08004569
 80041b0:	080045c7 	.word	0x080045c7

080041b4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c8:	d004      	beq.n	80041d4 <HAL_I2S_DMAStop+0x20>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f040 80d1 	bne.w	8004376 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00f      	beq.n	80041fc <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fe fcc5 	bl	8002b70 <HAL_DMA_Abort>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f0:	f043 0208 	orr.w	r2, r3, #8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80041fc:	2364      	movs	r3, #100	@ 0x64
 80041fe:	2201      	movs	r2, #1
 8004200:	2102      	movs	r1, #2
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 faec 	bl	80047e0 <I2S_WaitFlagStateUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	f043 0201 	orr.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8004226:	2364      	movs	r3, #100	@ 0x64
 8004228:	2200      	movs	r2, #0
 800422a:	2180      	movs	r1, #128	@ 0x80
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fad7 	bl	80047e0 <I2S_WaitFlagStateUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423c:	f043 0201 	orr.w	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800425e:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0202 	bic.w	r2, r2, #2
 800427c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b05      	cmp	r3, #5
 8004288:	f040 8165 	bne.w	8004556 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00f      	beq.n	80042b4 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe fc69 	bl	8002b70 <HAL_DMA_Abort>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d007      	beq.n	80042b4 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a8:	f043 0208 	orr.w	r2, r3, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a8a      	ldr	r2, [pc, #552]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d101      	bne.n	80042c2 <HAL_I2S_DMAStop+0x10e>
 80042be:	4b8a      	ldr	r3, [pc, #552]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 80042c0:	e001      	b.n	80042c6 <HAL_I2S_DMAStop+0x112>
 80042c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4985      	ldr	r1, [pc, #532]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 80042ce:	428b      	cmp	r3, r1
 80042d0:	d101      	bne.n	80042d6 <HAL_I2S_DMAStop+0x122>
 80042d2:	4b85      	ldr	r3, [pc, #532]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 80042d4:	e001      	b.n	80042da <HAL_I2S_DMAStop+0x126>
 80042d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042de:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80042e0:	2300      	movs	r3, #0
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a7e      	ldr	r2, [pc, #504]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d101      	bne.n	80042f2 <HAL_I2S_DMAStop+0x13e>
 80042ee:	4b7e      	ldr	r3, [pc, #504]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 80042f0:	e001      	b.n	80042f6 <HAL_I2S_DMAStop+0x142>
 80042f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a79      	ldr	r2, [pc, #484]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <HAL_I2S_DMAStop+0x154>
 8004304:	4b78      	ldr	r3, [pc, #480]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 8004306:	e001      	b.n	800430c <HAL_I2S_DMAStop+0x158>
 8004308:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a73      	ldr	r2, [pc, #460]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d101      	bne.n	8004320 <HAL_I2S_DMAStop+0x16c>
 800431c:	4b72      	ldr	r3, [pc, #456]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 800431e:	e001      	b.n	8004324 <HAL_I2S_DMAStop+0x170>
 8004320:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	496e      	ldr	r1, [pc, #440]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 800432c:	428b      	cmp	r3, r1
 800432e:	d101      	bne.n	8004334 <HAL_I2S_DMAStop+0x180>
 8004330:	4b6d      	ldr	r3, [pc, #436]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 8004332:	e001      	b.n	8004338 <HAL_I2S_DMAStop+0x184>
 8004334:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10c      	bne.n	8004360 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800435e:	e0fa      	b.n	8004556 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a5f      	ldr	r2, [pc, #380]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d101      	bne.n	800436e <HAL_I2S_DMAStop+0x1ba>
 800436a:	4b5f      	ldr	r3, [pc, #380]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 800436c:	e001      	b.n	8004372 <HAL_I2S_DMAStop+0x1be>
 800436e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004372:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004374:	e0ef      	b.n	8004556 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800437e:	d005      	beq.n	800438c <HAL_I2S_DMAStop+0x1d8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004388:	f040 80e5 	bne.w	8004556 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00f      	beq.n	80043b4 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe fbe9 	bl	8002b70 <HAL_DMA_Abort>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d007      	beq.n	80043b4 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a8:	f043 0208 	orr.w	r2, r3, #8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b05      	cmp	r3, #5
 80043be:	f040 809a 	bne.w	80044f6 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00f      	beq.n	80043ea <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fbce 	bl	8002b70 <HAL_DMA_Abort>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043de:	f043 0208 	orr.w	r2, r3, #8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80043ea:	f7fd fc43 	bl	8001c74 <HAL_GetTick>
 80043ee:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80043f0:	e012      	b.n	8004418 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80043f2:	f7fd fc3f 	bl	8001c74 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b64      	cmp	r3, #100	@ 0x64
 80043fe:	d90b      	bls.n	8004418 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004404:	f043 0201 	orr.w	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a31      	ldr	r2, [pc, #196]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d101      	bne.n	8004426 <HAL_I2S_DMAStop+0x272>
 8004422:	4b31      	ldr	r3, [pc, #196]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 8004424:	e001      	b.n	800442a <HAL_I2S_DMAStop+0x276>
 8004426:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b02      	cmp	r3, #2
 8004432:	d1de      	bne.n	80043f2 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004434:	e012      	b.n	800445c <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004436:	f7fd fc1d 	bl	8001c74 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b64      	cmp	r3, #100	@ 0x64
 8004442:	d90b      	bls.n	800445c <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004448:	f043 0201 	orr.w	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a20      	ldr	r2, [pc, #128]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d101      	bne.n	800446a <HAL_I2S_DMAStop+0x2b6>
 8004466:	4b20      	ldr	r3, [pc, #128]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 8004468:	e001      	b.n	800446e <HAL_I2S_DMAStop+0x2ba>
 800446a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004474:	2b80      	cmp	r3, #128	@ 0x80
 8004476:	d0de      	beq.n	8004436 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a19      	ldr	r2, [pc, #100]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_I2S_DMAStop+0x2d2>
 8004482:	4b19      	ldr	r3, [pc, #100]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 8004484:	e001      	b.n	800448a <HAL_I2S_DMAStop+0x2d6>
 8004486:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4914      	ldr	r1, [pc, #80]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 8004492:	428b      	cmp	r3, r1
 8004494:	d101      	bne.n	800449a <HAL_I2S_DMAStop+0x2e6>
 8004496:	4b14      	ldr	r3, [pc, #80]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 8004498:	e001      	b.n	800449e <HAL_I2S_DMAStop+0x2ea>
 800449a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800449e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044a2:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a0d      	ldr	r2, [pc, #52]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d101      	bne.n	80044b6 <HAL_I2S_DMAStop+0x302>
 80044b2:	4b0d      	ldr	r3, [pc, #52]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 80044b4:	e001      	b.n	80044ba <HAL_I2S_DMAStop+0x306>
 80044b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a07      	ldr	r2, [pc, #28]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d101      	bne.n	80044ce <HAL_I2S_DMAStop+0x31a>
 80044ca:	4b07      	ldr	r3, [pc, #28]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 80044cc:	e001      	b.n	80044d2 <HAL_I2S_DMAStop+0x31e>
 80044ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4902      	ldr	r1, [pc, #8]	@ (80044e4 <HAL_I2S_DMAStop+0x330>)
 80044da:	428b      	cmp	r3, r1
 80044dc:	d106      	bne.n	80044ec <HAL_I2S_DMAStop+0x338>
 80044de:	4b02      	ldr	r3, [pc, #8]	@ (80044e8 <HAL_I2S_DMAStop+0x334>)
 80044e0:	e006      	b.n	80044f0 <HAL_I2S_DMAStop+0x33c>
 80044e2:	bf00      	nop
 80044e4:	40003800 	.word	0x40003800
 80044e8:	40003400 	.word	0x40003400
 80044ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044f0:	f022 0202 	bic.w	r2, r2, #2
 80044f4:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004504:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004534:	d10c      	bne.n	8004550 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	e002      	b.n	8004556 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 800455e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3720      	adds	r7, #32
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10e      	bne.n	800459c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0202 	bic.w	r2, r2, #2
 800458c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f7fc fe69 	bl	8001274 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7fc fe3d 	bl	8001238 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0203 	bic.w	r2, r2, #3
 80045e2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fc:	f043 0208 	orr.w	r2, r3, #8
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7fd fab5 	bl	8001b74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	881a      	ldrh	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462a:	1c9a      	adds	r2, r3, #2
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10e      	bne.n	8004666 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004656:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fc fe07 	bl	8001274 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004680:	b292      	uxth	r2, r2
 8004682:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	1c9a      	adds	r2, r3, #2
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10e      	bne.n	80046c4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046b4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fd fa40 	bl	8001b44 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046c4:	bf00      	nop
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d13a      	bne.n	800475e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d109      	bne.n	8004706 <I2S_IRQHandler+0x3a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fc:	2b40      	cmp	r3, #64	@ 0x40
 80046fe:	d102      	bne.n	8004706 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ffb4 	bl	800466e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470c:	2b40      	cmp	r3, #64	@ 0x40
 800470e:	d126      	bne.n	800475e <I2S_IRQHandler+0x92>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b20      	cmp	r3, #32
 800471c:	d11f      	bne.n	800475e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800472c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800472e:	2300      	movs	r3, #0
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004750:	f043 0202 	orr.w	r2, r3, #2
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fd fa0b 	bl	8001b74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b03      	cmp	r3, #3
 8004768:	d136      	bne.n	80047d8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b02      	cmp	r3, #2
 8004772:	d109      	bne.n	8004788 <I2S_IRQHandler+0xbc>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477e:	2b80      	cmp	r3, #128	@ 0x80
 8004780:	d102      	bne.n	8004788 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff ff45 	bl	8004612 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b08      	cmp	r3, #8
 8004790:	d122      	bne.n	80047d8 <I2S_IRQHandler+0x10c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b20      	cmp	r3, #32
 800479e:	d11b      	bne.n	80047d8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047ae:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ca:	f043 0204 	orr.w	r2, r3, #4
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fd f9ce 	bl	8001b74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047d8:	bf00      	nop
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80047f0:	f7fd fa40 	bl	8001c74 <HAL_GetTick>
 80047f4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80047f6:	e018      	b.n	800482a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047fe:	d014      	beq.n	800482a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004800:	f7fd fa38 	bl	8001c74 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d902      	bls.n	8004816 <I2S_WaitFlagStateUntilTimeout+0x36>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e00f      	b.n	800484a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	429a      	cmp	r2, r3
 8004846:	d1d7      	bne.n	80047f8 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a92      	ldr	r2, [pc, #584]	@ (8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d101      	bne.n	8004872 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800486e:	4b92      	ldr	r3, [pc, #584]	@ (8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004870:	e001      	b.n	8004876 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004872:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a8b      	ldr	r2, [pc, #556]	@ (8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d101      	bne.n	8004890 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800488c:	4b8a      	ldr	r3, [pc, #552]	@ (8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800488e:	e001      	b.n	8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004890:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a0:	d004      	beq.n	80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f040 8099 	bne.w	80049de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d107      	bne.n	80048c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f925 	bl	8004b10 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9c8 	bl	8004c70 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e6:	2b40      	cmp	r3, #64	@ 0x40
 80048e8:	d13a      	bne.n	8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d035      	beq.n	8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a6e      	ldr	r2, [pc, #440]	@ (8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d101      	bne.n	8004902 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80048fe:	4b6e      	ldr	r3, [pc, #440]	@ (8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004900:	e001      	b.n	8004906 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004902:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4969      	ldr	r1, [pc, #420]	@ (8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800490e:	428b      	cmp	r3, r1
 8004910:	d101      	bne.n	8004916 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004912:	4b69      	ldr	r3, [pc, #420]	@ (8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004914:	e001      	b.n	800491a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004916:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800491a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800491e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800492e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004952:	f043 0202 	orr.w	r2, r3, #2
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fd f90a 	bl	8001b74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b08      	cmp	r3, #8
 8004968:	f040 80c3 	bne.w	8004af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 80bd 	beq.w	8004af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004986:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a49      	ldr	r2, [pc, #292]	@ (8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d101      	bne.n	8004996 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004992:	4b49      	ldr	r3, [pc, #292]	@ (8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004994:	e001      	b.n	800499a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004996:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4944      	ldr	r1, [pc, #272]	@ (8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049a2:	428b      	cmp	r3, r1
 80049a4:	d101      	bne.n	80049aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80049a6:	4b44      	ldr	r3, [pc, #272]	@ (8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049a8:	e001      	b.n	80049ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80049aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049b4:	2300      	movs	r3, #0
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	f043 0204 	orr.w	r2, r3, #4
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fd f8cc 	bl	8001b74 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049dc:	e089      	b.n	8004af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d107      	bne.n	80049f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f8be 	bl	8004b74 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d107      	bne.n	8004a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f8fd 	bl	8004c0c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a18:	2b40      	cmp	r3, #64	@ 0x40
 8004a1a:	d12f      	bne.n	8004a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d02a      	beq.n	8004a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a34:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d101      	bne.n	8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004a40:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a42:	e001      	b.n	8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004a44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4919      	ldr	r1, [pc, #100]	@ (8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a50:	428b      	cmp	r3, r1
 8004a52:	d101      	bne.n	8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004a54:	4b18      	ldr	r3, [pc, #96]	@ (8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a56:	e001      	b.n	8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004a58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	f043 0202 	orr.w	r2, r3, #2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fd f87c 	bl	8001b74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d136      	bne.n	8004af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d031      	beq.n	8004af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a07      	ldr	r2, [pc, #28]	@ (8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d101      	bne.n	8004a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004a9a:	4b07      	ldr	r3, [pc, #28]	@ (8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a9c:	e001      	b.n	8004aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004a9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4902      	ldr	r1, [pc, #8]	@ (8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004aaa:	428b      	cmp	r3, r1
 8004aac:	d106      	bne.n	8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004aae:	4b02      	ldr	r3, [pc, #8]	@ (8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ab0:	e006      	b.n	8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004ab2:	bf00      	nop
 8004ab4:	40003800 	.word	0x40003800
 8004ab8:	40003400 	.word	0x40003400
 8004abc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ac0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ac4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ad4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae2:	f043 0204 	orr.w	r2, r3, #4
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fd f842 	bl	8001b74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004af0:	e000      	b.n	8004af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004af2:	bf00      	nop
}
 8004af4:	bf00      	nop
 8004af6:	3720      	adds	r7, #32
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	1c99      	adds	r1, r3, #2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6251      	str	r1, [r2, #36]	@ 0x24
 8004b22:	881a      	ldrh	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d113      	bne.n	8004b6a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b50:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d106      	bne.n	8004b6a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff ffc9 	bl	8004afc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	1c99      	adds	r1, r3, #2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6251      	str	r1, [r2, #36]	@ 0x24
 8004b86:	8819      	ldrh	r1, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c04 <I2SEx_TxISR_I2SExt+0x90>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d101      	bne.n	8004b96 <I2SEx_TxISR_I2SExt+0x22>
 8004b92:	4b1d      	ldr	r3, [pc, #116]	@ (8004c08 <I2SEx_TxISR_I2SExt+0x94>)
 8004b94:	e001      	b.n	8004b9a <I2SEx_TxISR_I2SExt+0x26>
 8004b96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d121      	bne.n	8004bfa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a12      	ldr	r2, [pc, #72]	@ (8004c04 <I2SEx_TxISR_I2SExt+0x90>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d101      	bne.n	8004bc4 <I2SEx_TxISR_I2SExt+0x50>
 8004bc0:	4b11      	ldr	r3, [pc, #68]	@ (8004c08 <I2SEx_TxISR_I2SExt+0x94>)
 8004bc2:	e001      	b.n	8004bc8 <I2SEx_TxISR_I2SExt+0x54>
 8004bc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	490d      	ldr	r1, [pc, #52]	@ (8004c04 <I2SEx_TxISR_I2SExt+0x90>)
 8004bd0:	428b      	cmp	r3, r1
 8004bd2:	d101      	bne.n	8004bd8 <I2SEx_TxISR_I2SExt+0x64>
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c08 <I2SEx_TxISR_I2SExt+0x94>)
 8004bd6:	e001      	b.n	8004bdc <I2SEx_TxISR_I2SExt+0x68>
 8004bd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bdc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004be0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ff81 	bl	8004afc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40003800 	.word	0x40003800
 8004c08:	40003400 	.word	0x40003400

08004c0c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68d8      	ldr	r0, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1e:	1c99      	adds	r1, r3, #2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004c24:	b282      	uxth	r2, r0
 8004c26:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d113      	bne.n	8004c68 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c4e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff ff4a 	bl	8004afc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a20      	ldr	r2, [pc, #128]	@ (8004d00 <I2SEx_RxISR_I2SExt+0x90>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d101      	bne.n	8004c86 <I2SEx_RxISR_I2SExt+0x16>
 8004c82:	4b20      	ldr	r3, [pc, #128]	@ (8004d04 <I2SEx_RxISR_I2SExt+0x94>)
 8004c84:	e001      	b.n	8004c8a <I2SEx_RxISR_I2SExt+0x1a>
 8004c86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c8a:	68d8      	ldr	r0, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	1c99      	adds	r1, r3, #2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004c96:	b282      	uxth	r2, r0
 8004c98:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d121      	bne.n	8004cf6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a12      	ldr	r2, [pc, #72]	@ (8004d00 <I2SEx_RxISR_I2SExt+0x90>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d101      	bne.n	8004cc0 <I2SEx_RxISR_I2SExt+0x50>
 8004cbc:	4b11      	ldr	r3, [pc, #68]	@ (8004d04 <I2SEx_RxISR_I2SExt+0x94>)
 8004cbe:	e001      	b.n	8004cc4 <I2SEx_RxISR_I2SExt+0x54>
 8004cc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	490d      	ldr	r1, [pc, #52]	@ (8004d00 <I2SEx_RxISR_I2SExt+0x90>)
 8004ccc:	428b      	cmp	r3, r1
 8004cce:	d101      	bne.n	8004cd4 <I2SEx_RxISR_I2SExt+0x64>
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d04 <I2SEx_RxISR_I2SExt+0x94>)
 8004cd2:	e001      	b.n	8004cd8 <I2SEx_RxISR_I2SExt+0x68>
 8004cd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cd8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cdc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ff03 	bl	8004afc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40003800 	.word	0x40003800
 8004d04:	40003400 	.word	0x40003400

08004d08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e101      	b.n	8004f1e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d106      	bne.n	8004d3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7fc fe73 	bl	8001a20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d48:	d102      	bne.n	8004d50 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f003 f82b 	bl	8007db0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	7c1a      	ldrb	r2, [r3, #16]
 8004d62:	f88d 2000 	strb.w	r2, [sp]
 8004d66:	3304      	adds	r3, #4
 8004d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d6a:	f002 ff1b 	bl	8007ba4 <USB_CoreInit>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0ce      	b.n	8004f1e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f003 f823 	bl	8007dd2 <USB_SetCurrentMode>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2202      	movs	r2, #2
 8004d96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0bf      	b.n	8004f1e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
 8004da2:	e04a      	b.n	8004e3a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004da4:	7bfa      	ldrb	r2, [r7, #15]
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	3315      	adds	r3, #21
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004db8:	7bfa      	ldrb	r2, [r7, #15]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	3314      	adds	r3, #20
 8004dc8:	7bfa      	ldrb	r2, [r7, #15]
 8004dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004dcc:	7bfa      	ldrb	r2, [r7, #15]
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	b298      	uxth	r0, r3
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	332e      	adds	r3, #46	@ 0x2e
 8004de0:	4602      	mov	r2, r0
 8004de2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004de4:	7bfa      	ldrb	r2, [r7, #15]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	3318      	adds	r3, #24
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004df8:	7bfa      	ldrb	r2, [r7, #15]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	331c      	adds	r3, #28
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e0c:	7bfa      	ldrb	r2, [r7, #15]
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	3320      	adds	r3, #32
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e20:	7bfa      	ldrb	r2, [r7, #15]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	3324      	adds	r3, #36	@ 0x24
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	3301      	adds	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	791b      	ldrb	r3, [r3, #4]
 8004e3e:	7bfa      	ldrb	r2, [r7, #15]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d3af      	bcc.n	8004da4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]
 8004e48:	e044      	b.n	8004ed4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e4a:	7bfa      	ldrb	r2, [r7, #15]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e60:	7bfa      	ldrb	r2, [r7, #15]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e76:	7bfa      	ldrb	r2, [r7, #15]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ea2:	7bfa      	ldrb	r2, [r7, #15]
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004eb8:	7bfa      	ldrb	r2, [r7, #15]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	791b      	ldrb	r3, [r3, #4]
 8004ed8:	7bfa      	ldrb	r2, [r7, #15]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d3b5      	bcc.n	8004e4a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	7c1a      	ldrb	r2, [r3, #16]
 8004ee6:	f88d 2000 	strb.w	r2, [sp]
 8004eea:	3304      	adds	r3, #4
 8004eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eee:	f002 ffbd 	bl	8007e6c <USB_DevInit>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e00c      	b.n	8004f1e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f003 faea 	bl	80084f0 <USB_DevDisconnect>

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f26:	b590      	push	{r4, r7, lr}
 8004f28:	b08d      	sub	sp, #52	@ 0x34
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f003 fb8b 	bl	8008658 <USB_GetMode>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f040 848c 	bne.w	8005862 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f003 faef 	bl	8008532 <USB_ReadInterrupts>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8482 	beq.w	8005860 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	0a1b      	lsrs	r3, r3, #8
 8004f66:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f003 fadc 	bl	8008532 <USB_ReadInterrupts>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d107      	bne.n	8004f94 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f002 0202 	and.w	r2, r2, #2
 8004f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f003 faca 	bl	8008532 <USB_ReadInterrupts>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b10      	cmp	r3, #16
 8004fa6:	d161      	bne.n	800506c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0210 	bic.w	r2, r2, #16
 8004fb6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f003 020f 	and.w	r2, r3, #15
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004fde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fe2:	d124      	bne.n	800502e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d035      	beq.n	800505c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	6a38      	ldr	r0, [r7, #32]
 8005004:	f003 fa1c 	bl	8008440 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	091b      	lsrs	r3, r3, #4
 8005010:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005014:	441a      	add	r2, r3
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	695a      	ldr	r2, [r3, #20]
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005026:	441a      	add	r2, r3
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	615a      	str	r2, [r3, #20]
 800502c:	e016      	b.n	800505c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005034:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005038:	d110      	bne.n	800505c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005040:	2208      	movs	r2, #8
 8005042:	4619      	mov	r1, r3
 8005044:	6a38      	ldr	r0, [r7, #32]
 8005046:	f003 f9fb 	bl	8008440 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005056:	441a      	add	r2, r3
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0210 	orr.w	r2, r2, #16
 800506a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f003 fa5e 	bl	8008532 <USB_ReadInterrupts>
 8005076:	4603      	mov	r3, r0
 8005078:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800507c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005080:	f040 80a7 	bne.w	80051d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f003 fa63 	bl	8008558 <USB_ReadDevAllOutEpInterrupt>
 8005092:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005094:	e099      	b.n	80051ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 808e 	beq.w	80051be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f003 fa87 	bl	80085c0 <USB_ReadDevOutEPInterrupt>
 80050b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00c      	beq.n	80050d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ca:	461a      	mov	r2, r3
 80050cc:	2301      	movs	r3, #1
 80050ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fcfc 	bl	8005ad0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00c      	beq.n	80050fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ee:	461a      	mov	r2, r3
 80050f0:	2308      	movs	r3, #8
 80050f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80050f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fdd2 	bl	8005ca0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b00      	cmp	r3, #0
 8005104:	d008      	beq.n	8005118 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005112:	461a      	mov	r2, r3
 8005114:	2310      	movs	r3, #16
 8005116:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d030      	beq.n	8005184 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512a:	2b80      	cmp	r3, #128	@ 0x80
 800512c:	d109      	bne.n	8005142 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800513c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005140:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	4413      	add	r3, r2
 8005154:	3304      	adds	r3, #4
 8005156:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	78db      	ldrb	r3, [r3, #3]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d108      	bne.n	8005172 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2200      	movs	r2, #0
 8005164:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	b2db      	uxtb	r3, r3
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fbc5 	bl	80058fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517e:	461a      	mov	r2, r3
 8005180:	2302      	movs	r3, #2
 8005182:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519a:	461a      	mov	r2, r3
 800519c:	2320      	movs	r3, #32
 800519e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b6:	461a      	mov	r2, r3
 80051b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	3301      	adds	r3, #1
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80051c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80051ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f47f af62 	bne.w	8005096 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f003 f9ab 	bl	8008532 <USB_ReadInterrupts>
 80051dc:	4603      	mov	r3, r0
 80051de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051e6:	f040 80db 	bne.w	80053a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f003 f9cc 	bl	800858c <USB_ReadDevAllInEpInterrupt>
 80051f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80051fa:	e0cd      	b.n	8005398 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80051fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80c2 	beq.w	800538c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f003 f9f2 	bl	80085fc <USB_ReadDevInEPInterrupt>
 8005218:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d057      	beq.n	80052d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	2201      	movs	r2, #1
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	43db      	mvns	r3, r3
 800523e:	69f9      	ldr	r1, [r7, #28]
 8005240:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005244:	4013      	ands	r3, r2
 8005246:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005254:	461a      	mov	r2, r3
 8005256:	2301      	movs	r3, #1
 8005258:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	799b      	ldrb	r3, [r3, #6]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d132      	bne.n	80052c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005266:	4613      	mov	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3320      	adds	r3, #32
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005278:	4613      	mov	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4403      	add	r3, r0
 8005282:	331c      	adds	r3, #28
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4419      	add	r1, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4403      	add	r3, r0
 8005296:	3320      	adds	r3, #32
 8005298:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d113      	bne.n	80052c8 <HAL_PCD_IRQHandler+0x3a2>
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a4:	4613      	mov	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	3324      	adds	r3, #36	@ 0x24
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d108      	bne.n	80052c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80052c0:	461a      	mov	r2, r3
 80052c2:	2101      	movs	r1, #1
 80052c4:	f003 f9fa 	bl	80086bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	4619      	mov	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fad6 	bl	8005880 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ea:	461a      	mov	r2, r3
 80052ec:	2308      	movs	r3, #8
 80052ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d008      	beq.n	800530c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005306:	461a      	mov	r2, r3
 8005308:	2310      	movs	r3, #16
 800530a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005322:	461a      	mov	r2, r3
 8005324:	2340      	movs	r3, #64	@ 0x40
 8005326:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d023      	beq.n	800537a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005332:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005334:	6a38      	ldr	r0, [r7, #32]
 8005336:	f002 fefd 	bl	8008134 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800533a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	3310      	adds	r3, #16
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	4413      	add	r3, r2
 800534a:	3304      	adds	r3, #4
 800534c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	78db      	ldrb	r3, [r3, #3]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d108      	bne.n	8005368 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	b2db      	uxtb	r3, r3
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fad6 	bl	8005914 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005374:	461a      	mov	r2, r3
 8005376:	2302      	movs	r3, #2
 8005378:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005384:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fb15 	bl	80059b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	3301      	adds	r3, #1
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539a:	2b00      	cmp	r3, #0
 800539c:	f47f af2e 	bne.w	80051fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f003 f8c4 	bl	8008532 <USB_ReadInterrupts>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053b4:	d122      	bne.n	80053fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d108      	bne.n	80053e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80053dc:	2100      	movs	r1, #0
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fca4 	bl	8005d2c <HAL_PCDEx_LPM_Callback>
 80053e4:	e002      	b.n	80053ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fa7e 	bl	80058e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695a      	ldr	r2, [r3, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80053fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f003 f896 	bl	8008532 <USB_ReadInterrupts>
 8005406:	4603      	mov	r3, r0
 8005408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800540c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005410:	d112      	bne.n	8005438 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b01      	cmp	r3, #1
 8005420:	d102      	bne.n	8005428 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fa56 	bl	80058d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695a      	ldr	r2, [r3, #20]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005436:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f003 f878 	bl	8008532 <USB_ReadInterrupts>
 8005442:	4603      	mov	r3, r0
 8005444:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544c:	f040 80b7 	bne.w	80055be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2110      	movs	r1, #16
 800546a:	4618      	mov	r0, r3
 800546c:	f002 fe62 	bl	8008134 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005470:	2300      	movs	r3, #0
 8005472:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005474:	e046      	b.n	8005504 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005482:	461a      	mov	r2, r3
 8005484:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005488:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800548a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80054aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b6:	461a      	mov	r2, r3
 80054b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ee:	0151      	lsls	r1, r2, #5
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	440a      	add	r2, r1
 80054f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005500:	3301      	adds	r3, #1
 8005502:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	791b      	ldrb	r3, [r3, #4]
 8005508:	461a      	mov	r2, r3
 800550a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550c:	4293      	cmp	r3, r2
 800550e:	d3b2      	bcc.n	8005476 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800551e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005522:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	7bdb      	ldrb	r3, [r3, #15]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d016      	beq.n	800555a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800553c:	f043 030b 	orr.w	r3, r3, #11
 8005540:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005552:	f043 030b 	orr.w	r3, r3, #11
 8005556:	6453      	str	r3, [r2, #68]	@ 0x44
 8005558:	e015      	b.n	8005586 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005568:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800556c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005570:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005580:	f043 030b 	orr.w	r3, r3, #11
 8005584:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005594:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005598:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055a8:	461a      	mov	r2, r3
 80055aa:	f003 f887 	bl	80086bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695a      	ldr	r2, [r3, #20]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80055bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f002 ffb5 	bl	8008532 <USB_ReadInterrupts>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d2:	d123      	bne.n	800561c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f003 f84b 	bl	8008674 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f002 fe1f 	bl	8008226 <USB_GetDevSpeed>
 80055e8:	4603      	mov	r3, r0
 80055ea:	461a      	mov	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681c      	ldr	r4, [r3, #0]
 80055f4:	f001 f808 	bl	8006608 <HAL_RCC_GetHCLKFreq>
 80055f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055fe:	461a      	mov	r2, r3
 8005600:	4620      	mov	r0, r4
 8005602:	f002 fb33 	bl	8007c6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f95a 	bl	80058c0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800561a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f002 ff86 	bl	8008532 <USB_ReadInterrupts>
 8005626:	4603      	mov	r3, r0
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b08      	cmp	r3, #8
 800562e:	d10a      	bne.n	8005646 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f93b 	bl	80058ac <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f002 0208 	and.w	r2, r2, #8
 8005644:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f002 ff71 	bl	8008532 <USB_ReadInterrupts>
 8005650:	4603      	mov	r3, r0
 8005652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005656:	2b80      	cmp	r3, #128	@ 0x80
 8005658:	d123      	bne.n	80056a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005666:	2301      	movs	r3, #1
 8005668:	627b      	str	r3, [r7, #36]	@ 0x24
 800566a:	e014      	b.n	8005696 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005670:	4613      	mov	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d105      	bne.n	8005690 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	b2db      	uxtb	r3, r3
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f962 	bl	8005954 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	3301      	adds	r3, #1
 8005694:	627b      	str	r3, [r7, #36]	@ 0x24
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	791b      	ldrb	r3, [r3, #4]
 800569a:	461a      	mov	r2, r3
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	4293      	cmp	r3, r2
 80056a0:	d3e4      	bcc.n	800566c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f002 ff43 	bl	8008532 <USB_ReadInterrupts>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056b6:	d13c      	bne.n	8005732 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056b8:	2301      	movs	r3, #1
 80056ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80056bc:	e02b      	b.n	8005716 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d2:	4613      	mov	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	3318      	adds	r3, #24
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d115      	bne.n	8005710 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80056e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da12      	bge.n	8005710 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ee:	4613      	mov	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	440b      	add	r3, r1
 80056f8:	3317      	adds	r3, #23
 80056fa:	2201      	movs	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f922 	bl	8005954 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005712:	3301      	adds	r3, #1
 8005714:	627b      	str	r3, [r7, #36]	@ 0x24
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	791b      	ldrb	r3, [r3, #4]
 800571a:	461a      	mov	r2, r3
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	4293      	cmp	r3, r2
 8005720:	d3cd      	bcc.n	80056be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695a      	ldr	r2, [r3, #20]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f002 fefb 	bl	8008532 <USB_ReadInterrupts>
 800573c:	4603      	mov	r3, r0
 800573e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005742:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005746:	d156      	bne.n	80057f6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005748:	2301      	movs	r3, #1
 800574a:	627b      	str	r3, [r7, #36]	@ 0x24
 800574c:	e045      	b.n	80057da <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005762:	4613      	mov	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d12e      	bne.n	80057d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005776:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005778:	2b00      	cmp	r3, #0
 800577a:	da2b      	bge.n	80057d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005788:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800578c:	429a      	cmp	r2, r3
 800578e:	d121      	bne.n	80057d4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005794:	4613      	mov	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80057a2:	2201      	movs	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057d0:	6053      	str	r3, [r2, #4]
            break;
 80057d2:	e008      	b.n	80057e6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	3301      	adds	r3, #1
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	791b      	ldrb	r3, [r3, #4]
 80057de:	461a      	mov	r2, r3
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d3b3      	bcc.n	800574e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80057f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f002 fe99 	bl	8008532 <USB_ReadInterrupts>
 8005800:	4603      	mov	r3, r0
 8005802:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800580a:	d10a      	bne.n	8005822 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f88d 	bl	800592c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695a      	ldr	r2, [r3, #20]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f002 fe83 	bl	8008532 <USB_ReadInterrupts>
 800582c:	4603      	mov	r3, r0
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b04      	cmp	r3, #4
 8005834:	d115      	bne.n	8005862 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f879 	bl	8005940 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6859      	ldr	r1, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
 800585e:	e000      	b.n	8005862 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005860:	bf00      	nop
    }
  }
}
 8005862:	3734      	adds	r7, #52	@ 0x34
 8005864:	46bd      	mov	sp, r7
 8005866:	bd90      	pop	{r4, r7, pc}

08005868 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005964:	2b00      	cmp	r3, #0
 8005966:	da0c      	bge.n	8005982 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	f003 020f 	and.w	r2, r3, #15
 800596e:	4613      	mov	r3, r2
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	3310      	adds	r3, #16
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4413      	add	r3, r2
 800597c:	3304      	adds	r3, #4
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	e00c      	b.n	800599c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	f003 020f 	and.w	r2, r3, #15
 8005988:	4613      	mov	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	3304      	adds	r3, #4
 800599a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68f9      	ldr	r1, [r7, #12]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f002 fc64 	bl	8008270 <USB_EPStopXfer>
 80059a8:	4603      	mov	r3, r0
 80059aa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80059ac:	7afb      	ldrb	r3, [r7, #11]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b08a      	sub	sp, #40	@ 0x28
 80059ba:	af02      	add	r7, sp, #8
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	4613      	mov	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	3310      	adds	r3, #16
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4413      	add	r3, r2
 80059da:	3304      	adds	r3, #4
 80059dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d901      	bls.n	80059ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e06b      	b.n	8005ac6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d902      	bls.n	8005a0a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3303      	adds	r3, #3
 8005a0e:	089b      	lsrs	r3, r3, #2
 8005a10:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a12:	e02a      	b.n	8005a6a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d902      	bls.n	8005a30 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	3303      	adds	r3, #3
 8005a34:	089b      	lsrs	r3, r3, #2
 8005a36:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68d9      	ldr	r1, [r3, #12]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	6978      	ldr	r0, [r7, #20]
 8005a4e:	f002 fcb9 	bl	80083c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	441a      	add	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	441a      	add	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d809      	bhi.n	8005a94 <PCD_WriteEmptyTxFifo+0xde>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	695a      	ldr	r2, [r3, #20]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d203      	bcs.n	8005a94 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1bf      	bne.n	8005a14 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d811      	bhi.n	8005ac4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	6939      	ldr	r1, [r7, #16]
 8005abc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	333c      	adds	r3, #60	@ 0x3c
 8005ae8:	3304      	adds	r3, #4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	799b      	ldrb	r3, [r3, #6]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d17b      	bne.n	8005bfe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d015      	beq.n	8005b3c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	4a61      	ldr	r2, [pc, #388]	@ (8005c98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	f240 80b9 	bls.w	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80b3 	beq.w	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b32:	461a      	mov	r2, r3
 8005b34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b38:	6093      	str	r3, [r2, #8]
 8005b3a:	e0a7      	b.n	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b52:	461a      	mov	r2, r3
 8005b54:	2320      	movs	r3, #32
 8005b56:	6093      	str	r3, [r2, #8]
 8005b58:	e098      	b.n	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f040 8093 	bne.w	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	4a4b      	ldr	r2, [pc, #300]	@ (8005c98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d90f      	bls.n	8005b8e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b84:	461a      	mov	r2, r3
 8005b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b8a:	6093      	str	r3, [r2, #8]
 8005b8c:	e07e      	b.n	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a1a      	ldr	r2, [r3, #32]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	0159      	lsls	r1, r3, #5
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	440b      	add	r3, r1
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d114      	bne.n	8005bf0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2101      	movs	r1, #1
 8005bdc:	f002 fd6e 	bl	80086bc <USB_EP0_OutStart>
 8005be0:	e006      	b.n	8005bf0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	441a      	add	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff fe36 	bl	8005868 <HAL_PCD_DataOutStageCallback>
 8005bfc:	e046      	b.n	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4a26      	ldr	r2, [pc, #152]	@ (8005c9c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d124      	bne.n	8005c50 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c22:	6093      	str	r3, [r2, #8]
 8005c24:	e032      	b.n	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2320      	movs	r3, #32
 8005c40:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff fe0d 	bl	8005868 <HAL_PCD_DataOutStageCallback>
 8005c4e:	e01d      	b.n	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d114      	bne.n	8005c80 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	440b      	add	r3, r1
 8005c64:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d108      	bne.n	8005c80 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c78:	461a      	mov	r2, r3
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	f002 fd1e 	bl	80086bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff fdee 	bl	8005868 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	4f54300a 	.word	0x4f54300a
 8005c9c:	4f54310a 	.word	0x4f54310a

08005ca0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	333c      	adds	r3, #60	@ 0x3c
 8005cb8:	3304      	adds	r3, #4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a15      	ldr	r2, [pc, #84]	@ (8005d28 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d90e      	bls.n	8005cf4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cec:	461a      	mov	r2, r3
 8005cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cf2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff fdcf 	bl	8005898 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8005d28 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d90c      	bls.n	8005d1c <PCD_EP_OutSetupPacket_int+0x7c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	799b      	ldrb	r3, [r3, #6]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d108      	bne.n	8005d1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d14:	461a      	mov	r2, r3
 8005d16:	2101      	movs	r1, #1
 8005d18:	f002 fcd0 	bl	80086bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	4f54300a 	.word	0x4f54300a

08005d2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e267      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d075      	beq.n	8005e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d62:	4b88      	ldr	r3, [pc, #544]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 030c 	and.w	r3, r3, #12
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d00c      	beq.n	8005d88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d6e:	4b85      	ldr	r3, [pc, #532]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d112      	bne.n	8005da0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d7a:	4b82      	ldr	r3, [pc, #520]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d86:	d10b      	bne.n	8005da0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d88:	4b7e      	ldr	r3, [pc, #504]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d05b      	beq.n	8005e4c <HAL_RCC_OscConfig+0x108>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d157      	bne.n	8005e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e242      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da8:	d106      	bne.n	8005db8 <HAL_RCC_OscConfig+0x74>
 8005daa:	4b76      	ldr	r3, [pc, #472]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a75      	ldr	r2, [pc, #468]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e01d      	b.n	8005df4 <HAL_RCC_OscConfig+0xb0>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dc0:	d10c      	bne.n	8005ddc <HAL_RCC_OscConfig+0x98>
 8005dc2:	4b70      	ldr	r3, [pc, #448]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a6f      	ldr	r2, [pc, #444]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	4b6d      	ldr	r3, [pc, #436]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a6c      	ldr	r2, [pc, #432]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e00b      	b.n	8005df4 <HAL_RCC_OscConfig+0xb0>
 8005ddc:	4b69      	ldr	r3, [pc, #420]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a68      	ldr	r2, [pc, #416]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	4b66      	ldr	r3, [pc, #408]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a65      	ldr	r2, [pc, #404]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d013      	beq.n	8005e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfc:	f7fb ff3a 	bl	8001c74 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e04:	f7fb ff36 	bl	8001c74 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b64      	cmp	r3, #100	@ 0x64
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e207      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e16:	4b5b      	ldr	r3, [pc, #364]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f0      	beq.n	8005e04 <HAL_RCC_OscConfig+0xc0>
 8005e22:	e014      	b.n	8005e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e24:	f7fb ff26 	bl	8001c74 <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e2c:	f7fb ff22 	bl	8001c74 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b64      	cmp	r3, #100	@ 0x64
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e1f3      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e3e:	4b51      	ldr	r3, [pc, #324]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1f0      	bne.n	8005e2c <HAL_RCC_OscConfig+0xe8>
 8005e4a:	e000      	b.n	8005e4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d063      	beq.n	8005f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e66:	4b47      	ldr	r3, [pc, #284]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e6e:	2b08      	cmp	r3, #8
 8005e70:	d11c      	bne.n	8005eac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e72:	4b44      	ldr	r3, [pc, #272]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d116      	bne.n	8005eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e7e:	4b41      	ldr	r3, [pc, #260]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_RCC_OscConfig+0x152>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d001      	beq.n	8005e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e1c7      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e96:	4b3b      	ldr	r3, [pc, #236]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4937      	ldr	r1, [pc, #220]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eaa:	e03a      	b.n	8005f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d020      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eb4:	4b34      	ldr	r3, [pc, #208]	@ (8005f88 <HAL_RCC_OscConfig+0x244>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eba:	f7fb fedb 	bl	8001c74 <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ec2:	f7fb fed7 	bl	8001c74 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e1a8      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee0:	4b28      	ldr	r3, [pc, #160]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	4925      	ldr	r1, [pc, #148]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	600b      	str	r3, [r1, #0]
 8005ef4:	e015      	b.n	8005f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ef6:	4b24      	ldr	r3, [pc, #144]	@ (8005f88 <HAL_RCC_OscConfig+0x244>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efc:	f7fb feba 	bl	8001c74 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f04:	f7fb feb6 	bl	8001c74 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e187      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f16:	4b1b      	ldr	r3, [pc, #108]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d036      	beq.n	8005f9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d016      	beq.n	8005f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f36:	4b15      	ldr	r3, [pc, #84]	@ (8005f8c <HAL_RCC_OscConfig+0x248>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3c:	f7fb fe9a 	bl	8001c74 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f44:	f7fb fe96 	bl	8001c74 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e167      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f56:	4b0b      	ldr	r3, [pc, #44]	@ (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0f0      	beq.n	8005f44 <HAL_RCC_OscConfig+0x200>
 8005f62:	e01b      	b.n	8005f9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f64:	4b09      	ldr	r3, [pc, #36]	@ (8005f8c <HAL_RCC_OscConfig+0x248>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f6a:	f7fb fe83 	bl	8001c74 <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f70:	e00e      	b.n	8005f90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f72:	f7fb fe7f 	bl	8001c74 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d907      	bls.n	8005f90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e150      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
 8005f84:	40023800 	.word	0x40023800
 8005f88:	42470000 	.word	0x42470000
 8005f8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f90:	4b88      	ldr	r3, [pc, #544]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8005f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1ea      	bne.n	8005f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8097 	beq.w	80060d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005faa:	2300      	movs	r3, #0
 8005fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fae:	4b81      	ldr	r3, [pc, #516]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10f      	bne.n	8005fda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60bb      	str	r3, [r7, #8]
 8005fbe:	4b7d      	ldr	r3, [pc, #500]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc2:	4a7c      	ldr	r2, [pc, #496]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8005fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fca:	4b7a      	ldr	r3, [pc, #488]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fd2:	60bb      	str	r3, [r7, #8]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fda:	4b77      	ldr	r3, [pc, #476]	@ (80061b8 <HAL_RCC_OscConfig+0x474>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d118      	bne.n	8006018 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fe6:	4b74      	ldr	r3, [pc, #464]	@ (80061b8 <HAL_RCC_OscConfig+0x474>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a73      	ldr	r2, [pc, #460]	@ (80061b8 <HAL_RCC_OscConfig+0x474>)
 8005fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff2:	f7fb fe3f 	bl	8001c74 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff8:	e008      	b.n	800600c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ffa:	f7fb fe3b 	bl	8001c74 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e10c      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600c:	4b6a      	ldr	r3, [pc, #424]	@ (80061b8 <HAL_RCC_OscConfig+0x474>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0f0      	beq.n	8005ffa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d106      	bne.n	800602e <HAL_RCC_OscConfig+0x2ea>
 8006020:	4b64      	ldr	r3, [pc, #400]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006024:	4a63      	ldr	r2, [pc, #396]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	6713      	str	r3, [r2, #112]	@ 0x70
 800602c:	e01c      	b.n	8006068 <HAL_RCC_OscConfig+0x324>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2b05      	cmp	r3, #5
 8006034:	d10c      	bne.n	8006050 <HAL_RCC_OscConfig+0x30c>
 8006036:	4b5f      	ldr	r3, [pc, #380]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603a:	4a5e      	ldr	r2, [pc, #376]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 800603c:	f043 0304 	orr.w	r3, r3, #4
 8006040:	6713      	str	r3, [r2, #112]	@ 0x70
 8006042:	4b5c      	ldr	r3, [pc, #368]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006046:	4a5b      	ldr	r2, [pc, #364]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006048:	f043 0301 	orr.w	r3, r3, #1
 800604c:	6713      	str	r3, [r2, #112]	@ 0x70
 800604e:	e00b      	b.n	8006068 <HAL_RCC_OscConfig+0x324>
 8006050:	4b58      	ldr	r3, [pc, #352]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006054:	4a57      	ldr	r2, [pc, #348]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006056:	f023 0301 	bic.w	r3, r3, #1
 800605a:	6713      	str	r3, [r2, #112]	@ 0x70
 800605c:	4b55      	ldr	r3, [pc, #340]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 800605e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006060:	4a54      	ldr	r2, [pc, #336]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006062:	f023 0304 	bic.w	r3, r3, #4
 8006066:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d015      	beq.n	800609c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006070:	f7fb fe00 	bl	8001c74 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006076:	e00a      	b.n	800608e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006078:	f7fb fdfc 	bl	8001c74 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006086:	4293      	cmp	r3, r2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e0cb      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800608e:	4b49      	ldr	r3, [pc, #292]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0ee      	beq.n	8006078 <HAL_RCC_OscConfig+0x334>
 800609a:	e014      	b.n	80060c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800609c:	f7fb fdea 	bl	8001c74 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060a2:	e00a      	b.n	80060ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a4:	f7fb fde6 	bl	8001c74 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e0b5      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ba:	4b3e      	ldr	r3, [pc, #248]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 80060bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1ee      	bne.n	80060a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d105      	bne.n	80060d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060cc:	4b39      	ldr	r3, [pc, #228]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 80060ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d0:	4a38      	ldr	r2, [pc, #224]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 80060d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80a1 	beq.w	8006224 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060e2:	4b34      	ldr	r3, [pc, #208]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d05c      	beq.n	80061a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d141      	bne.n	800617a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f6:	4b31      	ldr	r3, [pc, #196]	@ (80061bc <HAL_RCC_OscConfig+0x478>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fc:	f7fb fdba 	bl	8001c74 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006104:	f7fb fdb6 	bl	8001c74 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e087      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006116:	4b27      	ldr	r3, [pc, #156]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69da      	ldr	r2, [r3, #28]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006130:	019b      	lsls	r3, r3, #6
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006138:	085b      	lsrs	r3, r3, #1
 800613a:	3b01      	subs	r3, #1
 800613c:	041b      	lsls	r3, r3, #16
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006144:	061b      	lsls	r3, r3, #24
 8006146:	491b      	ldr	r1, [pc, #108]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006148:	4313      	orrs	r3, r2
 800614a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800614c:	4b1b      	ldr	r3, [pc, #108]	@ (80061bc <HAL_RCC_OscConfig+0x478>)
 800614e:	2201      	movs	r2, #1
 8006150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006152:	f7fb fd8f 	bl	8001c74 <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006158:	e008      	b.n	800616c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800615a:	f7fb fd8b 	bl	8001c74 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e05c      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616c:	4b11      	ldr	r3, [pc, #68]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f0      	beq.n	800615a <HAL_RCC_OscConfig+0x416>
 8006178:	e054      	b.n	8006224 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800617a:	4b10      	ldr	r3, [pc, #64]	@ (80061bc <HAL_RCC_OscConfig+0x478>)
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006180:	f7fb fd78 	bl	8001c74 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006188:	f7fb fd74 	bl	8001c74 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e045      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619a:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <HAL_RCC_OscConfig+0x470>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f0      	bne.n	8006188 <HAL_RCC_OscConfig+0x444>
 80061a6:	e03d      	b.n	8006224 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d107      	bne.n	80061c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e038      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
 80061b4:	40023800 	.word	0x40023800
 80061b8:	40007000 	.word	0x40007000
 80061bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006230 <HAL_RCC_OscConfig+0x4ec>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d028      	beq.n	8006220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061d8:	429a      	cmp	r2, r3
 80061da:	d121      	bne.n	8006220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d11a      	bne.n	8006220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061f0:	4013      	ands	r3, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d111      	bne.n	8006220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	3b01      	subs	r3, #1
 800620a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800620c:	429a      	cmp	r2, r3
 800620e:	d107      	bne.n	8006220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800621c:	429a      	cmp	r2, r3
 800621e:	d001      	beq.n	8006224 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	40023800 	.word	0x40023800

08006234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0cc      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006248:	4b68      	ldr	r3, [pc, #416]	@ (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d90c      	bls.n	8006270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006256:	4b65      	ldr	r3, [pc, #404]	@ (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800625e:	4b63      	ldr	r3, [pc, #396]	@ (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d001      	beq.n	8006270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e0b8      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d020      	beq.n	80062be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006288:	4b59      	ldr	r3, [pc, #356]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	4a58      	ldr	r2, [pc, #352]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 800628e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006292:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062a0:	4b53      	ldr	r3, [pc, #332]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4a52      	ldr	r2, [pc, #328]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ac:	4b50      	ldr	r3, [pc, #320]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	494d      	ldr	r1, [pc, #308]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d044      	beq.n	8006354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d107      	bne.n	80062e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	4b47      	ldr	r3, [pc, #284]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d119      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e07f      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d003      	beq.n	80062f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d107      	bne.n	8006302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062f2:	4b3f      	ldr	r3, [pc, #252]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e06f      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006302:	4b3b      	ldr	r3, [pc, #236]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e067      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006312:	4b37      	ldr	r3, [pc, #220]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f023 0203 	bic.w	r2, r3, #3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	4934      	ldr	r1, [pc, #208]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	4313      	orrs	r3, r2
 8006322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006324:	f7fb fca6 	bl	8001c74 <HAL_GetTick>
 8006328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632a:	e00a      	b.n	8006342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800632c:	f7fb fca2 	bl	8001c74 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e04f      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006342:	4b2b      	ldr	r3, [pc, #172]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 020c 	and.w	r2, r3, #12
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	429a      	cmp	r2, r3
 8006352:	d1eb      	bne.n	800632c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006354:	4b25      	ldr	r3, [pc, #148]	@ (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d20c      	bcs.n	800637c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006362:	4b22      	ldr	r3, [pc, #136]	@ (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800636a:	4b20      	ldr	r3, [pc, #128]	@ (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d001      	beq.n	800637c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e032      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006388:	4b19      	ldr	r3, [pc, #100]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4916      	ldr	r1, [pc, #88]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	4313      	orrs	r3, r2
 8006398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063a6:	4b12      	ldr	r3, [pc, #72]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	490e      	ldr	r1, [pc, #56]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063ba:	f000 f821 	bl	8006400 <HAL_RCC_GetSysClockFreq>
 80063be:	4602      	mov	r2, r0
 80063c0:	4b0b      	ldr	r3, [pc, #44]	@ (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	091b      	lsrs	r3, r3, #4
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	490a      	ldr	r1, [pc, #40]	@ (80063f4 <HAL_RCC_ClockConfig+0x1c0>)
 80063cc:	5ccb      	ldrb	r3, [r1, r3]
 80063ce:	fa22 f303 	lsr.w	r3, r2, r3
 80063d2:	4a09      	ldr	r2, [pc, #36]	@ (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80063d6:	4b09      	ldr	r3, [pc, #36]	@ (80063fc <HAL_RCC_ClockConfig+0x1c8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fb fc06 	bl	8001bec <HAL_InitTick>

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40023c00 	.word	0x40023c00
 80063f0:	40023800 	.word	0x40023800
 80063f4:	08009674 	.word	0x08009674
 80063f8:	20000008 	.word	0x20000008
 80063fc:	2000000c 	.word	0x2000000c

08006400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006404:	b094      	sub	sp, #80	@ 0x50
 8006406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006418:	4b79      	ldr	r3, [pc, #484]	@ (8006600 <HAL_RCC_GetSysClockFreq+0x200>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 030c 	and.w	r3, r3, #12
 8006420:	2b08      	cmp	r3, #8
 8006422:	d00d      	beq.n	8006440 <HAL_RCC_GetSysClockFreq+0x40>
 8006424:	2b08      	cmp	r3, #8
 8006426:	f200 80e1 	bhi.w	80065ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <HAL_RCC_GetSysClockFreq+0x34>
 800642e:	2b04      	cmp	r3, #4
 8006430:	d003      	beq.n	800643a <HAL_RCC_GetSysClockFreq+0x3a>
 8006432:	e0db      	b.n	80065ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006434:	4b73      	ldr	r3, [pc, #460]	@ (8006604 <HAL_RCC_GetSysClockFreq+0x204>)
 8006436:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006438:	e0db      	b.n	80065f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800643a:	4b72      	ldr	r3, [pc, #456]	@ (8006604 <HAL_RCC_GetSysClockFreq+0x204>)
 800643c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800643e:	e0d8      	b.n	80065f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006440:	4b6f      	ldr	r3, [pc, #444]	@ (8006600 <HAL_RCC_GetSysClockFreq+0x200>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006448:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800644a:	4b6d      	ldr	r3, [pc, #436]	@ (8006600 <HAL_RCC_GetSysClockFreq+0x200>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d063      	beq.n	800651e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006456:	4b6a      	ldr	r3, [pc, #424]	@ (8006600 <HAL_RCC_GetSysClockFreq+0x200>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	099b      	lsrs	r3, r3, #6
 800645c:	2200      	movs	r2, #0
 800645e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006460:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006468:	633b      	str	r3, [r7, #48]	@ 0x30
 800646a:	2300      	movs	r3, #0
 800646c:	637b      	str	r3, [r7, #52]	@ 0x34
 800646e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006472:	4622      	mov	r2, r4
 8006474:	462b      	mov	r3, r5
 8006476:	f04f 0000 	mov.w	r0, #0
 800647a:	f04f 0100 	mov.w	r1, #0
 800647e:	0159      	lsls	r1, r3, #5
 8006480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006484:	0150      	lsls	r0, r2, #5
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4621      	mov	r1, r4
 800648c:	1a51      	subs	r1, r2, r1
 800648e:	6139      	str	r1, [r7, #16]
 8006490:	4629      	mov	r1, r5
 8006492:	eb63 0301 	sbc.w	r3, r3, r1
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064a4:	4659      	mov	r1, fp
 80064a6:	018b      	lsls	r3, r1, #6
 80064a8:	4651      	mov	r1, sl
 80064aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064ae:	4651      	mov	r1, sl
 80064b0:	018a      	lsls	r2, r1, #6
 80064b2:	4651      	mov	r1, sl
 80064b4:	ebb2 0801 	subs.w	r8, r2, r1
 80064b8:	4659      	mov	r1, fp
 80064ba:	eb63 0901 	sbc.w	r9, r3, r1
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064d2:	4690      	mov	r8, r2
 80064d4:	4699      	mov	r9, r3
 80064d6:	4623      	mov	r3, r4
 80064d8:	eb18 0303 	adds.w	r3, r8, r3
 80064dc:	60bb      	str	r3, [r7, #8]
 80064de:	462b      	mov	r3, r5
 80064e0:	eb49 0303 	adc.w	r3, r9, r3
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064f2:	4629      	mov	r1, r5
 80064f4:	028b      	lsls	r3, r1, #10
 80064f6:	4621      	mov	r1, r4
 80064f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064fc:	4621      	mov	r1, r4
 80064fe:	028a      	lsls	r2, r1, #10
 8006500:	4610      	mov	r0, r2
 8006502:	4619      	mov	r1, r3
 8006504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006506:	2200      	movs	r2, #0
 8006508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800650a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800650c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006510:	f7f9 feae 	bl	8000270 <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4613      	mov	r3, r2
 800651a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800651c:	e058      	b.n	80065d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800651e:	4b38      	ldr	r3, [pc, #224]	@ (8006600 <HAL_RCC_GetSysClockFreq+0x200>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	099b      	lsrs	r3, r3, #6
 8006524:	2200      	movs	r2, #0
 8006526:	4618      	mov	r0, r3
 8006528:	4611      	mov	r1, r2
 800652a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800652e:	623b      	str	r3, [r7, #32]
 8006530:	2300      	movs	r3, #0
 8006532:	627b      	str	r3, [r7, #36]	@ 0x24
 8006534:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006538:	4642      	mov	r2, r8
 800653a:	464b      	mov	r3, r9
 800653c:	f04f 0000 	mov.w	r0, #0
 8006540:	f04f 0100 	mov.w	r1, #0
 8006544:	0159      	lsls	r1, r3, #5
 8006546:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800654a:	0150      	lsls	r0, r2, #5
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4641      	mov	r1, r8
 8006552:	ebb2 0a01 	subs.w	sl, r2, r1
 8006556:	4649      	mov	r1, r9
 8006558:	eb63 0b01 	sbc.w	fp, r3, r1
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006568:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800656c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006570:	ebb2 040a 	subs.w	r4, r2, sl
 8006574:	eb63 050b 	sbc.w	r5, r3, fp
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	00eb      	lsls	r3, r5, #3
 8006582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006586:	00e2      	lsls	r2, r4, #3
 8006588:	4614      	mov	r4, r2
 800658a:	461d      	mov	r5, r3
 800658c:	4643      	mov	r3, r8
 800658e:	18e3      	adds	r3, r4, r3
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	464b      	mov	r3, r9
 8006594:	eb45 0303 	adc.w	r3, r5, r3
 8006598:	607b      	str	r3, [r7, #4]
 800659a:	f04f 0200 	mov.w	r2, #0
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065a6:	4629      	mov	r1, r5
 80065a8:	028b      	lsls	r3, r1, #10
 80065aa:	4621      	mov	r1, r4
 80065ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065b0:	4621      	mov	r1, r4
 80065b2:	028a      	lsls	r2, r1, #10
 80065b4:	4610      	mov	r0, r2
 80065b6:	4619      	mov	r1, r3
 80065b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ba:	2200      	movs	r2, #0
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	61fa      	str	r2, [r7, #28]
 80065c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065c4:	f7f9 fe54 	bl	8000270 <__aeabi_uldivmod>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4613      	mov	r3, r2
 80065ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80065d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006600 <HAL_RCC_GetSysClockFreq+0x200>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	0c1b      	lsrs	r3, r3, #16
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	3301      	adds	r3, #1
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80065e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065ea:	e002      	b.n	80065f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065ec:	4b05      	ldr	r3, [pc, #20]	@ (8006604 <HAL_RCC_GetSysClockFreq+0x204>)
 80065ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3750      	adds	r7, #80	@ 0x50
 80065f8:	46bd      	mov	sp, r7
 80065fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065fe:	bf00      	nop
 8006600:	40023800 	.word	0x40023800
 8006604:	00f42400 	.word	0x00f42400

08006608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800660c:	4b03      	ldr	r3, [pc, #12]	@ (800661c <HAL_RCC_GetHCLKFreq+0x14>)
 800660e:	681b      	ldr	r3, [r3, #0]
}
 8006610:	4618      	mov	r0, r3
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	20000008 	.word	0x20000008

08006620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006624:	f7ff fff0 	bl	8006608 <HAL_RCC_GetHCLKFreq>
 8006628:	4602      	mov	r2, r0
 800662a:	4b05      	ldr	r3, [pc, #20]	@ (8006640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	0a9b      	lsrs	r3, r3, #10
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	4903      	ldr	r1, [pc, #12]	@ (8006644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006636:	5ccb      	ldrb	r3, [r1, r3]
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800663c:	4618      	mov	r0, r3
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40023800 	.word	0x40023800
 8006644:	08009684 	.word	0x08009684

08006648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800664c:	f7ff ffdc 	bl	8006608 <HAL_RCC_GetHCLKFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b05      	ldr	r3, [pc, #20]	@ (8006668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	0b5b      	lsrs	r3, r3, #13
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	4903      	ldr	r1, [pc, #12]	@ (800666c <HAL_RCC_GetPCLK2Freq+0x24>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006664:	4618      	mov	r0, r3
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40023800 	.word	0x40023800
 800666c:	08009684 	.word	0x08009684

08006670 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d105      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006694:	2b00      	cmp	r3, #0
 8006696:	d035      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006698:	4b62      	ldr	r3, [pc, #392]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800669e:	f7fb fae9 	bl	8001c74 <HAL_GetTick>
 80066a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066a4:	e008      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066a6:	f7fb fae5 	bl	8001c74 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e0b0      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066b8:	4b5b      	ldr	r3, [pc, #364]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1f0      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	019a      	lsls	r2, r3, #6
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	071b      	lsls	r3, r3, #28
 80066d0:	4955      	ldr	r1, [pc, #340]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066d8:	4b52      	ldr	r3, [pc, #328]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066de:	f7fb fac9 	bl	8001c74 <HAL_GetTick>
 80066e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066e4:	e008      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066e6:	f7fb fac5 	bl	8001c74 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e090      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066f8:	4b4b      	ldr	r3, [pc, #300]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0f0      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8083 	beq.w	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	4b44      	ldr	r3, [pc, #272]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671a:	4a43      	ldr	r2, [pc, #268]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800671c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006720:	6413      	str	r3, [r2, #64]	@ 0x40
 8006722:	4b41      	ldr	r3, [pc, #260]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800672e:	4b3f      	ldr	r3, [pc, #252]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a3e      	ldr	r2, [pc, #248]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006738:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800673a:	f7fb fa9b 	bl	8001c74 <HAL_GetTick>
 800673e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006740:	e008      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006742:	f7fb fa97 	bl	8001c74 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e062      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006754:	4b35      	ldr	r3, [pc, #212]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0f0      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006760:	4b31      	ldr	r3, [pc, #196]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006764:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006768:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d02f      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	429a      	cmp	r2, r3
 800677c:	d028      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800677e:	4b2a      	ldr	r3, [pc, #168]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006786:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006788:	4b29      	ldr	r3, [pc, #164]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800678a:	2201      	movs	r2, #1
 800678c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800678e:	4b28      	ldr	r3, [pc, #160]	@ (8006830 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006794:	4a24      	ldr	r2, [pc, #144]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800679a:	4b23      	ldr	r3, [pc, #140]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800679c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d114      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067a6:	f7fb fa65 	bl	8001c74 <HAL_GetTick>
 80067aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ac:	e00a      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ae:	f7fb fa61 	bl	8001c74 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067bc:	4293      	cmp	r3, r2
 80067be:	d901      	bls.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e02a      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c4:	4b18      	ldr	r3, [pc, #96]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0ee      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067dc:	d10d      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80067de:	4b12      	ldr	r3, [pc, #72]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80067ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067f2:	490d      	ldr	r1, [pc, #52]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	608b      	str	r3, [r1, #8]
 80067f8:	e005      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80067fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006800:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006804:	6093      	str	r3, [r2, #8]
 8006806:	4b08      	ldr	r3, [pc, #32]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006808:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006812:	4905      	ldr	r1, [pc, #20]	@ (8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006814:	4313      	orrs	r3, r2
 8006816:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	42470068 	.word	0x42470068
 8006828:	40023800 	.word	0x40023800
 800682c:	40007000 	.word	0x40007000
 8006830:	42470e40 	.word	0x42470e40

08006834 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d13f      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006852:	4b24      	ldr	r3, [pc, #144]	@ (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800685a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d006      	beq.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006868:	d12f      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800686a:	4b1f      	ldr	r3, [pc, #124]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800686c:	617b      	str	r3, [r7, #20]
          break;
 800686e:	e02f      	b.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006870:	4b1c      	ldr	r3, [pc, #112]	@ (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006878:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800687c:	d108      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800687e:	4b19      	ldr	r3, [pc, #100]	@ (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006886:	4a19      	ldr	r2, [pc, #100]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006888:	fbb2 f3f3 	udiv	r3, r2, r3
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	e007      	b.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006890:	4b14      	ldr	r3, [pc, #80]	@ (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006898:	4a14      	ldr	r2, [pc, #80]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800689a:	fbb2 f3f3 	udiv	r3, r2, r3
 800689e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80068a0:	4b10      	ldr	r3, [pc, #64]	@ (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068a6:	099b      	lsrs	r3, r3, #6
 80068a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80068b4:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ba:	0f1b      	lsrs	r3, r3, #28
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c6:	617b      	str	r3, [r7, #20]
          break;
 80068c8:	e002      	b.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
          break;
 80068ce:	bf00      	nop
        }
      }
      break;
 80068d0:	e000      	b.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80068d2:	bf00      	nop
    }
  }
  return frequency;
 80068d4:	697b      	ldr	r3, [r7, #20]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40023800 	.word	0x40023800
 80068e8:	00bb8000 	.word	0x00bb8000
 80068ec:	00f42400 	.word	0x00f42400

080068f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e07b      	b.n	80069fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	d108      	bne.n	800691c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006912:	d009      	beq.n	8006928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	61da      	str	r2, [r3, #28]
 800691a:	e005      	b.n	8006928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fa fdac 	bl	80014a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800695e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ac:	ea42 0103 	orr.w	r1, r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	0c1b      	lsrs	r3, r3, #16
 80069c6:	f003 0104 	and.w	r1, r3, #4
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ce:	f003 0210 	and.w	r2, r3, #16
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69da      	ldr	r2, [r3, #28]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e041      	b.n	8006a98 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7fa ff17 	bl	800185c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f000 fa79 	bl	8006f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d001      	beq.n	8006ab8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e046      	b.n	8006b46 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a23      	ldr	r2, [pc, #140]	@ (8006b54 <HAL_TIM_Base_Start+0xb4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d022      	beq.n	8006b10 <HAL_TIM_Base_Start+0x70>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ad2:	d01d      	beq.n	8006b10 <HAL_TIM_Base_Start+0x70>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8006b58 <HAL_TIM_Base_Start+0xb8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d018      	beq.n	8006b10 <HAL_TIM_Base_Start+0x70>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b5c <HAL_TIM_Base_Start+0xbc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d013      	beq.n	8006b10 <HAL_TIM_Base_Start+0x70>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1c      	ldr	r2, [pc, #112]	@ (8006b60 <HAL_TIM_Base_Start+0xc0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00e      	beq.n	8006b10 <HAL_TIM_Base_Start+0x70>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b64 <HAL_TIM_Base_Start+0xc4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d009      	beq.n	8006b10 <HAL_TIM_Base_Start+0x70>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a19      	ldr	r2, [pc, #100]	@ (8006b68 <HAL_TIM_Base_Start+0xc8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d004      	beq.n	8006b10 <HAL_TIM_Base_Start+0x70>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a18      	ldr	r2, [pc, #96]	@ (8006b6c <HAL_TIM_Base_Start+0xcc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d111      	bne.n	8006b34 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b06      	cmp	r3, #6
 8006b20:	d010      	beq.n	8006b44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0201 	orr.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b32:	e007      	b.n	8006b44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0201 	orr.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40010000 	.word	0x40010000
 8006b58:	40000400 	.word	0x40000400
 8006b5c:	40000800 	.word	0x40000800
 8006b60:	40000c00 	.word	0x40000c00
 8006b64:	40010400 	.word	0x40010400
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40001800 	.word	0x40001800

08006b70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e041      	b.n	8006c06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f839 	bl	8006c0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f000 f9c2 	bl	8006f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e0ae      	b.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b0c      	cmp	r3, #12
 8006c4e:	f200 809f 	bhi.w	8006d90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c52:	a201      	add	r2, pc, #4	@ (adr r2, 8006c58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006c8d 	.word	0x08006c8d
 8006c5c:	08006d91 	.word	0x08006d91
 8006c60:	08006d91 	.word	0x08006d91
 8006c64:	08006d91 	.word	0x08006d91
 8006c68:	08006ccd 	.word	0x08006ccd
 8006c6c:	08006d91 	.word	0x08006d91
 8006c70:	08006d91 	.word	0x08006d91
 8006c74:	08006d91 	.word	0x08006d91
 8006c78:	08006d0f 	.word	0x08006d0f
 8006c7c:	08006d91 	.word	0x08006d91
 8006c80:	08006d91 	.word	0x08006d91
 8006c84:	08006d91 	.word	0x08006d91
 8006c88:	08006d4f 	.word	0x08006d4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 f9fc 	bl	8007090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0208 	orr.w	r2, r2, #8
 8006ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0204 	bic.w	r2, r2, #4
 8006cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6999      	ldr	r1, [r3, #24]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	691a      	ldr	r2, [r3, #16]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	619a      	str	r2, [r3, #24]
      break;
 8006cca:	e064      	b.n	8006d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68b9      	ldr	r1, [r7, #8]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fa4c 	bl	8007170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ce6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699a      	ldr	r2, [r3, #24]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6999      	ldr	r1, [r3, #24]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	021a      	lsls	r2, r3, #8
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	619a      	str	r2, [r3, #24]
      break;
 8006d0c:	e043      	b.n	8006d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68b9      	ldr	r1, [r7, #8]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 faa1 	bl	800725c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0208 	orr.w	r2, r2, #8
 8006d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69da      	ldr	r2, [r3, #28]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0204 	bic.w	r2, r2, #4
 8006d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69d9      	ldr	r1, [r3, #28]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	61da      	str	r2, [r3, #28]
      break;
 8006d4c:	e023      	b.n	8006d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68b9      	ldr	r1, [r7, #8]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 faf5 	bl	8007344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69da      	ldr	r2, [r3, #28]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69da      	ldr	r2, [r3, #28]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69d9      	ldr	r1, [r3, #28]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	021a      	lsls	r2, r3, #8
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	61da      	str	r2, [r3, #28]
      break;
 8006d8e:	e002      	b.n	8006d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]
      break;
 8006d94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_TIM_ConfigClockSource+0x1c>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e0b4      	b.n	8006f2e <HAL_TIM_ConfigClockSource+0x186>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dfc:	d03e      	beq.n	8006e7c <HAL_TIM_ConfigClockSource+0xd4>
 8006dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e02:	f200 8087 	bhi.w	8006f14 <HAL_TIM_ConfigClockSource+0x16c>
 8006e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e0a:	f000 8086 	beq.w	8006f1a <HAL_TIM_ConfigClockSource+0x172>
 8006e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e12:	d87f      	bhi.n	8006f14 <HAL_TIM_ConfigClockSource+0x16c>
 8006e14:	2b70      	cmp	r3, #112	@ 0x70
 8006e16:	d01a      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0xa6>
 8006e18:	2b70      	cmp	r3, #112	@ 0x70
 8006e1a:	d87b      	bhi.n	8006f14 <HAL_TIM_ConfigClockSource+0x16c>
 8006e1c:	2b60      	cmp	r3, #96	@ 0x60
 8006e1e:	d050      	beq.n	8006ec2 <HAL_TIM_ConfigClockSource+0x11a>
 8006e20:	2b60      	cmp	r3, #96	@ 0x60
 8006e22:	d877      	bhi.n	8006f14 <HAL_TIM_ConfigClockSource+0x16c>
 8006e24:	2b50      	cmp	r3, #80	@ 0x50
 8006e26:	d03c      	beq.n	8006ea2 <HAL_TIM_ConfigClockSource+0xfa>
 8006e28:	2b50      	cmp	r3, #80	@ 0x50
 8006e2a:	d873      	bhi.n	8006f14 <HAL_TIM_ConfigClockSource+0x16c>
 8006e2c:	2b40      	cmp	r3, #64	@ 0x40
 8006e2e:	d058      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x13a>
 8006e30:	2b40      	cmp	r3, #64	@ 0x40
 8006e32:	d86f      	bhi.n	8006f14 <HAL_TIM_ConfigClockSource+0x16c>
 8006e34:	2b30      	cmp	r3, #48	@ 0x30
 8006e36:	d064      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0x15a>
 8006e38:	2b30      	cmp	r3, #48	@ 0x30
 8006e3a:	d86b      	bhi.n	8006f14 <HAL_TIM_ConfigClockSource+0x16c>
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	d060      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0x15a>
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	d867      	bhi.n	8006f14 <HAL_TIM_ConfigClockSource+0x16c>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d05c      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0x15a>
 8006e48:	2b10      	cmp	r3, #16
 8006e4a:	d05a      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0x15a>
 8006e4c:	e062      	b.n	8006f14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e5e:	f000 fb41 	bl	80074e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	609a      	str	r2, [r3, #8]
      break;
 8006e7a:	e04f      	b.n	8006f1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e8c:	f000 fb2a 	bl	80074e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e9e:	609a      	str	r2, [r3, #8]
      break;
 8006ea0:	e03c      	b.n	8006f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f000 fa9e 	bl	80073f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2150      	movs	r1, #80	@ 0x50
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 faf7 	bl	80074ae <TIM_ITRx_SetConfig>
      break;
 8006ec0:	e02c      	b.n	8006f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f000 fabd 	bl	800744e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2160      	movs	r1, #96	@ 0x60
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fae7 	bl	80074ae <TIM_ITRx_SetConfig>
      break;
 8006ee0:	e01c      	b.n	8006f1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f000 fa7e 	bl	80073f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2140      	movs	r1, #64	@ 0x40
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fad7 	bl	80074ae <TIM_ITRx_SetConfig>
      break;
 8006f00:	e00c      	b.n	8006f1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	f000 face 	bl	80074ae <TIM_ITRx_SetConfig>
      break;
 8006f12:	e003      	b.n	8006f1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	73fb      	strb	r3, [r7, #15]
      break;
 8006f18:	e000      	b.n	8006f1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
	...

08006f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a46      	ldr	r2, [pc, #280]	@ (8007064 <TIM_Base_SetConfig+0x12c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d013      	beq.n	8006f78 <TIM_Base_SetConfig+0x40>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f56:	d00f      	beq.n	8006f78 <TIM_Base_SetConfig+0x40>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a43      	ldr	r2, [pc, #268]	@ (8007068 <TIM_Base_SetConfig+0x130>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00b      	beq.n	8006f78 <TIM_Base_SetConfig+0x40>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a42      	ldr	r2, [pc, #264]	@ (800706c <TIM_Base_SetConfig+0x134>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d007      	beq.n	8006f78 <TIM_Base_SetConfig+0x40>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a41      	ldr	r2, [pc, #260]	@ (8007070 <TIM_Base_SetConfig+0x138>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d003      	beq.n	8006f78 <TIM_Base_SetConfig+0x40>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a40      	ldr	r2, [pc, #256]	@ (8007074 <TIM_Base_SetConfig+0x13c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d108      	bne.n	8006f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a35      	ldr	r2, [pc, #212]	@ (8007064 <TIM_Base_SetConfig+0x12c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d02b      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f98:	d027      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a32      	ldr	r2, [pc, #200]	@ (8007068 <TIM_Base_SetConfig+0x130>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d023      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a31      	ldr	r2, [pc, #196]	@ (800706c <TIM_Base_SetConfig+0x134>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d01f      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a30      	ldr	r2, [pc, #192]	@ (8007070 <TIM_Base_SetConfig+0x138>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d01b      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a2f      	ldr	r2, [pc, #188]	@ (8007074 <TIM_Base_SetConfig+0x13c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d017      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a2e      	ldr	r2, [pc, #184]	@ (8007078 <TIM_Base_SetConfig+0x140>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800707c <TIM_Base_SetConfig+0x144>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00f      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8007080 <TIM_Base_SetConfig+0x148>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00b      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8007084 <TIM_Base_SetConfig+0x14c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d007      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8007088 <TIM_Base_SetConfig+0x150>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d003      	beq.n	8006fea <TIM_Base_SetConfig+0xb2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a29      	ldr	r2, [pc, #164]	@ (800708c <TIM_Base_SetConfig+0x154>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d108      	bne.n	8006ffc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a10      	ldr	r2, [pc, #64]	@ (8007064 <TIM_Base_SetConfig+0x12c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_Base_SetConfig+0xf8>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a12      	ldr	r2, [pc, #72]	@ (8007074 <TIM_Base_SetConfig+0x13c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d103      	bne.n	8007038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b01      	cmp	r3, #1
 8007048:	d105      	bne.n	8007056 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f023 0201 	bic.w	r2, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	611a      	str	r2, [r3, #16]
  }
}
 8007056:	bf00      	nop
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40010000 	.word	0x40010000
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40000c00 	.word	0x40000c00
 8007074:	40010400 	.word	0x40010400
 8007078:	40014000 	.word	0x40014000
 800707c:	40014400 	.word	0x40014400
 8007080:	40014800 	.word	0x40014800
 8007084:	40001800 	.word	0x40001800
 8007088:	40001c00 	.word	0x40001c00
 800708c:	40002000 	.word	0x40002000

08007090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	f023 0201 	bic.w	r2, r3, #1
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 0303 	bic.w	r3, r3, #3
 80070c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f023 0302 	bic.w	r3, r3, #2
 80070d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a20      	ldr	r2, [pc, #128]	@ (8007168 <TIM_OC1_SetConfig+0xd8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d003      	beq.n	80070f4 <TIM_OC1_SetConfig+0x64>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a1f      	ldr	r2, [pc, #124]	@ (800716c <TIM_OC1_SetConfig+0xdc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d10c      	bne.n	800710e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f023 0308 	bic.w	r3, r3, #8
 80070fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	4313      	orrs	r3, r2
 8007104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f023 0304 	bic.w	r3, r3, #4
 800710c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a15      	ldr	r2, [pc, #84]	@ (8007168 <TIM_OC1_SetConfig+0xd8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d003      	beq.n	800711e <TIM_OC1_SetConfig+0x8e>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a14      	ldr	r2, [pc, #80]	@ (800716c <TIM_OC1_SetConfig+0xdc>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d111      	bne.n	8007142 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800712c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	621a      	str	r2, [r3, #32]
}
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	40010000 	.word	0x40010000
 800716c:	40010400 	.word	0x40010400

08007170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	f023 0210 	bic.w	r2, r3, #16
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800719e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f023 0320 	bic.w	r3, r3, #32
 80071ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a22      	ldr	r2, [pc, #136]	@ (8007254 <TIM_OC2_SetConfig+0xe4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d003      	beq.n	80071d8 <TIM_OC2_SetConfig+0x68>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a21      	ldr	r2, [pc, #132]	@ (8007258 <TIM_OC2_SetConfig+0xe8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d10d      	bne.n	80071f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a17      	ldr	r2, [pc, #92]	@ (8007254 <TIM_OC2_SetConfig+0xe4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <TIM_OC2_SetConfig+0x94>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a16      	ldr	r2, [pc, #88]	@ (8007258 <TIM_OC2_SetConfig+0xe8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d113      	bne.n	800722c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800720a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	40010000 	.word	0x40010000
 8007258:	40010400 	.word	0x40010400

0800725c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0303 	bic.w	r3, r3, #3
 8007292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	021b      	lsls	r3, r3, #8
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a21      	ldr	r2, [pc, #132]	@ (800733c <TIM_OC3_SetConfig+0xe0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d003      	beq.n	80072c2 <TIM_OC3_SetConfig+0x66>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a20      	ldr	r2, [pc, #128]	@ (8007340 <TIM_OC3_SetConfig+0xe4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d10d      	bne.n	80072de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	021b      	lsls	r3, r3, #8
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a16      	ldr	r2, [pc, #88]	@ (800733c <TIM_OC3_SetConfig+0xe0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d003      	beq.n	80072ee <TIM_OC3_SetConfig+0x92>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a15      	ldr	r2, [pc, #84]	@ (8007340 <TIM_OC3_SetConfig+0xe4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d113      	bne.n	8007316 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	621a      	str	r2, [r3, #32]
}
 8007330:	bf00      	nop
 8007332:	371c      	adds	r7, #28
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	40010000 	.word	0x40010000
 8007340:	40010400 	.word	0x40010400

08007344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800737a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	021b      	lsls	r3, r3, #8
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	4313      	orrs	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800738e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	031b      	lsls	r3, r3, #12
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a12      	ldr	r2, [pc, #72]	@ (80073e8 <TIM_OC4_SetConfig+0xa4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d003      	beq.n	80073ac <TIM_OC4_SetConfig+0x68>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a11      	ldr	r2, [pc, #68]	@ (80073ec <TIM_OC4_SetConfig+0xa8>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d109      	bne.n	80073c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	019b      	lsls	r3, r3, #6
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	621a      	str	r2, [r3, #32]
}
 80073da:	bf00      	nop
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40010000 	.word	0x40010000
 80073ec:	40010400 	.word	0x40010400

080073f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	f023 0201 	bic.w	r2, r3, #1
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800741a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	4313      	orrs	r3, r2
 8007424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f023 030a 	bic.w	r3, r3, #10
 800742c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800744e:	b480      	push	{r7}
 8007450:	b087      	sub	sp, #28
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	f023 0210 	bic.w	r2, r3, #16
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	031b      	lsls	r3, r3, #12
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800748a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	4313      	orrs	r3, r2
 8007494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	621a      	str	r2, [r3, #32]
}
 80074a2:	bf00      	nop
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b085      	sub	sp, #20
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f043 0307 	orr.w	r3, r3, #7
 80074d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	609a      	str	r2, [r3, #8]
}
 80074d8:	bf00      	nop
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	021a      	lsls	r2, r3, #8
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	431a      	orrs	r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4313      	orrs	r3, r2
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	609a      	str	r2, [r3, #8]
}
 8007518:	bf00      	nop
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007538:	2302      	movs	r3, #2
 800753a:	e05a      	b.n	80075f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a21      	ldr	r2, [pc, #132]	@ (8007600 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d022      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007588:	d01d      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1d      	ldr	r2, [pc, #116]	@ (8007604 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d018      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1b      	ldr	r2, [pc, #108]	@ (8007608 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d013      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1a      	ldr	r2, [pc, #104]	@ (800760c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00e      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a18      	ldr	r2, [pc, #96]	@ (8007610 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d009      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a17      	ldr	r2, [pc, #92]	@ (8007614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d004      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a15      	ldr	r2, [pc, #84]	@ (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d10c      	bne.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	40010000 	.word	0x40010000
 8007604:	40000400 	.word	0x40000400
 8007608:	40000800 	.word	0x40000800
 800760c:	40000c00 	.word	0x40000c00
 8007610:	40010400 	.word	0x40010400
 8007614:	40014000 	.word	0x40014000
 8007618:	40001800 	.word	0x40001800

0800761c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e042      	b.n	80076b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7fa f954 	bl	80018f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2224      	movs	r2, #36	@ 0x24
 800764c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800765e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f82b 	bl	80076bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	695a      	ldr	r2, [r3, #20]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076c0:	b0c0      	sub	sp, #256	@ 0x100
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80076d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d8:	68d9      	ldr	r1, [r3, #12]
 80076da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	ea40 0301 	orr.w	r3, r0, r1
 80076e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	431a      	orrs	r2, r3
 80076fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007714:	f021 010c 	bic.w	r1, r1, #12
 8007718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007722:	430b      	orrs	r3, r1
 8007724:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007736:	6999      	ldr	r1, [r3, #24]
 8007738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	ea40 0301 	orr.w	r3, r0, r1
 8007742:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	4b8f      	ldr	r3, [pc, #572]	@ (8007988 <UART_SetConfig+0x2cc>)
 800774c:	429a      	cmp	r2, r3
 800774e:	d005      	beq.n	800775c <UART_SetConfig+0xa0>
 8007750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	4b8d      	ldr	r3, [pc, #564]	@ (800798c <UART_SetConfig+0x2d0>)
 8007758:	429a      	cmp	r2, r3
 800775a:	d104      	bne.n	8007766 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800775c:	f7fe ff74 	bl	8006648 <HAL_RCC_GetPCLK2Freq>
 8007760:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007764:	e003      	b.n	800776e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007766:	f7fe ff5b 	bl	8006620 <HAL_RCC_GetPCLK1Freq>
 800776a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800776e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007778:	f040 810c 	bne.w	8007994 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800777c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007780:	2200      	movs	r2, #0
 8007782:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007786:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800778a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800778e:	4622      	mov	r2, r4
 8007790:	462b      	mov	r3, r5
 8007792:	1891      	adds	r1, r2, r2
 8007794:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007796:	415b      	adcs	r3, r3
 8007798:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800779a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800779e:	4621      	mov	r1, r4
 80077a0:	eb12 0801 	adds.w	r8, r2, r1
 80077a4:	4629      	mov	r1, r5
 80077a6:	eb43 0901 	adc.w	r9, r3, r1
 80077aa:	f04f 0200 	mov.w	r2, #0
 80077ae:	f04f 0300 	mov.w	r3, #0
 80077b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077be:	4690      	mov	r8, r2
 80077c0:	4699      	mov	r9, r3
 80077c2:	4623      	mov	r3, r4
 80077c4:	eb18 0303 	adds.w	r3, r8, r3
 80077c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077cc:	462b      	mov	r3, r5
 80077ce:	eb49 0303 	adc.w	r3, r9, r3
 80077d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80077e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077ea:	460b      	mov	r3, r1
 80077ec:	18db      	adds	r3, r3, r3
 80077ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80077f0:	4613      	mov	r3, r2
 80077f2:	eb42 0303 	adc.w	r3, r2, r3
 80077f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80077f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80077fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007800:	f7f8 fd36 	bl	8000270 <__aeabi_uldivmod>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4b61      	ldr	r3, [pc, #388]	@ (8007990 <UART_SetConfig+0x2d4>)
 800780a:	fba3 2302 	umull	r2, r3, r3, r2
 800780e:	095b      	lsrs	r3, r3, #5
 8007810:	011c      	lsls	r4, r3, #4
 8007812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007816:	2200      	movs	r2, #0
 8007818:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800781c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007820:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007824:	4642      	mov	r2, r8
 8007826:	464b      	mov	r3, r9
 8007828:	1891      	adds	r1, r2, r2
 800782a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800782c:	415b      	adcs	r3, r3
 800782e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007830:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007834:	4641      	mov	r1, r8
 8007836:	eb12 0a01 	adds.w	sl, r2, r1
 800783a:	4649      	mov	r1, r9
 800783c:	eb43 0b01 	adc.w	fp, r3, r1
 8007840:	f04f 0200 	mov.w	r2, #0
 8007844:	f04f 0300 	mov.w	r3, #0
 8007848:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800784c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007854:	4692      	mov	sl, r2
 8007856:	469b      	mov	fp, r3
 8007858:	4643      	mov	r3, r8
 800785a:	eb1a 0303 	adds.w	r3, sl, r3
 800785e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007862:	464b      	mov	r3, r9
 8007864:	eb4b 0303 	adc.w	r3, fp, r3
 8007868:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007878:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800787c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007880:	460b      	mov	r3, r1
 8007882:	18db      	adds	r3, r3, r3
 8007884:	643b      	str	r3, [r7, #64]	@ 0x40
 8007886:	4613      	mov	r3, r2
 8007888:	eb42 0303 	adc.w	r3, r2, r3
 800788c:	647b      	str	r3, [r7, #68]	@ 0x44
 800788e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007892:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007896:	f7f8 fceb 	bl	8000270 <__aeabi_uldivmod>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4611      	mov	r1, r2
 80078a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007990 <UART_SetConfig+0x2d4>)
 80078a2:	fba3 2301 	umull	r2, r3, r3, r1
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	2264      	movs	r2, #100	@ 0x64
 80078aa:	fb02 f303 	mul.w	r3, r2, r3
 80078ae:	1acb      	subs	r3, r1, r3
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80078b6:	4b36      	ldr	r3, [pc, #216]	@ (8007990 <UART_SetConfig+0x2d4>)
 80078b8:	fba3 2302 	umull	r2, r3, r3, r2
 80078bc:	095b      	lsrs	r3, r3, #5
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078c4:	441c      	add	r4, r3
 80078c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80078d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80078d8:	4642      	mov	r2, r8
 80078da:	464b      	mov	r3, r9
 80078dc:	1891      	adds	r1, r2, r2
 80078de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078e0:	415b      	adcs	r3, r3
 80078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80078e8:	4641      	mov	r1, r8
 80078ea:	1851      	adds	r1, r2, r1
 80078ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80078ee:	4649      	mov	r1, r9
 80078f0:	414b      	adcs	r3, r1
 80078f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007900:	4659      	mov	r1, fp
 8007902:	00cb      	lsls	r3, r1, #3
 8007904:	4651      	mov	r1, sl
 8007906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800790a:	4651      	mov	r1, sl
 800790c:	00ca      	lsls	r2, r1, #3
 800790e:	4610      	mov	r0, r2
 8007910:	4619      	mov	r1, r3
 8007912:	4603      	mov	r3, r0
 8007914:	4642      	mov	r2, r8
 8007916:	189b      	adds	r3, r3, r2
 8007918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800791c:	464b      	mov	r3, r9
 800791e:	460a      	mov	r2, r1
 8007920:	eb42 0303 	adc.w	r3, r2, r3
 8007924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007934:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007938:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800793c:	460b      	mov	r3, r1
 800793e:	18db      	adds	r3, r3, r3
 8007940:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007942:	4613      	mov	r3, r2
 8007944:	eb42 0303 	adc.w	r3, r2, r3
 8007948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800794a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800794e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007952:	f7f8 fc8d 	bl	8000270 <__aeabi_uldivmod>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4b0d      	ldr	r3, [pc, #52]	@ (8007990 <UART_SetConfig+0x2d4>)
 800795c:	fba3 1302 	umull	r1, r3, r3, r2
 8007960:	095b      	lsrs	r3, r3, #5
 8007962:	2164      	movs	r1, #100	@ 0x64
 8007964:	fb01 f303 	mul.w	r3, r1, r3
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	3332      	adds	r3, #50	@ 0x32
 800796e:	4a08      	ldr	r2, [pc, #32]	@ (8007990 <UART_SetConfig+0x2d4>)
 8007970:	fba2 2303 	umull	r2, r3, r2, r3
 8007974:	095b      	lsrs	r3, r3, #5
 8007976:	f003 0207 	and.w	r2, r3, #7
 800797a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4422      	add	r2, r4
 8007982:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007984:	e106      	b.n	8007b94 <UART_SetConfig+0x4d8>
 8007986:	bf00      	nop
 8007988:	40011000 	.word	0x40011000
 800798c:	40011400 	.word	0x40011400
 8007990:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007998:	2200      	movs	r2, #0
 800799a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800799e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80079a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80079a6:	4642      	mov	r2, r8
 80079a8:	464b      	mov	r3, r9
 80079aa:	1891      	adds	r1, r2, r2
 80079ac:	6239      	str	r1, [r7, #32]
 80079ae:	415b      	adcs	r3, r3
 80079b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80079b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079b6:	4641      	mov	r1, r8
 80079b8:	1854      	adds	r4, r2, r1
 80079ba:	4649      	mov	r1, r9
 80079bc:	eb43 0501 	adc.w	r5, r3, r1
 80079c0:	f04f 0200 	mov.w	r2, #0
 80079c4:	f04f 0300 	mov.w	r3, #0
 80079c8:	00eb      	lsls	r3, r5, #3
 80079ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079ce:	00e2      	lsls	r2, r4, #3
 80079d0:	4614      	mov	r4, r2
 80079d2:	461d      	mov	r5, r3
 80079d4:	4643      	mov	r3, r8
 80079d6:	18e3      	adds	r3, r4, r3
 80079d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079dc:	464b      	mov	r3, r9
 80079de:	eb45 0303 	adc.w	r3, r5, r3
 80079e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079f6:	f04f 0200 	mov.w	r2, #0
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a02:	4629      	mov	r1, r5
 8007a04:	008b      	lsls	r3, r1, #2
 8007a06:	4621      	mov	r1, r4
 8007a08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	008a      	lsls	r2, r1, #2
 8007a10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a14:	f7f8 fc2c 	bl	8000270 <__aeabi_uldivmod>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4b60      	ldr	r3, [pc, #384]	@ (8007ba0 <UART_SetConfig+0x4e4>)
 8007a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	011c      	lsls	r4, r3, #4
 8007a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a38:	4642      	mov	r2, r8
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	1891      	adds	r1, r2, r2
 8007a3e:	61b9      	str	r1, [r7, #24]
 8007a40:	415b      	adcs	r3, r3
 8007a42:	61fb      	str	r3, [r7, #28]
 8007a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a48:	4641      	mov	r1, r8
 8007a4a:	1851      	adds	r1, r2, r1
 8007a4c:	6139      	str	r1, [r7, #16]
 8007a4e:	4649      	mov	r1, r9
 8007a50:	414b      	adcs	r3, r1
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	f04f 0200 	mov.w	r2, #0
 8007a58:	f04f 0300 	mov.w	r3, #0
 8007a5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a60:	4659      	mov	r1, fp
 8007a62:	00cb      	lsls	r3, r1, #3
 8007a64:	4651      	mov	r1, sl
 8007a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a6a:	4651      	mov	r1, sl
 8007a6c:	00ca      	lsls	r2, r1, #3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	4619      	mov	r1, r3
 8007a72:	4603      	mov	r3, r0
 8007a74:	4642      	mov	r2, r8
 8007a76:	189b      	adds	r3, r3, r2
 8007a78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	460a      	mov	r2, r1
 8007a80:	eb42 0303 	adc.w	r3, r2, r3
 8007a84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	008b      	lsls	r3, r1, #2
 8007aa4:	4641      	mov	r1, r8
 8007aa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aaa:	4641      	mov	r1, r8
 8007aac:	008a      	lsls	r2, r1, #2
 8007aae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ab2:	f7f8 fbdd 	bl	8000270 <__aeabi_uldivmod>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4611      	mov	r1, r2
 8007abc:	4b38      	ldr	r3, [pc, #224]	@ (8007ba0 <UART_SetConfig+0x4e4>)
 8007abe:	fba3 2301 	umull	r2, r3, r3, r1
 8007ac2:	095b      	lsrs	r3, r3, #5
 8007ac4:	2264      	movs	r2, #100	@ 0x64
 8007ac6:	fb02 f303 	mul.w	r3, r2, r3
 8007aca:	1acb      	subs	r3, r1, r3
 8007acc:	011b      	lsls	r3, r3, #4
 8007ace:	3332      	adds	r3, #50	@ 0x32
 8007ad0:	4a33      	ldr	r2, [pc, #204]	@ (8007ba0 <UART_SetConfig+0x4e4>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	095b      	lsrs	r3, r3, #5
 8007ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007adc:	441c      	add	r4, r3
 8007ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ae6:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ae8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007aec:	4642      	mov	r2, r8
 8007aee:	464b      	mov	r3, r9
 8007af0:	1891      	adds	r1, r2, r2
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	415b      	adcs	r3, r3
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007afc:	4641      	mov	r1, r8
 8007afe:	1851      	adds	r1, r2, r1
 8007b00:	6039      	str	r1, [r7, #0]
 8007b02:	4649      	mov	r1, r9
 8007b04:	414b      	adcs	r3, r1
 8007b06:	607b      	str	r3, [r7, #4]
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	f04f 0300 	mov.w	r3, #0
 8007b10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b14:	4659      	mov	r1, fp
 8007b16:	00cb      	lsls	r3, r1, #3
 8007b18:	4651      	mov	r1, sl
 8007b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b1e:	4651      	mov	r1, sl
 8007b20:	00ca      	lsls	r2, r1, #3
 8007b22:	4610      	mov	r0, r2
 8007b24:	4619      	mov	r1, r3
 8007b26:	4603      	mov	r3, r0
 8007b28:	4642      	mov	r2, r8
 8007b2a:	189b      	adds	r3, r3, r2
 8007b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b2e:	464b      	mov	r3, r9
 8007b30:	460a      	mov	r2, r1
 8007b32:	eb42 0303 	adc.w	r3, r2, r3
 8007b36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b42:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b44:	f04f 0200 	mov.w	r2, #0
 8007b48:	f04f 0300 	mov.w	r3, #0
 8007b4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b50:	4649      	mov	r1, r9
 8007b52:	008b      	lsls	r3, r1, #2
 8007b54:	4641      	mov	r1, r8
 8007b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b5a:	4641      	mov	r1, r8
 8007b5c:	008a      	lsls	r2, r1, #2
 8007b5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b62:	f7f8 fb85 	bl	8000270 <__aeabi_uldivmod>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba0 <UART_SetConfig+0x4e4>)
 8007b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b70:	095b      	lsrs	r3, r3, #5
 8007b72:	2164      	movs	r1, #100	@ 0x64
 8007b74:	fb01 f303 	mul.w	r3, r1, r3
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	3332      	adds	r3, #50	@ 0x32
 8007b7e:	4a08      	ldr	r2, [pc, #32]	@ (8007ba0 <UART_SetConfig+0x4e4>)
 8007b80:	fba2 2303 	umull	r2, r3, r2, r3
 8007b84:	095b      	lsrs	r3, r3, #5
 8007b86:	f003 020f 	and.w	r2, r3, #15
 8007b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4422      	add	r2, r4
 8007b92:	609a      	str	r2, [r3, #8]
}
 8007b94:	bf00      	nop
 8007b96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ba0:	51eb851f 	.word	0x51eb851f

08007ba4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	f107 001c 	add.w	r0, r7, #28
 8007bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bb6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d123      	bne.n	8007c06 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007be6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d105      	bne.n	8007bfa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fdbc 	bl	8008778 <USB_CoreReset>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
 8007c04:	e01b      	b.n	8007c3e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fdb0 	bl	8008778 <USB_CoreReset>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c1c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d106      	bne.n	8007c32 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c30:	e005      	b.n	8007c3e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c3e:	7fbb      	ldrb	r3, [r7, #30]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d10b      	bne.n	8007c5c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f043 0206 	orr.w	r2, r3, #6
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f043 0220 	orr.w	r2, r3, #32
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c68:	b004      	add	sp, #16
 8007c6a:	4770      	bx	lr

08007c6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	4613      	mov	r3, r2
 8007c78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d165      	bne.n	8007d4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4a41      	ldr	r2, [pc, #260]	@ (8007d88 <USB_SetTurnaroundTime+0x11c>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d906      	bls.n	8007c96 <USB_SetTurnaroundTime+0x2a>
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4a40      	ldr	r2, [pc, #256]	@ (8007d8c <USB_SetTurnaroundTime+0x120>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d202      	bcs.n	8007c96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c90:	230f      	movs	r3, #15
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	e062      	b.n	8007d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	4a3c      	ldr	r2, [pc, #240]	@ (8007d8c <USB_SetTurnaroundTime+0x120>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d306      	bcc.n	8007cac <USB_SetTurnaroundTime+0x40>
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	4a3b      	ldr	r2, [pc, #236]	@ (8007d90 <USB_SetTurnaroundTime+0x124>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d202      	bcs.n	8007cac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ca6:	230e      	movs	r3, #14
 8007ca8:	617b      	str	r3, [r7, #20]
 8007caa:	e057      	b.n	8007d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4a38      	ldr	r2, [pc, #224]	@ (8007d90 <USB_SetTurnaroundTime+0x124>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d306      	bcc.n	8007cc2 <USB_SetTurnaroundTime+0x56>
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4a37      	ldr	r2, [pc, #220]	@ (8007d94 <USB_SetTurnaroundTime+0x128>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d202      	bcs.n	8007cc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007cbc:	230d      	movs	r3, #13
 8007cbe:	617b      	str	r3, [r7, #20]
 8007cc0:	e04c      	b.n	8007d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	4a33      	ldr	r2, [pc, #204]	@ (8007d94 <USB_SetTurnaroundTime+0x128>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d306      	bcc.n	8007cd8 <USB_SetTurnaroundTime+0x6c>
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	4a32      	ldr	r2, [pc, #200]	@ (8007d98 <USB_SetTurnaroundTime+0x12c>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d802      	bhi.n	8007cd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	e041      	b.n	8007d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	4a2f      	ldr	r2, [pc, #188]	@ (8007d98 <USB_SetTurnaroundTime+0x12c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d906      	bls.n	8007cee <USB_SetTurnaroundTime+0x82>
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8007d9c <USB_SetTurnaroundTime+0x130>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d802      	bhi.n	8007cee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007ce8:	230b      	movs	r3, #11
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	e036      	b.n	8007d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8007d9c <USB_SetTurnaroundTime+0x130>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d906      	bls.n	8007d04 <USB_SetTurnaroundTime+0x98>
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	4a29      	ldr	r2, [pc, #164]	@ (8007da0 <USB_SetTurnaroundTime+0x134>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d802      	bhi.n	8007d04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007cfe:	230a      	movs	r3, #10
 8007d00:	617b      	str	r3, [r7, #20]
 8007d02:	e02b      	b.n	8007d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4a26      	ldr	r2, [pc, #152]	@ (8007da0 <USB_SetTurnaroundTime+0x134>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d906      	bls.n	8007d1a <USB_SetTurnaroundTime+0xae>
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4a25      	ldr	r2, [pc, #148]	@ (8007da4 <USB_SetTurnaroundTime+0x138>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d202      	bcs.n	8007d1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d14:	2309      	movs	r3, #9
 8007d16:	617b      	str	r3, [r7, #20]
 8007d18:	e020      	b.n	8007d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	4a21      	ldr	r2, [pc, #132]	@ (8007da4 <USB_SetTurnaroundTime+0x138>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d306      	bcc.n	8007d30 <USB_SetTurnaroundTime+0xc4>
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	4a20      	ldr	r2, [pc, #128]	@ (8007da8 <USB_SetTurnaroundTime+0x13c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d802      	bhi.n	8007d30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007d2a:	2308      	movs	r3, #8
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	e015      	b.n	8007d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	4a1d      	ldr	r2, [pc, #116]	@ (8007da8 <USB_SetTurnaroundTime+0x13c>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d906      	bls.n	8007d46 <USB_SetTurnaroundTime+0xda>
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8007dac <USB_SetTurnaroundTime+0x140>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d202      	bcs.n	8007d46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007d40:	2307      	movs	r3, #7
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	e00a      	b.n	8007d5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007d46:	2306      	movs	r3, #6
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	e007      	b.n	8007d5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d102      	bne.n	8007d58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d52:	2309      	movs	r3, #9
 8007d54:	617b      	str	r3, [r7, #20]
 8007d56:	e001      	b.n	8007d5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007d58:	2309      	movs	r3, #9
 8007d5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	029b      	lsls	r3, r3, #10
 8007d70:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007d74:	431a      	orrs	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	371c      	adds	r7, #28
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	00d8acbf 	.word	0x00d8acbf
 8007d8c:	00e4e1c0 	.word	0x00e4e1c0
 8007d90:	00f42400 	.word	0x00f42400
 8007d94:	01067380 	.word	0x01067380
 8007d98:	011a499f 	.word	0x011a499f
 8007d9c:	01312cff 	.word	0x01312cff
 8007da0:	014ca43f 	.word	0x014ca43f
 8007da4:	016e3600 	.word	0x016e3600
 8007da8:	01a6ab1f 	.word	0x01a6ab1f
 8007dac:	01e84800 	.word	0x01e84800

08007db0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f023 0201 	bic.w	r2, r3, #1
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007dee:	78fb      	ldrb	r3, [r7, #3]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d115      	bne.n	8007e20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e00:	200a      	movs	r0, #10
 8007e02:	f7f9 ff43 	bl	8001c8c <HAL_Delay>
      ms += 10U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	330a      	adds	r3, #10
 8007e0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fc23 	bl	8008658 <USB_GetMode>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d01e      	beq.n	8007e56 <USB_SetCurrentMode+0x84>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e1c:	d9f0      	bls.n	8007e00 <USB_SetCurrentMode+0x2e>
 8007e1e:	e01a      	b.n	8007e56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d115      	bne.n	8007e52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e32:	200a      	movs	r0, #10
 8007e34:	f7f9 ff2a 	bl	8001c8c <HAL_Delay>
      ms += 10U;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	330a      	adds	r3, #10
 8007e3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fc0a 	bl	8008658 <USB_GetMode>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d005      	beq.n	8007e56 <USB_SetCurrentMode+0x84>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e4e:	d9f0      	bls.n	8007e32 <USB_SetCurrentMode+0x60>
 8007e50:	e001      	b.n	8007e56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e005      	b.n	8007e62 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2bc8      	cmp	r3, #200	@ 0xc8
 8007e5a:	d101      	bne.n	8007e60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e000      	b.n	8007e62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b086      	sub	sp, #24
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e86:	2300      	movs	r3, #0
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	e009      	b.n	8007ea0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	3340      	adds	r3, #64	@ 0x40
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	2200      	movs	r2, #0
 8007e98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	613b      	str	r3, [r7, #16]
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	2b0e      	cmp	r3, #14
 8007ea4:	d9f2      	bls.n	8007e8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ea6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d11c      	bne.n	8007ee8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ebc:	f043 0302 	orr.w	r3, r3, #2
 8007ec0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ede:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	639a      	str	r2, [r3, #56]	@ 0x38
 8007ee6:	e00b      	b.n	8007f00 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f06:	461a      	mov	r2, r3
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d10d      	bne.n	8007f30 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d104      	bne.n	8007f26 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f968 	bl	80081f4 <USB_SetDevSpeed>
 8007f24:	e008      	b.n	8007f38 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f26:	2101      	movs	r1, #1
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f963 	bl	80081f4 <USB_SetDevSpeed>
 8007f2e:	e003      	b.n	8007f38 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f30:	2103      	movs	r1, #3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f95e 	bl	80081f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f38:	2110      	movs	r1, #16
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f8fa 	bl	8008134 <USB_FlushTxFifo>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f924 	bl	8008198 <USB_FlushRxFifo>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f60:	461a      	mov	r2, r3
 8007f62:	2300      	movs	r3, #0
 8007f64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	2300      	movs	r3, #0
 8007f70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f78:	461a      	mov	r2, r3
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f7e:	2300      	movs	r3, #0
 8007f80:	613b      	str	r3, [r7, #16]
 8007f82:	e043      	b.n	800800c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f9a:	d118      	bne.n	8007fce <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10a      	bne.n	8007fb8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	015a      	lsls	r2, r3, #5
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	e013      	b.n	8007fe0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	e008      	b.n	8007fe0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fda:	461a      	mov	r2, r3
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fec:	461a      	mov	r2, r3
 8007fee:	2300      	movs	r3, #0
 8007ff0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ffe:	461a      	mov	r2, r3
 8008000:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008004:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	3301      	adds	r3, #1
 800800a:	613b      	str	r3, [r7, #16]
 800800c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008010:	461a      	mov	r2, r3
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	4293      	cmp	r3, r2
 8008016:	d3b5      	bcc.n	8007f84 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008018:	2300      	movs	r3, #0
 800801a:	613b      	str	r3, [r7, #16]
 800801c:	e043      	b.n	80080a6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008034:	d118      	bne.n	8008068 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008048:	461a      	mov	r2, r3
 800804a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	e013      	b.n	800807a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800805e:	461a      	mov	r2, r3
 8008060:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	e008      	b.n	800807a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4413      	add	r3, r2
 8008070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008074:	461a      	mov	r2, r3
 8008076:	2300      	movs	r3, #0
 8008078:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008086:	461a      	mov	r2, r3
 8008088:	2300      	movs	r3, #0
 800808a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008098:	461a      	mov	r2, r3
 800809a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800809e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	3301      	adds	r3, #1
 80080a4:	613b      	str	r3, [r7, #16]
 80080a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80080aa:	461a      	mov	r2, r3
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d3b5      	bcc.n	800801e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80080d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d105      	bne.n	80080e8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f043 0210 	orr.w	r2, r3, #16
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699a      	ldr	r2, [r3, #24]
 80080ec:	4b10      	ldr	r3, [pc, #64]	@ (8008130 <USB_DevInit+0x2c4>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d005      	beq.n	8008108 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f043 0208 	orr.w	r2, r3, #8
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008108:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800810c:	2b01      	cmp	r3, #1
 800810e:	d107      	bne.n	8008120 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008118:	f043 0304 	orr.w	r3, r3, #4
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008120:	7dfb      	ldrb	r3, [r7, #23]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800812c:	b004      	add	sp, #16
 800812e:	4770      	bx	lr
 8008130:	803c3800 	.word	0x803c3800

08008134 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3301      	adds	r3, #1
 8008146:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800814e:	d901      	bls.n	8008154 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e01b      	b.n	800818c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	daf2      	bge.n	8008142 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	019b      	lsls	r3, r3, #6
 8008164:	f043 0220 	orr.w	r2, r3, #32
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3301      	adds	r3, #1
 8008170:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008178:	d901      	bls.n	800817e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e006      	b.n	800818c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b20      	cmp	r3, #32
 8008188:	d0f0      	beq.n	800816c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081b0:	d901      	bls.n	80081b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e018      	b.n	80081e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	daf2      	bge.n	80081a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2210      	movs	r2, #16
 80081c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081d4:	d901      	bls.n	80081da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e006      	b.n	80081e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0310 	and.w	r3, r3, #16
 80081e2:	2b10      	cmp	r3, #16
 80081e4:	d0f0      	beq.n	80081c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008214:	4313      	orrs	r3, r2
 8008216:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008226:	b480      	push	{r7}
 8008228:	b087      	sub	sp, #28
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f003 0306 	and.w	r3, r3, #6
 800823e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d102      	bne.n	800824c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008246:	2300      	movs	r3, #0
 8008248:	75fb      	strb	r3, [r7, #23]
 800824a:	e00a      	b.n	8008262 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d002      	beq.n	8008258 <USB_GetDevSpeed+0x32>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2b06      	cmp	r3, #6
 8008256:	d102      	bne.n	800825e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008258:	2302      	movs	r3, #2
 800825a:	75fb      	strb	r3, [r7, #23]
 800825c:	e001      	b.n	8008262 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800825e:	230f      	movs	r3, #15
 8008260:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008262:	7dfb      	ldrb	r3, [r7, #23]
}
 8008264:	4618      	mov	r0, r3
 8008266:	371c      	adds	r7, #28
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	785b      	ldrb	r3, [r3, #1]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d14a      	bne.n	8008324 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082a6:	f040 8086 	bne.w	80083b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	7812      	ldrb	r2, [r2, #0]
 80082be:	0151      	lsls	r1, r2, #5
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	440a      	add	r2, r1
 80082c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80082cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	7812      	ldrb	r2, [r2, #0]
 80082e2:	0151      	lsls	r1, r2, #5
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	440a      	add	r2, r1
 80082e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3301      	adds	r3, #1
 80082f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80082fe:	4293      	cmp	r3, r2
 8008300:	d902      	bls.n	8008308 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	75fb      	strb	r3, [r7, #23]
          break;
 8008306:	e056      	b.n	80083b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800831c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008320:	d0e7      	beq.n	80082f2 <USB_EPStopXfer+0x82>
 8008322:	e048      	b.n	80083b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008338:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800833c:	d13b      	bne.n	80083b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	7812      	ldrb	r2, [r2, #0]
 8008352:	0151      	lsls	r1, r2, #5
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	440a      	add	r2, r1
 8008358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800835c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008360:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	7812      	ldrb	r2, [r2, #0]
 8008376:	0151      	lsls	r1, r2, #5
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	440a      	add	r2, r1
 800837c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008380:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008384:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3301      	adds	r3, #1
 800838a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008392:	4293      	cmp	r3, r2
 8008394:	d902      	bls.n	800839c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	75fb      	strb	r3, [r7, #23]
          break;
 800839a:	e00c      	b.n	80083b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083b4:	d0e7      	beq.n	8008386 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	371c      	adds	r7, #28
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b089      	sub	sp, #36	@ 0x24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4611      	mov	r1, r2
 80083d0:	461a      	mov	r2, r3
 80083d2:	460b      	mov	r3, r1
 80083d4:	71fb      	strb	r3, [r7, #7]
 80083d6:	4613      	mov	r3, r2
 80083d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80083e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d123      	bne.n	8008432 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80083ea:	88bb      	ldrh	r3, [r7, #4]
 80083ec:	3303      	adds	r3, #3
 80083ee:	089b      	lsrs	r3, r3, #2
 80083f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80083f2:	2300      	movs	r3, #0
 80083f4:	61bb      	str	r3, [r7, #24]
 80083f6:	e018      	b.n	800842a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80083f8:	79fb      	ldrb	r3, [r7, #7]
 80083fa:	031a      	lsls	r2, r3, #12
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008404:	461a      	mov	r2, r3
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	3301      	adds	r3, #1
 8008410:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	3301      	adds	r3, #1
 8008416:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	3301      	adds	r3, #1
 800841c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	3301      	adds	r3, #1
 8008422:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	3301      	adds	r3, #1
 8008428:	61bb      	str	r3, [r7, #24]
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	429a      	cmp	r2, r3
 8008430:	d3e2      	bcc.n	80083f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3724      	adds	r7, #36	@ 0x24
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008440:	b480      	push	{r7}
 8008442:	b08b      	sub	sp, #44	@ 0x2c
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	4613      	mov	r3, r2
 800844c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008456:	88fb      	ldrh	r3, [r7, #6]
 8008458:	089b      	lsrs	r3, r3, #2
 800845a:	b29b      	uxth	r3, r3
 800845c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008466:	2300      	movs	r3, #0
 8008468:	623b      	str	r3, [r7, #32]
 800846a:	e014      	b.n	8008496 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	601a      	str	r2, [r3, #0]
    pDest++;
 8008478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847a:	3301      	adds	r3, #1
 800847c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	3301      	adds	r3, #1
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008486:	3301      	adds	r3, #1
 8008488:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	3301      	adds	r3, #1
 800848e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	3301      	adds	r3, #1
 8008494:	623b      	str	r3, [r7, #32]
 8008496:	6a3a      	ldr	r2, [r7, #32]
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	429a      	cmp	r2, r3
 800849c:	d3e6      	bcc.n	800846c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800849e:	8bfb      	ldrh	r3, [r7, #30]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d01e      	beq.n	80084e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084ae:	461a      	mov	r2, r3
 80084b0:	f107 0310 	add.w	r3, r7, #16
 80084b4:	6812      	ldr	r2, [r2, #0]
 80084b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	fa22 f303 	lsr.w	r3, r2, r3
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	701a      	strb	r2, [r3, #0]
      i++;
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	3301      	adds	r3, #1
 80084ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d2:	3301      	adds	r3, #1
 80084d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80084d6:	8bfb      	ldrh	r3, [r7, #30]
 80084d8:	3b01      	subs	r3, #1
 80084da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80084dc:	8bfb      	ldrh	r3, [r7, #30]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1ea      	bne.n	80084b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	372c      	adds	r7, #44	@ 0x2c
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800850a:	f023 0303 	bic.w	r3, r3, #3
 800850e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800851e:	f043 0302 	orr.w	r3, r3, #2
 8008522:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008532:	b480      	push	{r7}
 8008534:	b085      	sub	sp, #20
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	4013      	ands	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800854a:	68fb      	ldr	r3, [r7, #12]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	4013      	ands	r3, r2
 800857a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	0c1b      	lsrs	r3, r3, #16
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	4013      	ands	r3, r2
 80085ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	b29b      	uxth	r3, r3
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	4013      	ands	r3, r2
 80085ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085ee:	68bb      	ldr	r3, [r7, #8]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800861c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800861e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	f003 030f 	and.w	r3, r3, #15
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
 800862c:	01db      	lsls	r3, r3, #7
 800862e:	b2db      	uxtb	r3, r3
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4313      	orrs	r3, r2
 8008634:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	4013      	ands	r3, r2
 8008648:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800864a:	68bb      	ldr	r3, [r7, #8]
}
 800864c:	4618      	mov	r0, r3
 800864e:	371c      	adds	r7, #28
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	f003 0301 	and.w	r3, r3, #1
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800868e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008692:	f023 0307 	bic.w	r3, r3, #7
 8008696:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
	...

080086bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	460b      	mov	r3, r1
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	333c      	adds	r3, #60	@ 0x3c
 80086d2:	3304      	adds	r3, #4
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	4a26      	ldr	r2, [pc, #152]	@ (8008774 <USB_EP0_OutStart+0xb8>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d90a      	bls.n	80086f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086f0:	d101      	bne.n	80086f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	e037      	b.n	8008766 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086fc:	461a      	mov	r2, r3
 80086fe:	2300      	movs	r3, #0
 8008700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008710:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008724:	f043 0318 	orr.w	r3, r3, #24
 8008728:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008738:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800873c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800873e:	7afb      	ldrb	r3, [r7, #11]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d10f      	bne.n	8008764 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800874a:	461a      	mov	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800875e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008762:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	4f54300a 	.word	0x4f54300a

08008778 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3301      	adds	r3, #1
 8008788:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008790:	d901      	bls.n	8008796 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e01b      	b.n	80087ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	daf2      	bge.n	8008784 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	f043 0201 	orr.w	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3301      	adds	r3, #1
 80087b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087ba:	d901      	bls.n	80087c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e006      	b.n	80087ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d0f0      	beq.n	80087ae <USB_CoreReset+0x36>

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <std>:
 80087dc:	2300      	movs	r3, #0
 80087de:	b510      	push	{r4, lr}
 80087e0:	4604      	mov	r4, r0
 80087e2:	e9c0 3300 	strd	r3, r3, [r0]
 80087e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087ea:	6083      	str	r3, [r0, #8]
 80087ec:	8181      	strh	r1, [r0, #12]
 80087ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80087f0:	81c2      	strh	r2, [r0, #14]
 80087f2:	6183      	str	r3, [r0, #24]
 80087f4:	4619      	mov	r1, r3
 80087f6:	2208      	movs	r2, #8
 80087f8:	305c      	adds	r0, #92	@ 0x5c
 80087fa:	f000 f8c3 	bl	8008984 <memset>
 80087fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008834 <std+0x58>)
 8008800:	6263      	str	r3, [r4, #36]	@ 0x24
 8008802:	4b0d      	ldr	r3, [pc, #52]	@ (8008838 <std+0x5c>)
 8008804:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008806:	4b0d      	ldr	r3, [pc, #52]	@ (800883c <std+0x60>)
 8008808:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800880a:	4b0d      	ldr	r3, [pc, #52]	@ (8008840 <std+0x64>)
 800880c:	6323      	str	r3, [r4, #48]	@ 0x30
 800880e:	4b0d      	ldr	r3, [pc, #52]	@ (8008844 <std+0x68>)
 8008810:	6224      	str	r4, [r4, #32]
 8008812:	429c      	cmp	r4, r3
 8008814:	d006      	beq.n	8008824 <std+0x48>
 8008816:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800881a:	4294      	cmp	r4, r2
 800881c:	d002      	beq.n	8008824 <std+0x48>
 800881e:	33d0      	adds	r3, #208	@ 0xd0
 8008820:	429c      	cmp	r4, r3
 8008822:	d105      	bne.n	8008830 <std+0x54>
 8008824:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800882c:	f000 b8dc 	b.w	80089e8 <__retarget_lock_init_recursive>
 8008830:	bd10      	pop	{r4, pc}
 8008832:	bf00      	nop
 8008834:	0800923d 	.word	0x0800923d
 8008838:	0800925f 	.word	0x0800925f
 800883c:	08009297 	.word	0x08009297
 8008840:	080092bb 	.word	0x080092bb
 8008844:	20000c7c 	.word	0x20000c7c

08008848 <stdio_exit_handler>:
 8008848:	4a02      	ldr	r2, [pc, #8]	@ (8008854 <stdio_exit_handler+0xc>)
 800884a:	4903      	ldr	r1, [pc, #12]	@ (8008858 <stdio_exit_handler+0x10>)
 800884c:	4803      	ldr	r0, [pc, #12]	@ (800885c <stdio_exit_handler+0x14>)
 800884e:	f000 b869 	b.w	8008924 <_fwalk_sglue>
 8008852:	bf00      	nop
 8008854:	20000014 	.word	0x20000014
 8008858:	080091d5 	.word	0x080091d5
 800885c:	20000024 	.word	0x20000024

08008860 <cleanup_stdio>:
 8008860:	6841      	ldr	r1, [r0, #4]
 8008862:	4b0c      	ldr	r3, [pc, #48]	@ (8008894 <cleanup_stdio+0x34>)
 8008864:	4299      	cmp	r1, r3
 8008866:	b510      	push	{r4, lr}
 8008868:	4604      	mov	r4, r0
 800886a:	d001      	beq.n	8008870 <cleanup_stdio+0x10>
 800886c:	f000 fcb2 	bl	80091d4 <_fflush_r>
 8008870:	68a1      	ldr	r1, [r4, #8]
 8008872:	4b09      	ldr	r3, [pc, #36]	@ (8008898 <cleanup_stdio+0x38>)
 8008874:	4299      	cmp	r1, r3
 8008876:	d002      	beq.n	800887e <cleanup_stdio+0x1e>
 8008878:	4620      	mov	r0, r4
 800887a:	f000 fcab 	bl	80091d4 <_fflush_r>
 800887e:	68e1      	ldr	r1, [r4, #12]
 8008880:	4b06      	ldr	r3, [pc, #24]	@ (800889c <cleanup_stdio+0x3c>)
 8008882:	4299      	cmp	r1, r3
 8008884:	d004      	beq.n	8008890 <cleanup_stdio+0x30>
 8008886:	4620      	mov	r0, r4
 8008888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800888c:	f000 bca2 	b.w	80091d4 <_fflush_r>
 8008890:	bd10      	pop	{r4, pc}
 8008892:	bf00      	nop
 8008894:	20000c7c 	.word	0x20000c7c
 8008898:	20000ce4 	.word	0x20000ce4
 800889c:	20000d4c 	.word	0x20000d4c

080088a0 <global_stdio_init.part.0>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	4b0b      	ldr	r3, [pc, #44]	@ (80088d0 <global_stdio_init.part.0+0x30>)
 80088a4:	4c0b      	ldr	r4, [pc, #44]	@ (80088d4 <global_stdio_init.part.0+0x34>)
 80088a6:	4a0c      	ldr	r2, [pc, #48]	@ (80088d8 <global_stdio_init.part.0+0x38>)
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	4620      	mov	r0, r4
 80088ac:	2200      	movs	r2, #0
 80088ae:	2104      	movs	r1, #4
 80088b0:	f7ff ff94 	bl	80087dc <std>
 80088b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80088b8:	2201      	movs	r2, #1
 80088ba:	2109      	movs	r1, #9
 80088bc:	f7ff ff8e 	bl	80087dc <std>
 80088c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80088c4:	2202      	movs	r2, #2
 80088c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ca:	2112      	movs	r1, #18
 80088cc:	f7ff bf86 	b.w	80087dc <std>
 80088d0:	20000db4 	.word	0x20000db4
 80088d4:	20000c7c 	.word	0x20000c7c
 80088d8:	08008849 	.word	0x08008849

080088dc <__sfp_lock_acquire>:
 80088dc:	4801      	ldr	r0, [pc, #4]	@ (80088e4 <__sfp_lock_acquire+0x8>)
 80088de:	f000 b884 	b.w	80089ea <__retarget_lock_acquire_recursive>
 80088e2:	bf00      	nop
 80088e4:	20000db9 	.word	0x20000db9

080088e8 <__sfp_lock_release>:
 80088e8:	4801      	ldr	r0, [pc, #4]	@ (80088f0 <__sfp_lock_release+0x8>)
 80088ea:	f000 b87f 	b.w	80089ec <__retarget_lock_release_recursive>
 80088ee:	bf00      	nop
 80088f0:	20000db9 	.word	0x20000db9

080088f4 <__sinit>:
 80088f4:	b510      	push	{r4, lr}
 80088f6:	4604      	mov	r4, r0
 80088f8:	f7ff fff0 	bl	80088dc <__sfp_lock_acquire>
 80088fc:	6a23      	ldr	r3, [r4, #32]
 80088fe:	b11b      	cbz	r3, 8008908 <__sinit+0x14>
 8008900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008904:	f7ff bff0 	b.w	80088e8 <__sfp_lock_release>
 8008908:	4b04      	ldr	r3, [pc, #16]	@ (800891c <__sinit+0x28>)
 800890a:	6223      	str	r3, [r4, #32]
 800890c:	4b04      	ldr	r3, [pc, #16]	@ (8008920 <__sinit+0x2c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1f5      	bne.n	8008900 <__sinit+0xc>
 8008914:	f7ff ffc4 	bl	80088a0 <global_stdio_init.part.0>
 8008918:	e7f2      	b.n	8008900 <__sinit+0xc>
 800891a:	bf00      	nop
 800891c:	08008861 	.word	0x08008861
 8008920:	20000db4 	.word	0x20000db4

08008924 <_fwalk_sglue>:
 8008924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008928:	4607      	mov	r7, r0
 800892a:	4688      	mov	r8, r1
 800892c:	4614      	mov	r4, r2
 800892e:	2600      	movs	r6, #0
 8008930:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008934:	f1b9 0901 	subs.w	r9, r9, #1
 8008938:	d505      	bpl.n	8008946 <_fwalk_sglue+0x22>
 800893a:	6824      	ldr	r4, [r4, #0]
 800893c:	2c00      	cmp	r4, #0
 800893e:	d1f7      	bne.n	8008930 <_fwalk_sglue+0xc>
 8008940:	4630      	mov	r0, r6
 8008942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008946:	89ab      	ldrh	r3, [r5, #12]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d907      	bls.n	800895c <_fwalk_sglue+0x38>
 800894c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008950:	3301      	adds	r3, #1
 8008952:	d003      	beq.n	800895c <_fwalk_sglue+0x38>
 8008954:	4629      	mov	r1, r5
 8008956:	4638      	mov	r0, r7
 8008958:	47c0      	blx	r8
 800895a:	4306      	orrs	r6, r0
 800895c:	3568      	adds	r5, #104	@ 0x68
 800895e:	e7e9      	b.n	8008934 <_fwalk_sglue+0x10>

08008960 <iprintf>:
 8008960:	b40f      	push	{r0, r1, r2, r3}
 8008962:	b507      	push	{r0, r1, r2, lr}
 8008964:	4906      	ldr	r1, [pc, #24]	@ (8008980 <iprintf+0x20>)
 8008966:	ab04      	add	r3, sp, #16
 8008968:	6808      	ldr	r0, [r1, #0]
 800896a:	f853 2b04 	ldr.w	r2, [r3], #4
 800896e:	6881      	ldr	r1, [r0, #8]
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	f000 f865 	bl	8008a40 <_vfiprintf_r>
 8008976:	b003      	add	sp, #12
 8008978:	f85d eb04 	ldr.w	lr, [sp], #4
 800897c:	b004      	add	sp, #16
 800897e:	4770      	bx	lr
 8008980:	20000020 	.word	0x20000020

08008984 <memset>:
 8008984:	4402      	add	r2, r0
 8008986:	4603      	mov	r3, r0
 8008988:	4293      	cmp	r3, r2
 800898a:	d100      	bne.n	800898e <memset+0xa>
 800898c:	4770      	bx	lr
 800898e:	f803 1b01 	strb.w	r1, [r3], #1
 8008992:	e7f9      	b.n	8008988 <memset+0x4>

08008994 <__errno>:
 8008994:	4b01      	ldr	r3, [pc, #4]	@ (800899c <__errno+0x8>)
 8008996:	6818      	ldr	r0, [r3, #0]
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	20000020 	.word	0x20000020

080089a0 <__libc_init_array>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	4d0d      	ldr	r5, [pc, #52]	@ (80089d8 <__libc_init_array+0x38>)
 80089a4:	4c0d      	ldr	r4, [pc, #52]	@ (80089dc <__libc_init_array+0x3c>)
 80089a6:	1b64      	subs	r4, r4, r5
 80089a8:	10a4      	asrs	r4, r4, #2
 80089aa:	2600      	movs	r6, #0
 80089ac:	42a6      	cmp	r6, r4
 80089ae:	d109      	bne.n	80089c4 <__libc_init_array+0x24>
 80089b0:	4d0b      	ldr	r5, [pc, #44]	@ (80089e0 <__libc_init_array+0x40>)
 80089b2:	4c0c      	ldr	r4, [pc, #48]	@ (80089e4 <__libc_init_array+0x44>)
 80089b4:	f000 fe3e 	bl	8009634 <_init>
 80089b8:	1b64      	subs	r4, r4, r5
 80089ba:	10a4      	asrs	r4, r4, #2
 80089bc:	2600      	movs	r6, #0
 80089be:	42a6      	cmp	r6, r4
 80089c0:	d105      	bne.n	80089ce <__libc_init_array+0x2e>
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089c8:	4798      	blx	r3
 80089ca:	3601      	adds	r6, #1
 80089cc:	e7ee      	b.n	80089ac <__libc_init_array+0xc>
 80089ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d2:	4798      	blx	r3
 80089d4:	3601      	adds	r6, #1
 80089d6:	e7f2      	b.n	80089be <__libc_init_array+0x1e>
 80089d8:	080096d0 	.word	0x080096d0
 80089dc:	080096d0 	.word	0x080096d0
 80089e0:	080096d0 	.word	0x080096d0
 80089e4:	080096d4 	.word	0x080096d4

080089e8 <__retarget_lock_init_recursive>:
 80089e8:	4770      	bx	lr

080089ea <__retarget_lock_acquire_recursive>:
 80089ea:	4770      	bx	lr

080089ec <__retarget_lock_release_recursive>:
 80089ec:	4770      	bx	lr

080089ee <__sfputc_r>:
 80089ee:	6893      	ldr	r3, [r2, #8]
 80089f0:	3b01      	subs	r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	b410      	push	{r4}
 80089f6:	6093      	str	r3, [r2, #8]
 80089f8:	da08      	bge.n	8008a0c <__sfputc_r+0x1e>
 80089fa:	6994      	ldr	r4, [r2, #24]
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	db01      	blt.n	8008a04 <__sfputc_r+0x16>
 8008a00:	290a      	cmp	r1, #10
 8008a02:	d103      	bne.n	8008a0c <__sfputc_r+0x1e>
 8008a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a08:	f000 bc5b 	b.w	80092c2 <__swbuf_r>
 8008a0c:	6813      	ldr	r3, [r2, #0]
 8008a0e:	1c58      	adds	r0, r3, #1
 8008a10:	6010      	str	r0, [r2, #0]
 8008a12:	7019      	strb	r1, [r3, #0]
 8008a14:	4608      	mov	r0, r1
 8008a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <__sfputs_r>:
 8008a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1e:	4606      	mov	r6, r0
 8008a20:	460f      	mov	r7, r1
 8008a22:	4614      	mov	r4, r2
 8008a24:	18d5      	adds	r5, r2, r3
 8008a26:	42ac      	cmp	r4, r5
 8008a28:	d101      	bne.n	8008a2e <__sfputs_r+0x12>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e007      	b.n	8008a3e <__sfputs_r+0x22>
 8008a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a32:	463a      	mov	r2, r7
 8008a34:	4630      	mov	r0, r6
 8008a36:	f7ff ffda 	bl	80089ee <__sfputc_r>
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	d1f3      	bne.n	8008a26 <__sfputs_r+0xa>
 8008a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a40 <_vfiprintf_r>:
 8008a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	460d      	mov	r5, r1
 8008a46:	b09d      	sub	sp, #116	@ 0x74
 8008a48:	4614      	mov	r4, r2
 8008a4a:	4698      	mov	r8, r3
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	b118      	cbz	r0, 8008a58 <_vfiprintf_r+0x18>
 8008a50:	6a03      	ldr	r3, [r0, #32]
 8008a52:	b90b      	cbnz	r3, 8008a58 <_vfiprintf_r+0x18>
 8008a54:	f7ff ff4e 	bl	80088f4 <__sinit>
 8008a58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a5a:	07d9      	lsls	r1, r3, #31
 8008a5c:	d405      	bmi.n	8008a6a <_vfiprintf_r+0x2a>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	059a      	lsls	r2, r3, #22
 8008a62:	d402      	bmi.n	8008a6a <_vfiprintf_r+0x2a>
 8008a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a66:	f7ff ffc0 	bl	80089ea <__retarget_lock_acquire_recursive>
 8008a6a:	89ab      	ldrh	r3, [r5, #12]
 8008a6c:	071b      	lsls	r3, r3, #28
 8008a6e:	d501      	bpl.n	8008a74 <_vfiprintf_r+0x34>
 8008a70:	692b      	ldr	r3, [r5, #16]
 8008a72:	b99b      	cbnz	r3, 8008a9c <_vfiprintf_r+0x5c>
 8008a74:	4629      	mov	r1, r5
 8008a76:	4630      	mov	r0, r6
 8008a78:	f000 fc62 	bl	8009340 <__swsetup_r>
 8008a7c:	b170      	cbz	r0, 8008a9c <_vfiprintf_r+0x5c>
 8008a7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a80:	07dc      	lsls	r4, r3, #31
 8008a82:	d504      	bpl.n	8008a8e <_vfiprintf_r+0x4e>
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a88:	b01d      	add	sp, #116	@ 0x74
 8008a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8e:	89ab      	ldrh	r3, [r5, #12]
 8008a90:	0598      	lsls	r0, r3, #22
 8008a92:	d4f7      	bmi.n	8008a84 <_vfiprintf_r+0x44>
 8008a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a96:	f7ff ffa9 	bl	80089ec <__retarget_lock_release_recursive>
 8008a9a:	e7f3      	b.n	8008a84 <_vfiprintf_r+0x44>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aa0:	2320      	movs	r3, #32
 8008aa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aaa:	2330      	movs	r3, #48	@ 0x30
 8008aac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c5c <_vfiprintf_r+0x21c>
 8008ab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ab4:	f04f 0901 	mov.w	r9, #1
 8008ab8:	4623      	mov	r3, r4
 8008aba:	469a      	mov	sl, r3
 8008abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ac0:	b10a      	cbz	r2, 8008ac6 <_vfiprintf_r+0x86>
 8008ac2:	2a25      	cmp	r2, #37	@ 0x25
 8008ac4:	d1f9      	bne.n	8008aba <_vfiprintf_r+0x7a>
 8008ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8008aca:	d00b      	beq.n	8008ae4 <_vfiprintf_r+0xa4>
 8008acc:	465b      	mov	r3, fp
 8008ace:	4622      	mov	r2, r4
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f7ff ffa2 	bl	8008a1c <__sfputs_r>
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f000 80a7 	beq.w	8008c2c <_vfiprintf_r+0x1ec>
 8008ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae0:	445a      	add	r2, fp
 8008ae2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 809f 	beq.w	8008c2c <_vfiprintf_r+0x1ec>
 8008aee:	2300      	movs	r3, #0
 8008af0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008af8:	f10a 0a01 	add.w	sl, sl, #1
 8008afc:	9304      	str	r3, [sp, #16]
 8008afe:	9307      	str	r3, [sp, #28]
 8008b00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b04:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b06:	4654      	mov	r4, sl
 8008b08:	2205      	movs	r2, #5
 8008b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0e:	4853      	ldr	r0, [pc, #332]	@ (8008c5c <_vfiprintf_r+0x21c>)
 8008b10:	f7f7 fb5e 	bl	80001d0 <memchr>
 8008b14:	9a04      	ldr	r2, [sp, #16]
 8008b16:	b9d8      	cbnz	r0, 8008b50 <_vfiprintf_r+0x110>
 8008b18:	06d1      	lsls	r1, r2, #27
 8008b1a:	bf44      	itt	mi
 8008b1c:	2320      	movmi	r3, #32
 8008b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b22:	0713      	lsls	r3, r2, #28
 8008b24:	bf44      	itt	mi
 8008b26:	232b      	movmi	r3, #43	@ 0x2b
 8008b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b32:	d015      	beq.n	8008b60 <_vfiprintf_r+0x120>
 8008b34:	9a07      	ldr	r2, [sp, #28]
 8008b36:	4654      	mov	r4, sl
 8008b38:	2000      	movs	r0, #0
 8008b3a:	f04f 0c0a 	mov.w	ip, #10
 8008b3e:	4621      	mov	r1, r4
 8008b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b44:	3b30      	subs	r3, #48	@ 0x30
 8008b46:	2b09      	cmp	r3, #9
 8008b48:	d94b      	bls.n	8008be2 <_vfiprintf_r+0x1a2>
 8008b4a:	b1b0      	cbz	r0, 8008b7a <_vfiprintf_r+0x13a>
 8008b4c:	9207      	str	r2, [sp, #28]
 8008b4e:	e014      	b.n	8008b7a <_vfiprintf_r+0x13a>
 8008b50:	eba0 0308 	sub.w	r3, r0, r8
 8008b54:	fa09 f303 	lsl.w	r3, r9, r3
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	9304      	str	r3, [sp, #16]
 8008b5c:	46a2      	mov	sl, r4
 8008b5e:	e7d2      	b.n	8008b06 <_vfiprintf_r+0xc6>
 8008b60:	9b03      	ldr	r3, [sp, #12]
 8008b62:	1d19      	adds	r1, r3, #4
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	9103      	str	r1, [sp, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	bfbb      	ittet	lt
 8008b6c:	425b      	neglt	r3, r3
 8008b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8008b72:	9307      	strge	r3, [sp, #28]
 8008b74:	9307      	strlt	r3, [sp, #28]
 8008b76:	bfb8      	it	lt
 8008b78:	9204      	strlt	r2, [sp, #16]
 8008b7a:	7823      	ldrb	r3, [r4, #0]
 8008b7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b7e:	d10a      	bne.n	8008b96 <_vfiprintf_r+0x156>
 8008b80:	7863      	ldrb	r3, [r4, #1]
 8008b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b84:	d132      	bne.n	8008bec <_vfiprintf_r+0x1ac>
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	1d1a      	adds	r2, r3, #4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	9203      	str	r2, [sp, #12]
 8008b8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b92:	3402      	adds	r4, #2
 8008b94:	9305      	str	r3, [sp, #20]
 8008b96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c6c <_vfiprintf_r+0x22c>
 8008b9a:	7821      	ldrb	r1, [r4, #0]
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	f7f7 fb16 	bl	80001d0 <memchr>
 8008ba4:	b138      	cbz	r0, 8008bb6 <_vfiprintf_r+0x176>
 8008ba6:	9b04      	ldr	r3, [sp, #16]
 8008ba8:	eba0 000a 	sub.w	r0, r0, sl
 8008bac:	2240      	movs	r2, #64	@ 0x40
 8008bae:	4082      	lsls	r2, r0
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	3401      	adds	r4, #1
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bba:	4829      	ldr	r0, [pc, #164]	@ (8008c60 <_vfiprintf_r+0x220>)
 8008bbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bc0:	2206      	movs	r2, #6
 8008bc2:	f7f7 fb05 	bl	80001d0 <memchr>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d03f      	beq.n	8008c4a <_vfiprintf_r+0x20a>
 8008bca:	4b26      	ldr	r3, [pc, #152]	@ (8008c64 <_vfiprintf_r+0x224>)
 8008bcc:	bb1b      	cbnz	r3, 8008c16 <_vfiprintf_r+0x1d6>
 8008bce:	9b03      	ldr	r3, [sp, #12]
 8008bd0:	3307      	adds	r3, #7
 8008bd2:	f023 0307 	bic.w	r3, r3, #7
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	9303      	str	r3, [sp, #12]
 8008bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bdc:	443b      	add	r3, r7
 8008bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8008be0:	e76a      	b.n	8008ab8 <_vfiprintf_r+0x78>
 8008be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008be6:	460c      	mov	r4, r1
 8008be8:	2001      	movs	r0, #1
 8008bea:	e7a8      	b.n	8008b3e <_vfiprintf_r+0xfe>
 8008bec:	2300      	movs	r3, #0
 8008bee:	3401      	adds	r4, #1
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	f04f 0c0a 	mov.w	ip, #10
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bfe:	3a30      	subs	r2, #48	@ 0x30
 8008c00:	2a09      	cmp	r2, #9
 8008c02:	d903      	bls.n	8008c0c <_vfiprintf_r+0x1cc>
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0c6      	beq.n	8008b96 <_vfiprintf_r+0x156>
 8008c08:	9105      	str	r1, [sp, #20]
 8008c0a:	e7c4      	b.n	8008b96 <_vfiprintf_r+0x156>
 8008c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c10:	4604      	mov	r4, r0
 8008c12:	2301      	movs	r3, #1
 8008c14:	e7f0      	b.n	8008bf8 <_vfiprintf_r+0x1b8>
 8008c16:	ab03      	add	r3, sp, #12
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	462a      	mov	r2, r5
 8008c1c:	4b12      	ldr	r3, [pc, #72]	@ (8008c68 <_vfiprintf_r+0x228>)
 8008c1e:	a904      	add	r1, sp, #16
 8008c20:	4630      	mov	r0, r6
 8008c22:	f3af 8000 	nop.w
 8008c26:	4607      	mov	r7, r0
 8008c28:	1c78      	adds	r0, r7, #1
 8008c2a:	d1d6      	bne.n	8008bda <_vfiprintf_r+0x19a>
 8008c2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c2e:	07d9      	lsls	r1, r3, #31
 8008c30:	d405      	bmi.n	8008c3e <_vfiprintf_r+0x1fe>
 8008c32:	89ab      	ldrh	r3, [r5, #12]
 8008c34:	059a      	lsls	r2, r3, #22
 8008c36:	d402      	bmi.n	8008c3e <_vfiprintf_r+0x1fe>
 8008c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c3a:	f7ff fed7 	bl	80089ec <__retarget_lock_release_recursive>
 8008c3e:	89ab      	ldrh	r3, [r5, #12]
 8008c40:	065b      	lsls	r3, r3, #25
 8008c42:	f53f af1f 	bmi.w	8008a84 <_vfiprintf_r+0x44>
 8008c46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c48:	e71e      	b.n	8008a88 <_vfiprintf_r+0x48>
 8008c4a:	ab03      	add	r3, sp, #12
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	462a      	mov	r2, r5
 8008c50:	4b05      	ldr	r3, [pc, #20]	@ (8008c68 <_vfiprintf_r+0x228>)
 8008c52:	a904      	add	r1, sp, #16
 8008c54:	4630      	mov	r0, r6
 8008c56:	f000 f91b 	bl	8008e90 <_printf_i>
 8008c5a:	e7e4      	b.n	8008c26 <_vfiprintf_r+0x1e6>
 8008c5c:	08009694 	.word	0x08009694
 8008c60:	0800969e 	.word	0x0800969e
 8008c64:	00000000 	.word	0x00000000
 8008c68:	08008a1d 	.word	0x08008a1d
 8008c6c:	0800969a 	.word	0x0800969a

08008c70 <sbrk_aligned>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	4e0f      	ldr	r6, [pc, #60]	@ (8008cb0 <sbrk_aligned+0x40>)
 8008c74:	460c      	mov	r4, r1
 8008c76:	6831      	ldr	r1, [r6, #0]
 8008c78:	4605      	mov	r5, r0
 8008c7a:	b911      	cbnz	r1, 8008c82 <sbrk_aligned+0x12>
 8008c7c:	f000 fc4c 	bl	8009518 <_sbrk_r>
 8008c80:	6030      	str	r0, [r6, #0]
 8008c82:	4621      	mov	r1, r4
 8008c84:	4628      	mov	r0, r5
 8008c86:	f000 fc47 	bl	8009518 <_sbrk_r>
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	d103      	bne.n	8008c96 <sbrk_aligned+0x26>
 8008c8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008c92:	4620      	mov	r0, r4
 8008c94:	bd70      	pop	{r4, r5, r6, pc}
 8008c96:	1cc4      	adds	r4, r0, #3
 8008c98:	f024 0403 	bic.w	r4, r4, #3
 8008c9c:	42a0      	cmp	r0, r4
 8008c9e:	d0f8      	beq.n	8008c92 <sbrk_aligned+0x22>
 8008ca0:	1a21      	subs	r1, r4, r0
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f000 fc38 	bl	8009518 <_sbrk_r>
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d1f2      	bne.n	8008c92 <sbrk_aligned+0x22>
 8008cac:	e7ef      	b.n	8008c8e <sbrk_aligned+0x1e>
 8008cae:	bf00      	nop
 8008cb0:	20000dbc 	.word	0x20000dbc

08008cb4 <_malloc_r>:
 8008cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb8:	1ccd      	adds	r5, r1, #3
 8008cba:	f025 0503 	bic.w	r5, r5, #3
 8008cbe:	3508      	adds	r5, #8
 8008cc0:	2d0c      	cmp	r5, #12
 8008cc2:	bf38      	it	cc
 8008cc4:	250c      	movcc	r5, #12
 8008cc6:	2d00      	cmp	r5, #0
 8008cc8:	4606      	mov	r6, r0
 8008cca:	db01      	blt.n	8008cd0 <_malloc_r+0x1c>
 8008ccc:	42a9      	cmp	r1, r5
 8008cce:	d904      	bls.n	8008cda <_malloc_r+0x26>
 8008cd0:	230c      	movs	r3, #12
 8008cd2:	6033      	str	r3, [r6, #0]
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008db0 <_malloc_r+0xfc>
 8008cde:	f000 faa1 	bl	8009224 <__malloc_lock>
 8008ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce6:	461c      	mov	r4, r3
 8008ce8:	bb44      	cbnz	r4, 8008d3c <_malloc_r+0x88>
 8008cea:	4629      	mov	r1, r5
 8008cec:	4630      	mov	r0, r6
 8008cee:	f7ff ffbf 	bl	8008c70 <sbrk_aligned>
 8008cf2:	1c43      	adds	r3, r0, #1
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	d158      	bne.n	8008daa <_malloc_r+0xf6>
 8008cf8:	f8d8 4000 	ldr.w	r4, [r8]
 8008cfc:	4627      	mov	r7, r4
 8008cfe:	2f00      	cmp	r7, #0
 8008d00:	d143      	bne.n	8008d8a <_malloc_r+0xd6>
 8008d02:	2c00      	cmp	r4, #0
 8008d04:	d04b      	beq.n	8008d9e <_malloc_r+0xea>
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	4639      	mov	r1, r7
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	eb04 0903 	add.w	r9, r4, r3
 8008d10:	f000 fc02 	bl	8009518 <_sbrk_r>
 8008d14:	4581      	cmp	r9, r0
 8008d16:	d142      	bne.n	8008d9e <_malloc_r+0xea>
 8008d18:	6821      	ldr	r1, [r4, #0]
 8008d1a:	1a6d      	subs	r5, r5, r1
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f7ff ffa6 	bl	8008c70 <sbrk_aligned>
 8008d24:	3001      	adds	r0, #1
 8008d26:	d03a      	beq.n	8008d9e <_malloc_r+0xea>
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	442b      	add	r3, r5
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	bb62      	cbnz	r2, 8008d90 <_malloc_r+0xdc>
 8008d36:	f8c8 7000 	str.w	r7, [r8]
 8008d3a:	e00f      	b.n	8008d5c <_malloc_r+0xa8>
 8008d3c:	6822      	ldr	r2, [r4, #0]
 8008d3e:	1b52      	subs	r2, r2, r5
 8008d40:	d420      	bmi.n	8008d84 <_malloc_r+0xd0>
 8008d42:	2a0b      	cmp	r2, #11
 8008d44:	d917      	bls.n	8008d76 <_malloc_r+0xc2>
 8008d46:	1961      	adds	r1, r4, r5
 8008d48:	42a3      	cmp	r3, r4
 8008d4a:	6025      	str	r5, [r4, #0]
 8008d4c:	bf18      	it	ne
 8008d4e:	6059      	strne	r1, [r3, #4]
 8008d50:	6863      	ldr	r3, [r4, #4]
 8008d52:	bf08      	it	eq
 8008d54:	f8c8 1000 	streq.w	r1, [r8]
 8008d58:	5162      	str	r2, [r4, r5]
 8008d5a:	604b      	str	r3, [r1, #4]
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f000 fa67 	bl	8009230 <__malloc_unlock>
 8008d62:	f104 000b 	add.w	r0, r4, #11
 8008d66:	1d23      	adds	r3, r4, #4
 8008d68:	f020 0007 	bic.w	r0, r0, #7
 8008d6c:	1ac2      	subs	r2, r0, r3
 8008d6e:	bf1c      	itt	ne
 8008d70:	1a1b      	subne	r3, r3, r0
 8008d72:	50a3      	strne	r3, [r4, r2]
 8008d74:	e7af      	b.n	8008cd6 <_malloc_r+0x22>
 8008d76:	6862      	ldr	r2, [r4, #4]
 8008d78:	42a3      	cmp	r3, r4
 8008d7a:	bf0c      	ite	eq
 8008d7c:	f8c8 2000 	streq.w	r2, [r8]
 8008d80:	605a      	strne	r2, [r3, #4]
 8008d82:	e7eb      	b.n	8008d5c <_malloc_r+0xa8>
 8008d84:	4623      	mov	r3, r4
 8008d86:	6864      	ldr	r4, [r4, #4]
 8008d88:	e7ae      	b.n	8008ce8 <_malloc_r+0x34>
 8008d8a:	463c      	mov	r4, r7
 8008d8c:	687f      	ldr	r7, [r7, #4]
 8008d8e:	e7b6      	b.n	8008cfe <_malloc_r+0x4a>
 8008d90:	461a      	mov	r2, r3
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	d1fb      	bne.n	8008d90 <_malloc_r+0xdc>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	6053      	str	r3, [r2, #4]
 8008d9c:	e7de      	b.n	8008d5c <_malloc_r+0xa8>
 8008d9e:	230c      	movs	r3, #12
 8008da0:	6033      	str	r3, [r6, #0]
 8008da2:	4630      	mov	r0, r6
 8008da4:	f000 fa44 	bl	8009230 <__malloc_unlock>
 8008da8:	e794      	b.n	8008cd4 <_malloc_r+0x20>
 8008daa:	6005      	str	r5, [r0, #0]
 8008dac:	e7d6      	b.n	8008d5c <_malloc_r+0xa8>
 8008dae:	bf00      	nop
 8008db0:	20000dc0 	.word	0x20000dc0

08008db4 <_printf_common>:
 8008db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db8:	4616      	mov	r6, r2
 8008dba:	4698      	mov	r8, r3
 8008dbc:	688a      	ldr	r2, [r1, #8]
 8008dbe:	690b      	ldr	r3, [r1, #16]
 8008dc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	bfb8      	it	lt
 8008dc8:	4613      	movlt	r3, r2
 8008dca:	6033      	str	r3, [r6, #0]
 8008dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	b10a      	cbz	r2, 8008dda <_printf_common+0x26>
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	6033      	str	r3, [r6, #0]
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	0699      	lsls	r1, r3, #26
 8008dde:	bf42      	ittt	mi
 8008de0:	6833      	ldrmi	r3, [r6, #0]
 8008de2:	3302      	addmi	r3, #2
 8008de4:	6033      	strmi	r3, [r6, #0]
 8008de6:	6825      	ldr	r5, [r4, #0]
 8008de8:	f015 0506 	ands.w	r5, r5, #6
 8008dec:	d106      	bne.n	8008dfc <_printf_common+0x48>
 8008dee:	f104 0a19 	add.w	sl, r4, #25
 8008df2:	68e3      	ldr	r3, [r4, #12]
 8008df4:	6832      	ldr	r2, [r6, #0]
 8008df6:	1a9b      	subs	r3, r3, r2
 8008df8:	42ab      	cmp	r3, r5
 8008dfa:	dc26      	bgt.n	8008e4a <_printf_common+0x96>
 8008dfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e00:	6822      	ldr	r2, [r4, #0]
 8008e02:	3b00      	subs	r3, #0
 8008e04:	bf18      	it	ne
 8008e06:	2301      	movne	r3, #1
 8008e08:	0692      	lsls	r2, r2, #26
 8008e0a:	d42b      	bmi.n	8008e64 <_printf_common+0xb0>
 8008e0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e10:	4641      	mov	r1, r8
 8008e12:	4638      	mov	r0, r7
 8008e14:	47c8      	blx	r9
 8008e16:	3001      	adds	r0, #1
 8008e18:	d01e      	beq.n	8008e58 <_printf_common+0xa4>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	6922      	ldr	r2, [r4, #16]
 8008e1e:	f003 0306 	and.w	r3, r3, #6
 8008e22:	2b04      	cmp	r3, #4
 8008e24:	bf02      	ittt	eq
 8008e26:	68e5      	ldreq	r5, [r4, #12]
 8008e28:	6833      	ldreq	r3, [r6, #0]
 8008e2a:	1aed      	subeq	r5, r5, r3
 8008e2c:	68a3      	ldr	r3, [r4, #8]
 8008e2e:	bf0c      	ite	eq
 8008e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e34:	2500      	movne	r5, #0
 8008e36:	4293      	cmp	r3, r2
 8008e38:	bfc4      	itt	gt
 8008e3a:	1a9b      	subgt	r3, r3, r2
 8008e3c:	18ed      	addgt	r5, r5, r3
 8008e3e:	2600      	movs	r6, #0
 8008e40:	341a      	adds	r4, #26
 8008e42:	42b5      	cmp	r5, r6
 8008e44:	d11a      	bne.n	8008e7c <_printf_common+0xc8>
 8008e46:	2000      	movs	r0, #0
 8008e48:	e008      	b.n	8008e5c <_printf_common+0xa8>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	4652      	mov	r2, sl
 8008e4e:	4641      	mov	r1, r8
 8008e50:	4638      	mov	r0, r7
 8008e52:	47c8      	blx	r9
 8008e54:	3001      	adds	r0, #1
 8008e56:	d103      	bne.n	8008e60 <_printf_common+0xac>
 8008e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e60:	3501      	adds	r5, #1
 8008e62:	e7c6      	b.n	8008df2 <_printf_common+0x3e>
 8008e64:	18e1      	adds	r1, r4, r3
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	2030      	movs	r0, #48	@ 0x30
 8008e6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e6e:	4422      	add	r2, r4
 8008e70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e78:	3302      	adds	r3, #2
 8008e7a:	e7c7      	b.n	8008e0c <_printf_common+0x58>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	4622      	mov	r2, r4
 8008e80:	4641      	mov	r1, r8
 8008e82:	4638      	mov	r0, r7
 8008e84:	47c8      	blx	r9
 8008e86:	3001      	adds	r0, #1
 8008e88:	d0e6      	beq.n	8008e58 <_printf_common+0xa4>
 8008e8a:	3601      	adds	r6, #1
 8008e8c:	e7d9      	b.n	8008e42 <_printf_common+0x8e>
	...

08008e90 <_printf_i>:
 8008e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e94:	7e0f      	ldrb	r7, [r1, #24]
 8008e96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e98:	2f78      	cmp	r7, #120	@ 0x78
 8008e9a:	4691      	mov	r9, r2
 8008e9c:	4680      	mov	r8, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	469a      	mov	sl, r3
 8008ea2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ea6:	d807      	bhi.n	8008eb8 <_printf_i+0x28>
 8008ea8:	2f62      	cmp	r7, #98	@ 0x62
 8008eaa:	d80a      	bhi.n	8008ec2 <_printf_i+0x32>
 8008eac:	2f00      	cmp	r7, #0
 8008eae:	f000 80d1 	beq.w	8009054 <_printf_i+0x1c4>
 8008eb2:	2f58      	cmp	r7, #88	@ 0x58
 8008eb4:	f000 80b8 	beq.w	8009028 <_printf_i+0x198>
 8008eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ebc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ec0:	e03a      	b.n	8008f38 <_printf_i+0xa8>
 8008ec2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ec6:	2b15      	cmp	r3, #21
 8008ec8:	d8f6      	bhi.n	8008eb8 <_printf_i+0x28>
 8008eca:	a101      	add	r1, pc, #4	@ (adr r1, 8008ed0 <_printf_i+0x40>)
 8008ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ed0:	08008f29 	.word	0x08008f29
 8008ed4:	08008f3d 	.word	0x08008f3d
 8008ed8:	08008eb9 	.word	0x08008eb9
 8008edc:	08008eb9 	.word	0x08008eb9
 8008ee0:	08008eb9 	.word	0x08008eb9
 8008ee4:	08008eb9 	.word	0x08008eb9
 8008ee8:	08008f3d 	.word	0x08008f3d
 8008eec:	08008eb9 	.word	0x08008eb9
 8008ef0:	08008eb9 	.word	0x08008eb9
 8008ef4:	08008eb9 	.word	0x08008eb9
 8008ef8:	08008eb9 	.word	0x08008eb9
 8008efc:	0800903b 	.word	0x0800903b
 8008f00:	08008f67 	.word	0x08008f67
 8008f04:	08008ff5 	.word	0x08008ff5
 8008f08:	08008eb9 	.word	0x08008eb9
 8008f0c:	08008eb9 	.word	0x08008eb9
 8008f10:	0800905d 	.word	0x0800905d
 8008f14:	08008eb9 	.word	0x08008eb9
 8008f18:	08008f67 	.word	0x08008f67
 8008f1c:	08008eb9 	.word	0x08008eb9
 8008f20:	08008eb9 	.word	0x08008eb9
 8008f24:	08008ffd 	.word	0x08008ffd
 8008f28:	6833      	ldr	r3, [r6, #0]
 8008f2a:	1d1a      	adds	r2, r3, #4
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6032      	str	r2, [r6, #0]
 8008f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e09c      	b.n	8009076 <_printf_i+0x1e6>
 8008f3c:	6833      	ldr	r3, [r6, #0]
 8008f3e:	6820      	ldr	r0, [r4, #0]
 8008f40:	1d19      	adds	r1, r3, #4
 8008f42:	6031      	str	r1, [r6, #0]
 8008f44:	0606      	lsls	r6, r0, #24
 8008f46:	d501      	bpl.n	8008f4c <_printf_i+0xbc>
 8008f48:	681d      	ldr	r5, [r3, #0]
 8008f4a:	e003      	b.n	8008f54 <_printf_i+0xc4>
 8008f4c:	0645      	lsls	r5, r0, #25
 8008f4e:	d5fb      	bpl.n	8008f48 <_printf_i+0xb8>
 8008f50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f54:	2d00      	cmp	r5, #0
 8008f56:	da03      	bge.n	8008f60 <_printf_i+0xd0>
 8008f58:	232d      	movs	r3, #45	@ 0x2d
 8008f5a:	426d      	negs	r5, r5
 8008f5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f60:	4858      	ldr	r0, [pc, #352]	@ (80090c4 <_printf_i+0x234>)
 8008f62:	230a      	movs	r3, #10
 8008f64:	e011      	b.n	8008f8a <_printf_i+0xfa>
 8008f66:	6821      	ldr	r1, [r4, #0]
 8008f68:	6833      	ldr	r3, [r6, #0]
 8008f6a:	0608      	lsls	r0, r1, #24
 8008f6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f70:	d402      	bmi.n	8008f78 <_printf_i+0xe8>
 8008f72:	0649      	lsls	r1, r1, #25
 8008f74:	bf48      	it	mi
 8008f76:	b2ad      	uxthmi	r5, r5
 8008f78:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f7a:	4852      	ldr	r0, [pc, #328]	@ (80090c4 <_printf_i+0x234>)
 8008f7c:	6033      	str	r3, [r6, #0]
 8008f7e:	bf14      	ite	ne
 8008f80:	230a      	movne	r3, #10
 8008f82:	2308      	moveq	r3, #8
 8008f84:	2100      	movs	r1, #0
 8008f86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f8a:	6866      	ldr	r6, [r4, #4]
 8008f8c:	60a6      	str	r6, [r4, #8]
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	db05      	blt.n	8008f9e <_printf_i+0x10e>
 8008f92:	6821      	ldr	r1, [r4, #0]
 8008f94:	432e      	orrs	r6, r5
 8008f96:	f021 0104 	bic.w	r1, r1, #4
 8008f9a:	6021      	str	r1, [r4, #0]
 8008f9c:	d04b      	beq.n	8009036 <_printf_i+0x1a6>
 8008f9e:	4616      	mov	r6, r2
 8008fa0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fa4:	fb03 5711 	mls	r7, r3, r1, r5
 8008fa8:	5dc7      	ldrb	r7, [r0, r7]
 8008faa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fae:	462f      	mov	r7, r5
 8008fb0:	42bb      	cmp	r3, r7
 8008fb2:	460d      	mov	r5, r1
 8008fb4:	d9f4      	bls.n	8008fa0 <_printf_i+0x110>
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	d10b      	bne.n	8008fd2 <_printf_i+0x142>
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	07df      	lsls	r7, r3, #31
 8008fbe:	d508      	bpl.n	8008fd2 <_printf_i+0x142>
 8008fc0:	6923      	ldr	r3, [r4, #16]
 8008fc2:	6861      	ldr	r1, [r4, #4]
 8008fc4:	4299      	cmp	r1, r3
 8008fc6:	bfde      	ittt	le
 8008fc8:	2330      	movle	r3, #48	@ 0x30
 8008fca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008fd2:	1b92      	subs	r2, r2, r6
 8008fd4:	6122      	str	r2, [r4, #16]
 8008fd6:	f8cd a000 	str.w	sl, [sp]
 8008fda:	464b      	mov	r3, r9
 8008fdc:	aa03      	add	r2, sp, #12
 8008fde:	4621      	mov	r1, r4
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	f7ff fee7 	bl	8008db4 <_printf_common>
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	d14a      	bne.n	8009080 <_printf_i+0x1f0>
 8008fea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fee:	b004      	add	sp, #16
 8008ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	f043 0320 	orr.w	r3, r3, #32
 8008ffa:	6023      	str	r3, [r4, #0]
 8008ffc:	4832      	ldr	r0, [pc, #200]	@ (80090c8 <_printf_i+0x238>)
 8008ffe:	2778      	movs	r7, #120	@ 0x78
 8009000:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	6831      	ldr	r1, [r6, #0]
 8009008:	061f      	lsls	r7, r3, #24
 800900a:	f851 5b04 	ldr.w	r5, [r1], #4
 800900e:	d402      	bmi.n	8009016 <_printf_i+0x186>
 8009010:	065f      	lsls	r7, r3, #25
 8009012:	bf48      	it	mi
 8009014:	b2ad      	uxthmi	r5, r5
 8009016:	6031      	str	r1, [r6, #0]
 8009018:	07d9      	lsls	r1, r3, #31
 800901a:	bf44      	itt	mi
 800901c:	f043 0320 	orrmi.w	r3, r3, #32
 8009020:	6023      	strmi	r3, [r4, #0]
 8009022:	b11d      	cbz	r5, 800902c <_printf_i+0x19c>
 8009024:	2310      	movs	r3, #16
 8009026:	e7ad      	b.n	8008f84 <_printf_i+0xf4>
 8009028:	4826      	ldr	r0, [pc, #152]	@ (80090c4 <_printf_i+0x234>)
 800902a:	e7e9      	b.n	8009000 <_printf_i+0x170>
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	f023 0320 	bic.w	r3, r3, #32
 8009032:	6023      	str	r3, [r4, #0]
 8009034:	e7f6      	b.n	8009024 <_printf_i+0x194>
 8009036:	4616      	mov	r6, r2
 8009038:	e7bd      	b.n	8008fb6 <_printf_i+0x126>
 800903a:	6833      	ldr	r3, [r6, #0]
 800903c:	6825      	ldr	r5, [r4, #0]
 800903e:	6961      	ldr	r1, [r4, #20]
 8009040:	1d18      	adds	r0, r3, #4
 8009042:	6030      	str	r0, [r6, #0]
 8009044:	062e      	lsls	r6, r5, #24
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	d501      	bpl.n	800904e <_printf_i+0x1be>
 800904a:	6019      	str	r1, [r3, #0]
 800904c:	e002      	b.n	8009054 <_printf_i+0x1c4>
 800904e:	0668      	lsls	r0, r5, #25
 8009050:	d5fb      	bpl.n	800904a <_printf_i+0x1ba>
 8009052:	8019      	strh	r1, [r3, #0]
 8009054:	2300      	movs	r3, #0
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	4616      	mov	r6, r2
 800905a:	e7bc      	b.n	8008fd6 <_printf_i+0x146>
 800905c:	6833      	ldr	r3, [r6, #0]
 800905e:	1d1a      	adds	r2, r3, #4
 8009060:	6032      	str	r2, [r6, #0]
 8009062:	681e      	ldr	r6, [r3, #0]
 8009064:	6862      	ldr	r2, [r4, #4]
 8009066:	2100      	movs	r1, #0
 8009068:	4630      	mov	r0, r6
 800906a:	f7f7 f8b1 	bl	80001d0 <memchr>
 800906e:	b108      	cbz	r0, 8009074 <_printf_i+0x1e4>
 8009070:	1b80      	subs	r0, r0, r6
 8009072:	6060      	str	r0, [r4, #4]
 8009074:	6863      	ldr	r3, [r4, #4]
 8009076:	6123      	str	r3, [r4, #16]
 8009078:	2300      	movs	r3, #0
 800907a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800907e:	e7aa      	b.n	8008fd6 <_printf_i+0x146>
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	4632      	mov	r2, r6
 8009084:	4649      	mov	r1, r9
 8009086:	4640      	mov	r0, r8
 8009088:	47d0      	blx	sl
 800908a:	3001      	adds	r0, #1
 800908c:	d0ad      	beq.n	8008fea <_printf_i+0x15a>
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	079b      	lsls	r3, r3, #30
 8009092:	d413      	bmi.n	80090bc <_printf_i+0x22c>
 8009094:	68e0      	ldr	r0, [r4, #12]
 8009096:	9b03      	ldr	r3, [sp, #12]
 8009098:	4298      	cmp	r0, r3
 800909a:	bfb8      	it	lt
 800909c:	4618      	movlt	r0, r3
 800909e:	e7a6      	b.n	8008fee <_printf_i+0x15e>
 80090a0:	2301      	movs	r3, #1
 80090a2:	4632      	mov	r2, r6
 80090a4:	4649      	mov	r1, r9
 80090a6:	4640      	mov	r0, r8
 80090a8:	47d0      	blx	sl
 80090aa:	3001      	adds	r0, #1
 80090ac:	d09d      	beq.n	8008fea <_printf_i+0x15a>
 80090ae:	3501      	adds	r5, #1
 80090b0:	68e3      	ldr	r3, [r4, #12]
 80090b2:	9903      	ldr	r1, [sp, #12]
 80090b4:	1a5b      	subs	r3, r3, r1
 80090b6:	42ab      	cmp	r3, r5
 80090b8:	dcf2      	bgt.n	80090a0 <_printf_i+0x210>
 80090ba:	e7eb      	b.n	8009094 <_printf_i+0x204>
 80090bc:	2500      	movs	r5, #0
 80090be:	f104 0619 	add.w	r6, r4, #25
 80090c2:	e7f5      	b.n	80090b0 <_printf_i+0x220>
 80090c4:	080096a5 	.word	0x080096a5
 80090c8:	080096b6 	.word	0x080096b6

080090cc <__sflush_r>:
 80090cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d4:	0716      	lsls	r6, r2, #28
 80090d6:	4605      	mov	r5, r0
 80090d8:	460c      	mov	r4, r1
 80090da:	d454      	bmi.n	8009186 <__sflush_r+0xba>
 80090dc:	684b      	ldr	r3, [r1, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	dc02      	bgt.n	80090e8 <__sflush_r+0x1c>
 80090e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	dd48      	ble.n	800917a <__sflush_r+0xae>
 80090e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090ea:	2e00      	cmp	r6, #0
 80090ec:	d045      	beq.n	800917a <__sflush_r+0xae>
 80090ee:	2300      	movs	r3, #0
 80090f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090f4:	682f      	ldr	r7, [r5, #0]
 80090f6:	6a21      	ldr	r1, [r4, #32]
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	d030      	beq.n	800915e <__sflush_r+0x92>
 80090fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	0759      	lsls	r1, r3, #29
 8009102:	d505      	bpl.n	8009110 <__sflush_r+0x44>
 8009104:	6863      	ldr	r3, [r4, #4]
 8009106:	1ad2      	subs	r2, r2, r3
 8009108:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800910a:	b10b      	cbz	r3, 8009110 <__sflush_r+0x44>
 800910c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800910e:	1ad2      	subs	r2, r2, r3
 8009110:	2300      	movs	r3, #0
 8009112:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009114:	6a21      	ldr	r1, [r4, #32]
 8009116:	4628      	mov	r0, r5
 8009118:	47b0      	blx	r6
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	d106      	bne.n	800912e <__sflush_r+0x62>
 8009120:	6829      	ldr	r1, [r5, #0]
 8009122:	291d      	cmp	r1, #29
 8009124:	d82b      	bhi.n	800917e <__sflush_r+0xb2>
 8009126:	4a2a      	ldr	r2, [pc, #168]	@ (80091d0 <__sflush_r+0x104>)
 8009128:	40ca      	lsrs	r2, r1
 800912a:	07d6      	lsls	r6, r2, #31
 800912c:	d527      	bpl.n	800917e <__sflush_r+0xb2>
 800912e:	2200      	movs	r2, #0
 8009130:	6062      	str	r2, [r4, #4]
 8009132:	04d9      	lsls	r1, r3, #19
 8009134:	6922      	ldr	r2, [r4, #16]
 8009136:	6022      	str	r2, [r4, #0]
 8009138:	d504      	bpl.n	8009144 <__sflush_r+0x78>
 800913a:	1c42      	adds	r2, r0, #1
 800913c:	d101      	bne.n	8009142 <__sflush_r+0x76>
 800913e:	682b      	ldr	r3, [r5, #0]
 8009140:	b903      	cbnz	r3, 8009144 <__sflush_r+0x78>
 8009142:	6560      	str	r0, [r4, #84]	@ 0x54
 8009144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009146:	602f      	str	r7, [r5, #0]
 8009148:	b1b9      	cbz	r1, 800917a <__sflush_r+0xae>
 800914a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800914e:	4299      	cmp	r1, r3
 8009150:	d002      	beq.n	8009158 <__sflush_r+0x8c>
 8009152:	4628      	mov	r0, r5
 8009154:	f000 fa24 	bl	80095a0 <_free_r>
 8009158:	2300      	movs	r3, #0
 800915a:	6363      	str	r3, [r4, #52]	@ 0x34
 800915c:	e00d      	b.n	800917a <__sflush_r+0xae>
 800915e:	2301      	movs	r3, #1
 8009160:	4628      	mov	r0, r5
 8009162:	47b0      	blx	r6
 8009164:	4602      	mov	r2, r0
 8009166:	1c50      	adds	r0, r2, #1
 8009168:	d1c9      	bne.n	80090fe <__sflush_r+0x32>
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d0c6      	beq.n	80090fe <__sflush_r+0x32>
 8009170:	2b1d      	cmp	r3, #29
 8009172:	d001      	beq.n	8009178 <__sflush_r+0xac>
 8009174:	2b16      	cmp	r3, #22
 8009176:	d11e      	bne.n	80091b6 <__sflush_r+0xea>
 8009178:	602f      	str	r7, [r5, #0]
 800917a:	2000      	movs	r0, #0
 800917c:	e022      	b.n	80091c4 <__sflush_r+0xf8>
 800917e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009182:	b21b      	sxth	r3, r3
 8009184:	e01b      	b.n	80091be <__sflush_r+0xf2>
 8009186:	690f      	ldr	r7, [r1, #16]
 8009188:	2f00      	cmp	r7, #0
 800918a:	d0f6      	beq.n	800917a <__sflush_r+0xae>
 800918c:	0793      	lsls	r3, r2, #30
 800918e:	680e      	ldr	r6, [r1, #0]
 8009190:	bf08      	it	eq
 8009192:	694b      	ldreq	r3, [r1, #20]
 8009194:	600f      	str	r7, [r1, #0]
 8009196:	bf18      	it	ne
 8009198:	2300      	movne	r3, #0
 800919a:	eba6 0807 	sub.w	r8, r6, r7
 800919e:	608b      	str	r3, [r1, #8]
 80091a0:	f1b8 0f00 	cmp.w	r8, #0
 80091a4:	dde9      	ble.n	800917a <__sflush_r+0xae>
 80091a6:	6a21      	ldr	r1, [r4, #32]
 80091a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80091aa:	4643      	mov	r3, r8
 80091ac:	463a      	mov	r2, r7
 80091ae:	4628      	mov	r0, r5
 80091b0:	47b0      	blx	r6
 80091b2:	2800      	cmp	r0, #0
 80091b4:	dc08      	bgt.n	80091c8 <__sflush_r+0xfc>
 80091b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091be:	81a3      	strh	r3, [r4, #12]
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c8:	4407      	add	r7, r0
 80091ca:	eba8 0800 	sub.w	r8, r8, r0
 80091ce:	e7e7      	b.n	80091a0 <__sflush_r+0xd4>
 80091d0:	20400001 	.word	0x20400001

080091d4 <_fflush_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	690b      	ldr	r3, [r1, #16]
 80091d8:	4605      	mov	r5, r0
 80091da:	460c      	mov	r4, r1
 80091dc:	b913      	cbnz	r3, 80091e4 <_fflush_r+0x10>
 80091de:	2500      	movs	r5, #0
 80091e0:	4628      	mov	r0, r5
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	b118      	cbz	r0, 80091ee <_fflush_r+0x1a>
 80091e6:	6a03      	ldr	r3, [r0, #32]
 80091e8:	b90b      	cbnz	r3, 80091ee <_fflush_r+0x1a>
 80091ea:	f7ff fb83 	bl	80088f4 <__sinit>
 80091ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0f3      	beq.n	80091de <_fflush_r+0xa>
 80091f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091f8:	07d0      	lsls	r0, r2, #31
 80091fa:	d404      	bmi.n	8009206 <_fflush_r+0x32>
 80091fc:	0599      	lsls	r1, r3, #22
 80091fe:	d402      	bmi.n	8009206 <_fflush_r+0x32>
 8009200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009202:	f7ff fbf2 	bl	80089ea <__retarget_lock_acquire_recursive>
 8009206:	4628      	mov	r0, r5
 8009208:	4621      	mov	r1, r4
 800920a:	f7ff ff5f 	bl	80090cc <__sflush_r>
 800920e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009210:	07da      	lsls	r2, r3, #31
 8009212:	4605      	mov	r5, r0
 8009214:	d4e4      	bmi.n	80091e0 <_fflush_r+0xc>
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	059b      	lsls	r3, r3, #22
 800921a:	d4e1      	bmi.n	80091e0 <_fflush_r+0xc>
 800921c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800921e:	f7ff fbe5 	bl	80089ec <__retarget_lock_release_recursive>
 8009222:	e7dd      	b.n	80091e0 <_fflush_r+0xc>

08009224 <__malloc_lock>:
 8009224:	4801      	ldr	r0, [pc, #4]	@ (800922c <__malloc_lock+0x8>)
 8009226:	f7ff bbe0 	b.w	80089ea <__retarget_lock_acquire_recursive>
 800922a:	bf00      	nop
 800922c:	20000db8 	.word	0x20000db8

08009230 <__malloc_unlock>:
 8009230:	4801      	ldr	r0, [pc, #4]	@ (8009238 <__malloc_unlock+0x8>)
 8009232:	f7ff bbdb 	b.w	80089ec <__retarget_lock_release_recursive>
 8009236:	bf00      	nop
 8009238:	20000db8 	.word	0x20000db8

0800923c <__sread>:
 800923c:	b510      	push	{r4, lr}
 800923e:	460c      	mov	r4, r1
 8009240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009244:	f000 f956 	bl	80094f4 <_read_r>
 8009248:	2800      	cmp	r0, #0
 800924a:	bfab      	itete	ge
 800924c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800924e:	89a3      	ldrhlt	r3, [r4, #12]
 8009250:	181b      	addge	r3, r3, r0
 8009252:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009256:	bfac      	ite	ge
 8009258:	6563      	strge	r3, [r4, #84]	@ 0x54
 800925a:	81a3      	strhlt	r3, [r4, #12]
 800925c:	bd10      	pop	{r4, pc}

0800925e <__swrite>:
 800925e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009262:	461f      	mov	r7, r3
 8009264:	898b      	ldrh	r3, [r1, #12]
 8009266:	05db      	lsls	r3, r3, #23
 8009268:	4605      	mov	r5, r0
 800926a:	460c      	mov	r4, r1
 800926c:	4616      	mov	r6, r2
 800926e:	d505      	bpl.n	800927c <__swrite+0x1e>
 8009270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009274:	2302      	movs	r3, #2
 8009276:	2200      	movs	r2, #0
 8009278:	f000 f92a 	bl	80094d0 <_lseek_r>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009282:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	4632      	mov	r2, r6
 800928a:	463b      	mov	r3, r7
 800928c:	4628      	mov	r0, r5
 800928e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009292:	f000 b951 	b.w	8009538 <_write_r>

08009296 <__sseek>:
 8009296:	b510      	push	{r4, lr}
 8009298:	460c      	mov	r4, r1
 800929a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800929e:	f000 f917 	bl	80094d0 <_lseek_r>
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	bf15      	itete	ne
 80092a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80092aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80092ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80092b2:	81a3      	strheq	r3, [r4, #12]
 80092b4:	bf18      	it	ne
 80092b6:	81a3      	strhne	r3, [r4, #12]
 80092b8:	bd10      	pop	{r4, pc}

080092ba <__sclose>:
 80092ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092be:	f000 b94d 	b.w	800955c <_close_r>

080092c2 <__swbuf_r>:
 80092c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c4:	460e      	mov	r6, r1
 80092c6:	4614      	mov	r4, r2
 80092c8:	4605      	mov	r5, r0
 80092ca:	b118      	cbz	r0, 80092d4 <__swbuf_r+0x12>
 80092cc:	6a03      	ldr	r3, [r0, #32]
 80092ce:	b90b      	cbnz	r3, 80092d4 <__swbuf_r+0x12>
 80092d0:	f7ff fb10 	bl	80088f4 <__sinit>
 80092d4:	69a3      	ldr	r3, [r4, #24]
 80092d6:	60a3      	str	r3, [r4, #8]
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	071a      	lsls	r2, r3, #28
 80092dc:	d501      	bpl.n	80092e2 <__swbuf_r+0x20>
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	b943      	cbnz	r3, 80092f4 <__swbuf_r+0x32>
 80092e2:	4621      	mov	r1, r4
 80092e4:	4628      	mov	r0, r5
 80092e6:	f000 f82b 	bl	8009340 <__swsetup_r>
 80092ea:	b118      	cbz	r0, 80092f4 <__swbuf_r+0x32>
 80092ec:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80092f0:	4638      	mov	r0, r7
 80092f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	6922      	ldr	r2, [r4, #16]
 80092f8:	1a98      	subs	r0, r3, r2
 80092fa:	6963      	ldr	r3, [r4, #20]
 80092fc:	b2f6      	uxtb	r6, r6
 80092fe:	4283      	cmp	r3, r0
 8009300:	4637      	mov	r7, r6
 8009302:	dc05      	bgt.n	8009310 <__swbuf_r+0x4e>
 8009304:	4621      	mov	r1, r4
 8009306:	4628      	mov	r0, r5
 8009308:	f7ff ff64 	bl	80091d4 <_fflush_r>
 800930c:	2800      	cmp	r0, #0
 800930e:	d1ed      	bne.n	80092ec <__swbuf_r+0x2a>
 8009310:	68a3      	ldr	r3, [r4, #8]
 8009312:	3b01      	subs	r3, #1
 8009314:	60a3      	str	r3, [r4, #8]
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	1c5a      	adds	r2, r3, #1
 800931a:	6022      	str	r2, [r4, #0]
 800931c:	701e      	strb	r6, [r3, #0]
 800931e:	6962      	ldr	r2, [r4, #20]
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	429a      	cmp	r2, r3
 8009324:	d004      	beq.n	8009330 <__swbuf_r+0x6e>
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	07db      	lsls	r3, r3, #31
 800932a:	d5e1      	bpl.n	80092f0 <__swbuf_r+0x2e>
 800932c:	2e0a      	cmp	r6, #10
 800932e:	d1df      	bne.n	80092f0 <__swbuf_r+0x2e>
 8009330:	4621      	mov	r1, r4
 8009332:	4628      	mov	r0, r5
 8009334:	f7ff ff4e 	bl	80091d4 <_fflush_r>
 8009338:	2800      	cmp	r0, #0
 800933a:	d0d9      	beq.n	80092f0 <__swbuf_r+0x2e>
 800933c:	e7d6      	b.n	80092ec <__swbuf_r+0x2a>
	...

08009340 <__swsetup_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4b29      	ldr	r3, [pc, #164]	@ (80093e8 <__swsetup_r+0xa8>)
 8009344:	4605      	mov	r5, r0
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	460c      	mov	r4, r1
 800934a:	b118      	cbz	r0, 8009354 <__swsetup_r+0x14>
 800934c:	6a03      	ldr	r3, [r0, #32]
 800934e:	b90b      	cbnz	r3, 8009354 <__swsetup_r+0x14>
 8009350:	f7ff fad0 	bl	80088f4 <__sinit>
 8009354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009358:	0719      	lsls	r1, r3, #28
 800935a:	d422      	bmi.n	80093a2 <__swsetup_r+0x62>
 800935c:	06da      	lsls	r2, r3, #27
 800935e:	d407      	bmi.n	8009370 <__swsetup_r+0x30>
 8009360:	2209      	movs	r2, #9
 8009362:	602a      	str	r2, [r5, #0]
 8009364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009368:	81a3      	strh	r3, [r4, #12]
 800936a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800936e:	e033      	b.n	80093d8 <__swsetup_r+0x98>
 8009370:	0758      	lsls	r0, r3, #29
 8009372:	d512      	bpl.n	800939a <__swsetup_r+0x5a>
 8009374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009376:	b141      	cbz	r1, 800938a <__swsetup_r+0x4a>
 8009378:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800937c:	4299      	cmp	r1, r3
 800937e:	d002      	beq.n	8009386 <__swsetup_r+0x46>
 8009380:	4628      	mov	r0, r5
 8009382:	f000 f90d 	bl	80095a0 <_free_r>
 8009386:	2300      	movs	r3, #0
 8009388:	6363      	str	r3, [r4, #52]	@ 0x34
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009390:	81a3      	strh	r3, [r4, #12]
 8009392:	2300      	movs	r3, #0
 8009394:	6063      	str	r3, [r4, #4]
 8009396:	6923      	ldr	r3, [r4, #16]
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	f043 0308 	orr.w	r3, r3, #8
 80093a0:	81a3      	strh	r3, [r4, #12]
 80093a2:	6923      	ldr	r3, [r4, #16]
 80093a4:	b94b      	cbnz	r3, 80093ba <__swsetup_r+0x7a>
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80093ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093b0:	d003      	beq.n	80093ba <__swsetup_r+0x7a>
 80093b2:	4621      	mov	r1, r4
 80093b4:	4628      	mov	r0, r5
 80093b6:	f000 f83f 	bl	8009438 <__smakebuf_r>
 80093ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093be:	f013 0201 	ands.w	r2, r3, #1
 80093c2:	d00a      	beq.n	80093da <__swsetup_r+0x9a>
 80093c4:	2200      	movs	r2, #0
 80093c6:	60a2      	str	r2, [r4, #8]
 80093c8:	6962      	ldr	r2, [r4, #20]
 80093ca:	4252      	negs	r2, r2
 80093cc:	61a2      	str	r2, [r4, #24]
 80093ce:	6922      	ldr	r2, [r4, #16]
 80093d0:	b942      	cbnz	r2, 80093e4 <__swsetup_r+0xa4>
 80093d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093d6:	d1c5      	bne.n	8009364 <__swsetup_r+0x24>
 80093d8:	bd38      	pop	{r3, r4, r5, pc}
 80093da:	0799      	lsls	r1, r3, #30
 80093dc:	bf58      	it	pl
 80093de:	6962      	ldrpl	r2, [r4, #20]
 80093e0:	60a2      	str	r2, [r4, #8]
 80093e2:	e7f4      	b.n	80093ce <__swsetup_r+0x8e>
 80093e4:	2000      	movs	r0, #0
 80093e6:	e7f7      	b.n	80093d8 <__swsetup_r+0x98>
 80093e8:	20000020 	.word	0x20000020

080093ec <__swhatbuf_r>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	460c      	mov	r4, r1
 80093f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f4:	2900      	cmp	r1, #0
 80093f6:	b096      	sub	sp, #88	@ 0x58
 80093f8:	4615      	mov	r5, r2
 80093fa:	461e      	mov	r6, r3
 80093fc:	da0d      	bge.n	800941a <__swhatbuf_r+0x2e>
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009404:	f04f 0100 	mov.w	r1, #0
 8009408:	bf14      	ite	ne
 800940a:	2340      	movne	r3, #64	@ 0x40
 800940c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009410:	2000      	movs	r0, #0
 8009412:	6031      	str	r1, [r6, #0]
 8009414:	602b      	str	r3, [r5, #0]
 8009416:	b016      	add	sp, #88	@ 0x58
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	466a      	mov	r2, sp
 800941c:	f000 f8ae 	bl	800957c <_fstat_r>
 8009420:	2800      	cmp	r0, #0
 8009422:	dbec      	blt.n	80093fe <__swhatbuf_r+0x12>
 8009424:	9901      	ldr	r1, [sp, #4]
 8009426:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800942a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800942e:	4259      	negs	r1, r3
 8009430:	4159      	adcs	r1, r3
 8009432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009436:	e7eb      	b.n	8009410 <__swhatbuf_r+0x24>

08009438 <__smakebuf_r>:
 8009438:	898b      	ldrh	r3, [r1, #12]
 800943a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800943c:	079d      	lsls	r5, r3, #30
 800943e:	4606      	mov	r6, r0
 8009440:	460c      	mov	r4, r1
 8009442:	d507      	bpl.n	8009454 <__smakebuf_r+0x1c>
 8009444:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	6123      	str	r3, [r4, #16]
 800944c:	2301      	movs	r3, #1
 800944e:	6163      	str	r3, [r4, #20]
 8009450:	b003      	add	sp, #12
 8009452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009454:	ab01      	add	r3, sp, #4
 8009456:	466a      	mov	r2, sp
 8009458:	f7ff ffc8 	bl	80093ec <__swhatbuf_r>
 800945c:	9f00      	ldr	r7, [sp, #0]
 800945e:	4605      	mov	r5, r0
 8009460:	4639      	mov	r1, r7
 8009462:	4630      	mov	r0, r6
 8009464:	f7ff fc26 	bl	8008cb4 <_malloc_r>
 8009468:	b948      	cbnz	r0, 800947e <__smakebuf_r+0x46>
 800946a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946e:	059a      	lsls	r2, r3, #22
 8009470:	d4ee      	bmi.n	8009450 <__smakebuf_r+0x18>
 8009472:	f023 0303 	bic.w	r3, r3, #3
 8009476:	f043 0302 	orr.w	r3, r3, #2
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	e7e2      	b.n	8009444 <__smakebuf_r+0xc>
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	6020      	str	r0, [r4, #0]
 8009482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009486:	81a3      	strh	r3, [r4, #12]
 8009488:	9b01      	ldr	r3, [sp, #4]
 800948a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800948e:	b15b      	cbz	r3, 80094a8 <__smakebuf_r+0x70>
 8009490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009494:	4630      	mov	r0, r6
 8009496:	f000 f80b 	bl	80094b0 <_isatty_r>
 800949a:	b128      	cbz	r0, 80094a8 <__smakebuf_r+0x70>
 800949c:	89a3      	ldrh	r3, [r4, #12]
 800949e:	f023 0303 	bic.w	r3, r3, #3
 80094a2:	f043 0301 	orr.w	r3, r3, #1
 80094a6:	81a3      	strh	r3, [r4, #12]
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	431d      	orrs	r5, r3
 80094ac:	81a5      	strh	r5, [r4, #12]
 80094ae:	e7cf      	b.n	8009450 <__smakebuf_r+0x18>

080094b0 <_isatty_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4d06      	ldr	r5, [pc, #24]	@ (80094cc <_isatty_r+0x1c>)
 80094b4:	2300      	movs	r3, #0
 80094b6:	4604      	mov	r4, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	602b      	str	r3, [r5, #0]
 80094bc:	f7f8 f8fb 	bl	80016b6 <_isatty>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_isatty_r+0x1a>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_isatty_r+0x1a>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	20000dc4 	.word	0x20000dc4

080094d0 <_lseek_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4d07      	ldr	r5, [pc, #28]	@ (80094f0 <_lseek_r+0x20>)
 80094d4:	4604      	mov	r4, r0
 80094d6:	4608      	mov	r0, r1
 80094d8:	4611      	mov	r1, r2
 80094da:	2200      	movs	r2, #0
 80094dc:	602a      	str	r2, [r5, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	f7f8 f8f4 	bl	80016cc <_lseek>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_lseek_r+0x1e>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_lseek_r+0x1e>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	20000dc4 	.word	0x20000dc4

080094f4 <_read_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4d07      	ldr	r5, [pc, #28]	@ (8009514 <_read_r+0x20>)
 80094f8:	4604      	mov	r4, r0
 80094fa:	4608      	mov	r0, r1
 80094fc:	4611      	mov	r1, r2
 80094fe:	2200      	movs	r2, #0
 8009500:	602a      	str	r2, [r5, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	f7f8 f89e 	bl	8001644 <_read>
 8009508:	1c43      	adds	r3, r0, #1
 800950a:	d102      	bne.n	8009512 <_read_r+0x1e>
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	b103      	cbz	r3, 8009512 <_read_r+0x1e>
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	20000dc4 	.word	0x20000dc4

08009518 <_sbrk_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4d06      	ldr	r5, [pc, #24]	@ (8009534 <_sbrk_r+0x1c>)
 800951c:	2300      	movs	r3, #0
 800951e:	4604      	mov	r4, r0
 8009520:	4608      	mov	r0, r1
 8009522:	602b      	str	r3, [r5, #0]
 8009524:	f7f8 f8e0 	bl	80016e8 <_sbrk>
 8009528:	1c43      	adds	r3, r0, #1
 800952a:	d102      	bne.n	8009532 <_sbrk_r+0x1a>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	b103      	cbz	r3, 8009532 <_sbrk_r+0x1a>
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	bd38      	pop	{r3, r4, r5, pc}
 8009534:	20000dc4 	.word	0x20000dc4

08009538 <_write_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4d07      	ldr	r5, [pc, #28]	@ (8009558 <_write_r+0x20>)
 800953c:	4604      	mov	r4, r0
 800953e:	4608      	mov	r0, r1
 8009540:	4611      	mov	r1, r2
 8009542:	2200      	movs	r2, #0
 8009544:	602a      	str	r2, [r5, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	f7f7 ff52 	bl	80013f0 <_write>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_write_r+0x1e>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_write_r+0x1e>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	20000dc4 	.word	0x20000dc4

0800955c <_close_r>:
 800955c:	b538      	push	{r3, r4, r5, lr}
 800955e:	4d06      	ldr	r5, [pc, #24]	@ (8009578 <_close_r+0x1c>)
 8009560:	2300      	movs	r3, #0
 8009562:	4604      	mov	r4, r0
 8009564:	4608      	mov	r0, r1
 8009566:	602b      	str	r3, [r5, #0]
 8009568:	f7f8 f889 	bl	800167e <_close>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_close_r+0x1a>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_close_r+0x1a>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	20000dc4 	.word	0x20000dc4

0800957c <_fstat_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d07      	ldr	r5, [pc, #28]	@ (800959c <_fstat_r+0x20>)
 8009580:	2300      	movs	r3, #0
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	4611      	mov	r1, r2
 8009588:	602b      	str	r3, [r5, #0]
 800958a:	f7f8 f884 	bl	8001696 <_fstat>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	d102      	bne.n	8009598 <_fstat_r+0x1c>
 8009592:	682b      	ldr	r3, [r5, #0]
 8009594:	b103      	cbz	r3, 8009598 <_fstat_r+0x1c>
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	bd38      	pop	{r3, r4, r5, pc}
 800959a:	bf00      	nop
 800959c:	20000dc4 	.word	0x20000dc4

080095a0 <_free_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4605      	mov	r5, r0
 80095a4:	2900      	cmp	r1, #0
 80095a6:	d041      	beq.n	800962c <_free_r+0x8c>
 80095a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ac:	1f0c      	subs	r4, r1, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bfb8      	it	lt
 80095b2:	18e4      	addlt	r4, r4, r3
 80095b4:	f7ff fe36 	bl	8009224 <__malloc_lock>
 80095b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009630 <_free_r+0x90>)
 80095ba:	6813      	ldr	r3, [r2, #0]
 80095bc:	b933      	cbnz	r3, 80095cc <_free_r+0x2c>
 80095be:	6063      	str	r3, [r4, #4]
 80095c0:	6014      	str	r4, [r2, #0]
 80095c2:	4628      	mov	r0, r5
 80095c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095c8:	f7ff be32 	b.w	8009230 <__malloc_unlock>
 80095cc:	42a3      	cmp	r3, r4
 80095ce:	d908      	bls.n	80095e2 <_free_r+0x42>
 80095d0:	6820      	ldr	r0, [r4, #0]
 80095d2:	1821      	adds	r1, r4, r0
 80095d4:	428b      	cmp	r3, r1
 80095d6:	bf01      	itttt	eq
 80095d8:	6819      	ldreq	r1, [r3, #0]
 80095da:	685b      	ldreq	r3, [r3, #4]
 80095dc:	1809      	addeq	r1, r1, r0
 80095de:	6021      	streq	r1, [r4, #0]
 80095e0:	e7ed      	b.n	80095be <_free_r+0x1e>
 80095e2:	461a      	mov	r2, r3
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	b10b      	cbz	r3, 80095ec <_free_r+0x4c>
 80095e8:	42a3      	cmp	r3, r4
 80095ea:	d9fa      	bls.n	80095e2 <_free_r+0x42>
 80095ec:	6811      	ldr	r1, [r2, #0]
 80095ee:	1850      	adds	r0, r2, r1
 80095f0:	42a0      	cmp	r0, r4
 80095f2:	d10b      	bne.n	800960c <_free_r+0x6c>
 80095f4:	6820      	ldr	r0, [r4, #0]
 80095f6:	4401      	add	r1, r0
 80095f8:	1850      	adds	r0, r2, r1
 80095fa:	4283      	cmp	r3, r0
 80095fc:	6011      	str	r1, [r2, #0]
 80095fe:	d1e0      	bne.n	80095c2 <_free_r+0x22>
 8009600:	6818      	ldr	r0, [r3, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	6053      	str	r3, [r2, #4]
 8009606:	4408      	add	r0, r1
 8009608:	6010      	str	r0, [r2, #0]
 800960a:	e7da      	b.n	80095c2 <_free_r+0x22>
 800960c:	d902      	bls.n	8009614 <_free_r+0x74>
 800960e:	230c      	movs	r3, #12
 8009610:	602b      	str	r3, [r5, #0]
 8009612:	e7d6      	b.n	80095c2 <_free_r+0x22>
 8009614:	6820      	ldr	r0, [r4, #0]
 8009616:	1821      	adds	r1, r4, r0
 8009618:	428b      	cmp	r3, r1
 800961a:	bf04      	itt	eq
 800961c:	6819      	ldreq	r1, [r3, #0]
 800961e:	685b      	ldreq	r3, [r3, #4]
 8009620:	6063      	str	r3, [r4, #4]
 8009622:	bf04      	itt	eq
 8009624:	1809      	addeq	r1, r1, r0
 8009626:	6021      	streq	r1, [r4, #0]
 8009628:	6054      	str	r4, [r2, #4]
 800962a:	e7ca      	b.n	80095c2 <_free_r+0x22>
 800962c:	bd38      	pop	{r3, r4, r5, pc}
 800962e:	bf00      	nop
 8009630:	20000dc0 	.word	0x20000dc0

08009634 <_init>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	bf00      	nop
 8009638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963a:	bc08      	pop	{r3}
 800963c:	469e      	mov	lr, r3
 800963e:	4770      	bx	lr

08009640 <_fini>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	bf00      	nop
 8009644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009646:	bc08      	pop	{r3}
 8009648:	469e      	mov	lr, r3
 800964a:	4770      	bx	lr
