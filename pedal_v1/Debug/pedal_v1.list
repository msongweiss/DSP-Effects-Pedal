
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007870  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080079f8  080079f8  000089f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a18  08007a18  00009014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007a18  08007a18  00008a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a20  08007a20  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a20  08007a20  00008a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a24  08007a24  00008a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007a28  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009014  2**0
                  CONTENTS
 10 .bss          00000e1c  20000014  20000014  00009014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e30  20000e30  00009014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001daaa  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049b8  00000000  00000000  00026aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a78  00000000  00000000  0002b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000148f  00000000  00000000  0002cf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270cd  00000000  00000000  0002e3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023b50  00000000  00000000  0005547c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4f66  00000000  00000000  00078fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015df32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ee4  00000000  00000000  0015df78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00164e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079e0 	.word	0x080079e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080079e0 	.word	0x080079e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000506:	4b22      	ldr	r3, [pc, #136]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000508:	4a22      	ldr	r2, [pc, #136]	@ (8000594 <MX_ADC1_Init+0xa0>)
 800050a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800050c:	4b20      	ldr	r3, [pc, #128]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800050e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000512:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000514:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800051a:	4b1d      	ldr	r3, [pc, #116]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800051c:	2201      	movs	r2, #1
 800051e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000520:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000522:	2201      	movs	r2, #1
 8000524:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000526:	4b1a      	ldr	r3, [pc, #104]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800052e:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000536:	4b16      	ldr	r3, [pc, #88]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000538:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800053c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053e:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000544:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000546:	2201      	movs	r2, #1
 8000548:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800054a:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800054c:	2201      	movs	r2, #1
 800054e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000552:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000554:	2201      	movs	r2, #1
 8000556:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000558:	480d      	ldr	r0, [pc, #52]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800055a:	f001 f9e3 	bl	8001924 <HAL_ADC_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000564:	f000 fe58 	bl	8001218 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000568:	2301      	movs	r3, #1
 800056a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800056c:	2301      	movs	r3, #1
 800056e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000570:	2306      	movs	r3, #6
 8000572:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000574:	463b      	mov	r3, r7
 8000576:	4619      	mov	r1, r3
 8000578:	4805      	ldr	r0, [pc, #20]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800057a:	f001 fb45 	bl	8001c08 <HAL_ADC_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000584:	f000 fe48 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000030 	.word	0x20000030
 8000594:	40012000 	.word	0x40012000

08000598 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000674 <HAL_ADC_MspInit+0xdc>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d158      	bne.n	800066c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b2e      	ldr	r3, [pc, #184]	@ (8000678 <HAL_ADC_MspInit+0xe0>)
 80005c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005c2:	4a2d      	ldr	r2, [pc, #180]	@ (8000678 <HAL_ADC_MspInit+0xe0>)
 80005c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000678 <HAL_ADC_MspInit+0xe0>)
 80005cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <HAL_ADC_MspInit+0xe0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a26      	ldr	r2, [pc, #152]	@ (8000678 <HAL_ADC_MspInit+0xe0>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b24      	ldr	r3, [pc, #144]	@ (8000678 <HAL_ADC_MspInit+0xe0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005f2:	2302      	movs	r3, #2
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f6:	2303      	movs	r3, #3
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	481d      	ldr	r0, [pc, #116]	@ (800067c <HAL_ADC_MspInit+0xe4>)
 8000606:	f002 fa9b 	bl	8002b40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800060a:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 800060c:	4a1d      	ldr	r2, [pc, #116]	@ (8000684 <HAL_ADC_MspInit+0xec>)
 800060e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000610:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000616:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800061c:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000622:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 8000624:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000628:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 800062c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000630:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000632:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 8000634:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000638:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 800063c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000640:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 8000644:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000648:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800064a:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 8000652:	f001 ff05 	bl	8002460 <HAL_DMA_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800065c:	f000 fddc 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a07      	ldr	r2, [pc, #28]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 8000664:	639a      	str	r2, [r3, #56]	@ 0x38
 8000666:	4a06      	ldr	r2, [pc, #24]	@ (8000680 <HAL_ADC_MspInit+0xe8>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	@ 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40012000 	.word	0x40012000
 8000678:	40023800 	.word	0x40023800
 800067c:	40020000 	.word	0x40020000
 8000680:	20000078 	.word	0x20000078
 8000684:	40026410 	.word	0x40026410

08000688 <cs43l22_unmute>:
			                                    1, &i2c_data, 1, 100);
	return status_i2c;
}

int cs43l22_unmute()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
	uint8_t i2c_data;
	HAL_StatusTypeDef status_i2c = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]
	// unmute headphone A and B, page 52
	i2c_data = 0x00;
 8000692:	2300      	movs	r3, #0
 8000694:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADAVOL_REG,
 8000696:	2364      	movs	r3, #100	@ 0x64
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	1dbb      	adds	r3, r7, #6
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	2222      	movs	r2, #34	@ 0x22
 80006a6:	2194      	movs	r1, #148	@ 0x94
 80006a8:	4813      	ldr	r0, [pc, #76]	@ (80006f8 <cs43l22_unmute+0x70>)
 80006aa:	f002 fd43 	bl	8003134 <HAL_I2C_Mem_Write>
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
		                                    1, &i2c_data, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADBVOL_REG,
 80006b2:	2364      	movs	r3, #100	@ 0x64
 80006b4:	9302      	str	r3, [sp, #8]
 80006b6:	2301      	movs	r3, #1
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	1dbb      	adds	r3, r7, #6
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2301      	movs	r3, #1
 80006c0:	2223      	movs	r2, #35	@ 0x23
 80006c2:	2194      	movs	r1, #148	@ 0x94
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <cs43l22_unmute+0x70>)
 80006c6:	f002 fd35 	bl	8003134 <HAL_I2C_Mem_Write>
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
			                                    1, &i2c_data, 1, 100);
	// turn on headphone
	i2c_data = 0xaf;
 80006ce:	23af      	movs	r3, #175	@ 0xaf
 80006d0:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 80006d2:	2364      	movs	r3, #100	@ 0x64
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2301      	movs	r3, #1
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	1dbb      	adds	r3, r7, #6
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2301      	movs	r3, #1
 80006e0:	2204      	movs	r2, #4
 80006e2:	2194      	movs	r1, #148	@ 0x94
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <cs43l22_unmute+0x70>)
 80006e6:	f002 fd25 	bl	8003134 <HAL_I2C_Mem_Write>
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
				                                    1, &i2c_data, 1, 100);

	return status_i2c;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000ec 	.word	0x200000ec

080006fc <cs43l22_init>:
codec_state get_cs43l22_state()
{
	return cs43l22_state;
}
int cs43l22_init()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status_i2c = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_data;
	HAL_GPIO_WritePin(CS43L22_RST_Port, CS43L22_RST_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2110      	movs	r1, #16
 800070a:	4853      	ldr	r0, [pc, #332]	@ (8000858 <cs43l22_init+0x15c>)
 800070c:	f002 fbb4 	bl	8002e78 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000710:	2064      	movs	r0, #100	@ 0x64
 8000712:	f001 f8e3 	bl	80018dc <HAL_Delay>
	HAL_GPIO_WritePin(CS43L22_RST_Port, CS43L22_RST_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2110      	movs	r1, #16
 800071a:	484f      	ldr	r0, [pc, #316]	@ (8000858 <cs43l22_init+0x15c>)
 800071c:	f002 fbac 	bl	8002e78 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000720:	2064      	movs	r0, #100	@ 0x64
 8000722:	f001 f8db 	bl	80018dc <HAL_Delay>
	// power off the codec, page 38
	i2c_data = 0x01;
 8000726:	2301      	movs	r3, #1
 8000728:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 800072a:	2364      	movs	r3, #100	@ 0x64
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	1dbb      	adds	r3, r7, #6
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	2202      	movs	r2, #2
 800073a:	2194      	movs	r1, #148	@ 0x94
 800073c:	4847      	ldr	r0, [pc, #284]	@ (800085c <cs43l22_init+0x160>)
 800073e:	f002 fcf9 	bl	8003134 <HAL_I2C_Mem_Write>
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	                                    1, &i2c_data, 1, 100);

	// output device is headphone 0xaf, page 38
	i2c_data = 0b10101111;
 8000746:	23af      	movs	r3, #175	@ 0xaf
 8000748:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 800074a:	2364      	movs	r3, #100	@ 0x64
 800074c:	9302      	str	r3, [sp, #8]
 800074e:	2301      	movs	r3, #1
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	1dbb      	adds	r3, r7, #6
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2301      	movs	r3, #1
 8000758:	2204      	movs	r2, #4
 800075a:	2194      	movs	r1, #148	@ 0x94
 800075c:	483f      	ldr	r0, [pc, #252]	@ (800085c <cs43l22_init+0x160>)
 800075e:	f002 fce9 	bl	8003134 <HAL_I2C_Mem_Write>
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <cs43l22_init+0x74>
	{
		return status_i2c;
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	e06f      	b.n	8000850 <cs43l22_init+0x154>
	}

	// clock auto-detect and divide mclk by 2
	i2c_data = 0b10000001;
 8000770:	2381      	movs	r3, #129	@ 0x81
 8000772:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_CLKCON_REG,
 8000774:	2364      	movs	r3, #100	@ 0x64
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	1dbb      	adds	r3, r7, #6
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	2205      	movs	r2, #5
 8000784:	2194      	movs	r1, #148	@ 0x94
 8000786:	4835      	ldr	r0, [pc, #212]	@ (800085c <cs43l22_init+0x160>)
 8000788:	f002 fcd4 	bl	8003134 <HAL_I2C_Mem_Write>
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <cs43l22_init+0x9e>
	{
		return status_i2c;
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	e05a      	b.n	8000850 <cs43l22_init+0x154>
	}

	cs43l22_set_volume(200);
 800079a:	20c8      	movs	r0, #200	@ 0xc8
 800079c:	f000 f862 	bl	8000864 <cs43l22_set_volume>

	// i2s up to 24-bit interface, 16-bit data length, page 41
	i2c_data = 0b00000111;
 80007a0:	2307      	movs	r3, #7
 80007a2:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_INTERCON1_REG,
 80007a4:	2364      	movs	r3, #100	@ 0x64
 80007a6:	9302      	str	r3, [sp, #8]
 80007a8:	2301      	movs	r3, #1
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	1dbb      	adds	r3, r7, #6
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2301      	movs	r3, #1
 80007b2:	2206      	movs	r2, #6
 80007b4:	2194      	movs	r1, #148	@ 0x94
 80007b6:	4829      	ldr	r0, [pc, #164]	@ (800085c <cs43l22_init+0x160>)
 80007b8:	f002 fcbc 	bl	8003134 <HAL_I2C_Mem_Write>
 80007bc:	4603      	mov	r3, r0
 80007be:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <cs43l22_init+0xce>
	{
		return status_i2c;
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	e042      	b.n	8000850 <cs43l22_init+0x154>
	}

	// enable digital soft ramp and de-emphasis filter
	i2c_data = 0b00000110;
 80007ca:	2306      	movs	r3, #6
 80007cc:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MISCON_REG,
 80007ce:	2364      	movs	r3, #100	@ 0x64
 80007d0:	9302      	str	r3, [sp, #8]
 80007d2:	2301      	movs	r3, #1
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	1dbb      	adds	r3, r7, #6
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2301      	movs	r3, #1
 80007dc:	220e      	movs	r2, #14
 80007de:	2194      	movs	r1, #148	@ 0x94
 80007e0:	481e      	ldr	r0, [pc, #120]	@ (800085c <cs43l22_init+0x160>)
 80007e2:	f002 fca7 	bl	8003134 <HAL_I2C_Mem_Write>
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
											1, &i2c_data, 1, 100);
	if (status_i2c)
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <cs43l22_init+0xf8>
	{
		return status_i2c;
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	e02d      	b.n	8000850 <cs43l22_init+0x154>
	}

	//  PCM VOlume adjust, page 47
	i2c_data = 0x00;
 80007f4:	2300      	movs	r3, #0
 80007f6:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMAVOLCON_REG,
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	9302      	str	r3, [sp, #8]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	1dbb      	adds	r3, r7, #6
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2301      	movs	r3, #1
 8000806:	221a      	movs	r2, #26
 8000808:	2194      	movs	r1, #148	@ 0x94
 800080a:	4814      	ldr	r0, [pc, #80]	@ (800085c <cs43l22_init+0x160>)
 800080c:	f002 fc92 	bl	8003134 <HAL_I2C_Mem_Write>
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <cs43l22_init+0x122>
	{
		return status_i2c;
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	e018      	b.n	8000850 <cs43l22_init+0x154>
	}

	i2c_data = 0x00;
 800081e:	2300      	movs	r3, #0
 8000820:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMBVOLCON_REG,
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dbb      	adds	r3, r7, #6
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	221b      	movs	r2, #27
 8000832:	2194      	movs	r1, #148	@ 0x94
 8000834:	4809      	ldr	r0, [pc, #36]	@ (800085c <cs43l22_init+0x160>)
 8000836:	f002 fc7d 	bl	8003134 <HAL_I2C_Mem_Write>
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <cs43l22_init+0x14c>
	{
		return status_i2c;
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	e003      	b.n	8000850 <cs43l22_init+0x154>
	}

	cs43l22_state = READY;
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <cs43l22_init+0x164>)
 800084a:	2205      	movs	r2, #5
 800084c:	701a      	strb	r2, [r3, #0]
	return 0;
 800084e:	2300      	movs	r3, #0

}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40020c00 	.word	0x40020c00
 800085c:	200000ec 	.word	0x200000ec
 8000860:	20000000 	.word	0x20000000

08000864 <cs43l22_set_volume>:
	HAL_I2C_Mem_Read(&CS43L22_I2C, CS43L22_I2C_ADDRESS, reg,
			1, reg_value, 1, 100);
}

int cs43l22_set_volume(uint8_t volume)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af04      	add	r7, sp, #16
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status_i2c = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73fb      	strb	r3, [r7, #15]
	// page 52
	if (volume > 0xe6)
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2be6      	cmp	r3, #230	@ 0xe6
 8000876:	d904      	bls.n	8000882 <cs43l22_set_volume+0x1e>
	{
		volume -= 0xe7;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	3319      	adds	r3, #25
 800087c:	b2db      	uxtb	r3, r3
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	e003      	b.n	800088a <cs43l22_set_volume+0x26>
	}
	else
	{
		volume += 0x19;
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	3319      	adds	r3, #25
 8000886:	b2db      	uxtb	r3, r3
 8000888:	71fb      	strb	r3, [r7, #7]
	}
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASAVOL_REG,
 800088a:	2364      	movs	r3, #100	@ 0x64
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	2301      	movs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	2220      	movs	r2, #32
 800089a:	2194      	movs	r1, #148	@ 0x94
 800089c:	480b      	ldr	r0, [pc, #44]	@ (80008cc <cs43l22_set_volume+0x68>)
 800089e:	f002 fc49 	bl	8003134 <HAL_I2C_Mem_Write>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]
											1, &volume, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASBVOL_REG,
 80008a6:	2364      	movs	r3, #100	@ 0x64
 80008a8:	9302      	str	r3, [sp, #8]
 80008aa:	2301      	movs	r3, #1
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	2301      	movs	r3, #1
 80008b4:	2221      	movs	r2, #33	@ 0x21
 80008b6:	2194      	movs	r1, #148	@ 0x94
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <cs43l22_set_volume+0x68>)
 80008ba:	f002 fc3b 	bl	8003134 <HAL_I2C_Mem_Write>
 80008be:	4603      	mov	r3, r0
 80008c0:	73fb      	strb	r3, [r7, #15]
												1, &volume, 1, 100);
	return status_i2c;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]

}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000ec 	.word	0x200000ec

080008d0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008d6:	463b      	mov	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008de:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <MX_DAC_Init+0x4c>)
 80008e0:	4a0f      	ldr	r2, [pc, #60]	@ (8000920 <MX_DAC_Init+0x50>)
 80008e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008e4:	480d      	ldr	r0, [pc, #52]	@ (800091c <MX_DAC_Init+0x4c>)
 80008e6:	f001 fd40 	bl	800236a <HAL_DAC_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008f0:	f000 fc92 	bl	8001218 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	4619      	mov	r1, r3
 8000902:	4806      	ldr	r0, [pc, #24]	@ (800091c <MX_DAC_Init+0x4c>)
 8000904:	f001 fd53 	bl	80023ae <HAL_DAC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800090e:	f000 fc83 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000d8 	.word	0x200000d8
 8000920:	40007400 	.word	0x40007400

08000924 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <HAL_DAC_MspInit+0x7c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d127      	bne.n	8000996 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <HAL_DAC_MspInit+0x80>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a15      	ldr	r2, [pc, #84]	@ (80009a4 <HAL_DAC_MspInit+0x80>)
 8000950:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <HAL_DAC_MspInit+0x80>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <HAL_DAC_MspInit+0x80>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a0e      	ldr	r2, [pc, #56]	@ (80009a4 <HAL_DAC_MspInit+0x80>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <HAL_DAC_MspInit+0x80>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800097e:	2310      	movs	r3, #16
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <HAL_DAC_MspInit+0x84>)
 8000992:	f002 f8d5 	bl	8002b40 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	@ 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40007400 	.word	0x40007400
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_DMA_Init+0x78>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000a24 <MX_DMA_Init+0x78>)
 80009bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_DMA_Init+0x78>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <MX_DMA_Init+0x78>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a13      	ldr	r2, [pc, #76]	@ (8000a24 <MX_DMA_Init+0x78>)
 80009d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_DMA_Init+0x78>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	200b      	movs	r0, #11
 80009f0:	f001 fc85 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009f4:	200b      	movs	r0, #11
 80009f6:	f001 fc9e 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2010      	movs	r0, #16
 8000a00:	f001 fc7d 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a04:	2010      	movs	r0, #16
 8000a06:	f001 fc96 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2038      	movs	r0, #56	@ 0x38
 8000a10:	f001 fc75 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a14:	2038      	movs	r0, #56	@ 0x38
 8000a16:	f001 fc8e 	bl	8002336 <HAL_NVIC_EnableIRQ>

}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	@ 0x30
 8000a2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	4b72      	ldr	r3, [pc, #456]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a71      	ldr	r2, [pc, #452]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a48:	f043 0310 	orr.w	r3, r3, #16
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b6f      	ldr	r3, [pc, #444]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0310 	and.w	r3, r3, #16
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	4b6b      	ldr	r3, [pc, #428]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a6a      	ldr	r2, [pc, #424]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b68      	ldr	r3, [pc, #416]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b64      	ldr	r3, [pc, #400]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a63      	ldr	r2, [pc, #396]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b61      	ldr	r3, [pc, #388]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b5d      	ldr	r3, [pc, #372]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a5c      	ldr	r2, [pc, #368]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b56      	ldr	r3, [pc, #344]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a55      	ldr	r2, [pc, #340]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b53      	ldr	r3, [pc, #332]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b4f      	ldr	r3, [pc, #316]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a4e      	ldr	r2, [pc, #312]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b4c      	ldr	r3, [pc, #304]	@ (8000c0c <MX_GPIO_Init+0x1e4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2108      	movs	r1, #8
 8000aea:	4849      	ldr	r0, [pc, #292]	@ (8000c10 <MX_GPIO_Init+0x1e8>)
 8000aec:	f002 f9c4 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2101      	movs	r1, #1
 8000af4:	4847      	ldr	r0, [pc, #284]	@ (8000c14 <MX_GPIO_Init+0x1ec>)
 8000af6:	f002 f9bf 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000afa:	2200      	movs	r2, #0
 8000afc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000b00:	4845      	ldr	r0, [pc, #276]	@ (8000c18 <MX_GPIO_Init+0x1f0>)
 8000b02:	f002 f9b9 	bl	8002e78 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b06:	2308      	movs	r3, #8
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	483c      	ldr	r0, [pc, #240]	@ (8000c10 <MX_GPIO_Init+0x1e8>)
 8000b1e:	f002 f80f 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4836      	ldr	r0, [pc, #216]	@ (8000c14 <MX_GPIO_Init+0x1ec>)
 8000b3a:	f002 f801 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b4e:	2305      	movs	r3, #5
 8000b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	482e      	ldr	r0, [pc, #184]	@ (8000c14 <MX_GPIO_Init+0x1ec>)
 8000b5a:	f001 fff1 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b62:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	482a      	ldr	r0, [pc, #168]	@ (8000c1c <MX_GPIO_Init+0x1f4>)
 8000b74:	f001 ffe4 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4825      	ldr	r0, [pc, #148]	@ (8000c20 <MX_GPIO_Init+0x1f8>)
 8000b8c:	f001 ffd8 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	481c      	ldr	r0, [pc, #112]	@ (8000c20 <MX_GPIO_Init+0x1f8>)
 8000bae:	f001 ffc7 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bb2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000bb6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4813      	ldr	r0, [pc, #76]	@ (8000c18 <MX_GPIO_Init+0x1f0>)
 8000bcc:	f001 ffb8 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bd0:	2320      	movs	r3, #32
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <MX_GPIO_Init+0x1f0>)
 8000be4:	f001 ffac 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bec:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <MX_GPIO_Init+0x1e8>)
 8000bfe:	f001 ff9f 	bl	8002b40 <HAL_GPIO_Init>

}
 8000c02:	bf00      	nop
 8000c04:	3730      	adds	r7, #48	@ 0x30
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40020800 	.word	0x40020800
 8000c18:	40020c00 	.word	0x40020c00
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020400 	.word	0x40020400

08000c24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c2a:	4a13      	ldr	r2, [pc, #76]	@ (8000c78 <MX_I2C1_Init+0x54>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c30:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <MX_I2C1_Init+0x58>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c62:	f002 f923 	bl	8002eac <HAL_I2C_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c6c:	f000 fad4 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000ec 	.word	0x200000ec
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	000186a0 	.word	0x000186a0

08000c80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	@ (8000d04 <HAL_I2C_MspInit+0x84>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d12c      	bne.n	8000cfc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	@ (8000d08 <HAL_I2C_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a17      	ldr	r2, [pc, #92]	@ (8000d08 <HAL_I2C_MspInit+0x88>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <HAL_I2C_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cbe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc4:	2312      	movs	r3, #18
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <HAL_I2C_MspInit+0x8c>)
 8000cdc:	f001 ff30 	bl	8002b40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <HAL_I2C_MspInit+0x88>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce8:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <HAL_I2C_MspInit+0x88>)
 8000cea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <HAL_I2C_MspInit+0x88>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	@ 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40005400 	.word	0x40005400
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020400 	.word	0x40020400

08000d10 <MX_I2S3_Init>:
DMA_HandleTypeDef hdma_i2s3_ext_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_I2S3_Init+0x50>)
 8000d16:	4a13      	ldr	r2, [pc, #76]	@ (8000d64 <MX_I2S3_Init+0x54>)
 8000d18:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_TX;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_I2S3_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_LSB;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_I2S3_Init+0x50>)
 8000d22:	2220      	movs	r2, #32
 8000d24:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_I2S3_Init+0x50>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_I2S3_Init+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <MX_I2S3_Init+0x50>)
 8000d34:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000d38:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_I2S3_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <MX_I2S3_Init+0x50>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_I2S3_Init+0x50>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	@ (8000d60 <MX_I2S3_Init+0x50>)
 8000d4e:	f002 fd5b 	bl	8003808 <HAL_I2S_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_I2S3_Init+0x4c>
  {
    Error_Handler();
 8000d58:	f000 fa5e 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000140 	.word	0x20000140
 8000d64:	40003c00 	.word	0x40003c00

08000d68 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08e      	sub	sp, #56	@ 0x38
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a6c      	ldr	r2, [pc, #432]	@ (8000f44 <HAL_I2S_MspInit+0x1dc>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	f040 80d0 	bne.w	8000f3a <HAL_I2S_MspInit+0x1d2>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000d9e:	2332      	movs	r3, #50	@ 0x32
 8000da0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4618      	mov	r0, r3
 8000dac:	f004 ff5a 	bl	8005c64 <HAL_RCCEx_PeriphCLKConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000db6:	f000 fa2f 	bl	8001218 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b62      	ldr	r3, [pc, #392]	@ (8000f48 <HAL_I2S_MspInit+0x1e0>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	4a61      	ldr	r2, [pc, #388]	@ (8000f48 <HAL_I2S_MspInit+0x1e0>)
 8000dc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dca:	4b5f      	ldr	r3, [pc, #380]	@ (8000f48 <HAL_I2S_MspInit+0x1e0>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b5b      	ldr	r3, [pc, #364]	@ (8000f48 <HAL_I2S_MspInit+0x1e0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a5a      	ldr	r2, [pc, #360]	@ (8000f48 <HAL_I2S_MspInit+0x1e0>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b58      	ldr	r3, [pc, #352]	@ (8000f48 <HAL_I2S_MspInit+0x1e0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b54      	ldr	r3, [pc, #336]	@ (8000f48 <HAL_I2S_MspInit+0x1e0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a53      	ldr	r2, [pc, #332]	@ (8000f48 <HAL_I2S_MspInit+0x1e0>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b51      	ldr	r3, [pc, #324]	@ (8000f48 <HAL_I2S_MspInit+0x1e0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e0e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e20:	2306      	movs	r3, #6
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4848      	ldr	r0, [pc, #288]	@ (8000f4c <HAL_I2S_MspInit+0x1e4>)
 8000e2c:	f001 fe88 	bl	8002b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e42:	2306      	movs	r3, #6
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4840      	ldr	r0, [pc, #256]	@ (8000f50 <HAL_I2S_MspInit+0x1e8>)
 8000e4e:	f001 fe77 	bl	8002b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8000e64:	2305      	movs	r3, #5
 8000e66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4837      	ldr	r0, [pc, #220]	@ (8000f4c <HAL_I2S_MspInit+0x1e4>)
 8000e70:	f001 fe66 	bl	8002b40 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8000e74:	4b37      	ldr	r3, [pc, #220]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000e76:	4a38      	ldr	r2, [pc, #224]	@ (8000f58 <HAL_I2S_MspInit+0x1f0>)
 8000e78:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000e7a:	4b36      	ldr	r3, [pc, #216]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000e7c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000e80:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e82:	4b34      	ldr	r3, [pc, #208]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e88:	4b32      	ldr	r3, [pc, #200]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8e:	4b31      	ldr	r3, [pc, #196]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000e90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e94:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e96:	4b2f      	ldr	r3, [pc, #188]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000e98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e9c:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000ea0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ea4:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000ea8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eac:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000eae:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000eb0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000eb4:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb6:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 8000ebc:	4825      	ldr	r0, [pc, #148]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000ebe:	f001 facf 	bl	8002460 <HAL_DMA_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_I2S_MspInit+0x164>
    {
      Error_Handler();
 8000ec8:	f000 f9a6 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s3_ext_rx);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000ed0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ed2:	4a20      	ldr	r2, [pc, #128]	@ (8000f54 <HAL_I2S_MspInit+0x1ec>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000eda:	4a21      	ldr	r2, [pc, #132]	@ (8000f60 <HAL_I2S_MspInit+0x1f8>)
 8000edc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000ee6:	2240      	movs	r2, #64	@ 0x40
 8000ee8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000ef2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000efa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000efe:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f00:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000f02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f06:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000f08:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000f0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f0e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000f12:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f16:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000f1e:	480f      	ldr	r0, [pc, #60]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000f20:	f001 fa9e 	bl	8002460 <HAL_DMA_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_I2S_MspInit+0x1c6>
    {
      Error_Handler();
 8000f2a:	f000 f975 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000f32:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f34:	4a09      	ldr	r2, [pc, #36]	@ (8000f5c <HAL_I2S_MspInit+0x1f4>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	@ 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40003c00 	.word	0x40003c00
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	20000188 	.word	0x20000188
 8000f58:	40026010 	.word	0x40026010
 8000f5c:	200001e8 	.word	0x200001e8
 8000f60:	40026088 	.word	0x40026088

08000f64 <processData>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void processData() {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
	static float leftIn, leftOut;
	static float rightIn, rightOut;

	for (uint8_t n = 0; n < AUDIO_BLOCK_SIZE; n += 2) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71fb      	strb	r3, [r7, #7]
		// Left channel
		leftIn = ((int16_t)inBufPtr[n] - 2048) / 2047.0f;  // for ADC values
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001028 <processData+0xc4>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f82:	ee07 3a90 	vmov	s15, r3
 8000f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f8a:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800102c <processData+0xc8>
 8000f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f92:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <processData+0xcc>)
 8000f94:	edc3 7a00 	vstr	s15, [r3]
//		if (leftIn > 1.0f) {
//			leftIn -= 2.0f;
//		}
		leftOut = leftIn;
 8000f98:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <processData+0xcc>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a25      	ldr	r2, [pc, #148]	@ (8001034 <processData+0xd0>)
 8000f9e:	6013      	str	r3, [r2, #0]

		outBufPtr[n] = (int16_t) (10000.0f * leftOut);
 8000fa0:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <processData+0xd0>)
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001038 <processData+0xd4>
 8000faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fae:	4b23      	ldr	r3, [pc, #140]	@ (800103c <processData+0xd8>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fbc:	ee17 2a90 	vmov	r2, s15
 8000fc0:	b212      	sxth	r2, r2
 8000fc2:	801a      	strh	r2, [r3, #0]

		// Right channel
		rightIn = ((int16_t)inBufPtr[n + 1] - 2048) / 2047.0f;  // for ADC values
 8000fc4:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <processData+0xc4>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe2:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800102c <processData+0xc8>
 8000fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <processData+0xdc>)
 8000fec:	edc3 7a00 	vstr	s15, [r3]
//		if (rightIn > 1.0f) {
//			rightIn -= 2.0f;
//		}
		rightOut = rightIn;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <processData+0xdc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a13      	ldr	r2, [pc, #76]	@ (8001044 <processData+0xe0>)
 8000ff6:	6013      	str	r3, [r2, #0]

		outBufPtr[n + 1] = (int16_t) (10000.0f * rightOut);
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <processData+0xe0>)
 8000ffa:	edd3 7a00 	vldr	s15, [r3]
 8000ffe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001038 <processData+0xd4>
 8001002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <processData+0xd8>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	3301      	adds	r3, #1
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001016:	ee17 2a90 	vmov	r2, s15
 800101a:	b212      	sxth	r2, r2
 800101c:	801a      	strh	r2, [r3, #0]
	for (uint8_t n = 0; n < AUDIO_BLOCK_SIZE; n += 2) {
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	3302      	adds	r3, #2
 8001022:	71fb      	strb	r3, [r7, #7]
		leftIn = ((int16_t)inBufPtr[n] - 2048) / 2047.0f;  // for ADC values
 8001024:	bf00      	nop
 8001026:	e7a2      	b.n	8000f6e <processData+0xa>
 8001028:	20000848 	.word	0x20000848
 800102c:	44ffe000 	.word	0x44ffe000
 8001030:	20000850 	.word	0x20000850
 8001034:	20000854 	.word	0x20000854
 8001038:	461c4000 	.word	0x461c4000
 800103c:	20000004 	.word	0x20000004
 8001040:	20000858 	.word	0x20000858
 8001044:	2000085c 	.word	0x2000085c

08001048 <HAL_I2S_TxHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// === DMA callbacks ===

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    inBufPtr = &adcData[0];
 8001050:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8001052:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 8001054:	601a      	str	r2, [r3, #0]
    outBufPtr = &dacData[0];
 8001056:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_I2S_TxHalfCpltCallback+0x30>)
 8001058:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_I2S_TxHalfCpltCallback+0x34>)
 800105a:	601a      	str	r2, [r3, #0]

    dataReadyFlag = 1;
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HAL_I2S_TxHalfCpltCallback+0x38>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000848 	.word	0x20000848
 8001074:	20000248 	.word	0x20000248
 8001078:	20000004 	.word	0x20000004
 800107c:	20000448 	.word	0x20000448
 8001080:	2000084c 	.word	0x2000084c

08001084 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    inBufPtr = &adcData[ADC_BUFFER_SIZE / 2];
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <HAL_I2S_TxCpltCallback+0x28>)
 800108e:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <HAL_I2S_TxCpltCallback+0x2c>)
 8001090:	601a      	str	r2, [r3, #0]
    outBufPtr = &dacData[I2S_BUFFER_SIZE / 2];
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <HAL_I2S_TxCpltCallback+0x30>)
 8001094:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <HAL_I2S_TxCpltCallback+0x34>)
 8001096:	601a      	str	r2, [r3, #0]

    dataReadyFlag = 1;
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_I2S_TxCpltCallback+0x38>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000848 	.word	0x20000848
 80010b0:	20000348 	.word	0x20000348
 80010b4:	20000004 	.word	0x20000004
 80010b8:	20000648 	.word	0x20000648
 80010bc:	2000084c 	.word	0x2000084c

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c4:	f000 fb98 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c8:	f000 f83c 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010cc:	f7ff fcac 	bl	8000a28 <MX_GPIO_Init>
  MX_DMA_Init();
 80010d0:	f7ff fc6c 	bl	80009ac <MX_DMA_Init>
  MX_I2C1_Init();
 80010d4:	f7ff fda6 	bl	8000c24 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010d8:	f000 f8a4 	bl	8001224 <MX_SPI1_Init>
  MX_DAC_Init();
 80010dc:	f7ff fbf8 	bl	80008d0 <MX_DAC_Init>
  MX_I2S3_Init();
 80010e0:	f7ff fe16 	bl	8000d10 <MX_I2S3_Init>
  MX_ADC1_Init();
 80010e4:	f7ff fa06 	bl	80004f4 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010e8:	f000 fa94 	bl	8001614 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80010ec:	f000 fa20 	bl	8001530 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80010f0:	f000 f9a8 	bl	8001444 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  cs43l22_init();
 80010f4:	f7ff fb02 	bl	80006fc <cs43l22_init>
  cs43l22_unmute();  // unmute
 80010f8:	f7ff fac6 	bl	8000688 <cs43l22_unmute>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_BUFFER_SIZE);
 80010fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001100:	490b      	ldr	r1, [pc, #44]	@ (8001130 <main+0x70>)
 8001102:	480c      	ldr	r0, [pc, #48]	@ (8001134 <main+0x74>)
 8001104:	f000 fc52 	bl	80019ac <HAL_ADC_Start_DMA>
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)dacData, I2S_BUFFER_SIZE);
 8001108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800110c:	490a      	ldr	r1, [pc, #40]	@ (8001138 <main+0x78>)
 800110e:	480b      	ldr	r0, [pc, #44]	@ (800113c <main+0x7c>)
 8001110:	f002 fcba 	bl	8003a88 <HAL_I2S_Transmit_DMA>
//  cs43l22_play((int16_t*)dacData, I2S_BUFFER_SIZE);
  /* USER CODE END 2 */
  HAL_I2S_TxHalfCpltCallback(&hi2s3);
 8001114:	4809      	ldr	r0, [pc, #36]	@ (800113c <main+0x7c>)
 8001116:	f7ff ff97 	bl	8001048 <HAL_I2S_TxHalfCpltCallback>
  HAL_I2S_TxCpltCallback(&hi2s3);
 800111a:	4808      	ldr	r0, [pc, #32]	@ (800113c <main+0x7c>)
 800111c:	f7ff ffb2 	bl	8001084 <HAL_I2S_TxCpltCallback>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dataReadyFlag) {
 8001120:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <main+0x80>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0fb      	beq.n	8001120 <main+0x60>
		  processData();
 8001128:	f7ff ff1c 	bl	8000f64 <processData>
	  if(dataReadyFlag) {
 800112c:	e7f8      	b.n	8001120 <main+0x60>
 800112e:	bf00      	nop
 8001130:	20000248 	.word	0x20000248
 8001134:	20000030 	.word	0x20000030
 8001138:	20000448 	.word	0x20000448
 800113c:	20000140 	.word	0x20000140
 8001140:	2000084c 	.word	0x2000084c

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	@ 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	2230      	movs	r2, #48	@ 0x30
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f006 fc17 	bl	8007986 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	4b28      	ldr	r3, [pc, #160]	@ (8001210 <SystemClock_Config+0xcc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	4a27      	ldr	r2, [pc, #156]	@ (8001210 <SystemClock_Config+0xcc>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	@ 0x40
 8001178:	4b25      	ldr	r3, [pc, #148]	@ (8001210 <SystemClock_Config+0xcc>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <SystemClock_Config+0xd0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a21      	ldr	r2, [pc, #132]	@ (8001214 <SystemClock_Config+0xd0>)
 800118e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <SystemClock_Config+0xd0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b4:	2308      	movs	r3, #8
 80011b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011b8:	23a8      	movs	r3, #168	@ 0xa8
 80011ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011bc:	2302      	movs	r3, #2
 80011be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011c0:	2307      	movs	r3, #7
 80011c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c4:	f107 0320 	add.w	r3, r7, #32
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 f8b5 	bl	8005338 <HAL_RCC_OscConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011d4:	f000 f820 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d8:	230f      	movs	r3, #15
 80011da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011dc:	2302      	movs	r3, #2
 80011de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2105      	movs	r1, #5
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 fb16 	bl	8005828 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001202:	f000 f809 	bl	8001218 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3750      	adds	r7, #80	@ 0x50
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40007000 	.word	0x40007000

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <Error_Handler+0x8>

08001224 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001228:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <MX_SPI1_Init+0x64>)
 800122a:	4a18      	ldr	r2, [pc, #96]	@ (800128c <MX_SPI1_Init+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <MX_SPI1_Init+0x64>)
 8001230:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001236:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <MX_SPI1_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <MX_SPI1_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001242:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_SPI1_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <MX_SPI1_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_SPI1_Init+0x64>)
 8001250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001254:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125c:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_SPI1_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001268:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <MX_SPI1_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <MX_SPI1_Init+0x64>)
 8001270:	220a      	movs	r2, #10
 8001272:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	@ (8001288 <MX_SPI1_Init+0x64>)
 8001276:	f004 fe35 	bl	8005ee4 <HAL_SPI_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001280:	f7ff ffca 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000860 	.word	0x20000860
 800128c:	40013000 	.word	0x40013000

08001290 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <HAL_SPI_MspInit+0x84>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d12b      	bne.n	800130a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	4a17      	ldr	r2, [pc, #92]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a10      	ldr	r2, [pc, #64]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012ea:	23e0      	movs	r3, #224	@ 0xe0
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012fa:	2305      	movs	r3, #5
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	@ (800131c <HAL_SPI_MspInit+0x8c>)
 8001306:	f001 fc1b 	bl	8002b40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40013000 	.word	0x40013000
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <HAL_MspInit+0x4c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001334:	6453      	str	r3, [r2, #68]	@ 0x44
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	@ 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135e:	2007      	movs	r0, #7
 8001360:	f000 ffc2 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <MemManage_Handler+0x4>

08001388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <UsageFault_Handler+0x4>

08001398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c6:	f000 fa69 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 80013d4:	4802      	ldr	r0, [pc, #8]	@ (80013e0 <DMA1_Stream0_IRQHandler+0x10>)
 80013d6:	f001 f949 	bl	800266c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000188 	.word	0x20000188

080013e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <DMA1_Stream5_IRQHandler+0x10>)
 80013ea:	f001 f93f 	bl	800266c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200001e8 	.word	0x200001e8

080013f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <DMA2_Stream0_IRQHandler+0x10>)
 80013fe:	f001 f935 	bl	800266c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000078 	.word	0x20000078

0800140c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <OTG_FS_IRQHandler+0x10>)
 8001412:	f003 f882 	bl	800451a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000948 	.word	0x20000948

08001420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <SystemInit+0x20>)
 8001426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142a:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <SystemInit+0x20>)
 800142c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144a:	f107 0320 	add.w	r3, r7, #32
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
 8001462:	615a      	str	r2, [r3, #20]
 8001464:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001466:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <MX_TIM2_Init+0xa8>)
 8001468:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800146c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1750-1;
 800146e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <MX_TIM2_Init+0xa8>)
 8001470:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8001474:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <MX_TIM2_Init+0xa8>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800147c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <MX_TIM2_Init+0xa8>)
 800147e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001482:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <MX_TIM2_Init+0xa8>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <MX_TIM2_Init+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001490:	4816      	ldr	r0, [pc, #88]	@ (80014ec <MX_TIM2_Init+0xa8>)
 8001492:	f004 fdb0 	bl	8005ff6 <HAL_TIM_PWM_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800149c:	f7ff febc 	bl	8001218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014a0:	2320      	movs	r3, #32
 80014a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	4619      	mov	r1, r3
 80014ae:	480f      	ldr	r0, [pc, #60]	@ (80014ec <MX_TIM2_Init+0xa8>)
 80014b0:	f005 f90e 	bl	80066d0 <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80014ba:	f7ff fead 	bl	8001218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014be:	2360      	movs	r3, #96	@ 0x60
 80014c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	@ (80014ec <MX_TIM2_Init+0xa8>)
 80014d6:	f004 fddd 	bl	8006094 <HAL_TIM_PWM_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80014e0:	f7ff fe9a 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	@ 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200008b8 	.word	0x200008b8

080014f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001500:	d10d      	bne.n	800151e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_TIM_PWM_MspInit+0x3c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	4a08      	ldr	r2, [pc, #32]	@ (800152c <HAL_TIM_PWM_MspInit+0x3c>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6413      	str	r3, [r2, #64]	@ 0x40
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_TIM_PWM_MspInit+0x3c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800

08001530 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001534:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_USART2_UART_Init+0x4c>)
 8001536:	4a12      	ldr	r2, [pc, #72]	@ (8001580 <MX_USART2_UART_Init+0x50>)
 8001538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <MX_USART2_UART_Init+0x4c>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <MX_USART2_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <MX_USART2_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <MX_USART2_UART_Init+0x4c>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b08      	ldr	r3, [pc, #32]	@ (800157c <MX_USART2_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <MX_USART2_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_USART2_UART_Init+0x4c>)
 8001568:	f005 f92e 	bl	80067c8 <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001572:	f7ff fe51 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000900 	.word	0x20000900
 8001580:	40004400 	.word	0x40004400

08001584 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a19      	ldr	r2, [pc, #100]	@ (8001608 <HAL_UART_MspInit+0x84>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d12b      	bne.n	80015fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <HAL_UART_MspInit+0x88>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	4a17      	ldr	r2, [pc, #92]	@ (800160c <HAL_UART_MspInit+0x88>)
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_UART_MspInit+0x88>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <HAL_UART_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a10      	ldr	r2, [pc, #64]	@ (800160c <HAL_UART_MspInit+0x88>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <HAL_UART_MspInit+0x88>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015de:	230c      	movs	r3, #12
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ee:	2307      	movs	r3, #7
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	@ (8001610 <HAL_UART_MspInit+0x8c>)
 80015fa:	f001 faa1 	bl	8002b40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	@ 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40004400 	.word	0x40004400
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000

08001614 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800161a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800161e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001622:	2204      	movs	r2, #4
 8001624:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001628:	2202      	movs	r2, #2
 800162a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001634:	2202      	movs	r2, #2
 8001636:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800164a:	4b08      	ldr	r3, [pc, #32]	@ (800166c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800164c:	2201      	movs	r2, #1
 800164e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	@ (800166c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001658:	f002 fe50 	bl	80042fc <HAL_PCD_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001662:	f7ff fdd9 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000948 	.word	0x20000948

08001670 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001690:	d147      	bne.n	8001722 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b25      	ldr	r3, [pc, #148]	@ (800172c <HAL_PCD_MspInit+0xbc>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a24      	ldr	r2, [pc, #144]	@ (800172c <HAL_PCD_MspInit+0xbc>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <HAL_PCD_MspInit+0xbc>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80016ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	481b      	ldr	r0, [pc, #108]	@ (8001730 <HAL_PCD_MspInit+0xc0>)
 80016c4:	f001 fa3c 	bl	8002b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80016c8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016da:	230a      	movs	r3, #10
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4812      	ldr	r0, [pc, #72]	@ (8001730 <HAL_PCD_MspInit+0xc0>)
 80016e6:	f001 fa2b 	bl	8002b40 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <HAL_PCD_MspInit+0xbc>)
 80016ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ee:	4a0f      	ldr	r2, [pc, #60]	@ (800172c <HAL_PCD_MspInit+0xbc>)
 80016f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f4:	6353      	str	r3, [r2, #52]	@ 0x34
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <HAL_PCD_MspInit+0xbc>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	4a0b      	ldr	r2, [pc, #44]	@ (800172c <HAL_PCD_MspInit+0xbc>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001704:	6453      	str	r3, [r2, #68]	@ 0x44
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_PCD_MspInit+0xbc>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2043      	movs	r0, #67	@ 0x43
 8001718:	f000 fdf1 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800171c:	2043      	movs	r0, #67	@ 0x43
 800171e:	f000 fe0a 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	@ 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40020000 	.word	0x40020000

08001734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001734:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800176c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001738:	f7ff fe72 	bl	8001420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	@ (8001770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	@ (8001774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	@ (8001780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001762:	f006 f919 	bl	8007998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001766:	f7ff fcab 	bl	80010c0 <main>
  bx  lr    
 800176a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800176c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001774:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001778:	08007a28 	.word	0x08007a28
  ldr r2, =_sbss
 800177c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001780:	20000e30 	.word	0x20000e30

08001784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC_IRQHandler>

08001786 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800179c:	f000 f804 	bl	80017a8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a07      	ldr	r2, [pc, #28]	@ (80017f0 <HAL_I2S_ErrorCallback+0x2c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80017d6:	f7ff ffd6 	bl	8001786 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <HAL_I2S_ErrorCallback+0x30>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d101      	bne.n	80017e8 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 80017e4:	f7ff ffe7 	bl	80017b6 <BSP_AUDIO_IN_Error_Callback>
  }
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40003c00 	.word	0x40003c00
 80017f4:	40003800 	.word	0x40003800

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <HAL_Init+0x40>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <HAL_Init+0x40>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <HAL_Init+0x40>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 fd61 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fd78 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 fd79 	bl	8002352 <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001878:	f000 fd41 	bl	80022fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000008 	.word	0x20000008
 8001894:	20000010 	.word	0x20000010
 8001898:	2000000c 	.word	0x2000000c

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000010 	.word	0x20000010
 80018c0:	20000e2c 	.word	0x20000e2c

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000e2c 	.word	0x20000e2c

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff ffee 	bl	80018c4 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018f4:	d005      	beq.n	8001902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_Delay+0x44>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001902:	bf00      	nop
 8001904:	f7ff ffde 	bl	80018c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8f7      	bhi.n	8001904 <HAL_Delay+0x28>
  {
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000010 	.word	0x20000010

08001924 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e033      	b.n	80019a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7fe fe28 	bl	8000598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	2b00      	cmp	r3, #0
 8001960:	d118      	bne.n	8001994 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800196a:	f023 0302 	bic.w	r3, r3, #2
 800196e:	f043 0202 	orr.w	r2, r3, #2
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fa68 	bl	8001e4c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	f023 0303 	bic.w	r3, r3, #3
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	@ 0x40
 8001992:	e001      	b.n	8001998 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_Start_DMA+0x1e>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e0e9      	b.n	8001b9e <HAL_ADC_Start_DMA+0x1f2>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d018      	beq.n	8001a12 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019f0:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba8 <HAL_ADC_Start_DMA+0x1fc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6d      	ldr	r2, [pc, #436]	@ (8001bac <HAL_ADC_Start_DMA+0x200>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0c9a      	lsrs	r2, r3, #18
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a04:	e002      	b.n	8001a0c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f9      	bne.n	8001a06 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a20:	d107      	bne.n	8001a32 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a30:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	f040 80a1 	bne.w	8001b84 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a80:	d106      	bne.n	8001a90 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f023 0206 	bic.w	r2, r3, #6
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a8e:	e002      	b.n	8001a96 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a9e:	4b44      	ldr	r3, [pc, #272]	@ (8001bb0 <HAL_ADC_Start_DMA+0x204>)
 8001aa0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa6:	4a43      	ldr	r2, [pc, #268]	@ (8001bb4 <HAL_ADC_Start_DMA+0x208>)
 8001aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aae:	4a42      	ldr	r2, [pc, #264]	@ (8001bb8 <HAL_ADC_Start_DMA+0x20c>)
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab6:	4a41      	ldr	r2, [pc, #260]	@ (8001bbc <HAL_ADC_Start_DMA+0x210>)
 8001ab8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001ad2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ae2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	334c      	adds	r3, #76	@ 0x4c
 8001aee:	4619      	mov	r1, r3
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f000 fd62 	bl	80025bc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d12a      	bne.n	8001b5a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc0 <HAL_ADC_Start_DMA+0x214>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d015      	beq.n	8001b3a <HAL_ADC_Start_DMA+0x18e>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2c      	ldr	r2, [pc, #176]	@ (8001bc4 <HAL_ADC_Start_DMA+0x218>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_Start_DMA+0x178>
 8001b18:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <HAL_ADC_Start_DMA+0x204>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00a      	beq.n	8001b3a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a27      	ldr	r2, [pc, #156]	@ (8001bc8 <HAL_ADC_Start_DMA+0x21c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d136      	bne.n	8001b9c <HAL_ADC_Start_DMA+0x1f0>
 8001b2e:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <HAL_ADC_Start_DMA+0x204>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d130      	bne.n	8001b9c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d129      	bne.n	8001b9c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	e020      	b.n	8001b9c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a18      	ldr	r2, [pc, #96]	@ (8001bc0 <HAL_ADC_Start_DMA+0x214>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d11b      	bne.n	8001b9c <HAL_ADC_Start_DMA+0x1f0>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d114      	bne.n	8001b9c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	e00b      	b.n	8001b9c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	f043 0210 	orr.w	r2, r3, #16
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	431bde83 	.word	0x431bde83
 8001bb0:	40012300 	.word	0x40012300
 8001bb4:	08002045 	.word	0x08002045
 8001bb8:	080020ff 	.word	0x080020ff
 8001bbc:	0800211b 	.word	0x0800211b
 8001bc0:	40012000 	.word	0x40012000
 8001bc4:	40012100 	.word	0x40012100
 8001bc8:	40012200 	.word	0x40012200

08001bcc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1c>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e105      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x228>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	d925      	bls.n	8001c80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68d9      	ldr	r1, [r3, #12]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	3b1e      	subs	r3, #30
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43da      	mvns	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	400a      	ands	r2, r1
 8001c58:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68d9      	ldr	r1, [r3, #12]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4403      	add	r3, r0
 8001c72:	3b1e      	subs	r3, #30
 8001c74:	409a      	lsls	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	e022      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6919      	ldr	r1, [r3, #16]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	2207      	movs	r2, #7
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6919      	ldr	r1, [r3, #16]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4403      	add	r3, r0
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d824      	bhi.n	8001d18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b05      	subs	r3, #5
 8001ce0:	221f      	movs	r2, #31
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	400a      	ands	r2, r1
 8001cee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	3b05      	subs	r3, #5
 8001d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d16:	e04c      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d824      	bhi.n	8001d6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b23      	subs	r3, #35	@ 0x23
 8001d32:	221f      	movs	r2, #31
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	400a      	ands	r2, r1
 8001d40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b23      	subs	r3, #35	@ 0x23
 8001d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d68:	e023      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	3b41      	subs	r3, #65	@ 0x41
 8001d7c:	221f      	movs	r2, #31
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	400a      	ands	r2, r1
 8001d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3b41      	subs	r3, #65	@ 0x41
 8001da6:	fa00 f203 	lsl.w	r2, r0, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <HAL_ADC_ConfigChannel+0x234>)
 8001db4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a21      	ldr	r2, [pc, #132]	@ (8001e40 <HAL_ADC_ConfigChannel+0x238>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d109      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x1cc>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b12      	cmp	r3, #18
 8001dc6:	d105      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	@ (8001e40 <HAL_ADC_ConfigChannel+0x238>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d123      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x21e>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d003      	beq.n	8001dee <HAL_ADC_ConfigChannel+0x1e6>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b11      	cmp	r3, #17
 8001dec:	d11b      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d111      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_ADC_ConfigChannel+0x23c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a10      	ldr	r2, [pc, #64]	@ (8001e48 <HAL_ADC_ConfigChannel+0x240>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	0c9a      	lsrs	r2, r3, #18
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40012300 	.word	0x40012300
 8001e40:	40012000 	.word	0x40012000
 8001e44:	20000008 	.word	0x20000008
 8001e48:	431bde83 	.word	0x431bde83

08001e4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e54:	4b79      	ldr	r3, [pc, #484]	@ (800203c <ADC_Init+0x1f0>)
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6859      	ldr	r1, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	021a      	lsls	r2, r3, #8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ea4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ec6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6899      	ldr	r1, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ede:	4a58      	ldr	r2, [pc, #352]	@ (8002040 <ADC_Init+0x1f4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d022      	beq.n	8001f2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ef2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6899      	ldr	r1, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6899      	ldr	r1, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	e00f      	b.n	8001f4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f48:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0202 	bic.w	r2, r2, #2
 8001f58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6899      	ldr	r1, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	7e1b      	ldrb	r3, [r3, #24]
 8001f64:	005a      	lsls	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01b      	beq.n	8001fb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f86:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	035a      	lsls	r2, r3, #13
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	e007      	b.n	8001fc0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fbe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	051a      	lsls	r2, r3, #20
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ff4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6899      	ldr	r1, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002002:	025a      	lsls	r2, r3, #9
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800201a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6899      	ldr	r1, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	029a      	lsls	r2, r3, #10
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	609a      	str	r2, [r3, #8]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40012300 	.word	0x40012300
 8002040:	0f000001 	.word	0x0f000001

08002044 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002050:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800205a:	2b00      	cmp	r3, #0
 800205c:	d13c      	bne.n	80020d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d12b      	bne.n	80020d0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800207c:	2b00      	cmp	r3, #0
 800207e:	d127      	bne.n	80020d0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002086:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002098:	2b00      	cmp	r3, #0
 800209a:	d119      	bne.n	80020d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0220 	bic.w	r2, r2, #32
 80020aa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f7ff fd7b 	bl	8001bcc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020d6:	e00e      	b.n	80020f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff fd85 	bl	8001bf4 <HAL_ADC_ErrorCallback>
}
 80020ea:	e004      	b.n	80020f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4798      	blx	r3
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f7ff fd67 	bl	8001be0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002126:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2240      	movs	r2, #64	@ 0x40
 800212c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f7ff fd5a 	bl	8001bf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217a:	4a04      	ldr	r2, [pc, #16]	@ (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002194:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0307 	and.w	r3, r3, #7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	db0b      	blt.n	80021d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4907      	ldr	r1, [pc, #28]	@ (80021e4 <__NVIC_EnableIRQ+0x38>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2001      	movs	r0, #1
 80021ce:	fa00 f202 	lsl.w	r2, r0, r2
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0a      	blt.n	8002212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	490c      	ldr	r1, [pc, #48]	@ (8002234 <__NVIC_SetPriority+0x4c>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002210:	e00a      	b.n	8002228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4908      	ldr	r1, [pc, #32]	@ (8002238 <__NVIC_SetPriority+0x50>)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	3b04      	subs	r3, #4
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	440b      	add	r3, r1
 8002226:	761a      	strb	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	@ 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f1c3 0307 	rsb	r3, r3, #7
 8002256:	2b04      	cmp	r3, #4
 8002258:	bf28      	it	cs
 800225a:	2304      	movcs	r3, #4
 800225c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3304      	adds	r3, #4
 8002262:	2b06      	cmp	r3, #6
 8002264:	d902      	bls.n	800226c <NVIC_EncodePriority+0x30>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b03      	subs	r3, #3
 800226a:	e000      	b.n	800226e <NVIC_EncodePriority+0x32>
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	401a      	ands	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002284:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43d9      	mvns	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	4313      	orrs	r3, r2
         );
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	@ 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b4:	d301      	bcc.n	80022ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00f      	b.n	80022da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <SysTick_Config+0x40>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c2:	210f      	movs	r1, #15
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022c8:	f7ff ff8e 	bl	80021e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <SysTick_Config+0x40>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d2:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <SysTick_Config+0x40>)
 80022d4:	2207      	movs	r2, #7
 80022d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	e000e010 	.word	0xe000e010

080022e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff29 	bl	8002148 <__NVIC_SetPriorityGrouping>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002310:	f7ff ff3e 	bl	8002190 <__NVIC_GetPriorityGrouping>
 8002314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7ff ff8e 	bl	800223c <NVIC_EncodePriority>
 8002320:	4602      	mov	r2, r0
 8002322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff5d 	bl	80021e8 <__NVIC_SetPriority>
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff31 	bl	80021ac <__NVIC_EnableIRQ>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffa2 	bl	80022a4 <SysTick_Config>
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e014      	b.n	80023a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	791b      	ldrb	r3, [r3, #4]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7fe fac9 	bl	8000924 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2202      	movs	r2, #2
 8002396:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b089      	sub	sp, #36	@ 0x24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_DAC_ConfigChannel+0x1c>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e042      	b.n	8002454 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	795b      	ldrb	r3, [r3, #5]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_DAC_ConfigChannel+0x2c>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e03c      	b.n	8002454 <HAL_DAC_ConfigChannel+0xa6>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2202      	movs	r2, #2
 80023e4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6819      	ldr	r1, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	22c0      	movs	r2, #192	@ 0xc0
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43da      	mvns	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	400a      	ands	r2, r1
 8002444:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002452:	7ffb      	ldrb	r3, [r7, #31]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3724      	adds	r7, #36	@ 0x24
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff fa2a 	bl	80018c4 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e099      	b.n	80025b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800249c:	e00f      	b.n	80024be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800249e:	f7ff fa11 	bl	80018c4 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d908      	bls.n	80024be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2203      	movs	r2, #3
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e078      	b.n	80025b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e8      	bne.n	800249e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4b38      	ldr	r3, [pc, #224]	@ (80025b8 <HAL_DMA_Init+0x158>)
 80024d8:	4013      	ands	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	2b04      	cmp	r3, #4
 8002516:	d107      	bne.n	8002528 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	4313      	orrs	r3, r2
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f023 0307 	bic.w	r3, r3, #7
 800253e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	2b04      	cmp	r3, #4
 8002550:	d117      	bne.n	8002582 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00e      	beq.n	8002582 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fa6f 	bl	8002a48 <DMA_CheckFifoParam>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2240      	movs	r2, #64	@ 0x40
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800257e:	2301      	movs	r3, #1
 8002580:	e016      	b.n	80025b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fa26 	bl	80029dc <DMA_CalcBaseAndBitshift>
 8002590:	4603      	mov	r3, r0
 8002592:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002598:	223f      	movs	r2, #63	@ 0x3f
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	f010803f 	.word	0xf010803f

080025bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_DMA_Start_IT+0x26>
 80025de:	2302      	movs	r3, #2
 80025e0:	e040      	b.n	8002664 <HAL_DMA_Start_IT+0xa8>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d12f      	bne.n	8002656 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2202      	movs	r2, #2
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f9b8 	bl	8002980 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002614:	223f      	movs	r2, #63	@ 0x3f
 8002616:	409a      	lsls	r2, r3
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0216 	orr.w	r2, r2, #22
 800262a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0208 	orr.w	r2, r2, #8
 8002642:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e005      	b.n	8002662 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002662:	7dfb      	ldrb	r3, [r7, #23]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002678:	4b8e      	ldr	r3, [pc, #568]	@ (80028b4 <HAL_DMA_IRQHandler+0x248>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a8e      	ldr	r2, [pc, #568]	@ (80028b8 <HAL_DMA_IRQHandler+0x24c>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0a9b      	lsrs	r3, r3, #10
 8002684:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002696:	2208      	movs	r2, #8
 8002698:	409a      	lsls	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d01a      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0204 	bic.w	r2, r2, #4
 80026be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	2208      	movs	r2, #8
 80026c6:	409a      	lsls	r2, r3
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026dc:	2201      	movs	r2, #1
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d012      	beq.n	800270e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	2201      	movs	r2, #1
 80026fc:	409a      	lsls	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002706:	f043 0202 	orr.w	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002712:	2204      	movs	r2, #4
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d012      	beq.n	8002744 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002730:	2204      	movs	r2, #4
 8002732:	409a      	lsls	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273c:	f043 0204 	orr.w	r2, r3, #4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002748:	2210      	movs	r2, #16
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d043      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d03c      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002766:	2210      	movs	r2, #16
 8002768:	409a      	lsls	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d018      	beq.n	80027ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d108      	bne.n	800279c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d024      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
 800279a:	e01f      	b.n	80027dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01b      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
 80027ac:	e016      	b.n	80027dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0208 	bic.w	r2, r2, #8
 80027ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e0:	2220      	movs	r2, #32
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 808f 	beq.w	800290c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8087 	beq.w	800290c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002802:	2220      	movs	r2, #32
 8002804:	409a      	lsls	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b05      	cmp	r3, #5
 8002814:	d136      	bne.n	8002884 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0216 	bic.w	r2, r2, #22
 8002824:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002834:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d103      	bne.n	8002846 <HAL_DMA_IRQHandler+0x1da>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0208 	bic.w	r2, r2, #8
 8002854:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285a:	223f      	movs	r2, #63	@ 0x3f
 800285c:	409a      	lsls	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002876:	2b00      	cmp	r3, #0
 8002878:	d07e      	beq.n	8002978 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
        }
        return;
 8002882:	e079      	b.n	8002978 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01d      	beq.n	80028ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10d      	bne.n	80028bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d031      	beq.n	800290c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
 80028b0:	e02c      	b.n	800290c <HAL_DMA_IRQHandler+0x2a0>
 80028b2:	bf00      	nop
 80028b4:	20000008 	.word	0x20000008
 80028b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d023      	beq.n	800290c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	e01e      	b.n	800290c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10f      	bne.n	80028fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0210 	bic.w	r2, r2, #16
 80028ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002910:	2b00      	cmp	r3, #0
 8002912:	d032      	beq.n	800297a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d022      	beq.n	8002966 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2205      	movs	r2, #5
 8002924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	3301      	adds	r3, #1
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	d307      	bcc.n	8002954 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f2      	bne.n	8002938 <HAL_DMA_IRQHandler+0x2cc>
 8002952:	e000      	b.n	8002956 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002954:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4798      	blx	r3
 8002976:	e000      	b.n	800297a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002978:	bf00      	nop
    }
  }
}
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800299c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b40      	cmp	r3, #64	@ 0x40
 80029ac:	d108      	bne.n	80029c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029be:	e007      	b.n	80029d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	3b10      	subs	r3, #16
 80029ec:	4a14      	ldr	r2, [pc, #80]	@ (8002a40 <DMA_CalcBaseAndBitshift+0x64>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029f6:	4a13      	ldr	r2, [pc, #76]	@ (8002a44 <DMA_CalcBaseAndBitshift+0x68>)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d909      	bls.n	8002a1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a12:	f023 0303 	bic.w	r3, r3, #3
 8002a16:	1d1a      	adds	r2, r3, #4
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a1c:	e007      	b.n	8002a2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	aaaaaaab 	.word	0xaaaaaaab
 8002a44:	08007a10 	.word	0x08007a10

08002a48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d11f      	bne.n	8002aa2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d856      	bhi.n	8002b16 <DMA_CheckFifoParam+0xce>
 8002a68:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <DMA_CheckFifoParam+0x28>)
 8002a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6e:	bf00      	nop
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a93 	.word	0x08002a93
 8002a78:	08002a81 	.word	0x08002a81
 8002a7c:	08002b17 	.word	0x08002b17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d046      	beq.n	8002b1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a90:	e043      	b.n	8002b1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a9a:	d140      	bne.n	8002b1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa0:	e03d      	b.n	8002b1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aaa:	d121      	bne.n	8002af0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d837      	bhi.n	8002b22 <DMA_CheckFifoParam+0xda>
 8002ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab8 <DMA_CheckFifoParam+0x70>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002ac9 	.word	0x08002ac9
 8002abc:	08002acf 	.word	0x08002acf
 8002ac0:	08002ac9 	.word	0x08002ac9
 8002ac4:	08002ae1 	.word	0x08002ae1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e030      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d025      	beq.n	8002b26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ade:	e022      	b.n	8002b26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ae8:	d11f      	bne.n	8002b2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aee:	e01c      	b.n	8002b2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d903      	bls.n	8002afe <DMA_CheckFifoParam+0xb6>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d003      	beq.n	8002b04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002afc:	e018      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
      break;
 8002b02:	e015      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00e      	beq.n	8002b2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      break;
 8002b14:	e00b      	b.n	8002b2e <DMA_CheckFifoParam+0xe6>
      break;
 8002b16:	bf00      	nop
 8002b18:	e00a      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1a:	bf00      	nop
 8002b1c:	e008      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e006      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b22:	bf00      	nop
 8002b24:	e004      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b26:	bf00      	nop
 8002b28:	e002      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b2a:	bf00      	nop
 8002b2c:	e000      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b2e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop

08002b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	@ 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	e16b      	b.n	8002e34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	f040 815a 	bne.w	8002e2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d005      	beq.n	8002b92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d130      	bne.n	8002bf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 0201 	and.w	r2, r3, #1
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d017      	beq.n	8002c30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d123      	bne.n	8002c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	08da      	lsrs	r2, r3, #3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3208      	adds	r2, #8
 8002c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	220f      	movs	r2, #15
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	08da      	lsrs	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3208      	adds	r2, #8
 8002c7e:	69b9      	ldr	r1, [r7, #24]
 8002c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2203      	movs	r2, #3
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0203 	and.w	r2, r3, #3
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80b4 	beq.w	8002e2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	4b60      	ldr	r3, [pc, #384]	@ (8002e4c <HAL_GPIO_Init+0x30c>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	4a5f      	ldr	r2, [pc, #380]	@ (8002e4c <HAL_GPIO_Init+0x30c>)
 8002cd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e4c <HAL_GPIO_Init+0x30c>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ce2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e50 <HAL_GPIO_Init+0x310>)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	220f      	movs	r2, #15
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a52      	ldr	r2, [pc, #328]	@ (8002e54 <HAL_GPIO_Init+0x314>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d02b      	beq.n	8002d66 <HAL_GPIO_Init+0x226>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a51      	ldr	r2, [pc, #324]	@ (8002e58 <HAL_GPIO_Init+0x318>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d025      	beq.n	8002d62 <HAL_GPIO_Init+0x222>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a50      	ldr	r2, [pc, #320]	@ (8002e5c <HAL_GPIO_Init+0x31c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01f      	beq.n	8002d5e <HAL_GPIO_Init+0x21e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a4f      	ldr	r2, [pc, #316]	@ (8002e60 <HAL_GPIO_Init+0x320>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d019      	beq.n	8002d5a <HAL_GPIO_Init+0x21a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a4e      	ldr	r2, [pc, #312]	@ (8002e64 <HAL_GPIO_Init+0x324>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_GPIO_Init+0x216>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4d      	ldr	r2, [pc, #308]	@ (8002e68 <HAL_GPIO_Init+0x328>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00d      	beq.n	8002d52 <HAL_GPIO_Init+0x212>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4c      	ldr	r2, [pc, #304]	@ (8002e6c <HAL_GPIO_Init+0x32c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <HAL_GPIO_Init+0x20e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4b      	ldr	r2, [pc, #300]	@ (8002e70 <HAL_GPIO_Init+0x330>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_GPIO_Init+0x20a>
 8002d46:	2307      	movs	r3, #7
 8002d48:	e00e      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	e00c      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d4e:	2306      	movs	r3, #6
 8002d50:	e00a      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d52:	2305      	movs	r3, #5
 8002d54:	e008      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d56:	2304      	movs	r3, #4
 8002d58:	e006      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e004      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e002      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <HAL_GPIO_Init+0x228>
 8002d66:	2300      	movs	r3, #0
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	f002 0203 	and.w	r2, r2, #3
 8002d6e:	0092      	lsls	r2, r2, #2
 8002d70:	4093      	lsls	r3, r2
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d78:	4935      	ldr	r1, [pc, #212]	@ (8002e50 <HAL_GPIO_Init+0x310>)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	3302      	adds	r3, #2
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d86:	4b3b      	ldr	r3, [pc, #236]	@ (8002e74 <HAL_GPIO_Init+0x334>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002daa:	4a32      	ldr	r2, [pc, #200]	@ (8002e74 <HAL_GPIO_Init+0x334>)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db0:	4b30      	ldr	r3, [pc, #192]	@ (8002e74 <HAL_GPIO_Init+0x334>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd4:	4a27      	ldr	r2, [pc, #156]	@ (8002e74 <HAL_GPIO_Init+0x334>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dda:	4b26      	ldr	r3, [pc, #152]	@ (8002e74 <HAL_GPIO_Init+0x334>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8002e74 <HAL_GPIO_Init+0x334>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <HAL_GPIO_Init+0x334>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e28:	4a12      	ldr	r2, [pc, #72]	@ (8002e74 <HAL_GPIO_Init+0x334>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3301      	adds	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	f67f ae90 	bls.w	8002b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3724      	adds	r7, #36	@ 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40013800 	.word	0x40013800
 8002e54:	40020000 	.word	0x40020000
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	40020800 	.word	0x40020800
 8002e60:	40020c00 	.word	0x40020c00
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40021400 	.word	0x40021400
 8002e6c:	40021800 	.word	0x40021800
 8002e70:	40021c00 	.word	0x40021c00
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e12b      	b.n	8003116 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd fed4 	bl	8000c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	@ 0x24
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002efe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f10:	f002 fe80 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 8002f14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4a81      	ldr	r2, [pc, #516]	@ (8003120 <HAL_I2C_Init+0x274>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d807      	bhi.n	8002f30 <HAL_I2C_Init+0x84>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a80      	ldr	r2, [pc, #512]	@ (8003124 <HAL_I2C_Init+0x278>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	bf94      	ite	ls
 8002f28:	2301      	movls	r3, #1
 8002f2a:	2300      	movhi	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e006      	b.n	8002f3e <HAL_I2C_Init+0x92>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a7d      	ldr	r2, [pc, #500]	@ (8003128 <HAL_I2C_Init+0x27c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bf94      	ite	ls
 8002f38:	2301      	movls	r3, #1
 8002f3a:	2300      	movhi	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0e7      	b.n	8003116 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a78      	ldr	r2, [pc, #480]	@ (800312c <HAL_I2C_Init+0x280>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9b      	lsrs	r3, r3, #18
 8002f50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a6a      	ldr	r2, [pc, #424]	@ (8003120 <HAL_I2C_Init+0x274>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d802      	bhi.n	8002f80 <HAL_I2C_Init+0xd4>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	e009      	b.n	8002f94 <HAL_I2C_Init+0xe8>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	4a69      	ldr	r2, [pc, #420]	@ (8003130 <HAL_I2C_Init+0x284>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	3301      	adds	r3, #1
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fa6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	495c      	ldr	r1, [pc, #368]	@ (8003120 <HAL_I2C_Init+0x274>)
 8002fb0:	428b      	cmp	r3, r1
 8002fb2:	d819      	bhi.n	8002fe8 <HAL_I2C_Init+0x13c>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1e59      	subs	r1, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fc8:	400b      	ands	r3, r1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_I2C_Init+0x138>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1e59      	subs	r1, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe2:	e051      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	e04f      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d111      	bne.n	8003014 <HAL_I2C_Init+0x168>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e012      	b.n	800303a <HAL_I2C_Init+0x18e>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	0099      	lsls	r1, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	fbb0 f3f3 	udiv	r3, r0, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Init+0x196>
 800303e:	2301      	movs	r3, #1
 8003040:	e022      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10e      	bne.n	8003068 <HAL_I2C_Init+0x1bc>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1e58      	subs	r0, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	440b      	add	r3, r1
 8003058:	fbb0 f3f3 	udiv	r3, r0, r3
 800305c:	3301      	adds	r3, #1
 800305e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003066:	e00f      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	0099      	lsls	r1, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	6809      	ldr	r1, [r1, #0]
 800308c:	4313      	orrs	r3, r2
 800308e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6911      	ldr	r1, [r2, #16]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68d2      	ldr	r2, [r2, #12]
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	000186a0 	.word	0x000186a0
 8003124:	001e847f 	.word	0x001e847f
 8003128:	003d08ff 	.word	0x003d08ff
 800312c:	431bde83 	.word	0x431bde83
 8003130:	10624dd3 	.word	0x10624dd3

08003134 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	4608      	mov	r0, r1
 800313e:	4611      	mov	r1, r2
 8003140:	461a      	mov	r2, r3
 8003142:	4603      	mov	r3, r0
 8003144:	817b      	strh	r3, [r7, #10]
 8003146:	460b      	mov	r3, r1
 8003148:	813b      	strh	r3, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800314e:	f7fe fbb9 	bl	80018c4 <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b20      	cmp	r3, #32
 800315e:	f040 80d9 	bne.w	8003314 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	2319      	movs	r3, #25
 8003168:	2201      	movs	r2, #1
 800316a:	496d      	ldr	r1, [pc, #436]	@ (8003320 <HAL_I2C_Mem_Write+0x1ec>)
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f971 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003178:	2302      	movs	r3, #2
 800317a:	e0cc      	b.n	8003316 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_I2C_Mem_Write+0x56>
 8003186:	2302      	movs	r3, #2
 8003188:	e0c5      	b.n	8003316 <HAL_I2C_Mem_Write+0x1e2>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d007      	beq.n	80031b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2221      	movs	r2, #33	@ 0x21
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2240      	movs	r2, #64	@ 0x40
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a3a      	ldr	r2, [r7, #32]
 80031da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003324 <HAL_I2C_Mem_Write+0x1f0>)
 80031f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031f2:	88f8      	ldrh	r0, [r7, #6]
 80031f4:	893a      	ldrh	r2, [r7, #8]
 80031f6:	8979      	ldrh	r1, [r7, #10]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	4603      	mov	r3, r0
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f890 	bl	8003328 <I2C_RequestMemoryWrite>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d052      	beq.n	80032b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e081      	b.n	8003316 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fa36 	bl	8003688 <I2C_WaitOnTXEFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	2b04      	cmp	r3, #4
 8003228:	d107      	bne.n	800323a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003238:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e06b      	b.n	8003316 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b04      	cmp	r3, #4
 800327a:	d11b      	bne.n	80032b4 <HAL_I2C_Mem_Write+0x180>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d017      	beq.n	80032b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1aa      	bne.n	8003212 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fa29 	bl	8003718 <I2C_WaitOnBTFFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d107      	bne.n	80032e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e016      	b.n	8003316 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	00100002 	.word	0x00100002
 8003324:	ffff0000 	.word	0xffff0000

08003328 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	4608      	mov	r0, r1
 8003332:	4611      	mov	r1, r2
 8003334:	461a      	mov	r2, r3
 8003336:	4603      	mov	r3, r0
 8003338:	817b      	strh	r3, [r7, #10]
 800333a:	460b      	mov	r3, r1
 800333c:	813b      	strh	r3, [r7, #8]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003350:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	2200      	movs	r2, #0
 800335a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f878 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003378:	d103      	bne.n	8003382 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e05f      	b.n	8003446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003394:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	492d      	ldr	r1, [pc, #180]	@ (8003450 <I2C_RequestMemoryWrite+0x128>)
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f8d3 	bl	8003548 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e04c      	b.n	8003446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c4:	6a39      	ldr	r1, [r7, #32]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f95e 	bl	8003688 <I2C_WaitOnTXEFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00d      	beq.n	80033ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d107      	bne.n	80033ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e02b      	b.n	8003446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d105      	bne.n	8003400 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033f4:	893b      	ldrh	r3, [r7, #8]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	611a      	str	r2, [r3, #16]
 80033fe:	e021      	b.n	8003444 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003400:	893b      	ldrh	r3, [r7, #8]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	b29b      	uxth	r3, r3
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003410:	6a39      	ldr	r1, [r7, #32]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f938 	bl	8003688 <I2C_WaitOnTXEFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	2b04      	cmp	r3, #4
 8003424:	d107      	bne.n	8003436 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003434:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e005      	b.n	8003446 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800343a:	893b      	ldrh	r3, [r7, #8]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	00010002 	.word	0x00010002

08003454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003464:	e048      	b.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800346c:	d044      	beq.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7fe fa29 	bl	80018c4 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <I2C_WaitOnFlagUntilTimeout+0x30>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d139      	bne.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	0c1b      	lsrs	r3, r3, #16
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d10d      	bne.n	80034aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	43da      	mvns	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4013      	ands	r3, r2
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	e00c      	b.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	43da      	mvns	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4013      	ands	r3, r2
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d116      	bne.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e023      	b.n	8003540 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	0c1b      	lsrs	r3, r3, #16
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d10d      	bne.n	800351e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	43da      	mvns	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4013      	ands	r3, r2
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf0c      	ite	eq
 8003514:	2301      	moveq	r3, #1
 8003516:	2300      	movne	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	e00c      	b.n	8003538 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	43da      	mvns	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4013      	ands	r3, r2
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	429a      	cmp	r2, r3
 800353c:	d093      	beq.n	8003466 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003556:	e071      	b.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003566:	d123      	bne.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003576:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003580:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	f043 0204 	orr.w	r2, r3, #4
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e067      	b.n	8003680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035b6:	d041      	beq.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b8:	f7fe f984 	bl	80018c4 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d136      	bne.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d10c      	bne.n	80035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	43da      	mvns	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf14      	ite	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2300      	moveq	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e00b      	b.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	43da      	mvns	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4013      	ands	r3, r2
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d016      	beq.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e021      	b.n	8003680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	0c1b      	lsrs	r3, r3, #16
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d10c      	bne.n	8003660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	43da      	mvns	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4013      	ands	r3, r2
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e00b      	b.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	f47f af6d 	bne.w	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003694:	e034      	b.n	8003700 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f886 	bl	80037a8 <I2C_IsAcknowledgeFailed>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e034      	b.n	8003710 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ac:	d028      	beq.n	8003700 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ae:	f7fe f909 	bl	80018c4 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d302      	bcc.n	80036c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11d      	bne.n	8003700 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ce:	2b80      	cmp	r3, #128	@ 0x80
 80036d0:	d016      	beq.n	8003700 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	f043 0220 	orr.w	r2, r3, #32
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e007      	b.n	8003710 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370a:	2b80      	cmp	r3, #128	@ 0x80
 800370c:	d1c3      	bne.n	8003696 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003724:	e034      	b.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f83e 	bl	80037a8 <I2C_IsAcknowledgeFailed>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e034      	b.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800373c:	d028      	beq.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373e:	f7fe f8c1 	bl	80018c4 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d11d      	bne.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b04      	cmp	r3, #4
 8003760:	d016      	beq.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	f043 0220 	orr.w	r2, r3, #32
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e007      	b.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d1c3      	bne.n	8003726 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037be:	d11b      	bne.n	80037f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	f043 0204 	orr.w	r2, r3, #4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e128      	b.n	8003a6c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a90      	ldr	r2, [pc, #576]	@ (8003a74 <HAL_I2S_Init+0x26c>)
 8003832:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7fd fa97 	bl	8000d68 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003850:	f023 030f 	bic.w	r3, r3, #15
 8003854:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2202      	movs	r2, #2
 800385c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d060      	beq.n	8003928 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800386e:	2310      	movs	r3, #16
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e001      	b.n	8003878 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003874:	2320      	movs	r3, #32
 8003876:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b20      	cmp	r3, #32
 800387e:	d802      	bhi.n	8003886 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003886:	2001      	movs	r0, #1
 8003888:	f002 face 	bl	8005e28 <HAL_RCCEx_GetPeriphCLKFreq>
 800388c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003896:	d125      	bne.n	80038e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	461a      	mov	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	3305      	adds	r3, #5
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	e01f      	b.n	8003902 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	461a      	mov	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	fbb2 f3f3 	udiv	r3, r2, r3
 80038de:	3305      	adds	r3, #5
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	e00e      	b.n	8003902 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	461a      	mov	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fe:	3305      	adds	r3, #5
 8003900:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4a5c      	ldr	r2, [pc, #368]	@ (8003a78 <HAL_I2S_Init+0x270>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	08db      	lsrs	r3, r3, #3
 800390c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e003      	b.n	8003930 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003928:	2302      	movs	r3, #2
 800392a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d902      	bls.n	800393c <HAL_I2S_Init+0x134>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2bff      	cmp	r3, #255	@ 0xff
 800393a:	d907      	bls.n	800394c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003940:	f043 0210 	orr.w	r2, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e08f      	b.n	8003a6c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	ea42 0103 	orr.w	r1, r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	430a      	orrs	r2, r1
 800395e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800396a:	f023 030f 	bic.w	r3, r3, #15
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6851      	ldr	r1, [r2, #4]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6892      	ldr	r2, [r2, #8]
 8003976:	4311      	orrs	r1, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68d2      	ldr	r2, [r2, #12]
 800397c:	4311      	orrs	r1, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6992      	ldr	r2, [r2, #24]
 8003982:	430a      	orrs	r2, r1
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800398e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d161      	bne.n	8003a5c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a38      	ldr	r2, [pc, #224]	@ (8003a7c <HAL_I2S_Init+0x274>)
 800399c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a37      	ldr	r2, [pc, #220]	@ (8003a80 <HAL_I2S_Init+0x278>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d101      	bne.n	80039ac <HAL_I2S_Init+0x1a4>
 80039a8:	4b36      	ldr	r3, [pc, #216]	@ (8003a84 <HAL_I2S_Init+0x27c>)
 80039aa:	e001      	b.n	80039b0 <HAL_I2S_Init+0x1a8>
 80039ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	4932      	ldr	r1, [pc, #200]	@ (8003a80 <HAL_I2S_Init+0x278>)
 80039b8:	428a      	cmp	r2, r1
 80039ba:	d101      	bne.n	80039c0 <HAL_I2S_Init+0x1b8>
 80039bc:	4a31      	ldr	r2, [pc, #196]	@ (8003a84 <HAL_I2S_Init+0x27c>)
 80039be:	e001      	b.n	80039c4 <HAL_I2S_Init+0x1bc>
 80039c0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80039c4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003a80 <HAL_I2S_Init+0x278>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d101      	bne.n	80039dc <HAL_I2S_Init+0x1d4>
 80039d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a84 <HAL_I2S_Init+0x27c>)
 80039da:	e001      	b.n	80039e0 <HAL_I2S_Init+0x1d8>
 80039dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039e0:	2202      	movs	r2, #2
 80039e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a25      	ldr	r2, [pc, #148]	@ (8003a80 <HAL_I2S_Init+0x278>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <HAL_I2S_Init+0x1ea>
 80039ee:	4b25      	ldr	r3, [pc, #148]	@ (8003a84 <HAL_I2S_Init+0x27c>)
 80039f0:	e001      	b.n	80039f6 <HAL_I2S_Init+0x1ee>
 80039f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a02:	d003      	beq.n	8003a0c <HAL_I2S_Init+0x204>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d103      	bne.n	8003a14 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	e001      	b.n	8003a18 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a22:	4313      	orrs	r3, r2
 8003a24:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a36:	4313      	orrs	r3, r2
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	897b      	ldrh	r3, [r7, #10]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a44:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8003a80 <HAL_I2S_Init+0x278>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d101      	bne.n	8003a54 <HAL_I2S_Init+0x24c>
 8003a50:	4b0c      	ldr	r3, [pc, #48]	@ (8003a84 <HAL_I2S_Init+0x27c>)
 8003a52:	e001      	b.n	8003a58 <HAL_I2S_Init+0x250>
 8003a54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a58:	897a      	ldrh	r2, [r7, #10]
 8003a5a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	08003d35 	.word	0x08003d35
 8003a78:	cccccccd 	.word	0xcccccccd
 8003a7c:	08003e49 	.word	0x08003e49
 8003a80:	40003800 	.word	0x40003800
 8003a84:	40003400 	.word	0x40003400

08003a88 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_I2S_Transmit_DMA+0x1a>
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e08a      	b.n	8003bbc <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e082      	b.n	8003bbc <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2S_Transmit_DMA+0x3e>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e07a      	b.n	8003bbc <HAL_I2S_Transmit_DMA+0x134>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d002      	beq.n	8003afa <HAL_I2S_Transmit_DMA+0x72>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d10a      	bne.n	8003b10 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003b04:	88fb      	ldrh	r3, [r7, #6]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b0e:	e005      	b.n	8003b1c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	88fa      	ldrh	r2, [r7, #6]
 8003b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b20:	4a28      	ldr	r2, [pc, #160]	@ (8003bc4 <HAL_I2S_Transmit_DMA+0x13c>)
 8003b22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b28:	4a27      	ldr	r2, [pc, #156]	@ (8003bc8 <HAL_I2S_Transmit_DMA+0x140>)
 8003b2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b30:	4a26      	ldr	r2, [pc, #152]	@ (8003bcc <HAL_I2S_Transmit_DMA+0x144>)
 8003b32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003b3c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003b44:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003b4c:	f7fe fd36 	bl	80025bc <HAL_DMA_Start_IT>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00f      	beq.n	8003b76 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5a:	f043 0208 	orr.w	r2, r3, #8
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e022      	b.n	8003bbc <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d107      	bne.n	8003b9c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0202 	orr.w	r2, r2, #2
 8003b9a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d107      	bne.n	8003bba <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bb8:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	08003c13 	.word	0x08003c13
 8003bc8:	08003bd1 	.word	0x08003bd1
 8003bcc:	08003c2f 	.word	0x08003c2f

08003bd0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10e      	bne.n	8003c04 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0202 	bic.w	r2, r2, #2
 8003bf4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f7fd fa3d 	bl	8001084 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7fd fa11 	bl	8001048 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0203 	bic.w	r2, r2, #3
 8003c4a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c64:	f043 0208 	orr.w	r2, r3, #8
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7fd fda9 	bl	80017c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	881a      	ldrh	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	1c9a      	adds	r2, r3, #2
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10e      	bne.n	8003cce <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cbe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fd f9db 	bl	8001084 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	b292      	uxth	r2, r2
 8003cea:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	1c9a      	adds	r2, r3, #2
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10e      	bne.n	8003d2c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d1c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd fd34 	bl	8001794 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d13a      	bne.n	8003dc6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d109      	bne.n	8003d6e <I2S_IRQHandler+0x3a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d64:	2b40      	cmp	r3, #64	@ 0x40
 8003d66:	d102      	bne.n	8003d6e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ffb4 	bl	8003cd6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d74:	2b40      	cmp	r3, #64	@ 0x40
 8003d76:	d126      	bne.n	8003dc6 <I2S_IRQHandler+0x92>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d11f      	bne.n	8003dc6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d94:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db8:	f043 0202 	orr.w	r2, r3, #2
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7fd fcff 	bl	80017c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d136      	bne.n	8003e40 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d109      	bne.n	8003df0 <I2S_IRQHandler+0xbc>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de6:	2b80      	cmp	r3, #128	@ 0x80
 8003de8:	d102      	bne.n	8003df0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff ff45 	bl	8003c7a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d122      	bne.n	8003e40 <I2S_IRQHandler+0x10c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d11b      	bne.n	8003e40 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e16:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	f043 0204 	orr.w	r2, r3, #4
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd fcc2 	bl	80017c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e40:	bf00      	nop
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a92      	ldr	r2, [pc, #584]	@ (80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d101      	bne.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e62:	4b92      	ldr	r3, [pc, #584]	@ (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e64:	e001      	b.n	8003e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a8b      	ldr	r2, [pc, #556]	@ (80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e80:	4b8a      	ldr	r3, [pc, #552]	@ (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e82:	e001      	b.n	8003e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e94:	d004      	beq.n	8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f040 8099 	bne.w	8003fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d107      	bne.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f925 	bl	8004104 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d107      	bne.n	8003ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9c8 	bl	8004264 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eda:	2b40      	cmp	r3, #64	@ 0x40
 8003edc:	d13a      	bne.n	8003f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d035      	beq.n	8003f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a6e      	ldr	r2, [pc, #440]	@ (80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ef2:	4b6e      	ldr	r3, [pc, #440]	@ (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef4:	e001      	b.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ef6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4969      	ldr	r1, [pc, #420]	@ (80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f02:	428b      	cmp	r3, r1
 8003f04:	d101      	bne.n	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f06:	4b69      	ldr	r3, [pc, #420]	@ (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f08:	e001      	b.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f12:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	f043 0202 	orr.w	r2, r3, #2
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd fc38 	bl	80017c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	f040 80c3 	bne.w	80040e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 80bd 	beq.w	80040e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a49      	ldr	r2, [pc, #292]	@ (80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d101      	bne.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f86:	4b49      	ldr	r3, [pc, #292]	@ (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f88:	e001      	b.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4944      	ldr	r1, [pc, #272]	@ (80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f96:	428b      	cmp	r3, r1
 8003f98:	d101      	bne.n	8003f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f9a:	4b44      	ldr	r3, [pc, #272]	@ (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f9c:	e001      	b.n	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fa2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fa6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	f043 0204 	orr.w	r2, r3, #4
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd fbfa 	bl	80017c4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fd0:	e089      	b.n	80040e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d107      	bne.n	8003fec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8be 	bl	8004168 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d107      	bne.n	8004006 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f8fd 	bl	8004200 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400c:	2b40      	cmp	r3, #64	@ 0x40
 800400e:	d12f      	bne.n	8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d02a      	beq.n	8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004028:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1e      	ldr	r2, [pc, #120]	@ (80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d101      	bne.n	8004038 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004034:	4b1d      	ldr	r3, [pc, #116]	@ (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004036:	e001      	b.n	800403c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004038:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4919      	ldr	r1, [pc, #100]	@ (80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004044:	428b      	cmp	r3, r1
 8004046:	d101      	bne.n	800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004048:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800404a:	e001      	b.n	8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800404c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004050:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004054:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	f043 0202 	orr.w	r2, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd fbaa 	bl	80017c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b08      	cmp	r3, #8
 8004078:	d136      	bne.n	80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d031      	beq.n	80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a07      	ldr	r2, [pc, #28]	@ (80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800408e:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004090:	e001      	b.n	8004096 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004092:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4902      	ldr	r1, [pc, #8]	@ (80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800409e:	428b      	cmp	r3, r1
 80040a0:	d106      	bne.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040a2:	4b02      	ldr	r3, [pc, #8]	@ (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040a4:	e006      	b.n	80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040a6:	bf00      	nop
 80040a8:	40003800 	.word	0x40003800
 80040ac:	40003400 	.word	0x40003400
 80040b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040b8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	f043 0204 	orr.w	r2, r3, #4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd fb70 	bl	80017c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040e4:	e000      	b.n	80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040e6:	bf00      	nop
}
 80040e8:	bf00      	nop
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	1c99      	adds	r1, r3, #2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6251      	str	r1, [r2, #36]	@ 0x24
 8004116:	881a      	ldrh	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d113      	bne.n	800415e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004144:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d106      	bne.n	800415e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ffc9 	bl	80040f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	1c99      	adds	r1, r3, #2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6251      	str	r1, [r2, #36]	@ 0x24
 800417a:	8819      	ldrh	r1, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1d      	ldr	r2, [pc, #116]	@ (80041f8 <I2SEx_TxISR_I2SExt+0x90>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <I2SEx_TxISR_I2SExt+0x22>
 8004186:	4b1d      	ldr	r3, [pc, #116]	@ (80041fc <I2SEx_TxISR_I2SExt+0x94>)
 8004188:	e001      	b.n	800418e <I2SEx_TxISR_I2SExt+0x26>
 800418a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800418e:	460a      	mov	r2, r1
 8004190:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d121      	bne.n	80041ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a12      	ldr	r2, [pc, #72]	@ (80041f8 <I2SEx_TxISR_I2SExt+0x90>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d101      	bne.n	80041b8 <I2SEx_TxISR_I2SExt+0x50>
 80041b4:	4b11      	ldr	r3, [pc, #68]	@ (80041fc <I2SEx_TxISR_I2SExt+0x94>)
 80041b6:	e001      	b.n	80041bc <I2SEx_TxISR_I2SExt+0x54>
 80041b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	490d      	ldr	r1, [pc, #52]	@ (80041f8 <I2SEx_TxISR_I2SExt+0x90>)
 80041c4:	428b      	cmp	r3, r1
 80041c6:	d101      	bne.n	80041cc <I2SEx_TxISR_I2SExt+0x64>
 80041c8:	4b0c      	ldr	r3, [pc, #48]	@ (80041fc <I2SEx_TxISR_I2SExt+0x94>)
 80041ca:	e001      	b.n	80041d0 <I2SEx_TxISR_I2SExt+0x68>
 80041cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ff81 	bl	80040f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40003800 	.word	0x40003800
 80041fc:	40003400 	.word	0x40003400

08004200 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68d8      	ldr	r0, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004212:	1c99      	adds	r1, r3, #2
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004218:	b282      	uxth	r2, r0
 800421a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d113      	bne.n	800425c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004242:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff ff4a 	bl	80040f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800425c:	bf00      	nop
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a20      	ldr	r2, [pc, #128]	@ (80042f4 <I2SEx_RxISR_I2SExt+0x90>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <I2SEx_RxISR_I2SExt+0x16>
 8004276:	4b20      	ldr	r3, [pc, #128]	@ (80042f8 <I2SEx_RxISR_I2SExt+0x94>)
 8004278:	e001      	b.n	800427e <I2SEx_RxISR_I2SExt+0x1a>
 800427a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800427e:	68d8      	ldr	r0, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	1c99      	adds	r1, r3, #2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800428a:	b282      	uxth	r2, r0
 800428c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d121      	bne.n	80042ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a12      	ldr	r2, [pc, #72]	@ (80042f4 <I2SEx_RxISR_I2SExt+0x90>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d101      	bne.n	80042b4 <I2SEx_RxISR_I2SExt+0x50>
 80042b0:	4b11      	ldr	r3, [pc, #68]	@ (80042f8 <I2SEx_RxISR_I2SExt+0x94>)
 80042b2:	e001      	b.n	80042b8 <I2SEx_RxISR_I2SExt+0x54>
 80042b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	490d      	ldr	r1, [pc, #52]	@ (80042f4 <I2SEx_RxISR_I2SExt+0x90>)
 80042c0:	428b      	cmp	r3, r1
 80042c2:	d101      	bne.n	80042c8 <I2SEx_RxISR_I2SExt+0x64>
 80042c4:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <I2SEx_RxISR_I2SExt+0x94>)
 80042c6:	e001      	b.n	80042cc <I2SEx_RxISR_I2SExt+0x68>
 80042c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff03 	bl	80040f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40003800 	.word	0x40003800
 80042f8:	40003400 	.word	0x40003400

080042fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af02      	add	r7, sp, #8
 8004302:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e101      	b.n	8004512 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fd f9a1 	bl	8001670 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2203      	movs	r2, #3
 8004332:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800433c:	d102      	bne.n	8004344 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f002 fe07 	bl	8006f5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	7c1a      	ldrb	r2, [r3, #16]
 8004356:	f88d 2000 	strb.w	r2, [sp]
 800435a:	3304      	adds	r3, #4
 800435c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800435e:	f002 fcf7 	bl	8006d50 <USB_CoreInit>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0ce      	b.n	8004512 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f002 fdff 	bl	8006f7e <USB_SetCurrentMode>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0bf      	b.n	8004512 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
 8004396:	e04a      	b.n	800442e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004398:	7bfa      	ldrb	r2, [r7, #15]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	3315      	adds	r3, #21
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	3314      	adds	r3, #20
 80043bc:	7bfa      	ldrb	r2, [r7, #15]
 80043be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043c0:	7bfa      	ldrb	r2, [r7, #15]
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	b298      	uxth	r0, r3
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	332e      	adds	r3, #46	@ 0x2e
 80043d4:	4602      	mov	r2, r0
 80043d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043d8:	7bfa      	ldrb	r2, [r7, #15]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	3318      	adds	r3, #24
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	331c      	adds	r3, #28
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004400:	7bfa      	ldrb	r2, [r7, #15]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	3320      	adds	r3, #32
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004414:	7bfa      	ldrb	r2, [r7, #15]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	3324      	adds	r3, #36	@ 0x24
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	3301      	adds	r3, #1
 800442c:	73fb      	strb	r3, [r7, #15]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	791b      	ldrb	r3, [r3, #4]
 8004432:	7bfa      	ldrb	r2, [r7, #15]
 8004434:	429a      	cmp	r2, r3
 8004436:	d3af      	bcc.n	8004398 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004438:	2300      	movs	r3, #0
 800443a:	73fb      	strb	r3, [r7, #15]
 800443c:	e044      	b.n	80044c8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800443e:	7bfa      	ldrb	r2, [r7, #15]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004454:	7bfa      	ldrb	r2, [r7, #15]
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004466:	7bfa      	ldrb	r2, [r7, #15]
 8004468:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800446a:	7bfa      	ldrb	r2, [r7, #15]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004480:	7bfa      	ldrb	r2, [r7, #15]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004496:	7bfa      	ldrb	r2, [r7, #15]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044ac:	7bfa      	ldrb	r2, [r7, #15]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	3301      	adds	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	791b      	ldrb	r3, [r3, #4]
 80044cc:	7bfa      	ldrb	r2, [r7, #15]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d3b5      	bcc.n	800443e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7c1a      	ldrb	r2, [r3, #16]
 80044da:	f88d 2000 	strb.w	r2, [sp]
 80044de:	3304      	adds	r3, #4
 80044e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044e2:	f002 fd99 	bl	8007018 <USB_DevInit>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e00c      	b.n	8004512 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f003 f8c6 	bl	800769c <USB_DevDisconnect>

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800451a:	b590      	push	{r4, r7, lr}
 800451c:	b08d      	sub	sp, #52	@ 0x34
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f003 f967 	bl	8007804 <USB_GetMode>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 848c 	bne.w	8004e56 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f003 f8cb 	bl	80076de <USB_ReadInterrupts>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8482 	beq.w	8004e54 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f003 f8b8 	bl	80076de <USB_ReadInterrupts>
 800456e:	4603      	mov	r3, r0
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	d107      	bne.n	8004588 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f002 0202 	and.w	r2, r2, #2
 8004586:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f003 f8a6 	bl	80076de <USB_ReadInterrupts>
 8004592:	4603      	mov	r3, r0
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b10      	cmp	r3, #16
 800459a:	d161      	bne.n	8004660 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0210 	bic.w	r2, r2, #16
 80045aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f003 020f 	and.w	r2, r3, #15
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	3304      	adds	r3, #4
 80045ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80045d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045d6:	d124      	bne.n	8004622 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80045de:	4013      	ands	r3, r2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d035      	beq.n	8004650 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	6a38      	ldr	r0, [r7, #32]
 80045f8:	f002 fff8 	bl	80075ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004608:	441a      	add	r2, r3
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800461a:	441a      	add	r2, r3
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	615a      	str	r2, [r3, #20]
 8004620:	e016      	b.n	8004650 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004628:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800462c:	d110      	bne.n	8004650 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004634:	2208      	movs	r2, #8
 8004636:	4619      	mov	r1, r3
 8004638:	6a38      	ldr	r0, [r7, #32]
 800463a:	f002 ffd7 	bl	80075ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	695a      	ldr	r2, [r3, #20]
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800464a:	441a      	add	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0210 	orr.w	r2, r2, #16
 800465e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f003 f83a 	bl	80076de <USB_ReadInterrupts>
 800466a:	4603      	mov	r3, r0
 800466c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004670:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004674:	f040 80a7 	bne.w	80047c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f003 f83f 	bl	8007704 <USB_ReadDevAllOutEpInterrupt>
 8004686:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004688:	e099      	b.n	80047be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 808e 	beq.w	80047b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	4611      	mov	r1, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f003 f863 	bl	800776c <USB_ReadDevOutEPInterrupt>
 80046a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00c      	beq.n	80046cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046be:	461a      	mov	r2, r3
 80046c0:	2301      	movs	r3, #1
 80046c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80046c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fcfc 	bl	80050c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00c      	beq.n	80046f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e2:	461a      	mov	r2, r3
 80046e4:	2308      	movs	r3, #8
 80046e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80046e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fdd2 	bl	8005294 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004706:	461a      	mov	r2, r3
 8004708:	2310      	movs	r3, #16
 800470a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d030      	beq.n	8004778 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471e:	2b80      	cmp	r3, #128	@ 0x80
 8004720:	d109      	bne.n	8004736 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004730:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004734:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	4413      	add	r3, r2
 8004748:	3304      	adds	r3, #4
 800474a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	78db      	ldrb	r3, [r3, #3]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d108      	bne.n	8004766 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2200      	movs	r2, #0
 8004758:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	b2db      	uxtb	r3, r3
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fbc5 	bl	8004ef0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004772:	461a      	mov	r2, r3
 8004774:	2302      	movs	r3, #2
 8004776:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d008      	beq.n	8004794 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478e:	461a      	mov	r2, r3
 8004790:	2320      	movs	r3, #32
 8004792:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047aa:	461a      	mov	r2, r3
 80047ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	3301      	adds	r3, #1
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80047b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f47f af62 	bne.w	800468a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f002 ff87 	bl	80076de <USB_ReadInterrupts>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047da:	f040 80db 	bne.w	8004994 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f002 ffa8 	bl	8007738 <USB_ReadDevAllInEpInterrupt>
 80047e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80047ee:	e0cd      	b.n	800498c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80047f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 80c2 	beq.w	8004980 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f002 ffce 	bl	80077a8 <USB_ReadDevInEPInterrupt>
 800480c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d057      	beq.n	80048c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	2201      	movs	r2, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800482c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	43db      	mvns	r3, r3
 8004832:	69f9      	ldr	r1, [r7, #28]
 8004834:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004838:	4013      	ands	r3, r2
 800483a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800483c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004848:	461a      	mov	r2, r3
 800484a:	2301      	movs	r3, #1
 800484c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	799b      	ldrb	r3, [r3, #6]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d132      	bne.n	80048bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485a:	4613      	mov	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	3320      	adds	r3, #32
 8004866:	6819      	ldr	r1, [r3, #0]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800486c:	4613      	mov	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4403      	add	r3, r0
 8004876:	331c      	adds	r3, #28
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4419      	add	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4403      	add	r3, r0
 800488a:	3320      	adds	r3, #32
 800488c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	2b00      	cmp	r3, #0
 8004892:	d113      	bne.n	80048bc <HAL_PCD_IRQHandler+0x3a2>
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	3324      	adds	r3, #36	@ 0x24
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d108      	bne.n	80048bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048b4:	461a      	mov	r2, r3
 80048b6:	2101      	movs	r1, #1
 80048b8:	f002 ffd6 	bl	8007868 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	4619      	mov	r1, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fad6 	bl	8004e74 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048de:	461a      	mov	r2, r3
 80048e0:	2308      	movs	r3, #8
 80048e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fa:	461a      	mov	r2, r3
 80048fc:	2310      	movs	r3, #16
 80048fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d008      	beq.n	800491c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004916:	461a      	mov	r2, r3
 8004918:	2340      	movs	r3, #64	@ 0x40
 800491a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d023      	beq.n	800496e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004926:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004928:	6a38      	ldr	r0, [r7, #32]
 800492a:	f002 fcd9 	bl	80072e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800492e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	3310      	adds	r3, #16
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	3304      	adds	r3, #4
 8004940:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	78db      	ldrb	r3, [r3, #3]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d108      	bne.n	800495c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2200      	movs	r2, #0
 800494e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	b2db      	uxtb	r3, r3
 8004954:	4619      	mov	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fad6 	bl	8004f08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004968:	461a      	mov	r2, r3
 800496a:	2302      	movs	r3, #2
 800496c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004978:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fb15 	bl	8004faa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	3301      	adds	r3, #1
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	f47f af2e 	bne.w	80047f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f002 fea0 	bl	80076de <USB_ReadInterrupts>
 800499e:	4603      	mov	r3, r0
 80049a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049a8:	d122      	bne.n	80049f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049b8:	f023 0301 	bic.w	r3, r3, #1
 80049bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d108      	bne.n	80049da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80049d0:	2100      	movs	r1, #0
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fca4 	bl	8005320 <HAL_PCDEx_LPM_Callback>
 80049d8:	e002      	b.n	80049e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fa7e 	bl	8004edc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80049ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f002 fe72 	bl	80076de <USB_ReadInterrupts>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a04:	d112      	bne.n	8004a2c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d102      	bne.n	8004a1c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fa56 	bl	8004ec8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004a2a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f002 fe54 	bl	80076de <USB_ReadInterrupts>
 8004a36:	4603      	mov	r3, r0
 8004a38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a40:	f040 80b7 	bne.w	8004bb2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2110      	movs	r1, #16
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f002 fc3e 	bl	80072e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a64:	2300      	movs	r3, #0
 8004a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a68:	e046      	b.n	8004af8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a76:	461a      	mov	r2, r3
 8004a78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a7c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ab0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004acc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ad0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ae2:	0151      	lsls	r1, r2, #5
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	440a      	add	r2, r1
 8004ae8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004af0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af4:	3301      	adds	r3, #1
 8004af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	791b      	ldrb	r3, [r3, #4]
 8004afc:	461a      	mov	r2, r3
 8004afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d3b2      	bcc.n	8004a6a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b12:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004b16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	7bdb      	ldrb	r3, [r3, #15]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d016      	beq.n	8004b4e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b30:	f043 030b 	orr.w	r3, r3, #11
 8004b34:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b46:	f043 030b 	orr.w	r3, r3, #11
 8004b4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b4c:	e015      	b.n	8004b7a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b60:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004b64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b74:	f043 030b 	orr.w	r3, r3, #11
 8004b78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b88:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004b8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f002 fe63 	bl	8007868 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f002 fd91 	bl	80076de <USB_ReadInterrupts>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc6:	d123      	bne.n	8004c10 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f002 fe27 	bl	8007820 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f002 fbfb 	bl	80073d2 <USB_GetDevSpeed>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681c      	ldr	r4, [r3, #0]
 8004be8:	f001 f808 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8004bec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f002 f90f 	bl	8006e18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f95a 	bl	8004eb4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004c0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f002 fd62 	bl	80076de <USB_ReadInterrupts>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d10a      	bne.n	8004c3a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f93b 	bl	8004ea0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f002 0208 	and.w	r2, r2, #8
 8004c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f002 fd4d 	bl	80076de <USB_ReadInterrupts>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4a:	2b80      	cmp	r3, #128	@ 0x80
 8004c4c:	d123      	bne.n	8004c96 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c5e:	e014      	b.n	8004c8a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c64:	4613      	mov	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d105      	bne.n	8004c84 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f962 	bl	8004f48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	3301      	adds	r3, #1
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	791b      	ldrb	r3, [r3, #4]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d3e4      	bcc.n	8004c60 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f002 fd1f 	bl	80076de <USB_ReadInterrupts>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004caa:	d13c      	bne.n	8004d26 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cac:	2301      	movs	r3, #1
 8004cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb0:	e02b      	b.n	8004d0a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	3318      	adds	r3, #24
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d115      	bne.n	8004d04 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004cd8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	da12      	bge.n	8004d04 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	3317      	adds	r3, #23
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f922 	bl	8004f48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	3301      	adds	r3, #1
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	791b      	ldrb	r3, [r3, #4]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d3cd      	bcc.n	8004cb2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f002 fcd7 	bl	80076de <USB_ReadInterrupts>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d3a:	d156      	bne.n	8004dea <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d40:	e045      	b.n	8004dce <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d56:	4613      	mov	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d12e      	bne.n	8004dc8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	da2b      	bge.n	8004dc8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004d7c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d121      	bne.n	8004dc8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004d96:	2201      	movs	r2, #1
 8004d98:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dc4:	6053      	str	r3, [r2, #4]
            break;
 8004dc6:	e008      	b.n	8004dda <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	3301      	adds	r3, #1
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	791b      	ldrb	r3, [r3, #4]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d3b3      	bcc.n	8004d42 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f002 fc75 	bl	80076de <USB_ReadInterrupts>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dfe:	d10a      	bne.n	8004e16 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f88d 	bl	8004f20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f002 fc5f 	bl	80076de <USB_ReadInterrupts>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d115      	bne.n	8004e56 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f879 	bl	8004f34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6859      	ldr	r1, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	e000      	b.n	8004e56 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004e54:	bf00      	nop
    }
  }
}
 8004e56:	3734      	adds	r7, #52	@ 0x34
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd90      	pop	{r4, r7, pc}

08004e5c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	da0c      	bge.n	8004f76 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	f003 020f 	and.w	r2, r3, #15
 8004f62:	4613      	mov	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	3310      	adds	r3, #16
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	4413      	add	r3, r2
 8004f70:	3304      	adds	r3, #4
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e00c      	b.n	8004f90 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	f003 020f 	and.w	r2, r3, #15
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68f9      	ldr	r1, [r7, #12]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f002 fa40 	bl	800741c <USB_EPStopXfer>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004fa0:	7afb      	ldrb	r3, [r7, #11]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b08a      	sub	sp, #40	@ 0x28
 8004fae:	af02      	add	r7, sp, #8
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	3310      	adds	r3, #16
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	3304      	adds	r3, #4
 8004fd0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	695a      	ldr	r2, [r3, #20]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d901      	bls.n	8004fe2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e06b      	b.n	80050ba <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d902      	bls.n	8004ffe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3303      	adds	r3, #3
 8005002:	089b      	lsrs	r3, r3, #2
 8005004:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005006:	e02a      	b.n	800505e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	429a      	cmp	r2, r3
 800501c:	d902      	bls.n	8005024 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	3303      	adds	r3, #3
 8005028:	089b      	lsrs	r3, r3, #2
 800502a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	68d9      	ldr	r1, [r3, #12]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	b2da      	uxtb	r2, r3
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	4603      	mov	r3, r0
 8005040:	6978      	ldr	r0, [r7, #20]
 8005042:	f002 fa95 	bl	8007570 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	441a      	add	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	441a      	add	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	429a      	cmp	r2, r3
 8005072:	d809      	bhi.n	8005088 <PCD_WriteEmptyTxFifo+0xde>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800507c:	429a      	cmp	r2, r3
 800507e:	d203      	bcs.n	8005088 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1bf      	bne.n	8005008 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	429a      	cmp	r2, r3
 8005092:	d811      	bhi.n	80050b8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	2201      	movs	r2, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	6939      	ldr	r1, [r7, #16]
 80050b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050b4:	4013      	ands	r3, r2
 80050b6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3720      	adds	r7, #32
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	333c      	adds	r3, #60	@ 0x3c
 80050dc:	3304      	adds	r3, #4
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	799b      	ldrb	r3, [r3, #6]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d17b      	bne.n	80051f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f003 0308 	and.w	r3, r3, #8
 8005100:	2b00      	cmp	r3, #0
 8005102:	d015      	beq.n	8005130 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	4a61      	ldr	r2, [pc, #388]	@ (800528c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	f240 80b9 	bls.w	8005280 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80b3 	beq.w	8005280 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005126:	461a      	mov	r2, r3
 8005128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800512c:	6093      	str	r3, [r2, #8]
 800512e:	e0a7      	b.n	8005280 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005146:	461a      	mov	r2, r3
 8005148:	2320      	movs	r3, #32
 800514a:	6093      	str	r3, [r2, #8]
 800514c:	e098      	b.n	8005280 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005154:	2b00      	cmp	r3, #0
 8005156:	f040 8093 	bne.w	8005280 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	4a4b      	ldr	r2, [pc, #300]	@ (800528c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d90f      	bls.n	8005182 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005178:	461a      	mov	r2, r3
 800517a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800517e:	6093      	str	r3, [r2, #8]
 8005180:	e07e      	b.n	8005280 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	4413      	add	r3, r2
 8005194:	3304      	adds	r3, #4
 8005196:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	0159      	lsls	r1, r3, #5
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	440b      	add	r3, r1
 80051a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ae:	1ad2      	subs	r2, r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d114      	bne.n	80051e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051cc:	461a      	mov	r2, r3
 80051ce:	2101      	movs	r1, #1
 80051d0:	f002 fb4a 	bl	8007868 <USB_EP0_OutStart>
 80051d4:	e006      	b.n	80051e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	441a      	add	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff fe36 	bl	8004e5c <HAL_PCD_DataOutStageCallback>
 80051f0:	e046      	b.n	8005280 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4a26      	ldr	r2, [pc, #152]	@ (8005290 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d124      	bne.n	8005244 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005210:	461a      	mov	r2, r3
 8005212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005216:	6093      	str	r3, [r2, #8]
 8005218:	e032      	b.n	8005280 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005230:	461a      	mov	r2, r3
 8005232:	2320      	movs	r3, #32
 8005234:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	4619      	mov	r1, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff fe0d 	bl	8004e5c <HAL_PCD_DataOutStageCallback>
 8005242:	e01d      	b.n	8005280 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d114      	bne.n	8005274 <PCD_EP_OutXfrComplete_int+0x1b0>
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d108      	bne.n	8005274 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800526c:	461a      	mov	r2, r3
 800526e:	2100      	movs	r1, #0
 8005270:	f002 fafa 	bl	8007868 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff fdee 	bl	8004e5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	4f54300a 	.word	0x4f54300a
 8005290:	4f54310a 	.word	0x4f54310a

08005294 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	333c      	adds	r3, #60	@ 0x3c
 80052ac:	3304      	adds	r3, #4
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4a15      	ldr	r2, [pc, #84]	@ (800531c <PCD_EP_OutSetupPacket_int+0x88>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d90e      	bls.n	80052e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d009      	beq.n	80052e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e0:	461a      	mov	r2, r3
 80052e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff fdcf 	bl	8004e8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a0a      	ldr	r2, [pc, #40]	@ (800531c <PCD_EP_OutSetupPacket_int+0x88>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d90c      	bls.n	8005310 <PCD_EP_OutSetupPacket_int+0x7c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	799b      	ldrb	r3, [r3, #6]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d108      	bne.n	8005310 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005308:	461a      	mov	r2, r3
 800530a:	2101      	movs	r1, #1
 800530c:	f002 faac 	bl	8007868 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	4f54300a 	.word	0x4f54300a

08005320 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e267      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d075      	beq.n	8005442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005356:	4b88      	ldr	r3, [pc, #544]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	2b04      	cmp	r3, #4
 8005360:	d00c      	beq.n	800537c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005362:	4b85      	ldr	r3, [pc, #532]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800536a:	2b08      	cmp	r3, #8
 800536c:	d112      	bne.n	8005394 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800536e:	4b82      	ldr	r3, [pc, #520]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800537a:	d10b      	bne.n	8005394 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800537c:	4b7e      	ldr	r3, [pc, #504]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d05b      	beq.n	8005440 <HAL_RCC_OscConfig+0x108>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d157      	bne.n	8005440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e242      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800539c:	d106      	bne.n	80053ac <HAL_RCC_OscConfig+0x74>
 800539e:	4b76      	ldr	r3, [pc, #472]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a75      	ldr	r2, [pc, #468]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80053a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	e01d      	b.n	80053e8 <HAL_RCC_OscConfig+0xb0>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCC_OscConfig+0x98>
 80053b6:	4b70      	ldr	r3, [pc, #448]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a6f      	ldr	r2, [pc, #444]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80053bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a6c      	ldr	r2, [pc, #432]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80053c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	e00b      	b.n	80053e8 <HAL_RCC_OscConfig+0xb0>
 80053d0:	4b69      	ldr	r3, [pc, #420]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a68      	ldr	r2, [pc, #416]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80053d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	4b66      	ldr	r3, [pc, #408]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a65      	ldr	r2, [pc, #404]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80053e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d013      	beq.n	8005418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7fc fa68 	bl	80018c4 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f8:	f7fc fa64 	bl	80018c4 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b64      	cmp	r3, #100	@ 0x64
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e207      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540a:	4b5b      	ldr	r3, [pc, #364]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0xc0>
 8005416:	e014      	b.n	8005442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005418:	f7fc fa54 	bl	80018c4 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005420:	f7fc fa50 	bl	80018c4 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	@ 0x64
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e1f3      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005432:	4b51      	ldr	r3, [pc, #324]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f0      	bne.n	8005420 <HAL_RCC_OscConfig+0xe8>
 800543e:	e000      	b.n	8005442 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d063      	beq.n	8005516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800544e:	4b4a      	ldr	r3, [pc, #296]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800545a:	4b47      	ldr	r3, [pc, #284]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005462:	2b08      	cmp	r3, #8
 8005464:	d11c      	bne.n	80054a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005466:	4b44      	ldr	r3, [pc, #272]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d116      	bne.n	80054a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005472:	4b41      	ldr	r3, [pc, #260]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <HAL_RCC_OscConfig+0x152>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d001      	beq.n	800548a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e1c7      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548a:	4b3b      	ldr	r3, [pc, #236]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4937      	ldr	r1, [pc, #220]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800549e:	e03a      	b.n	8005516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d020      	beq.n	80054ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054a8:	4b34      	ldr	r3, [pc, #208]	@ (800557c <HAL_RCC_OscConfig+0x244>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ae:	f7fc fa09 	bl	80018c4 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b4:	e008      	b.n	80054c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054b6:	f7fc fa05 	bl	80018c4 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e1a8      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d4:	4b28      	ldr	r3, [pc, #160]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	4925      	ldr	r1, [pc, #148]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	600b      	str	r3, [r1, #0]
 80054e8:	e015      	b.n	8005516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ea:	4b24      	ldr	r3, [pc, #144]	@ (800557c <HAL_RCC_OscConfig+0x244>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fc f9e8 	bl	80018c4 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f8:	f7fc f9e4 	bl	80018c4 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e187      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550a:	4b1b      	ldr	r3, [pc, #108]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d036      	beq.n	8005590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d016      	beq.n	8005558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800552a:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <HAL_RCC_OscConfig+0x248>)
 800552c:	2201      	movs	r2, #1
 800552e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fc f9c8 	bl	80018c4 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005538:	f7fc f9c4 	bl	80018c4 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e167      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554a:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <HAL_RCC_OscConfig+0x240>)
 800554c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x200>
 8005556:	e01b      	b.n	8005590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005558:	4b09      	ldr	r3, [pc, #36]	@ (8005580 <HAL_RCC_OscConfig+0x248>)
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800555e:	f7fc f9b1 	bl	80018c4 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005564:	e00e      	b.n	8005584 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005566:	f7fc f9ad 	bl	80018c4 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d907      	bls.n	8005584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e150      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
 8005578:	40023800 	.word	0x40023800
 800557c:	42470000 	.word	0x42470000
 8005580:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005584:	4b88      	ldr	r3, [pc, #544]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ea      	bne.n	8005566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8097 	beq.w	80056cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800559e:	2300      	movs	r3, #0
 80055a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a2:	4b81      	ldr	r3, [pc, #516]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10f      	bne.n	80055ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ae:	2300      	movs	r3, #0
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	4b7d      	ldr	r3, [pc, #500]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b6:	4a7c      	ldr	r2, [pc, #496]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 80055b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80055be:	4b7a      	ldr	r3, [pc, #488]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c6:	60bb      	str	r3, [r7, #8]
 80055c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ca:	2301      	movs	r3, #1
 80055cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ce:	4b77      	ldr	r3, [pc, #476]	@ (80057ac <HAL_RCC_OscConfig+0x474>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d118      	bne.n	800560c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055da:	4b74      	ldr	r3, [pc, #464]	@ (80057ac <HAL_RCC_OscConfig+0x474>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a73      	ldr	r2, [pc, #460]	@ (80057ac <HAL_RCC_OscConfig+0x474>)
 80055e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e6:	f7fc f96d 	bl	80018c4 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ee:	f7fc f969 	bl	80018c4 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e10c      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005600:	4b6a      	ldr	r3, [pc, #424]	@ (80057ac <HAL_RCC_OscConfig+0x474>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d106      	bne.n	8005622 <HAL_RCC_OscConfig+0x2ea>
 8005614:	4b64      	ldr	r3, [pc, #400]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005618:	4a63      	ldr	r2, [pc, #396]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005620:	e01c      	b.n	800565c <HAL_RCC_OscConfig+0x324>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b05      	cmp	r3, #5
 8005628:	d10c      	bne.n	8005644 <HAL_RCC_OscConfig+0x30c>
 800562a:	4b5f      	ldr	r3, [pc, #380]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562e:	4a5e      	ldr	r2, [pc, #376]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005630:	f043 0304 	orr.w	r3, r3, #4
 8005634:	6713      	str	r3, [r2, #112]	@ 0x70
 8005636:	4b5c      	ldr	r3, [pc, #368]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563a:	4a5b      	ldr	r2, [pc, #364]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	6713      	str	r3, [r2, #112]	@ 0x70
 8005642:	e00b      	b.n	800565c <HAL_RCC_OscConfig+0x324>
 8005644:	4b58      	ldr	r3, [pc, #352]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005648:	4a57      	ldr	r2, [pc, #348]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005650:	4b55      	ldr	r3, [pc, #340]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005654:	4a54      	ldr	r2, [pc, #336]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005656:	f023 0304 	bic.w	r3, r3, #4
 800565a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d015      	beq.n	8005690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005664:	f7fc f92e 	bl	80018c4 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566a:	e00a      	b.n	8005682 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566c:	f7fc f92a 	bl	80018c4 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800567a:	4293      	cmp	r3, r2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e0cb      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005682:	4b49      	ldr	r3, [pc, #292]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0ee      	beq.n	800566c <HAL_RCC_OscConfig+0x334>
 800568e:	e014      	b.n	80056ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005690:	f7fc f918 	bl	80018c4 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005696:	e00a      	b.n	80056ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005698:	f7fc f914 	bl	80018c4 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e0b5      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ae:	4b3e      	ldr	r3, [pc, #248]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1ee      	bne.n	8005698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d105      	bne.n	80056cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c0:	4b39      	ldr	r3, [pc, #228]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 80056c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c4:	4a38      	ldr	r2, [pc, #224]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 80056c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 80a1 	beq.w	8005818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056d6:	4b34      	ldr	r3, [pc, #208]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 030c 	and.w	r3, r3, #12
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d05c      	beq.n	800579c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d141      	bne.n	800576e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ea:	4b31      	ldr	r3, [pc, #196]	@ (80057b0 <HAL_RCC_OscConfig+0x478>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f0:	f7fc f8e8 	bl	80018c4 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fc f8e4 	bl	80018c4 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e087      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570a:	4b27      	ldr	r3, [pc, #156]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69da      	ldr	r2, [r3, #28]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005724:	019b      	lsls	r3, r3, #6
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572c:	085b      	lsrs	r3, r3, #1
 800572e:	3b01      	subs	r3, #1
 8005730:	041b      	lsls	r3, r3, #16
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	491b      	ldr	r1, [pc, #108]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 800573c:	4313      	orrs	r3, r2
 800573e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005740:	4b1b      	ldr	r3, [pc, #108]	@ (80057b0 <HAL_RCC_OscConfig+0x478>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005746:	f7fc f8bd 	bl	80018c4 <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574c:	e008      	b.n	8005760 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800574e:	f7fc f8b9 	bl	80018c4 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e05c      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005760:	4b11      	ldr	r3, [pc, #68]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0f0      	beq.n	800574e <HAL_RCC_OscConfig+0x416>
 800576c:	e054      	b.n	8005818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800576e:	4b10      	ldr	r3, [pc, #64]	@ (80057b0 <HAL_RCC_OscConfig+0x478>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005774:	f7fc f8a6 	bl	80018c4 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577c:	f7fc f8a2 	bl	80018c4 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e045      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578e:	4b06      	ldr	r3, [pc, #24]	@ (80057a8 <HAL_RCC_OscConfig+0x470>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x444>
 800579a:	e03d      	b.n	8005818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d107      	bne.n	80057b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e038      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
 80057a8:	40023800 	.word	0x40023800
 80057ac:	40007000 	.word	0x40007000
 80057b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005824 <HAL_RCC_OscConfig+0x4ec>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d028      	beq.n	8005814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d121      	bne.n	8005814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057da:	429a      	cmp	r2, r3
 80057dc:	d11a      	bne.n	8005814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80057e4:	4013      	ands	r3, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d111      	bne.n	8005814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	3b01      	subs	r3, #1
 80057fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005800:	429a      	cmp	r2, r3
 8005802:	d107      	bne.n	8005814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005810:	429a      	cmp	r2, r3
 8005812:	d001      	beq.n	8005818 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40023800 	.word	0x40023800

08005828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0cc      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800583c:	4b68      	ldr	r3, [pc, #416]	@ (80059e0 <HAL_RCC_ClockConfig+0x1b8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d90c      	bls.n	8005864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584a:	4b65      	ldr	r3, [pc, #404]	@ (80059e0 <HAL_RCC_ClockConfig+0x1b8>)
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005852:	4b63      	ldr	r3, [pc, #396]	@ (80059e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d001      	beq.n	8005864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0b8      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d020      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800587c:	4b59      	ldr	r3, [pc, #356]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4a58      	ldr	r2, [pc, #352]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005886:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005894:	4b53      	ldr	r3, [pc, #332]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	4a52      	ldr	r2, [pc, #328]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800589e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a0:	4b50      	ldr	r3, [pc, #320]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	494d      	ldr	r1, [pc, #308]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d044      	beq.n	8005948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d107      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c6:	4b47      	ldr	r3, [pc, #284]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d119      	bne.n	8005906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e07f      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d003      	beq.n	80058e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d107      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e6:	4b3f      	ldr	r3, [pc, #252]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e06f      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f6:	4b3b      	ldr	r3, [pc, #236]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e067      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005906:	4b37      	ldr	r3, [pc, #220]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f023 0203 	bic.w	r2, r3, #3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	4934      	ldr	r1, [pc, #208]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	4313      	orrs	r3, r2
 8005916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005918:	f7fb ffd4 	bl	80018c4 <HAL_GetTick>
 800591c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591e:	e00a      	b.n	8005936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005920:	f7fb ffd0 	bl	80018c4 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e04f      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005936:	4b2b      	ldr	r3, [pc, #172]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 020c 	and.w	r2, r3, #12
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	429a      	cmp	r2, r3
 8005946:	d1eb      	bne.n	8005920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005948:	4b25      	ldr	r3, [pc, #148]	@ (80059e0 <HAL_RCC_ClockConfig+0x1b8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d20c      	bcs.n	8005970 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005956:	4b22      	ldr	r3, [pc, #136]	@ (80059e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800595e:	4b20      	ldr	r3, [pc, #128]	@ (80059e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d001      	beq.n	8005970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e032      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800597c:	4b19      	ldr	r3, [pc, #100]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4916      	ldr	r1, [pc, #88]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	4313      	orrs	r3, r2
 800598c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800599a:	4b12      	ldr	r3, [pc, #72]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	490e      	ldr	r1, [pc, #56]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059ae:	f000 f821 	bl	80059f4 <HAL_RCC_GetSysClockFreq>
 80059b2:	4602      	mov	r2, r0
 80059b4:	4b0b      	ldr	r3, [pc, #44]	@ (80059e4 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	490a      	ldr	r1, [pc, #40]	@ (80059e8 <HAL_RCC_ClockConfig+0x1c0>)
 80059c0:	5ccb      	ldrb	r3, [r1, r3]
 80059c2:	fa22 f303 	lsr.w	r3, r2, r3
 80059c6:	4a09      	ldr	r2, [pc, #36]	@ (80059ec <HAL_RCC_ClockConfig+0x1c4>)
 80059c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80059ca:	4b09      	ldr	r3, [pc, #36]	@ (80059f0 <HAL_RCC_ClockConfig+0x1c8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fb ff34 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40023c00 	.word	0x40023c00
 80059e4:	40023800 	.word	0x40023800
 80059e8:	080079f8 	.word	0x080079f8
 80059ec:	20000008 	.word	0x20000008
 80059f0:	2000000c 	.word	0x2000000c

080059f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f8:	b094      	sub	sp, #80	@ 0x50
 80059fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a0c:	4b79      	ldr	r3, [pc, #484]	@ (8005bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 030c 	and.w	r3, r3, #12
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d00d      	beq.n	8005a34 <HAL_RCC_GetSysClockFreq+0x40>
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	f200 80e1 	bhi.w	8005be0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_RCC_GetSysClockFreq+0x34>
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d003      	beq.n	8005a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a26:	e0db      	b.n	8005be0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a28:	4b73      	ldr	r3, [pc, #460]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a2c:	e0db      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a2e:	4b72      	ldr	r3, [pc, #456]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a32:	e0d8      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a34:	4b6f      	ldr	r3, [pc, #444]	@ (8005bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8005bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d063      	beq.n	8005b12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8005bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	099b      	lsrs	r3, r3, #6
 8005a50:	2200      	movs	r2, #0
 8005a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a5e:	2300      	movs	r3, #0
 8005a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005a66:	4622      	mov	r2, r4
 8005a68:	462b      	mov	r3, r5
 8005a6a:	f04f 0000 	mov.w	r0, #0
 8005a6e:	f04f 0100 	mov.w	r1, #0
 8005a72:	0159      	lsls	r1, r3, #5
 8005a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a78:	0150      	lsls	r0, r2, #5
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4621      	mov	r1, r4
 8005a80:	1a51      	subs	r1, r2, r1
 8005a82:	6139      	str	r1, [r7, #16]
 8005a84:	4629      	mov	r1, r5
 8005a86:	eb63 0301 	sbc.w	r3, r3, r1
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a98:	4659      	mov	r1, fp
 8005a9a:	018b      	lsls	r3, r1, #6
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005aa2:	4651      	mov	r1, sl
 8005aa4:	018a      	lsls	r2, r1, #6
 8005aa6:	4651      	mov	r1, sl
 8005aa8:	ebb2 0801 	subs.w	r8, r2, r1
 8005aac:	4659      	mov	r1, fp
 8005aae:	eb63 0901 	sbc.w	r9, r3, r1
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ac6:	4690      	mov	r8, r2
 8005ac8:	4699      	mov	r9, r3
 8005aca:	4623      	mov	r3, r4
 8005acc:	eb18 0303 	adds.w	r3, r8, r3
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	462b      	mov	r3, r5
 8005ad4:	eb49 0303 	adc.w	r3, r9, r3
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	028b      	lsls	r3, r1, #10
 8005aea:	4621      	mov	r1, r4
 8005aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005af0:	4621      	mov	r1, r4
 8005af2:	028a      	lsls	r2, r1, #10
 8005af4:	4610      	mov	r0, r2
 8005af6:	4619      	mov	r1, r3
 8005af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005afa:	2200      	movs	r2, #0
 8005afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b04:	f7fa fb60 	bl	80001c8 <__aeabi_uldivmod>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b10:	e058      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b12:	4b38      	ldr	r3, [pc, #224]	@ (8005bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	099b      	lsrs	r3, r3, #6
 8005b18:	2200      	movs	r2, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b22:	623b      	str	r3, [r7, #32]
 8005b24:	2300      	movs	r3, #0
 8005b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	464b      	mov	r3, r9
 8005b30:	f04f 0000 	mov.w	r0, #0
 8005b34:	f04f 0100 	mov.w	r1, #0
 8005b38:	0159      	lsls	r1, r3, #5
 8005b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b3e:	0150      	lsls	r0, r2, #5
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4641      	mov	r1, r8
 8005b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b64:	ebb2 040a 	subs.w	r4, r2, sl
 8005b68:	eb63 050b 	sbc.w	r5, r3, fp
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	00eb      	lsls	r3, r5, #3
 8005b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b7a:	00e2      	lsls	r2, r4, #3
 8005b7c:	4614      	mov	r4, r2
 8005b7e:	461d      	mov	r5, r3
 8005b80:	4643      	mov	r3, r8
 8005b82:	18e3      	adds	r3, r4, r3
 8005b84:	603b      	str	r3, [r7, #0]
 8005b86:	464b      	mov	r3, r9
 8005b88:	eb45 0303 	adc.w	r3, r5, r3
 8005b8c:	607b      	str	r3, [r7, #4]
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	028b      	lsls	r3, r1, #10
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	028a      	lsls	r2, r1, #10
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4619      	mov	r1, r3
 8005bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bae:	2200      	movs	r2, #0
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	61fa      	str	r2, [r7, #28]
 8005bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb8:	f7fa fb06 	bl	80001c8 <__aeabi_uldivmod>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	0c1b      	lsrs	r3, r3, #16
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	3301      	adds	r3, #1
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005bd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005bde:	e002      	b.n	8005be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005be0:	4b05      	ldr	r3, [pc, #20]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005be2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3750      	adds	r7, #80	@ 0x50
 8005bec:	46bd      	mov	sp, r7
 8005bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	00f42400 	.word	0x00f42400

08005bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c00:	4b03      	ldr	r3, [pc, #12]	@ (8005c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c02:	681b      	ldr	r3, [r3, #0]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20000008 	.word	0x20000008

08005c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c18:	f7ff fff0 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	0a9b      	lsrs	r3, r3, #10
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	4903      	ldr	r1, [pc, #12]	@ (8005c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c2a:	5ccb      	ldrb	r3, [r1, r3]
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40023800 	.word	0x40023800
 8005c38:	08007a08 	.word	0x08007a08

08005c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c40:	f7ff ffdc 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8005c44:	4602      	mov	r2, r0
 8005c46:	4b05      	ldr	r3, [pc, #20]	@ (8005c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	0b5b      	lsrs	r3, r3, #13
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	4903      	ldr	r1, [pc, #12]	@ (8005c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c52:	5ccb      	ldrb	r3, [r1, r3]
 8005c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	08007a08 	.word	0x08007a08

08005c64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d105      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d035      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c8c:	4b62      	ldr	r3, [pc, #392]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c92:	f7fb fe17 	bl	80018c4 <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c98:	e008      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c9a:	f7fb fe13 	bl	80018c4 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e0b0      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cac:	4b5b      	ldr	r3, [pc, #364]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f0      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	019a      	lsls	r2, r3, #6
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	071b      	lsls	r3, r3, #28
 8005cc4:	4955      	ldr	r1, [pc, #340]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ccc:	4b52      	ldr	r3, [pc, #328]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cd2:	f7fb fdf7 	bl	80018c4 <HAL_GetTick>
 8005cd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cd8:	e008      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cda:	f7fb fdf3 	bl	80018c4 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e090      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cec:	4b4b      	ldr	r3, [pc, #300]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f0      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8083 	beq.w	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	4b44      	ldr	r3, [pc, #272]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0e:	4a43      	ldr	r2, [pc, #268]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d16:	4b41      	ldr	r3, [pc, #260]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d22:	4b3f      	ldr	r3, [pc, #252]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a3e      	ldr	r2, [pc, #248]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d2e:	f7fb fdc9 	bl	80018c4 <HAL_GetTick>
 8005d32:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d34:	e008      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d36:	f7fb fdc5 	bl	80018c4 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e062      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d48:	4b35      	ldr	r3, [pc, #212]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f0      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d54:	4b31      	ldr	r3, [pc, #196]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d5c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d02f      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d028      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d72:	4b2a      	ldr	r3, [pc, #168]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d7c:	4b29      	ldr	r3, [pc, #164]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d82:	4b28      	ldr	r3, [pc, #160]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d88:	4a24      	ldr	r2, [pc, #144]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d8e:	4b23      	ldr	r3, [pc, #140]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d114      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d9a:	f7fb fd93 	bl	80018c4 <HAL_GetTick>
 8005d9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da0:	e00a      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da2:	f7fb fd8f 	bl	80018c4 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e02a      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db8:	4b18      	ldr	r3, [pc, #96]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0ee      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dd0:	d10d      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005dd2:	4b12      	ldr	r3, [pc, #72]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005de6:	490d      	ldr	r1, [pc, #52]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	608b      	str	r3, [r1, #8]
 8005dec:	e005      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005dee:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	4a0a      	ldr	r2, [pc, #40]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005df8:	6093      	str	r3, [r2, #8]
 8005dfa:	4b08      	ldr	r3, [pc, #32]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dfc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e06:	4905      	ldr	r1, [pc, #20]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	42470068 	.word	0x42470068
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	40007000 	.word	0x40007000
 8005e24:	42470e40 	.word	0x42470e40

08005e28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d13f      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e46:	4b24      	ldr	r3, [pc, #144]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e4e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d006      	beq.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e5c:	d12f      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e60:	617b      	str	r3, [r7, #20]
          break;
 8005e62:	e02f      	b.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e64:	4b1c      	ldr	r3, [pc, #112]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e70:	d108      	bne.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e72:	4b19      	ldr	r3, [pc, #100]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e7a:	4a19      	ldr	r2, [pc, #100]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	e007      	b.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e84:	4b14      	ldr	r3, [pc, #80]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e92:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e94:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e9a:	099b      	lsrs	r3, r3, #6
 8005e9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eae:	0f1b      	lsrs	r3, r3, #28
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eba:	617b      	str	r3, [r7, #20]
          break;
 8005ebc:	e002      	b.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
          break;
 8005ec2:	bf00      	nop
        }
      }
      break;
 8005ec4:	e000      	b.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005ec6:	bf00      	nop
    }
  }
  return frequency;
 8005ec8:	697b      	ldr	r3, [r7, #20]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	00bb8000 	.word	0x00bb8000
 8005ee0:	00f42400 	.word	0x00f42400

08005ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e07b      	b.n	8005fee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d108      	bne.n	8005f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f06:	d009      	beq.n	8005f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	61da      	str	r2, [r3, #28]
 8005f0e:	e005      	b.n	8005f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fb f9aa 	bl	8001290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005f64:	431a      	orrs	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa0:	ea42 0103 	orr.w	r1, r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	0c1b      	lsrs	r3, r3, #16
 8005fba:	f003 0104 	and.w	r1, r3, #4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc2:	f003 0210 	and.w	r2, r3, #16
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e041      	b.n	800608c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fb fa67 	bl	80014f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2202      	movs	r2, #2
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f000 f8ef 	bl	8006218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e0ae      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b0c      	cmp	r3, #12
 80060be:	f200 809f 	bhi.w	8006200 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060c2:	a201      	add	r2, pc, #4	@ (adr r2, 80060c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c8:	080060fd 	.word	0x080060fd
 80060cc:	08006201 	.word	0x08006201
 80060d0:	08006201 	.word	0x08006201
 80060d4:	08006201 	.word	0x08006201
 80060d8:	0800613d 	.word	0x0800613d
 80060dc:	08006201 	.word	0x08006201
 80060e0:	08006201 	.word	0x08006201
 80060e4:	08006201 	.word	0x08006201
 80060e8:	0800617f 	.word	0x0800617f
 80060ec:	08006201 	.word	0x08006201
 80060f0:	08006201 	.word	0x08006201
 80060f4:	08006201 	.word	0x08006201
 80060f8:	080061bf 	.word	0x080061bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 f934 	bl	8006370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0208 	orr.w	r2, r2, #8
 8006116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0204 	bic.w	r2, r2, #4
 8006126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6999      	ldr	r1, [r3, #24]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	619a      	str	r2, [r3, #24]
      break;
 800613a:	e064      	b.n	8006206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	4618      	mov	r0, r3
 8006144:	f000 f984 	bl	8006450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6999      	ldr	r1, [r3, #24]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	021a      	lsls	r2, r3, #8
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	619a      	str	r2, [r3, #24]
      break;
 800617c:	e043      	b.n	8006206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	4618      	mov	r0, r3
 8006186:	f000 f9d9 	bl	800653c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f042 0208 	orr.w	r2, r2, #8
 8006198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0204 	bic.w	r2, r2, #4
 80061a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69d9      	ldr	r1, [r3, #28]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	61da      	str	r2, [r3, #28]
      break;
 80061bc:	e023      	b.n	8006206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fa2d 	bl	8006624 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69d9      	ldr	r1, [r3, #28]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	021a      	lsls	r2, r3, #8
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	61da      	str	r2, [r3, #28]
      break;
 80061fe:	e002      	b.n	8006206 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	75fb      	strb	r3, [r7, #23]
      break;
 8006204:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800620e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a46      	ldr	r2, [pc, #280]	@ (8006344 <TIM_Base_SetConfig+0x12c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d013      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006236:	d00f      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a43      	ldr	r2, [pc, #268]	@ (8006348 <TIM_Base_SetConfig+0x130>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00b      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a42      	ldr	r2, [pc, #264]	@ (800634c <TIM_Base_SetConfig+0x134>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d007      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a41      	ldr	r2, [pc, #260]	@ (8006350 <TIM_Base_SetConfig+0x138>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a40      	ldr	r2, [pc, #256]	@ (8006354 <TIM_Base_SetConfig+0x13c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d108      	bne.n	800626a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a35      	ldr	r2, [pc, #212]	@ (8006344 <TIM_Base_SetConfig+0x12c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d02b      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006278:	d027      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a32      	ldr	r2, [pc, #200]	@ (8006348 <TIM_Base_SetConfig+0x130>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d023      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a31      	ldr	r2, [pc, #196]	@ (800634c <TIM_Base_SetConfig+0x134>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01f      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a30      	ldr	r2, [pc, #192]	@ (8006350 <TIM_Base_SetConfig+0x138>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01b      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a2f      	ldr	r2, [pc, #188]	@ (8006354 <TIM_Base_SetConfig+0x13c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d017      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a2e      	ldr	r2, [pc, #184]	@ (8006358 <TIM_Base_SetConfig+0x140>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d013      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a2d      	ldr	r2, [pc, #180]	@ (800635c <TIM_Base_SetConfig+0x144>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00f      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006360 <TIM_Base_SetConfig+0x148>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00b      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a2b      	ldr	r2, [pc, #172]	@ (8006364 <TIM_Base_SetConfig+0x14c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d007      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006368 <TIM_Base_SetConfig+0x150>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d003      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a29      	ldr	r2, [pc, #164]	@ (800636c <TIM_Base_SetConfig+0x154>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d108      	bne.n	80062dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a10      	ldr	r2, [pc, #64]	@ (8006344 <TIM_Base_SetConfig+0x12c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_Base_SetConfig+0xf8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a12      	ldr	r2, [pc, #72]	@ (8006354 <TIM_Base_SetConfig+0x13c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d103      	bne.n	8006318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b01      	cmp	r3, #1
 8006328:	d105      	bne.n	8006336 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f023 0201 	bic.w	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	611a      	str	r2, [r3, #16]
  }
}
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40010000 	.word	0x40010000
 8006348:	40000400 	.word	0x40000400
 800634c:	40000800 	.word	0x40000800
 8006350:	40000c00 	.word	0x40000c00
 8006354:	40010400 	.word	0x40010400
 8006358:	40014000 	.word	0x40014000
 800635c:	40014400 	.word	0x40014400
 8006360:	40014800 	.word	0x40014800
 8006364:	40001800 	.word	0x40001800
 8006368:	40001c00 	.word	0x40001c00
 800636c:	40002000 	.word	0x40002000

08006370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	f023 0201 	bic.w	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0303 	bic.w	r3, r3, #3
 80063a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f023 0302 	bic.w	r3, r3, #2
 80063b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a20      	ldr	r2, [pc, #128]	@ (8006448 <TIM_OC1_SetConfig+0xd8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_OC1_SetConfig+0x64>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a1f      	ldr	r2, [pc, #124]	@ (800644c <TIM_OC1_SetConfig+0xdc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d10c      	bne.n	80063ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f023 0308 	bic.w	r3, r3, #8
 80063da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 0304 	bic.w	r3, r3, #4
 80063ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a15      	ldr	r2, [pc, #84]	@ (8006448 <TIM_OC1_SetConfig+0xd8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d003      	beq.n	80063fe <TIM_OC1_SetConfig+0x8e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a14      	ldr	r2, [pc, #80]	@ (800644c <TIM_OC1_SetConfig+0xdc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d111      	bne.n	8006422 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800640c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	621a      	str	r2, [r3, #32]
}
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40010000 	.word	0x40010000
 800644c:	40010400 	.word	0x40010400

08006450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	f023 0210 	bic.w	r2, r3, #16
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800647e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f023 0320 	bic.w	r3, r3, #32
 800649a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a22      	ldr	r2, [pc, #136]	@ (8006534 <TIM_OC2_SetConfig+0xe4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC2_SetConfig+0x68>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a21      	ldr	r2, [pc, #132]	@ (8006538 <TIM_OC2_SetConfig+0xe8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d10d      	bne.n	80064d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	011b      	lsls	r3, r3, #4
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a17      	ldr	r2, [pc, #92]	@ (8006534 <TIM_OC2_SetConfig+0xe4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d003      	beq.n	80064e4 <TIM_OC2_SetConfig+0x94>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a16      	ldr	r2, [pc, #88]	@ (8006538 <TIM_OC2_SetConfig+0xe8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d113      	bne.n	800650c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	621a      	str	r2, [r3, #32]
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40010000 	.word	0x40010000
 8006538:	40010400 	.word	0x40010400

0800653c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	021b      	lsls	r3, r3, #8
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a21      	ldr	r2, [pc, #132]	@ (800661c <TIM_OC3_SetConfig+0xe0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_OC3_SetConfig+0x66>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a20      	ldr	r2, [pc, #128]	@ (8006620 <TIM_OC3_SetConfig+0xe4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d10d      	bne.n	80065be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	021b      	lsls	r3, r3, #8
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a16      	ldr	r2, [pc, #88]	@ (800661c <TIM_OC3_SetConfig+0xe0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_OC3_SetConfig+0x92>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a15      	ldr	r2, [pc, #84]	@ (8006620 <TIM_OC3_SetConfig+0xe4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d113      	bne.n	80065f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	621a      	str	r2, [r3, #32]
}
 8006610:	bf00      	nop
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	40010000 	.word	0x40010000
 8006620:	40010400 	.word	0x40010400

08006624 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800665a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800666e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	031b      	lsls	r3, r3, #12
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a12      	ldr	r2, [pc, #72]	@ (80066c8 <TIM_OC4_SetConfig+0xa4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d003      	beq.n	800668c <TIM_OC4_SetConfig+0x68>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a11      	ldr	r2, [pc, #68]	@ (80066cc <TIM_OC4_SetConfig+0xa8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d109      	bne.n	80066a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006692:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	019b      	lsls	r3, r3, #6
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4313      	orrs	r3, r2
 800669e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	621a      	str	r2, [r3, #32]
}
 80066ba:	bf00      	nop
 80066bc:	371c      	adds	r7, #28
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40010000 	.word	0x40010000
 80066cc:	40010400 	.word	0x40010400

080066d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e05a      	b.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800670e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a21      	ldr	r2, [pc, #132]	@ (80067ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d022      	beq.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006734:	d01d      	beq.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a1d      	ldr	r2, [pc, #116]	@ (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d018      	beq.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a1b      	ldr	r2, [pc, #108]	@ (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d013      	beq.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a1a      	ldr	r2, [pc, #104]	@ (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00e      	beq.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a18      	ldr	r2, [pc, #96]	@ (80067bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d009      	beq.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a17      	ldr	r2, [pc, #92]	@ (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d004      	beq.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a15      	ldr	r2, [pc, #84]	@ (80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d10c      	bne.n	800678c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006778:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	4313      	orrs	r3, r2
 8006782:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40010000 	.word	0x40010000
 80067b0:	40000400 	.word	0x40000400
 80067b4:	40000800 	.word	0x40000800
 80067b8:	40000c00 	.word	0x40000c00
 80067bc:	40010400 	.word	0x40010400
 80067c0:	40014000 	.word	0x40014000
 80067c4:	40001800 	.word	0x40001800

080067c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e042      	b.n	8006860 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7fa fec8 	bl	8001584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2224      	movs	r2, #36	@ 0x24
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800680a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f82b 	bl	8006868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695a      	ldr	r2, [r3, #20]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800686c:	b0c0      	sub	sp, #256	@ 0x100
 800686e:	af00      	add	r7, sp, #0
 8006870:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006884:	68d9      	ldr	r1, [r3, #12]
 8006886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	ea40 0301 	orr.w	r3, r0, r1
 8006890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	431a      	orrs	r2, r3
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80068c0:	f021 010c 	bic.w	r1, r1, #12
 80068c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068ce:	430b      	orrs	r3, r1
 80068d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e2:	6999      	ldr	r1, [r3, #24]
 80068e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	ea40 0301 	orr.w	r3, r0, r1
 80068ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	4b8f      	ldr	r3, [pc, #572]	@ (8006b34 <UART_SetConfig+0x2cc>)
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d005      	beq.n	8006908 <UART_SetConfig+0xa0>
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	4b8d      	ldr	r3, [pc, #564]	@ (8006b38 <UART_SetConfig+0x2d0>)
 8006904:	429a      	cmp	r2, r3
 8006906:	d104      	bne.n	8006912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006908:	f7ff f998 	bl	8005c3c <HAL_RCC_GetPCLK2Freq>
 800690c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006910:	e003      	b.n	800691a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006912:	f7ff f97f 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 8006916:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800691a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006924:	f040 810c 	bne.w	8006b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800692c:	2200      	movs	r2, #0
 800692e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006932:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800693a:	4622      	mov	r2, r4
 800693c:	462b      	mov	r3, r5
 800693e:	1891      	adds	r1, r2, r2
 8006940:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006942:	415b      	adcs	r3, r3
 8006944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800694a:	4621      	mov	r1, r4
 800694c:	eb12 0801 	adds.w	r8, r2, r1
 8006950:	4629      	mov	r1, r5
 8006952:	eb43 0901 	adc.w	r9, r3, r1
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	f04f 0300 	mov.w	r3, #0
 800695e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800696a:	4690      	mov	r8, r2
 800696c:	4699      	mov	r9, r3
 800696e:	4623      	mov	r3, r4
 8006970:	eb18 0303 	adds.w	r3, r8, r3
 8006974:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006978:	462b      	mov	r3, r5
 800697a:	eb49 0303 	adc.w	r3, r9, r3
 800697e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800698e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006996:	460b      	mov	r3, r1
 8006998:	18db      	adds	r3, r3, r3
 800699a:	653b      	str	r3, [r7, #80]	@ 0x50
 800699c:	4613      	mov	r3, r2
 800699e:	eb42 0303 	adc.w	r3, r2, r3
 80069a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80069a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80069a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80069ac:	f7f9 fc0c 	bl	80001c8 <__aeabi_uldivmod>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4b61      	ldr	r3, [pc, #388]	@ (8006b3c <UART_SetConfig+0x2d4>)
 80069b6:	fba3 2302 	umull	r2, r3, r3, r2
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	011c      	lsls	r4, r3, #4
 80069be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80069cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80069d0:	4642      	mov	r2, r8
 80069d2:	464b      	mov	r3, r9
 80069d4:	1891      	adds	r1, r2, r2
 80069d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80069d8:	415b      	adcs	r3, r3
 80069da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80069e0:	4641      	mov	r1, r8
 80069e2:	eb12 0a01 	adds.w	sl, r2, r1
 80069e6:	4649      	mov	r1, r9
 80069e8:	eb43 0b01 	adc.w	fp, r3, r1
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a00:	4692      	mov	sl, r2
 8006a02:	469b      	mov	fp, r3
 8006a04:	4643      	mov	r3, r8
 8006a06:	eb1a 0303 	adds.w	r3, sl, r3
 8006a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a0e:	464b      	mov	r3, r9
 8006a10:	eb4b 0303 	adc.w	r3, fp, r3
 8006a14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	18db      	adds	r3, r3, r3
 8006a30:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a32:	4613      	mov	r3, r2
 8006a34:	eb42 0303 	adc.w	r3, r2, r3
 8006a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a42:	f7f9 fbc1 	bl	80001c8 <__aeabi_uldivmod>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b3c <UART_SetConfig+0x2d4>)
 8006a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	2264      	movs	r2, #100	@ 0x64
 8006a56:	fb02 f303 	mul.w	r3, r2, r3
 8006a5a:	1acb      	subs	r3, r1, r3
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006a62:	4b36      	ldr	r3, [pc, #216]	@ (8006b3c <UART_SetConfig+0x2d4>)
 8006a64:	fba3 2302 	umull	r2, r3, r3, r2
 8006a68:	095b      	lsrs	r3, r3, #5
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006a70:	441c      	add	r4, r3
 8006a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006a84:	4642      	mov	r2, r8
 8006a86:	464b      	mov	r3, r9
 8006a88:	1891      	adds	r1, r2, r2
 8006a8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a8c:	415b      	adcs	r3, r3
 8006a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a94:	4641      	mov	r1, r8
 8006a96:	1851      	adds	r1, r2, r1
 8006a98:	6339      	str	r1, [r7, #48]	@ 0x30
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	414b      	adcs	r3, r1
 8006a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006aac:	4659      	mov	r1, fp
 8006aae:	00cb      	lsls	r3, r1, #3
 8006ab0:	4651      	mov	r1, sl
 8006ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ab6:	4651      	mov	r1, sl
 8006ab8:	00ca      	lsls	r2, r1, #3
 8006aba:	4610      	mov	r0, r2
 8006abc:	4619      	mov	r1, r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	189b      	adds	r3, r3, r2
 8006ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ac8:	464b      	mov	r3, r9
 8006aca:	460a      	mov	r2, r1
 8006acc:	eb42 0303 	adc.w	r3, r2, r3
 8006ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ae8:	460b      	mov	r3, r1
 8006aea:	18db      	adds	r3, r3, r3
 8006aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aee:	4613      	mov	r3, r2
 8006af0:	eb42 0303 	adc.w	r3, r2, r3
 8006af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006afe:	f7f9 fb63 	bl	80001c8 <__aeabi_uldivmod>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4b0d      	ldr	r3, [pc, #52]	@ (8006b3c <UART_SetConfig+0x2d4>)
 8006b08:	fba3 1302 	umull	r1, r3, r3, r2
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	2164      	movs	r1, #100	@ 0x64
 8006b10:	fb01 f303 	mul.w	r3, r1, r3
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	00db      	lsls	r3, r3, #3
 8006b18:	3332      	adds	r3, #50	@ 0x32
 8006b1a:	4a08      	ldr	r2, [pc, #32]	@ (8006b3c <UART_SetConfig+0x2d4>)
 8006b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b20:	095b      	lsrs	r3, r3, #5
 8006b22:	f003 0207 	and.w	r2, r3, #7
 8006b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4422      	add	r2, r4
 8006b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b30:	e106      	b.n	8006d40 <UART_SetConfig+0x4d8>
 8006b32:	bf00      	nop
 8006b34:	40011000 	.word	0x40011000
 8006b38:	40011400 	.word	0x40011400
 8006b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b52:	4642      	mov	r2, r8
 8006b54:	464b      	mov	r3, r9
 8006b56:	1891      	adds	r1, r2, r2
 8006b58:	6239      	str	r1, [r7, #32]
 8006b5a:	415b      	adcs	r3, r3
 8006b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b62:	4641      	mov	r1, r8
 8006b64:	1854      	adds	r4, r2, r1
 8006b66:	4649      	mov	r1, r9
 8006b68:	eb43 0501 	adc.w	r5, r3, r1
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	00eb      	lsls	r3, r5, #3
 8006b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b7a:	00e2      	lsls	r2, r4, #3
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	461d      	mov	r5, r3
 8006b80:	4643      	mov	r3, r8
 8006b82:	18e3      	adds	r3, r4, r3
 8006b84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b88:	464b      	mov	r3, r9
 8006b8a:	eb45 0303 	adc.w	r3, r5, r3
 8006b8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ba2:	f04f 0200 	mov.w	r2, #0
 8006ba6:	f04f 0300 	mov.w	r3, #0
 8006baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006bae:	4629      	mov	r1, r5
 8006bb0:	008b      	lsls	r3, r1, #2
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bb8:	4621      	mov	r1, r4
 8006bba:	008a      	lsls	r2, r1, #2
 8006bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006bc0:	f7f9 fb02 	bl	80001c8 <__aeabi_uldivmod>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4b60      	ldr	r3, [pc, #384]	@ (8006d4c <UART_SetConfig+0x4e4>)
 8006bca:	fba3 2302 	umull	r2, r3, r3, r2
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	011c      	lsls	r4, r3, #4
 8006bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006bdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006be4:	4642      	mov	r2, r8
 8006be6:	464b      	mov	r3, r9
 8006be8:	1891      	adds	r1, r2, r2
 8006bea:	61b9      	str	r1, [r7, #24]
 8006bec:	415b      	adcs	r3, r3
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bf4:	4641      	mov	r1, r8
 8006bf6:	1851      	adds	r1, r2, r1
 8006bf8:	6139      	str	r1, [r7, #16]
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	414b      	adcs	r3, r1
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	00cb      	lsls	r3, r1, #3
 8006c10:	4651      	mov	r1, sl
 8006c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c16:	4651      	mov	r1, sl
 8006c18:	00ca      	lsls	r2, r1, #3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	4642      	mov	r2, r8
 8006c22:	189b      	adds	r3, r3, r2
 8006c24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c28:	464b      	mov	r3, r9
 8006c2a:	460a      	mov	r2, r1
 8006c2c:	eb42 0303 	adc.w	r3, r2, r3
 8006c30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	008b      	lsls	r3, r1, #2
 8006c50:	4641      	mov	r1, r8
 8006c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c56:	4641      	mov	r1, r8
 8006c58:	008a      	lsls	r2, r1, #2
 8006c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006c5e:	f7f9 fab3 	bl	80001c8 <__aeabi_uldivmod>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4611      	mov	r1, r2
 8006c68:	4b38      	ldr	r3, [pc, #224]	@ (8006d4c <UART_SetConfig+0x4e4>)
 8006c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	2264      	movs	r2, #100	@ 0x64
 8006c72:	fb02 f303 	mul.w	r3, r2, r3
 8006c76:	1acb      	subs	r3, r1, r3
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	3332      	adds	r3, #50	@ 0x32
 8006c7c:	4a33      	ldr	r2, [pc, #204]	@ (8006d4c <UART_SetConfig+0x4e4>)
 8006c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c88:	441c      	add	r4, r3
 8006c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c8e:	2200      	movs	r2, #0
 8006c90:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c92:	677a      	str	r2, [r7, #116]	@ 0x74
 8006c94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006c98:	4642      	mov	r2, r8
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	1891      	adds	r1, r2, r2
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	415b      	adcs	r3, r3
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ca8:	4641      	mov	r1, r8
 8006caa:	1851      	adds	r1, r2, r1
 8006cac:	6039      	str	r1, [r7, #0]
 8006cae:	4649      	mov	r1, r9
 8006cb0:	414b      	adcs	r3, r1
 8006cb2:	607b      	str	r3, [r7, #4]
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	f04f 0300 	mov.w	r3, #0
 8006cbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006cc0:	4659      	mov	r1, fp
 8006cc2:	00cb      	lsls	r3, r1, #3
 8006cc4:	4651      	mov	r1, sl
 8006cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cca:	4651      	mov	r1, sl
 8006ccc:	00ca      	lsls	r2, r1, #3
 8006cce:	4610      	mov	r0, r2
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	4642      	mov	r2, r8
 8006cd6:	189b      	adds	r3, r3, r2
 8006cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cda:	464b      	mov	r3, r9
 8006cdc:	460a      	mov	r2, r1
 8006cde:	eb42 0303 	adc.w	r3, r2, r3
 8006ce2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cee:	667a      	str	r2, [r7, #100]	@ 0x64
 8006cf0:	f04f 0200 	mov.w	r2, #0
 8006cf4:	f04f 0300 	mov.w	r3, #0
 8006cf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	008b      	lsls	r3, r1, #2
 8006d00:	4641      	mov	r1, r8
 8006d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d06:	4641      	mov	r1, r8
 8006d08:	008a      	lsls	r2, r1, #2
 8006d0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d0e:	f7f9 fa5b 	bl	80001c8 <__aeabi_uldivmod>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4b0d      	ldr	r3, [pc, #52]	@ (8006d4c <UART_SetConfig+0x4e4>)
 8006d18:	fba3 1302 	umull	r1, r3, r3, r2
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	2164      	movs	r1, #100	@ 0x64
 8006d20:	fb01 f303 	mul.w	r3, r1, r3
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	3332      	adds	r3, #50	@ 0x32
 8006d2a:	4a08      	ldr	r2, [pc, #32]	@ (8006d4c <UART_SetConfig+0x4e4>)
 8006d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	f003 020f 	and.w	r2, r3, #15
 8006d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4422      	add	r2, r4
 8006d3e:	609a      	str	r2, [r3, #8]
}
 8006d40:	bf00      	nop
 8006d42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d46:	46bd      	mov	sp, r7
 8006d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d4c:	51eb851f 	.word	0x51eb851f

08006d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d50:	b084      	sub	sp, #16
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	f107 001c 	add.w	r0, r7, #28
 8006d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d123      	bne.n	8006db2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006d7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d105      	bne.n	8006da6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fdbc 	bl	8007924 <USB_CoreReset>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]
 8006db0:	e01b      	b.n	8006dea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fdb0 	bl	8007924 <USB_CoreReset>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006dc8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ddc:	e005      	b.n	8006dea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006dea:	7fbb      	ldrb	r3, [r7, #30]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d10b      	bne.n	8006e08 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f043 0206 	orr.w	r2, r3, #6
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f043 0220 	orr.w	r2, r3, #32
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e14:	b004      	add	sp, #16
 8006e16:	4770      	bx	lr

08006e18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006e26:	79fb      	ldrb	r3, [r7, #7]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d165      	bne.n	8006ef8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4a41      	ldr	r2, [pc, #260]	@ (8006f34 <USB_SetTurnaroundTime+0x11c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d906      	bls.n	8006e42 <USB_SetTurnaroundTime+0x2a>
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4a40      	ldr	r2, [pc, #256]	@ (8006f38 <USB_SetTurnaroundTime+0x120>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d202      	bcs.n	8006e42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006e3c:	230f      	movs	r3, #15
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	e062      	b.n	8006f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	4a3c      	ldr	r2, [pc, #240]	@ (8006f38 <USB_SetTurnaroundTime+0x120>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d306      	bcc.n	8006e58 <USB_SetTurnaroundTime+0x40>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	4a3b      	ldr	r2, [pc, #236]	@ (8006f3c <USB_SetTurnaroundTime+0x124>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d202      	bcs.n	8006e58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006e52:	230e      	movs	r3, #14
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	e057      	b.n	8006f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	4a38      	ldr	r2, [pc, #224]	@ (8006f3c <USB_SetTurnaroundTime+0x124>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d306      	bcc.n	8006e6e <USB_SetTurnaroundTime+0x56>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	4a37      	ldr	r2, [pc, #220]	@ (8006f40 <USB_SetTurnaroundTime+0x128>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d202      	bcs.n	8006e6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006e68:	230d      	movs	r3, #13
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	e04c      	b.n	8006f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4a33      	ldr	r2, [pc, #204]	@ (8006f40 <USB_SetTurnaroundTime+0x128>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d306      	bcc.n	8006e84 <USB_SetTurnaroundTime+0x6c>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	4a32      	ldr	r2, [pc, #200]	@ (8006f44 <USB_SetTurnaroundTime+0x12c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d802      	bhi.n	8006e84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006e7e:	230c      	movs	r3, #12
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	e041      	b.n	8006f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4a2f      	ldr	r2, [pc, #188]	@ (8006f44 <USB_SetTurnaroundTime+0x12c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d906      	bls.n	8006e9a <USB_SetTurnaroundTime+0x82>
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	4a2e      	ldr	r2, [pc, #184]	@ (8006f48 <USB_SetTurnaroundTime+0x130>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d802      	bhi.n	8006e9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006e94:	230b      	movs	r3, #11
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	e036      	b.n	8006f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8006f48 <USB_SetTurnaroundTime+0x130>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d906      	bls.n	8006eb0 <USB_SetTurnaroundTime+0x98>
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	4a29      	ldr	r2, [pc, #164]	@ (8006f4c <USB_SetTurnaroundTime+0x134>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d802      	bhi.n	8006eb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006eaa:	230a      	movs	r3, #10
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	e02b      	b.n	8006f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	4a26      	ldr	r2, [pc, #152]	@ (8006f4c <USB_SetTurnaroundTime+0x134>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d906      	bls.n	8006ec6 <USB_SetTurnaroundTime+0xae>
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	4a25      	ldr	r2, [pc, #148]	@ (8006f50 <USB_SetTurnaroundTime+0x138>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d202      	bcs.n	8006ec6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ec0:	2309      	movs	r3, #9
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	e020      	b.n	8006f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	4a21      	ldr	r2, [pc, #132]	@ (8006f50 <USB_SetTurnaroundTime+0x138>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d306      	bcc.n	8006edc <USB_SetTurnaroundTime+0xc4>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	4a20      	ldr	r2, [pc, #128]	@ (8006f54 <USB_SetTurnaroundTime+0x13c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d802      	bhi.n	8006edc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ed6:	2308      	movs	r3, #8
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	e015      	b.n	8006f08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	4a1d      	ldr	r2, [pc, #116]	@ (8006f54 <USB_SetTurnaroundTime+0x13c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d906      	bls.n	8006ef2 <USB_SetTurnaroundTime+0xda>
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8006f58 <USB_SetTurnaroundTime+0x140>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d202      	bcs.n	8006ef2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006eec:	2307      	movs	r3, #7
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	e00a      	b.n	8006f08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006ef2:	2306      	movs	r3, #6
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	e007      	b.n	8006f08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d102      	bne.n	8006f04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006efe:	2309      	movs	r3, #9
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	e001      	b.n	8006f08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006f04:	2309      	movs	r3, #9
 8006f06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	029b      	lsls	r3, r3, #10
 8006f1c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006f20:	431a      	orrs	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	371c      	adds	r7, #28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	00d8acbf 	.word	0x00d8acbf
 8006f38:	00e4e1c0 	.word	0x00e4e1c0
 8006f3c:	00f42400 	.word	0x00f42400
 8006f40:	01067380 	.word	0x01067380
 8006f44:	011a499f 	.word	0x011a499f
 8006f48:	01312cff 	.word	0x01312cff
 8006f4c:	014ca43f 	.word	0x014ca43f
 8006f50:	016e3600 	.word	0x016e3600
 8006f54:	01a6ab1f 	.word	0x01a6ab1f
 8006f58:	01e84800 	.word	0x01e84800

08006f5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f023 0201 	bic.w	r2, r3, #1
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f9a:	78fb      	ldrb	r3, [r7, #3]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d115      	bne.n	8006fcc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006fac:	200a      	movs	r0, #10
 8006fae:	f7fa fc95 	bl	80018dc <HAL_Delay>
      ms += 10U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	330a      	adds	r3, #10
 8006fb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fc23 	bl	8007804 <USB_GetMode>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d01e      	beq.n	8007002 <USB_SetCurrentMode+0x84>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2bc7      	cmp	r3, #199	@ 0xc7
 8006fc8:	d9f0      	bls.n	8006fac <USB_SetCurrentMode+0x2e>
 8006fca:	e01a      	b.n	8007002 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d115      	bne.n	8006ffe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006fde:	200a      	movs	r0, #10
 8006fe0:	f7fa fc7c 	bl	80018dc <HAL_Delay>
      ms += 10U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	330a      	adds	r3, #10
 8006fe8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fc0a 	bl	8007804 <USB_GetMode>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <USB_SetCurrentMode+0x84>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ffa:	d9f0      	bls.n	8006fde <USB_SetCurrentMode+0x60>
 8006ffc:	e001      	b.n	8007002 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e005      	b.n	800700e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2bc8      	cmp	r3, #200	@ 0xc8
 8007006:	d101      	bne.n	800700c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e000      	b.n	800700e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007018:	b084      	sub	sp, #16
 800701a:	b580      	push	{r7, lr}
 800701c:	b086      	sub	sp, #24
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007032:	2300      	movs	r3, #0
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	e009      	b.n	800704c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	3340      	adds	r3, #64	@ 0x40
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	2200      	movs	r2, #0
 8007044:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	3301      	adds	r3, #1
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2b0e      	cmp	r3, #14
 8007050:	d9f2      	bls.n	8007038 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007052:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007056:	2b00      	cmp	r3, #0
 8007058:	d11c      	bne.n	8007094 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007068:	f043 0302 	orr.w	r3, r3, #2
 800706c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007072:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	639a      	str	r2, [r3, #56]	@ 0x38
 8007092:	e00b      	b.n	80070ac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007098:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070b2:	461a      	mov	r2, r3
 80070b4:	2300      	movs	r3, #0
 80070b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d10d      	bne.n	80070dc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80070c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80070c8:	2100      	movs	r1, #0
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f968 	bl	80073a0 <USB_SetDevSpeed>
 80070d0:	e008      	b.n	80070e4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80070d2:	2101      	movs	r1, #1
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f963 	bl	80073a0 <USB_SetDevSpeed>
 80070da:	e003      	b.n	80070e4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80070dc:	2103      	movs	r1, #3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f95e 	bl	80073a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070e4:	2110      	movs	r1, #16
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f8fa 	bl	80072e0 <USB_FlushTxFifo>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f924 	bl	8007344 <USB_FlushRxFifo>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800710c:	461a      	mov	r2, r3
 800710e:	2300      	movs	r3, #0
 8007110:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007118:	461a      	mov	r2, r3
 800711a:	2300      	movs	r3, #0
 800711c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007124:	461a      	mov	r2, r3
 8007126:	2300      	movs	r3, #0
 8007128:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800712a:	2300      	movs	r3, #0
 800712c:	613b      	str	r3, [r7, #16]
 800712e:	e043      	b.n	80071b8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007142:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007146:	d118      	bne.n	800717a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800715a:	461a      	mov	r2, r3
 800715c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	e013      	b.n	800718c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007170:	461a      	mov	r2, r3
 8007172:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	e008      	b.n	800718c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007186:	461a      	mov	r2, r3
 8007188:	2300      	movs	r3, #0
 800718a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007198:	461a      	mov	r2, r3
 800719a:	2300      	movs	r3, #0
 800719c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071aa:	461a      	mov	r2, r3
 80071ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	3301      	adds	r3, #1
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071bc:	461a      	mov	r2, r3
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d3b5      	bcc.n	8007130 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071c4:	2300      	movs	r3, #0
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	e043      	b.n	8007252 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071e0:	d118      	bne.n	8007214 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f4:	461a      	mov	r2, r3
 80071f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	e013      	b.n	8007226 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4413      	add	r3, r2
 8007206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800720a:	461a      	mov	r2, r3
 800720c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	e008      	b.n	8007226 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007220:	461a      	mov	r2, r3
 8007222:	2300      	movs	r3, #0
 8007224:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007232:	461a      	mov	r2, r3
 8007234:	2300      	movs	r3, #0
 8007236:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007244:	461a      	mov	r2, r3
 8007246:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800724a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	3301      	adds	r3, #1
 8007250:	613b      	str	r3, [r7, #16]
 8007252:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007256:	461a      	mov	r2, r3
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	4293      	cmp	r3, r2
 800725c:	d3b5      	bcc.n	80071ca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800726c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007270:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800727e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007280:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007284:	2b00      	cmp	r3, #0
 8007286:	d105      	bne.n	8007294 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	f043 0210 	orr.w	r2, r3, #16
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699a      	ldr	r2, [r3, #24]
 8007298:	4b10      	ldr	r3, [pc, #64]	@ (80072dc <USB_DevInit+0x2c4>)
 800729a:	4313      	orrs	r3, r2
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	f043 0208 	orr.w	r2, r3, #8
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d107      	bne.n	80072cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072c4:	f043 0304 	orr.w	r3, r3, #4
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072d8:	b004      	add	sp, #16
 80072da:	4770      	bx	lr
 80072dc:	803c3800 	.word	0x803c3800

080072e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3301      	adds	r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072fa:	d901      	bls.n	8007300 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e01b      	b.n	8007338 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	daf2      	bge.n	80072ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	019b      	lsls	r3, r3, #6
 8007310:	f043 0220 	orr.w	r2, r3, #32
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3301      	adds	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007324:	d901      	bls.n	800732a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e006      	b.n	8007338 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0320 	and.w	r3, r3, #32
 8007332:	2b20      	cmp	r3, #32
 8007334:	d0f0      	beq.n	8007318 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3301      	adds	r3, #1
 8007354:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800735c:	d901      	bls.n	8007362 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e018      	b.n	8007394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	daf2      	bge.n	8007350 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2210      	movs	r2, #16
 8007372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3301      	adds	r3, #1
 8007378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007380:	d901      	bls.n	8007386 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e006      	b.n	8007394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f003 0310 	and.w	r3, r3, #16
 800738e:	2b10      	cmp	r3, #16
 8007390:	d0f0      	beq.n	8007374 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	68f9      	ldr	r1, [r7, #12]
 80073bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073c0:	4313      	orrs	r3, r2
 80073c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b087      	sub	sp, #28
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f003 0306 	and.w	r3, r3, #6
 80073ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d102      	bne.n	80073f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80073f2:	2300      	movs	r3, #0
 80073f4:	75fb      	strb	r3, [r7, #23]
 80073f6:	e00a      	b.n	800740e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d002      	beq.n	8007404 <USB_GetDevSpeed+0x32>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b06      	cmp	r3, #6
 8007402:	d102      	bne.n	800740a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007404:	2302      	movs	r3, #2
 8007406:	75fb      	strb	r3, [r7, #23]
 8007408:	e001      	b.n	800740e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800740a:	230f      	movs	r3, #15
 800740c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007410:	4618      	mov	r0, r3
 8007412:	371c      	adds	r7, #28
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d14a      	bne.n	80074d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800744e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007452:	f040 8086 	bne.w	8007562 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	7812      	ldrb	r2, [r2, #0]
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	440a      	add	r2, r1
 8007470:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007474:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007478:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	7812      	ldrb	r2, [r2, #0]
 800748e:	0151      	lsls	r1, r2, #5
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	440a      	add	r2, r1
 8007494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007498:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800749c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3301      	adds	r3, #1
 80074a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d902      	bls.n	80074b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	75fb      	strb	r3, [r7, #23]
          break;
 80074b2:	e056      	b.n	8007562 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074cc:	d0e7      	beq.n	800749e <USB_EPStopXfer+0x82>
 80074ce:	e048      	b.n	8007562 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074e8:	d13b      	bne.n	8007562 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	7812      	ldrb	r2, [r2, #0]
 80074fe:	0151      	lsls	r1, r2, #5
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	440a      	add	r2, r1
 8007504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007508:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800750c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	7812      	ldrb	r2, [r2, #0]
 8007522:	0151      	lsls	r1, r2, #5
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	440a      	add	r2, r1
 8007528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800752c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007530:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3301      	adds	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800753e:	4293      	cmp	r3, r2
 8007540:	d902      	bls.n	8007548 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	75fb      	strb	r3, [r7, #23]
          break;
 8007546:	e00c      	b.n	8007562 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	4413      	add	r3, r2
 8007552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800755c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007560:	d0e7      	beq.n	8007532 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007562:	7dfb      	ldrb	r3, [r7, #23]
}
 8007564:	4618      	mov	r0, r3
 8007566:	371c      	adds	r7, #28
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007570:	b480      	push	{r7}
 8007572:	b089      	sub	sp, #36	@ 0x24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	4611      	mov	r1, r2
 800757c:	461a      	mov	r2, r3
 800757e:	460b      	mov	r3, r1
 8007580:	71fb      	strb	r3, [r7, #7]
 8007582:	4613      	mov	r3, r2
 8007584:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800758e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007592:	2b00      	cmp	r3, #0
 8007594:	d123      	bne.n	80075de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007596:	88bb      	ldrh	r3, [r7, #4]
 8007598:	3303      	adds	r3, #3
 800759a:	089b      	lsrs	r3, r3, #2
 800759c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800759e:	2300      	movs	r3, #0
 80075a0:	61bb      	str	r3, [r7, #24]
 80075a2:	e018      	b.n	80075d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075a4:	79fb      	ldrb	r3, [r7, #7]
 80075a6:	031a      	lsls	r2, r3, #12
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075b0:	461a      	mov	r2, r3
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	3301      	adds	r3, #1
 80075bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	3301      	adds	r3, #1
 80075c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	3301      	adds	r3, #1
 80075c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	3301      	adds	r3, #1
 80075ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	3301      	adds	r3, #1
 80075d4:	61bb      	str	r3, [r7, #24]
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d3e2      	bcc.n	80075a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3724      	adds	r7, #36	@ 0x24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b08b      	sub	sp, #44	@ 0x2c
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	4613      	mov	r3, r2
 80075f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007602:	88fb      	ldrh	r3, [r7, #6]
 8007604:	089b      	lsrs	r3, r3, #2
 8007606:	b29b      	uxth	r3, r3
 8007608:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	f003 0303 	and.w	r3, r3, #3
 8007610:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007612:	2300      	movs	r3, #0
 8007614:	623b      	str	r3, [r7, #32]
 8007616:	e014      	b.n	8007642 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	601a      	str	r2, [r3, #0]
    pDest++;
 8007624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007626:	3301      	adds	r3, #1
 8007628:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	3301      	adds	r3, #1
 800762e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	3301      	adds	r3, #1
 8007634:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007638:	3301      	adds	r3, #1
 800763a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	3301      	adds	r3, #1
 8007640:	623b      	str	r3, [r7, #32]
 8007642:	6a3a      	ldr	r2, [r7, #32]
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	429a      	cmp	r2, r3
 8007648:	d3e6      	bcc.n	8007618 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800764a:	8bfb      	ldrh	r3, [r7, #30]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01e      	beq.n	800768e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800765a:	461a      	mov	r2, r3
 800765c:	f107 0310 	add.w	r3, r7, #16
 8007660:	6812      	ldr	r2, [r2, #0]
 8007662:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	fa22 f303 	lsr.w	r3, r2, r3
 8007670:	b2da      	uxtb	r2, r3
 8007672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007674:	701a      	strb	r2, [r3, #0]
      i++;
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	3301      	adds	r3, #1
 800767a:	623b      	str	r3, [r7, #32]
      pDest++;
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	3301      	adds	r3, #1
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007682:	8bfb      	ldrh	r3, [r7, #30]
 8007684:	3b01      	subs	r3, #1
 8007686:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007688:	8bfb      	ldrh	r3, [r7, #30]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1ea      	bne.n	8007664 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800768e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007690:	4618      	mov	r0, r3
 8007692:	372c      	adds	r7, #44	@ 0x2c
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ca:	f043 0302 	orr.w	r3, r3, #2
 80076ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4013      	ands	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076f6:	68fb      	ldr	r3, [r7, #12]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	4013      	ands	r3, r2
 8007726:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	0c1b      	lsrs	r3, r3, #16
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	4013      	ands	r3, r2
 800775a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	b29b      	uxth	r3, r3
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800777c:	78fb      	ldrb	r3, [r7, #3]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	4013      	ands	r3, r2
 8007798:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800779a:	68bb      	ldr	r3, [r7, #8]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	fa22 f303 	lsr.w	r3, r2, r3
 80077d8:	01db      	lsls	r3, r3, #7
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	4313      	orrs	r3, r2
 80077e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80077e2:	78fb      	ldrb	r3, [r7, #3]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4013      	ands	r3, r2
 80077f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077f6:	68bb      	ldr	r3, [r7, #8]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	f003 0301 	and.w	r3, r3, #1
}
 8007814:	4618      	mov	r0, r3
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800783a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800783e:	f023 0307 	bic.w	r3, r3, #7
 8007842:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007856:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
	...

08007868 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	460b      	mov	r3, r1
 8007872:	607a      	str	r2, [r7, #4]
 8007874:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	333c      	adds	r3, #60	@ 0x3c
 800787e:	3304      	adds	r3, #4
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	4a26      	ldr	r2, [pc, #152]	@ (8007920 <USB_EP0_OutStart+0xb8>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d90a      	bls.n	80078a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007898:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800789c:	d101      	bne.n	80078a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	e037      	b.n	8007912 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a8:	461a      	mov	r2, r3
 80078aa:	2300      	movs	r3, #0
 80078ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078d0:	f043 0318 	orr.w	r3, r3, #24
 80078d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078e4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80078e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80078ea:	7afb      	ldrb	r3, [r7, #11]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d10f      	bne.n	8007910 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f6:	461a      	mov	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800790a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800790e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	371c      	adds	r7, #28
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	4f54300a 	.word	0x4f54300a

08007924 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3301      	adds	r3, #1
 8007934:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800793c:	d901      	bls.n	8007942 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e01b      	b.n	800797a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	daf2      	bge.n	8007930 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f043 0201 	orr.w	r2, r3, #1
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3301      	adds	r3, #1
 800795e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007966:	d901      	bls.n	800796c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e006      	b.n	800797a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b01      	cmp	r3, #1
 8007976:	d0f0      	beq.n	800795a <USB_CoreReset+0x36>

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <memset>:
 8007986:	4402      	add	r2, r0
 8007988:	4603      	mov	r3, r0
 800798a:	4293      	cmp	r3, r2
 800798c:	d100      	bne.n	8007990 <memset+0xa>
 800798e:	4770      	bx	lr
 8007990:	f803 1b01 	strb.w	r1, [r3], #1
 8007994:	e7f9      	b.n	800798a <memset+0x4>
	...

08007998 <__libc_init_array>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	4d0d      	ldr	r5, [pc, #52]	@ (80079d0 <__libc_init_array+0x38>)
 800799c:	4c0d      	ldr	r4, [pc, #52]	@ (80079d4 <__libc_init_array+0x3c>)
 800799e:	1b64      	subs	r4, r4, r5
 80079a0:	10a4      	asrs	r4, r4, #2
 80079a2:	2600      	movs	r6, #0
 80079a4:	42a6      	cmp	r6, r4
 80079a6:	d109      	bne.n	80079bc <__libc_init_array+0x24>
 80079a8:	4d0b      	ldr	r5, [pc, #44]	@ (80079d8 <__libc_init_array+0x40>)
 80079aa:	4c0c      	ldr	r4, [pc, #48]	@ (80079dc <__libc_init_array+0x44>)
 80079ac:	f000 f818 	bl	80079e0 <_init>
 80079b0:	1b64      	subs	r4, r4, r5
 80079b2:	10a4      	asrs	r4, r4, #2
 80079b4:	2600      	movs	r6, #0
 80079b6:	42a6      	cmp	r6, r4
 80079b8:	d105      	bne.n	80079c6 <__libc_init_array+0x2e>
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c0:	4798      	blx	r3
 80079c2:	3601      	adds	r6, #1
 80079c4:	e7ee      	b.n	80079a4 <__libc_init_array+0xc>
 80079c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ca:	4798      	blx	r3
 80079cc:	3601      	adds	r6, #1
 80079ce:	e7f2      	b.n	80079b6 <__libc_init_array+0x1e>
 80079d0:	08007a20 	.word	0x08007a20
 80079d4:	08007a20 	.word	0x08007a20
 80079d8:	08007a20 	.word	0x08007a20
 80079dc:	08007a24 	.word	0x08007a24

080079e0 <_init>:
 80079e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e2:	bf00      	nop
 80079e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e6:	bc08      	pop	{r3}
 80079e8:	469e      	mov	lr, r3
 80079ea:	4770      	bx	lr

080079ec <_fini>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	bf00      	nop
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr
