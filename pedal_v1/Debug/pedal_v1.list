
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08009130  08009130  0000a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091c4  080091c4  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080091c4  080091c4  0000a1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091cc  080091cc  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091cc  080091cc  0000a1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091d0  080091d0  0000a1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080091d4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b070  2**0
                  CONTENTS
 10 .bss          00000d58  20000070  20000070  0000b070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000dc8  20000dc8  0000b070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e7bc  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bee  00000000  00000000  0002985c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b08  00000000  00000000  0002e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014f9  00000000  00000000  0002ff58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027aa6  00000000  00000000  00031451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023fb6  00000000  00000000  00058ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5bff  00000000  00000000  0007cead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00162aac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000078dc  00000000  00000000  00162af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0016a3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009118 	.word	0x08009118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009118 	.word	0x08009118

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005b0:	4a22      	ldr	r2, [pc, #136]	@ (800063c <MX_ADC1_Init+0xa0>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b20      	ldr	r3, [pc, #128]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005d6:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80005de:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005e0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <MX_ADC1_Init+0x9c>)
 8000602:	f001 faff 	bl	8001c04 <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800060c:	f000 fea4 	bl	8001358 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000610:	2301      	movs	r3, #1
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000618:	2304      	movs	r3, #4
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_ADC1_Init+0x9c>)
 8000622:	f001 fd7b 	bl	800211c <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800062c:	f000 fe94 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000008c 	.word	0x2000008c
 800063c:	40012000 	.word	0x40012000

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a33      	ldr	r2, [pc, #204]	@ (800072c <HAL_ADC_MspInit+0xec>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d160      	bne.n	8000724 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066a:	4a31      	ldr	r2, [pc, #196]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000670:	6453      	str	r3, [r2, #68]	@ 0x44
 8000672:	4b2f      	ldr	r3, [pc, #188]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a2a      	ldr	r2, [pc, #168]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800069a:	2302      	movs	r3, #2
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4821      	ldr	r0, [pc, #132]	@ (8000734 <HAL_ADC_MspInit+0xf4>)
 80006ae:	f002 fc61 	bl	8002f74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006b2:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006b4:	4a21      	ldr	r2, [pc, #132]	@ (800073c <HAL_ADC_MspInit+0xfc>)
 80006b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006be:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d2:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006da:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006ec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f8:	480f      	ldr	r0, [pc, #60]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 80006fa:	f002 f8cb 	bl	8002894 <HAL_DMA_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000704:	f000 fe28 	bl	8001358 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a0b      	ldr	r2, [pc, #44]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 800070c:	639a      	str	r2, [r3, #56]	@ 0x38
 800070e:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <HAL_ADC_MspInit+0xf8>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	2012      	movs	r0, #18
 800071a:	f002 f884 	bl	8002826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800071e:	2012      	movs	r0, #18
 8000720:	f002 f89d 	bl	800285e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	@ 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40012000 	.word	0x40012000
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000
 8000738:	200000d4 	.word	0x200000d4
 800073c:	40026410 	.word	0x40026410

08000740 <cs43l22_unmute>:
			                                    1, &i2c_data, 1, 100);
	return status_i2c;
}

int cs43l22_unmute()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af04      	add	r7, sp, #16
	uint8_t i2c_data;
	HAL_StatusTypeDef status_i2c = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	71fb      	strb	r3, [r7, #7]
	// unmute headphone A and B, page 52
	i2c_data = 0x00;
 800074a:	2300      	movs	r3, #0
 800074c:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADAVOL_REG,
 800074e:	2364      	movs	r3, #100	@ 0x64
 8000750:	9302      	str	r3, [sp, #8]
 8000752:	2301      	movs	r3, #1
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	1dbb      	adds	r3, r7, #6
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	2222      	movs	r2, #34	@ 0x22
 800075e:	2194      	movs	r1, #148	@ 0x94
 8000760:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <cs43l22_unmute+0x70>)
 8000762:	f002 ff01 	bl	8003568 <HAL_I2C_Mem_Write>
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
		                                    1, &i2c_data, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADBVOL_REG,
 800076a:	2364      	movs	r3, #100	@ 0x64
 800076c:	9302      	str	r3, [sp, #8]
 800076e:	2301      	movs	r3, #1
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	1dbb      	adds	r3, r7, #6
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2301      	movs	r3, #1
 8000778:	2223      	movs	r2, #35	@ 0x23
 800077a:	2194      	movs	r1, #148	@ 0x94
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <cs43l22_unmute+0x70>)
 800077e:	f002 fef3 	bl	8003568 <HAL_I2C_Mem_Write>
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
			                                    1, &i2c_data, 1, 100);
	// turn on headphone
	i2c_data = 0xaf;
 8000786:	23af      	movs	r3, #175	@ 0xaf
 8000788:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	9302      	str	r3, [sp, #8]
 800078e:	2301      	movs	r3, #1
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	1dbb      	adds	r3, r7, #6
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2301      	movs	r3, #1
 8000798:	2204      	movs	r2, #4
 800079a:	2194      	movs	r1, #148	@ 0x94
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <cs43l22_unmute+0x70>)
 800079e:	f002 fee3 	bl	8003568 <HAL_I2C_Mem_Write>
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
				                                    1, &i2c_data, 1, 100);

	return status_i2c;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000134 	.word	0x20000134

080007b4 <cs43l22_init>:
codec_state get_cs43l22_state()
{
	return cs43l22_state;
}
int cs43l22_init()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status_i2c = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_data;
	HAL_GPIO_WritePin(CS43L22_RST_Port, CS43L22_RST_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2110      	movs	r1, #16
 80007c2:	4853      	ldr	r0, [pc, #332]	@ (8000910 <cs43l22_init+0x15c>)
 80007c4:	f002 fd72 	bl	80032ac <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80007c8:	2064      	movs	r0, #100	@ 0x64
 80007ca:	f001 f9f7 	bl	8001bbc <HAL_Delay>
	HAL_GPIO_WritePin(CS43L22_RST_Port, CS43L22_RST_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2110      	movs	r1, #16
 80007d2:	484f      	ldr	r0, [pc, #316]	@ (8000910 <cs43l22_init+0x15c>)
 80007d4:	f002 fd6a 	bl	80032ac <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80007d8:	2064      	movs	r0, #100	@ 0x64
 80007da:	f001 f9ef 	bl	8001bbc <HAL_Delay>
	// power off the codec, page 38
	i2c_data = 0x01;
 80007de:	2301      	movs	r3, #1
 80007e0:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 80007e2:	2364      	movs	r3, #100	@ 0x64
 80007e4:	9302      	str	r3, [sp, #8]
 80007e6:	2301      	movs	r3, #1
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	1dbb      	adds	r3, r7, #6
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2301      	movs	r3, #1
 80007f0:	2202      	movs	r2, #2
 80007f2:	2194      	movs	r1, #148	@ 0x94
 80007f4:	4847      	ldr	r0, [pc, #284]	@ (8000914 <cs43l22_init+0x160>)
 80007f6:	f002 feb7 	bl	8003568 <HAL_I2C_Mem_Write>
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
	                                    1, &i2c_data, 1, 100);

	// output device is headphone 0xaf, page 38
	i2c_data = 0b10101111;
 80007fe:	23af      	movs	r3, #175	@ 0xaf
 8000800:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 8000802:	2364      	movs	r3, #100	@ 0x64
 8000804:	9302      	str	r3, [sp, #8]
 8000806:	2301      	movs	r3, #1
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	1dbb      	adds	r3, r7, #6
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2301      	movs	r3, #1
 8000810:	2204      	movs	r2, #4
 8000812:	2194      	movs	r1, #148	@ 0x94
 8000814:	483f      	ldr	r0, [pc, #252]	@ (8000914 <cs43l22_init+0x160>)
 8000816:	f002 fea7 	bl	8003568 <HAL_I2C_Mem_Write>
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <cs43l22_init+0x74>
	{
		return status_i2c;
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	e06f      	b.n	8000908 <cs43l22_init+0x154>
	}

	// clock auto-detect and divide mclk by 2
	i2c_data = 0b10000001;
 8000828:	2381      	movs	r3, #129	@ 0x81
 800082a:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_CLKCON_REG,
 800082c:	2364      	movs	r3, #100	@ 0x64
 800082e:	9302      	str	r3, [sp, #8]
 8000830:	2301      	movs	r3, #1
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	1dbb      	adds	r3, r7, #6
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	2205      	movs	r2, #5
 800083c:	2194      	movs	r1, #148	@ 0x94
 800083e:	4835      	ldr	r0, [pc, #212]	@ (8000914 <cs43l22_init+0x160>)
 8000840:	f002 fe92 	bl	8003568 <HAL_I2C_Mem_Write>
 8000844:	4603      	mov	r3, r0
 8000846:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <cs43l22_init+0x9e>
	{
		return status_i2c;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	e05a      	b.n	8000908 <cs43l22_init+0x154>
	}

	cs43l22_set_volume(200);
 8000852:	20c8      	movs	r0, #200	@ 0xc8
 8000854:	f000 f8a2 	bl	800099c <cs43l22_set_volume>

	// i2s up to 24-bit interface, 16-bit data length, page 41
	i2c_data = 0b00000111;
 8000858:	2307      	movs	r3, #7
 800085a:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_INTERCON1_REG,
 800085c:	2364      	movs	r3, #100	@ 0x64
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	2301      	movs	r3, #1
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	1dbb      	adds	r3, r7, #6
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	2206      	movs	r2, #6
 800086c:	2194      	movs	r1, #148	@ 0x94
 800086e:	4829      	ldr	r0, [pc, #164]	@ (8000914 <cs43l22_init+0x160>)
 8000870:	f002 fe7a 	bl	8003568 <HAL_I2C_Mem_Write>
 8000874:	4603      	mov	r3, r0
 8000876:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <cs43l22_init+0xce>
	{
		return status_i2c;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	e042      	b.n	8000908 <cs43l22_init+0x154>
	}

	// enable digital soft ramp and de-emphasis filter
	i2c_data = 0b00000110;
 8000882:	2306      	movs	r3, #6
 8000884:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MISCON_REG,
 8000886:	2364      	movs	r3, #100	@ 0x64
 8000888:	9302      	str	r3, [sp, #8]
 800088a:	2301      	movs	r3, #1
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	1dbb      	adds	r3, r7, #6
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2301      	movs	r3, #1
 8000894:	220e      	movs	r2, #14
 8000896:	2194      	movs	r1, #148	@ 0x94
 8000898:	481e      	ldr	r0, [pc, #120]	@ (8000914 <cs43l22_init+0x160>)
 800089a:	f002 fe65 	bl	8003568 <HAL_I2C_Mem_Write>
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
											1, &i2c_data, 1, 100);
	if (status_i2c)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <cs43l22_init+0xf8>
	{
		return status_i2c;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	e02d      	b.n	8000908 <cs43l22_init+0x154>
	}

	//  PCM VOlume adjust, page 47
	i2c_data = 0x00;
 80008ac:	2300      	movs	r3, #0
 80008ae:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMAVOLCON_REG,
 80008b0:	2364      	movs	r3, #100	@ 0x64
 80008b2:	9302      	str	r3, [sp, #8]
 80008b4:	2301      	movs	r3, #1
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	1dbb      	adds	r3, r7, #6
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	221a      	movs	r2, #26
 80008c0:	2194      	movs	r1, #148	@ 0x94
 80008c2:	4814      	ldr	r0, [pc, #80]	@ (8000914 <cs43l22_init+0x160>)
 80008c4:	f002 fe50 	bl	8003568 <HAL_I2C_Mem_Write>
 80008c8:	4603      	mov	r3, r0
 80008ca:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <cs43l22_init+0x122>
	{
		return status_i2c;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	e018      	b.n	8000908 <cs43l22_init+0x154>
	}

	i2c_data = 0x00;
 80008d6:	2300      	movs	r3, #0
 80008d8:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMBVOLCON_REG,
 80008da:	2364      	movs	r3, #100	@ 0x64
 80008dc:	9302      	str	r3, [sp, #8]
 80008de:	2301      	movs	r3, #1
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	1dbb      	adds	r3, r7, #6
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2301      	movs	r3, #1
 80008e8:	221b      	movs	r2, #27
 80008ea:	2194      	movs	r1, #148	@ 0x94
 80008ec:	4809      	ldr	r0, [pc, #36]	@ (8000914 <cs43l22_init+0x160>)
 80008ee:	f002 fe3b 	bl	8003568 <HAL_I2C_Mem_Write>
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <cs43l22_init+0x14c>
	{
		return status_i2c;
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	e003      	b.n	8000908 <cs43l22_init+0x154>
	}

	cs43l22_state = READY;
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <cs43l22_init+0x164>)
 8000902:	2205      	movs	r2, #5
 8000904:	701a      	strb	r2, [r3, #0]
	return 0;
 8000906:	2300      	movs	r3, #0

}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40020c00 	.word	0x40020c00
 8000914:	20000134 	.word	0x20000134
 8000918:	20000000 	.word	0x20000000

0800091c <cs43l22_play>:

int cs43l22_play(int16_t *pbuffer, uint32_t size)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af04      	add	r7, sp, #16
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status_i2c = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]
	uint8_t i2c_data;
	if (cs43l22_state != PLAY)
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <cs43l22_play+0x74>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d028      	beq.n	8000984 <cs43l22_play+0x68>
	{
		status_i2c = cs43l22_unmute();
 8000932:	f7ff ff05 	bl	8000740 <cs43l22_unmute>
 8000936:	4603      	mov	r3, r0
 8000938:	73fb      	strb	r3, [r7, #15]
		if (status_i2c)
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <cs43l22_play+0x28>
		{
			return status_i2c;
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	e020      	b.n	8000986 <cs43l22_play+0x6a>
		}
		// powered up, page 38
		i2c_data = 0b10011110;
 8000944:	239e      	movs	r3, #158	@ 0x9e
 8000946:	73bb      	strb	r3, [r7, #14]
		status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 8000948:	2364      	movs	r3, #100	@ 0x64
 800094a:	9302      	str	r3, [sp, #8]
 800094c:	2301      	movs	r3, #1
 800094e:	9301      	str	r3, [sp, #4]
 8000950:	f107 030e 	add.w	r3, r7, #14
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2301      	movs	r3, #1
 8000958:	2202      	movs	r2, #2
 800095a:	2194      	movs	r1, #148	@ 0x94
 800095c:	480d      	ldr	r0, [pc, #52]	@ (8000994 <cs43l22_play+0x78>)
 800095e:	f002 fe03 	bl	8003568 <HAL_I2C_Mem_Write>
 8000962:	4603      	mov	r3, r0
 8000964:	73fb      	strb	r3, [r7, #15]
												1, &i2c_data, 1, 100);
		if (status_i2c)
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <cs43l22_play+0x54>
		{
			return status_i2c;
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	e00a      	b.n	8000986 <cs43l22_play+0x6a>
		}
		cs43l22_state = PLAY;
 8000970:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <cs43l22_play+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
		HAL_I2S_Transmit_DMA(&CS43L22_I2S, (uint16_t * )pbuffer, size);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	b29b      	uxth	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	4806      	ldr	r0, [pc, #24]	@ (8000998 <cs43l22_play+0x7c>)
 8000980:	f003 fa9c 	bl	8003ebc <HAL_I2S_Transmit_DMA>
	}
	return 0;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000000 	.word	0x20000000
 8000994:	20000134 	.word	0x20000134
 8000998:	20000188 	.word	0x20000188

0800099c <cs43l22_set_volume>:
	HAL_I2C_Mem_Read(&CS43L22_I2C, CS43L22_I2C_ADDRESS, reg,
			1, reg_value, 1, 100);
}

int cs43l22_set_volume(uint8_t volume)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af04      	add	r7, sp, #16
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status_i2c = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]
	// page 52
	if (volume > 0xe6)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2be6      	cmp	r3, #230	@ 0xe6
 80009ae:	d904      	bls.n	80009ba <cs43l22_set_volume+0x1e>
	{
		volume -= 0xe7;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	3319      	adds	r3, #25
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	e003      	b.n	80009c2 <cs43l22_set_volume+0x26>
	}
	else
	{
		volume += 0x19;
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	3319      	adds	r3, #25
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	71fb      	strb	r3, [r7, #7]
	}
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASAVOL_REG,
 80009c2:	2364      	movs	r3, #100	@ 0x64
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2301      	movs	r3, #1
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	2220      	movs	r2, #32
 80009d2:	2194      	movs	r1, #148	@ 0x94
 80009d4:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <cs43l22_set_volume+0x68>)
 80009d6:	f002 fdc7 	bl	8003568 <HAL_I2C_Mem_Write>
 80009da:	4603      	mov	r3, r0
 80009dc:	73fb      	strb	r3, [r7, #15]
											1, &volume, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASBVOL_REG,
 80009de:	2364      	movs	r3, #100	@ 0x64
 80009e0:	9302      	str	r3, [sp, #8]
 80009e2:	2301      	movs	r3, #1
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2301      	movs	r3, #1
 80009ec:	2221      	movs	r2, #33	@ 0x21
 80009ee:	2194      	movs	r1, #148	@ 0x94
 80009f0:	4804      	ldr	r0, [pc, #16]	@ (8000a04 <cs43l22_set_volume+0x68>)
 80009f2:	f002 fdb9 	bl	8003568 <HAL_I2C_Mem_Write>
 80009f6:	4603      	mov	r3, r0
 80009f8:	73fb      	strb	r3, [r7, #15]
												1, &volume, 1, 100);
	return status_i2c;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]

}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000134 	.word	0x20000134

08000a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <MX_DMA_Init+0x78>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a1a      	ldr	r2, [pc, #104]	@ (8000a80 <MX_DMA_Init+0x78>)
 8000a18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <MX_DMA_Init+0x78>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_DMA_Init+0x78>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a13      	ldr	r2, [pc, #76]	@ (8000a80 <MX_DMA_Init+0x78>)
 8000a34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_DMA_Init+0x78>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	200b      	movs	r0, #11
 8000a4c:	f001 feeb 	bl	8002826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a50:	200b      	movs	r0, #11
 8000a52:	f001 ff04 	bl	800285e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2010      	movs	r0, #16
 8000a5c:	f001 fee3 	bl	8002826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a60:	2010      	movs	r0, #16
 8000a62:	f001 fefc 	bl	800285e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2038      	movs	r0, #56	@ 0x38
 8000a6c:	f001 fedb 	bl	8002826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a70:	2038      	movs	r0, #56	@ 0x38
 8000a72:	f001 fef4 	bl	800285e <HAL_NVIC_EnableIRQ>

}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <MX_GPIO_Init>:
     PC3   ------> I2S2_SD
     PA4   ------> COMP_DAC1_group
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	@ 0x30
 8000a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	4b78      	ldr	r3, [pc, #480]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a77      	ldr	r2, [pc, #476]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b75      	ldr	r3, [pc, #468]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	4b71      	ldr	r3, [pc, #452]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a70      	ldr	r2, [pc, #448]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a69      	ldr	r2, [pc, #420]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b67      	ldr	r3, [pc, #412]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b63      	ldr	r3, [pc, #396]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a62      	ldr	r2, [pc, #392]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b60      	ldr	r3, [pc, #384]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a5b      	ldr	r2, [pc, #364]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b59      	ldr	r3, [pc, #356]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b55      	ldr	r3, [pc, #340]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a54      	ldr	r2, [pc, #336]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b52      	ldr	r3, [pc, #328]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2108      	movs	r1, #8
 8000b46:	484f      	ldr	r0, [pc, #316]	@ (8000c84 <MX_GPIO_Init+0x200>)
 8000b48:	f002 fbb0 	bl	80032ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2101      	movs	r1, #1
 8000b50:	484d      	ldr	r0, [pc, #308]	@ (8000c88 <MX_GPIO_Init+0x204>)
 8000b52:	f002 fbab 	bl	80032ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b56:	2200      	movs	r2, #0
 8000b58:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000b5c:	484b      	ldr	r0, [pc, #300]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b5e:	f002 fba5 	bl	80032ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b62:	2308      	movs	r3, #8
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4842      	ldr	r0, [pc, #264]	@ (8000c84 <MX_GPIO_Init+0x200>)
 8000b7a:	f002 f9fb 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	483c      	ldr	r0, [pc, #240]	@ (8000c88 <MX_GPIO_Init+0x204>)
 8000b96:	f002 f9ed 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000baa:	2305      	movs	r3, #5
 8000bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4834      	ldr	r0, [pc, #208]	@ (8000c88 <MX_GPIO_Init+0x204>)
 8000bb6:	f002 f9dd 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bbe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4830      	ldr	r0, [pc, #192]	@ (8000c90 <MX_GPIO_Init+0x20c>)
 8000bd0:	f002 f9d0 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	482a      	ldr	r0, [pc, #168]	@ (8000c90 <MX_GPIO_Init+0x20c>)
 8000be8:	f002 f9c4 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bec:	2304      	movs	r3, #4
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4825      	ldr	r0, [pc, #148]	@ (8000c94 <MX_GPIO_Init+0x210>)
 8000c00:	f002 f9b8 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c16:	2305      	movs	r3, #5
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	481c      	ldr	r0, [pc, #112]	@ (8000c94 <MX_GPIO_Init+0x210>)
 8000c22:	f002 f9a7 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c26:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000c2a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4813      	ldr	r0, [pc, #76]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000c40:	f002 f998 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c44:	2320      	movs	r3, #32
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000c58:	f002 f98c 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c60:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <MX_GPIO_Init+0x200>)
 8000c72:	f002 f97f 	bl	8002f74 <HAL_GPIO_Init>

}
 8000c76:	bf00      	nop
 8000c78:	3730      	adds	r7, #48	@ 0x30
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020c00 	.word	0x40020c00
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40020400 	.word	0x40020400

08000c98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_I2C1_Init+0x50>)
 8000c9e:	4a13      	ldr	r2, [pc, #76]	@ (8000cec <MX_I2C1_Init+0x54>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_I2C1_Init+0x50>)
 8000ca4:	4a12      	ldr	r2, [pc, #72]	@ (8000cf0 <MX_I2C1_Init+0x58>)
 8000ca6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_I2C1_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_I2C1_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_I2C1_Init+0x50>)
 8000cb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <MX_I2C1_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_I2C1_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <MX_I2C1_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_I2C1_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	@ (8000ce8 <MX_I2C1_Init+0x50>)
 8000cd6:	f002 fb03 	bl	80032e0 <HAL_I2C_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ce0:	f000 fb3a 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000134 	.word	0x20000134
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	000186a0 	.word	0x000186a0

08000cf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a19      	ldr	r2, [pc, #100]	@ (8000d78 <HAL_I2C_MspInit+0x84>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12c      	bne.n	8000d70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d32:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d44:	2304      	movs	r3, #4
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <HAL_I2C_MspInit+0x8c>)
 8000d50:	f002 f910 	bl	8002f74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	4a07      	ldr	r2, [pc, #28]	@ (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	@ 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020400 	.word	0x40020400

08000d84 <MX_I2S3_Init>:
DMA_HandleTypeDef hdma_i2s3_ext_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <MX_I2S3_Init+0x54>)
 8000d8a:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <MX_I2S3_Init+0x58>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d8e:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <MX_I2S3_Init+0x54>)
 8000d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d94:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <MX_I2S3_Init+0x54>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <MX_I2S3_Init+0x54>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <MX_I2S3_Init+0x54>)
 8000da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000da8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <MX_I2S3_Init+0x54>)
 8000dac:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000db0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000db2:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <MX_I2S3_Init+0x54>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <MX_I2S3_Init+0x54>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <MX_I2S3_Init+0x54>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <MX_I2S3_Init+0x54>)
 8000dc6:	f002 ff39 	bl	8003c3c <HAL_I2S_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000dd0:	f000 fac2 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000188 	.word	0x20000188
 8000ddc:	40003c00 	.word	0x40003c00

08000de0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	@ 0x38
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a6c      	ldr	r2, [pc, #432]	@ (8000fbc <HAL_I2S_MspInit+0x1dc>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	f040 80d0 	bne.w	8000fb2 <HAL_I2S_MspInit+0x1d2>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e12:	2301      	movs	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000e16:	2332      	movs	r3, #50	@ 0x32
 8000e18:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4618      	mov	r0, r3
 8000e24:	f005 f938 	bl	8006098 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000e2e:	f000 fa93 	bl	8001358 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b62      	ldr	r3, [pc, #392]	@ (8000fc0 <HAL_I2S_MspInit+0x1e0>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	4a61      	ldr	r2, [pc, #388]	@ (8000fc0 <HAL_I2S_MspInit+0x1e0>)
 8000e3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e42:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc0 <HAL_I2S_MspInit+0x1e0>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc0 <HAL_I2S_MspInit+0x1e0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a5a      	ldr	r2, [pc, #360]	@ (8000fc0 <HAL_I2S_MspInit+0x1e0>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b58      	ldr	r3, [pc, #352]	@ (8000fc0 <HAL_I2S_MspInit+0x1e0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b54      	ldr	r3, [pc, #336]	@ (8000fc0 <HAL_I2S_MspInit+0x1e0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a53      	ldr	r2, [pc, #332]	@ (8000fc0 <HAL_I2S_MspInit+0x1e0>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b51      	ldr	r3, [pc, #324]	@ (8000fc0 <HAL_I2S_MspInit+0x1e0>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e86:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e98:	2306      	movs	r3, #6
 8000e9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4848      	ldr	r0, [pc, #288]	@ (8000fc4 <HAL_I2S_MspInit+0x1e4>)
 8000ea4:	f002 f866 	bl	8002f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ea8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4840      	ldr	r0, [pc, #256]	@ (8000fc8 <HAL_I2S_MspInit+0x1e8>)
 8000ec6:	f002 f855 	bl	8002f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000eca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8000edc:	2305      	movs	r3, #5
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4837      	ldr	r0, [pc, #220]	@ (8000fc4 <HAL_I2S_MspInit+0x1e4>)
 8000ee8:	f002 f844 	bl	8002f74 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8000eec:	4b37      	ldr	r3, [pc, #220]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000eee:	4a38      	ldr	r2, [pc, #224]	@ (8000fd0 <HAL_I2S_MspInit+0x1f0>)
 8000ef0:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000ef2:	4b36      	ldr	r3, [pc, #216]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000ef4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000ef8:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efa:	4b34      	ldr	r3, [pc, #208]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f00:	4b32      	ldr	r3, [pc, #200]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f06:	4b31      	ldr	r3, [pc, #196]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000f08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f0c:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000f10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f14:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f16:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000f18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f1c:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000f20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f24:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f26:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000f28:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f2c:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f2e:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 8000f34:	4825      	ldr	r0, [pc, #148]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000f36:	f001 fcad 	bl	8002894 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_I2S_MspInit+0x164>
    {
      Error_Handler();
 8000f40:	f000 fa0a 	bl	8001358 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s3_ext_rx);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a21      	ldr	r2, [pc, #132]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000f48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f4a:	4a20      	ldr	r2, [pc, #128]	@ (8000fcc <HAL_I2S_MspInit+0x1ec>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000f50:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000f52:	4a21      	ldr	r2, [pc, #132]	@ (8000fd8 <HAL_I2S_MspInit+0x1f8>)
 8000f54:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000f56:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000f5e:	2240      	movs	r2, #64	@ 0x40
 8000f60:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000f6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f6e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000f72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f76:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f78:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000f7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f7e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000f82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f86:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000f8a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f8e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f90:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000f96:	480f      	ldr	r0, [pc, #60]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000f98:	f001 fc7c 	bl	8002894 <HAL_DMA_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_I2S_MspInit+0x1c6>
    {
      Error_Handler();
 8000fa2:	f000 f9d9 	bl	8001358 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000faa:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fac:	4a09      	ldr	r2, [pc, #36]	@ (8000fd4 <HAL_I2S_MspInit+0x1f4>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3738      	adds	r7, #56	@ 0x38
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40003c00 	.word	0x40003c00
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	200001d0 	.word	0x200001d0
 8000fd0:	40026010 	.word	0x40026010
 8000fd4:	20000230 	.word	0x20000230
 8000fd8:	40026088 	.word	0x40026088

08000fdc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fe4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fe8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ff4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ff8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ffc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00b      	beq.n	800101c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001004:	e000      	b.n	8001008 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001006:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001008:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f9      	beq.n	8001006 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001012:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <processData>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void processData() {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	printf("Process data running\n");
 8001032:	4832      	ldr	r0, [pc, #200]	@ (80010fc <processData+0xd0>)
 8001034:	f007 fa10 	bl	8008458 <puts>


	for (uint8_t n = 0; n < AUDIO_BLOCK_SIZE / 2; n += 2) {
 8001038:	2300      	movs	r3, #0
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	e052      	b.n	80010e4 <processData+0xb8>
//		outBufPtr[2 * n + 1] = rightOut;
//
		static float leftIn, leftOut;
		static float rightIn, rightOut;
		// Left channel
		leftIn = ((int16_t)inBufPtr[n] - 2300);  // for ADC values
 800103e:	4b30      	ldr	r3, [pc, #192]	@ (8001100 <processData+0xd4>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	b21b      	sxth	r3, r3
 800104e:	f6a3 03fc 	subw	r3, r3, #2300	@ 0x8fc
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105a:	4b2a      	ldr	r3, [pc, #168]	@ (8001104 <processData+0xd8>)
 800105c:	edc3 7a00 	vstr	s15, [r3]
		leftOut = leftIn;
 8001060:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <processData+0xd8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a28      	ldr	r2, [pc, #160]	@ (8001108 <processData+0xdc>)
 8001066:	6013      	str	r3, [r2, #0]

		outBufPtr[n] = (int16_t) (16 * leftOut);
 8001068:	4b27      	ldr	r3, [pc, #156]	@ (8001108 <processData+0xdc>)
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001076:	4b25      	ldr	r3, [pc, #148]	@ (800110c <processData+0xe0>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001084:	ee17 2a90 	vmov	r2, s15
 8001088:	b212      	sxth	r2, r2
 800108a:	801a      	strh	r2, [r3, #0]
//		printf("LeftOut: %hd\n", (int16_t) (16 * leftOut));

		// Right channel
		rightIn = ((int16_t)inBufPtr[n + 1] - 2300);  // for ADC values
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <processData+0xd4>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	3301      	adds	r3, #1
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	b29b      	uxth	r3, r3
 800109c:	b21b      	sxth	r3, r3
 800109e:	f6a3 03fc 	subw	r3, r3, #2300	@ 0x8fc
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <processData+0xe4>)
 80010ac:	edc3 7a00 	vstr	s15, [r3]
		rightOut = rightIn;
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <processData+0xe4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a17      	ldr	r2, [pc, #92]	@ (8001114 <processData+0xe8>)
 80010b6:	6013      	str	r3, [r2, #0]

		outBufPtr[n + 1] = (int16_t) (16 * rightOut);
 80010b8:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <processData+0xe8>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80010c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <processData+0xe0>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	3301      	adds	r3, #1
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d6:	ee17 2a90 	vmov	r2, s15
 80010da:	b212      	sxth	r2, r2
 80010dc:	801a      	strh	r2, [r3, #0]
	for (uint8_t n = 0; n < AUDIO_BLOCK_SIZE / 2; n += 2) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	3302      	adds	r3, #2
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	daa8      	bge.n	800103e <processData+0x12>
//		printf("RightOut: %hd\n", (int16_t) (16 * rightOut));
	}
	dataReadyFlag = 0;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <processData+0xec>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	08009130 	.word	0x08009130
 8001100:	20000690 	.word	0x20000690
 8001104:	20000698 	.word	0x20000698
 8001108:	2000069c 	.word	0x2000069c
 800110c:	20000004 	.word	0x20000004
 8001110:	200006a0 	.word	0x200006a0
 8001114:	200006a4 	.word	0x200006a4
 8001118:	20000694 	.word	0x20000694

0800111c <printDACData>:
    for (uint16_t i = 0; i < ADC_BUFFER_SIZE; i++) {
        printf("adcData[%d] = %u\n", i, adcData[i]);
    }
}

void printDACData(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < DAC_BUFFER_SIZE; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	80fb      	strh	r3, [r7, #6]
 8001126:	e00b      	b.n	8001140 <printDACData+0x24>
        printf("dacData[%d] = %hd\n", i, dacData[i]);
 8001128:	88f9      	ldrh	r1, [r7, #6]
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	4a08      	ldr	r2, [pc, #32]	@ (8001150 <printDACData+0x34>)
 800112e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001132:	461a      	mov	r2, r3
 8001134:	4807      	ldr	r0, [pc, #28]	@ (8001154 <printDACData+0x38>)
 8001136:	f007 f927 	bl	8008388 <iprintf>
    for (uint16_t i = 0; i < DAC_BUFFER_SIZE; i++) {
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	3301      	adds	r3, #1
 800113e:	80fb      	strh	r3, [r7, #6]
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	2bff      	cmp	r3, #255	@ 0xff
 8001144:	d9f0      	bls.n	8001128 <printDACData+0xc>
    }
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000490 	.word	0x20000490
 8001154:	0800915c 	.word	0x0800915c

08001158 <HAL_I2S_TxHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// === DMA callbacks ===

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    inBufPtr = &adcData[0];
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8001162:	4a08      	ldr	r2, [pc, #32]	@ (8001184 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 8001164:	601a      	str	r2, [r3, #0]
    outBufPtr = &dacData[0];
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_I2S_TxHalfCpltCallback+0x30>)
 8001168:	4a08      	ldr	r2, [pc, #32]	@ (800118c <HAL_I2S_TxHalfCpltCallback+0x34>)
 800116a:	601a      	str	r2, [r3, #0]

    dataReadyFlag = 1;
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <HAL_I2S_TxHalfCpltCallback+0x38>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000690 	.word	0x20000690
 8001184:	20000290 	.word	0x20000290
 8001188:	20000004 	.word	0x20000004
 800118c:	20000490 	.word	0x20000490
 8001190:	20000694 	.word	0x20000694

08001194 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    inBufPtr = &adcData[ADC_BUFFER_SIZE / 2];
 800119c:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <HAL_I2S_TxCpltCallback+0x28>)
 800119e:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <HAL_I2S_TxCpltCallback+0x2c>)
 80011a0:	601a      	str	r2, [r3, #0]
    outBufPtr = &dacData[DAC_BUFFER_SIZE / 2];
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <HAL_I2S_TxCpltCallback+0x30>)
 80011a4:	4a08      	ldr	r2, [pc, #32]	@ (80011c8 <HAL_I2S_TxCpltCallback+0x34>)
 80011a6:	601a      	str	r2, [r3, #0]

    dataReadyFlag = 1;
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <HAL_I2S_TxCpltCallback+0x38>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000690 	.word	0x20000690
 80011c0:	20000390 	.word	0x20000390
 80011c4:	20000004 	.word	0x20000004
 80011c8:	20000590 	.word	0x20000590
 80011cc:	20000694 	.word	0x20000694

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d4:	f000 fc80 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d8:	f000 f838 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011dc:	f7ff fc52 	bl	8000a84 <MX_GPIO_Init>
  MX_DMA_Init();
 80011e0:	f7ff fc12 	bl	8000a08 <MX_DMA_Init>
  MX_I2C1_Init();
 80011e4:	f7ff fd58 	bl	8000c98 <MX_I2C1_Init>
  MX_I2S3_Init();
 80011e8:	f7ff fdcc 	bl	8000d84 <MX_I2S3_Init>
  MX_ADC1_Init();
 80011ec:	f7ff f9d6 	bl	800059c <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011f0:	f000 fb80 	bl	80018f4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80011f4:	f000 fa58 	bl	80016a8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80011f8:	f000 fae8 	bl	80017cc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80011fc:	f000 f8b2 	bl	8001364 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  cs43l22_init();
 8001200:	f7ff fad8 	bl	80007b4 <cs43l22_init>
  cs43l22_unmute();  // unmute
 8001204:	f7ff fa9c 	bl	8000740 <cs43l22_unmute>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_BUFFER_SIZE);
 8001208:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800120c:	490a      	ldr	r1, [pc, #40]	@ (8001238 <main+0x68>)
 800120e:	480b      	ldr	r0, [pc, #44]	@ (800123c <main+0x6c>)
 8001210:	f000 fe4c 	bl	8001eac <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8001214:	480a      	ldr	r0, [pc, #40]	@ (8001240 <main+0x70>)
 8001216:	f005 f957 	bl	80064c8 <HAL_TIM_Base_Start>
  cs43l22_play((int16_t*)dacData, DAC_BUFFER_SIZE);
 800121a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800121e:	4809      	ldr	r0, [pc, #36]	@ (8001244 <main+0x74>)
 8001220:	f7ff fb7c 	bl	800091c <cs43l22_play>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dataReadyFlag) {
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <main+0x78>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0fb      	beq.n	8001224 <main+0x54>

		  processData();
 800122c:	f7ff fefe 	bl	800102c <processData>
		  printDACData();
 8001230:	f7ff ff74 	bl	800111c <printDACData>
	  if(dataReadyFlag) {
 8001234:	e7f6      	b.n	8001224 <main+0x54>
 8001236:	bf00      	nop
 8001238:	20000290 	.word	0x20000290
 800123c:	2000008c 	.word	0x2000008c
 8001240:	20000704 	.word	0x20000704
 8001244:	20000490 	.word	0x20000490
 8001248:	20000694 	.word	0x20000694

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b094      	sub	sp, #80	@ 0x50
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	2230      	movs	r2, #48	@ 0x30
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f007 f904 	bl	8008468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	4b28      	ldr	r3, [pc, #160]	@ (8001318 <SystemClock_Config+0xcc>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001278:	4a27      	ldr	r2, [pc, #156]	@ (8001318 <SystemClock_Config+0xcc>)
 800127a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800127e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001280:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <SystemClock_Config+0xcc>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	4b22      	ldr	r3, [pc, #136]	@ (800131c <SystemClock_Config+0xd0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a21      	ldr	r2, [pc, #132]	@ (800131c <SystemClock_Config+0xd0>)
 8001296:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <SystemClock_Config+0xd0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a8:	2301      	movs	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b2:	2302      	movs	r3, #2
 80012b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012bc:	2308      	movs	r3, #8
 80012be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012c0:	23a8      	movs	r3, #168	@ 0xa8
 80012c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012c8:	2307      	movs	r3, #7
 80012ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 fa4b 	bl	800576c <HAL_RCC_OscConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012dc:	f000 f83c 	bl	8001358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e0:	230f      	movs	r3, #15
 80012e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e4:	2302      	movs	r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2105      	movs	r1, #5
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 fcac 	bl	8005c5c <HAL_RCC_ClockConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800130a:	f000 f825 	bl	8001358 <Error_Handler>
  }
}
 800130e:	bf00      	nop
 8001310:	3750      	adds	r7, #80	@ 0x50
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e009      	b.n	8001346 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	60ba      	str	r2, [r7, #8]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fe4e 	bl	8000fdc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	dbf1      	blt.n	8001332 <_write+0x12>
  }
  return len;
 800134e:	687b      	ldr	r3, [r7, #4]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135c:	b672      	cpsid	i
}
 800135e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <Error_Handler+0x8>

08001364 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <MX_SPI1_Init+0x64>)
 800136a:	4a18      	ldr	r2, [pc, #96]	@ (80013cc <MX_SPI1_Init+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <MX_SPI1_Init+0x64>)
 8001370:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001374:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <MX_SPI1_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <MX_SPI1_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <MX_SPI1_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001388:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <MX_SPI1_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <MX_SPI1_Init+0x64>)
 8001390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001394:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <MX_SPI1_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <MX_SPI1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <MX_SPI1_Init+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <MX_SPI1_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <MX_SPI1_Init+0x64>)
 80013b0:	220a      	movs	r2, #10
 80013b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013b4:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <MX_SPI1_Init+0x64>)
 80013b6:	f004 ffaf 	bl	8006318 <HAL_SPI_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013c0:	f7ff ffca 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200006a8 	.word	0x200006a8
 80013cc:	40013000 	.word	0x40013000

080013d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a19      	ldr	r2, [pc, #100]	@ (8001454 <HAL_SPI_MspInit+0x84>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12b      	bne.n	800144a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <HAL_SPI_MspInit+0x88>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a17      	ldr	r2, [pc, #92]	@ (8001458 <HAL_SPI_MspInit+0x88>)
 80013fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_SPI_MspInit+0x88>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_SPI_MspInit+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a10      	ldr	r2, [pc, #64]	@ (8001458 <HAL_SPI_MspInit+0x88>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <HAL_SPI_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800142a:	23e0      	movs	r3, #224	@ 0xe0
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800143a:	2305      	movs	r3, #5
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	@ (800145c <HAL_SPI_MspInit+0x8c>)
 8001446:	f001 fd95 	bl	8002f74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	@ 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40013000 	.word	0x40013000
 8001458:	40023800 	.word	0x40023800
 800145c:	40020000 	.word	0x40020000

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <HAL_MspInit+0x4c>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <HAL_MspInit+0x4c>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800149e:	2007      	movs	r0, #7
 80014a0:	f001 f9b6 	bl	8002810 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <NMI_Handler+0x4>

080014b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <MemManage_Handler+0x4>

080014c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001506:	f000 fb39 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8001514:	4802      	ldr	r0, [pc, #8]	@ (8001520 <DMA1_Stream0_IRQHandler+0x10>)
 8001516:	f001 fac3 	bl	8002aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200001d0 	.word	0x200001d0

08001524 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <DMA1_Stream5_IRQHandler+0x10>)
 800152a:	f001 fab9 	bl	8002aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000230 	.word	0x20000230

08001538 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800153c:	4802      	ldr	r0, [pc, #8]	@ (8001548 <ADC_IRQHandler+0x10>)
 800153e:	f000 fba4 	bl	8001c8a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000008c 	.word	0x2000008c

0800154c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <DMA2_Stream0_IRQHandler+0x10>)
 8001552:	f001 faa5 	bl	8002aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200000d4 	.word	0x200000d4

08001560 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <OTG_FS_IRQHandler+0x10>)
 8001566:	f003 f9f2 	bl	800494e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000794 	.word	0x20000794

08001574 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e00a      	b.n	800159c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001586:	f3af 8000 	nop.w
 800158a:	4601      	mov	r1, r0
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60ba      	str	r2, [r7, #8]
 8001592:	b2ca      	uxtb	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dbf0      	blt.n	8001586 <_read+0x12>
  }

  return len;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d6:	605a      	str	r2, [r3, #4]
  return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_isatty>:

int _isatty(int file)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	@ (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f006 ff16 	bl	8008478 <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	@ (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	@ (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20020000 	.word	0x20020000
 8001678:	00000400 	.word	0x00000400
 800167c:	20000700 	.word	0x20000700
 8001680:	20000dc8 	.word	0x20000dc8

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	@ 0x38
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	f107 0320 	add.w	r3, r7, #32
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]
 80016d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <MX_TIM2_Init+0xe0>)
 80016da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <MX_TIM2_Init+0xe0>)
 80016e2:	2205      	movs	r2, #5
 80016e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <MX_TIM2_Init+0xe0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 80016ec:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <MX_TIM2_Init+0xe0>)
 80016ee:	2204      	movs	r2, #4
 80016f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b25      	ldr	r3, [pc, #148]	@ (8001788 <MX_TIM2_Init+0xe0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b23      	ldr	r3, [pc, #140]	@ (8001788 <MX_TIM2_Init+0xe0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016fe:	4822      	ldr	r0, [pc, #136]	@ (8001788 <MX_TIM2_Init+0xe0>)
 8001700:	f004 fe93 	bl	800642a <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800170a:	f7ff fe25 	bl	8001358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001714:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001718:	4619      	mov	r1, r3
 800171a:	481b      	ldr	r0, [pc, #108]	@ (8001788 <MX_TIM2_Init+0xe0>)
 800171c:	f005 f858 	bl	80067d0 <HAL_TIM_ConfigClockSource>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001726:	f7ff fe17 	bl	8001358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800172a:	4817      	ldr	r0, [pc, #92]	@ (8001788 <MX_TIM2_Init+0xe0>)
 800172c:	f004 ff34 	bl	8006598 <HAL_TIM_PWM_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001736:	f7ff fe0f 	bl	8001358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800173a:	2320      	movs	r3, #32
 800173c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	4619      	mov	r1, r3
 8001748:	480f      	ldr	r0, [pc, #60]	@ (8001788 <MX_TIM2_Init+0xe0>)
 800174a:	f005 fbff 	bl	8006f4c <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001754:	f7ff fe00 	bl	8001358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001758:	2360      	movs	r3, #96	@ 0x60
 800175a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	@ (8001788 <MX_TIM2_Init+0xe0>)
 8001770:	f004 ff6c 	bl	800664c <HAL_TIM_PWM_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800177a:	f7ff fded 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3738      	adds	r7, #56	@ 0x38
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000704 	.word	0x20000704

0800178c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800179c:	d10d      	bne.n	80017ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_TIM_Base_MspInit+0x3c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_TIM_Base_MspInit+0x3c>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_TIM_Base_MspInit+0x3c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	@ (800181c <MX_USART3_UART_Init+0x50>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_USART3_UART_Init+0x4c>)
 8001804:	f005 fc1e 	bl	8007044 <HAL_UART_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800180e:	f7ff fda3 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000074c 	.word	0x2000074c
 800181c:	40004800 	.word	0x40004800

08001820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a29      	ldr	r2, [pc, #164]	@ (80018e4 <HAL_UART_MspInit+0xc4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d14b      	bne.n	80018da <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b28      	ldr	r3, [pc, #160]	@ (80018e8 <HAL_UART_MspInit+0xc8>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	4a27      	ldr	r2, [pc, #156]	@ (80018e8 <HAL_UART_MspInit+0xc8>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001850:	6413      	str	r3, [r2, #64]	@ 0x40
 8001852:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <HAL_UART_MspInit+0xc8>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <HAL_UART_MspInit+0xc8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a20      	ldr	r2, [pc, #128]	@ (80018e8 <HAL_UART_MspInit+0xc8>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <HAL_UART_MspInit+0xc8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <HAL_UART_MspInit+0xc8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a19      	ldr	r2, [pc, #100]	@ (80018e8 <HAL_UART_MspInit+0xc8>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <HAL_UART_MspInit+0xc8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001896:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018a8:	2307      	movs	r3, #7
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	480e      	ldr	r0, [pc, #56]	@ (80018ec <HAL_UART_MspInit+0xcc>)
 80018b4:	f001 fb5e 	bl	8002f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018ca:	2307      	movs	r3, #7
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4806      	ldr	r0, [pc, #24]	@ (80018f0 <HAL_UART_MspInit+0xd0>)
 80018d6:	f001 fb4d 	bl	8002f74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	@ 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40004800 	.word	0x40004800
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40020c00 	.word	0x40020c00

080018f4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001902:	2204      	movs	r2, #4
 8001904:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001906:	4b11      	ldr	r3, [pc, #68]	@ (800194c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001908:	2202      	movs	r2, #2
 800190a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800190e:	2200      	movs	r2, #0
 8001910:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001914:	2202      	movs	r2, #2
 8001916:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001924:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001926:	2200      	movs	r2, #0
 8001928:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800192a:	4b08      	ldr	r3, [pc, #32]	@ (800194c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800192c:	2201      	movs	r2, #1
 800192e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001932:	2200      	movs	r2, #0
 8001934:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	@ (800194c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001938:	f002 fefa 	bl	8004730 <HAL_PCD_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001942:	f7ff fd09 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000794 	.word	0x20000794

08001950 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	@ 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001970:	d147      	bne.n	8001a02 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <HAL_PCD_MspInit+0xbc>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a24      	ldr	r2, [pc, #144]	@ (8001a0c <HAL_PCD_MspInit+0xbc>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <HAL_PCD_MspInit+0xbc>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800198e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	481b      	ldr	r0, [pc, #108]	@ (8001a10 <HAL_PCD_MspInit+0xc0>)
 80019a4:	f001 fae6 	bl	8002f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80019a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019ba:	230a      	movs	r3, #10
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4812      	ldr	r0, [pc, #72]	@ (8001a10 <HAL_PCD_MspInit+0xc0>)
 80019c6:	f001 fad5 	bl	8002f74 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <HAL_PCD_MspInit+0xbc>)
 80019cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ce:	4a0f      	ldr	r2, [pc, #60]	@ (8001a0c <HAL_PCD_MspInit+0xbc>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d4:	6353      	str	r3, [r2, #52]	@ 0x34
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <HAL_PCD_MspInit+0xbc>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	4a0b      	ldr	r2, [pc, #44]	@ (8001a0c <HAL_PCD_MspInit+0xbc>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_PCD_MspInit+0xbc>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2043      	movs	r0, #67	@ 0x43
 80019f8:	f000 ff15 	bl	8002826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80019fc:	2043      	movs	r0, #67	@ 0x43
 80019fe:	f000 ff2e 	bl	800285e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	@ 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000

08001a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a18:	f7ff fe34 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a1c:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a1e:	490d      	ldr	r1, [pc, #52]	@ (8001a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a20:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a34:	4c0a      	ldr	r4, [pc, #40]	@ (8001a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a42:	f006 fd1f 	bl	8008484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a46:	f7ff fbc3 	bl	80011d0 <main>
  bx  lr    
 8001a4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a58:	080091d4 	.word	0x080091d4
  ldr r2, =_sbss
 8001a5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a60:	20000dc8 	.word	0x20000dc8

08001a64 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a64:	e7fe      	b.n	8001a64 <CAN1_RX0_IRQHandler>

08001a66 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001a7c:	f000 f804 	bl	8001a88 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	@ (8001ad0 <HAL_I2S_ErrorCallback+0x2c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001ab6:	f7ff ffd6 	bl	8001a66 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <HAL_I2S_ErrorCallback+0x30>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001ac4:	f7ff ffe7 	bl	8001a96 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40003c00 	.word	0x40003c00
 8001ad4:	40003800 	.word	0x40003800

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b18 <HAL_Init+0x40>)
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <HAL_Init+0x40>)
 8001aee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <HAL_Init+0x40>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 fe85 	bl	8002810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 f808 	bl	8001b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0c:	f7ff fca8 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fe9d 	bl	800287a <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b58:	f000 fe65 	bl	8002826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	@ (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000008 	.word	0x20000008
 8001b74:	20000010 	.word	0x20000010
 8001b78:	2000000c 	.word	0x2000000c

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000010 	.word	0x20000010
 8001ba0:	20000c78 	.word	0x20000c78

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	@ (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000c78 	.word	0x20000c78

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000010 	.word	0x20000010

08001c04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e033      	b.n	8001c82 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe fd0c 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c4a:	f023 0302 	bic.w	r3, r3, #2
 8001c4e:	f043 0202 	orr.w	r2, r3, #2
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fb82 	bl	8002360 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f023 0303 	bic.w	r3, r3, #3
 8001c6a:	f043 0201 	orr.w	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c72:	e001      	b.n	8001c78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d049      	beq.n	8001d54 <HAL_ADC_IRQHandler+0xca>
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d046      	beq.n	8001d54 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d12b      	bne.n	8001d44 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d127      	bne.n	8001d44 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d119      	bne.n	8001d44 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0220 	bic.w	r2, r2, #32
 8001d1e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	f043 0201 	orr.w	r2, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f9c1 	bl	80020cc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f06f 0212 	mvn.w	r2, #18
 8001d52:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d62:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d057      	beq.n	8001e1a <HAL_ADC_IRQHandler+0x190>
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d054      	beq.n	8001e1a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d139      	bne.n	8001e0a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d9c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d12b      	bne.n	8001e0a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d124      	bne.n	8001e0a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d11d      	bne.n	8001e0a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d119      	bne.n	8001e0a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001de4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fc26 	bl	800265c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 020c 	mvn.w	r2, #12
 8001e18:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e28:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d017      	beq.n	8001e60 <HAL_ADC_IRQHandler+0x1d6>
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d014      	beq.n	8001e60 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d10d      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f94f 	bl	80020f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f06f 0201 	mvn.w	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e6e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d015      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x218>
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d012      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e80:	f043 0202 	orr.w	r2, r3, #2
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0220 	mvn.w	r2, #32
 8001e90:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f938 	bl	8002108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0220 	mvn.w	r2, #32
 8001ea0:	601a      	str	r2, [r3, #0]
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_Start_DMA+0x1e>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e0e9      	b.n	800209e <HAL_ADC_Start_DMA+0x1f2>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d018      	beq.n	8001f12 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ef0:	4b6d      	ldr	r3, [pc, #436]	@ (80020a8 <HAL_ADC_Start_DMA+0x1fc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6d      	ldr	r2, [pc, #436]	@ (80020ac <HAL_ADC_Start_DMA+0x200>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0c9a      	lsrs	r2, r3, #18
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f04:	e002      	b.n	8001f0c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f9      	bne.n	8001f06 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f20:	d107      	bne.n	8001f32 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f30:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	f040 80a1 	bne.w	8002084 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f4a:	f023 0301 	bic.w	r3, r3, #1
 8001f4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f80:	d106      	bne.n	8001f90 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f023 0206 	bic.w	r2, r3, #6
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f8e:	e002      	b.n	8001f96 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f9e:	4b44      	ldr	r3, [pc, #272]	@ (80020b0 <HAL_ADC_Start_DMA+0x204>)
 8001fa0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa6:	4a43      	ldr	r2, [pc, #268]	@ (80020b4 <HAL_ADC_Start_DMA+0x208>)
 8001fa8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fae:	4a42      	ldr	r2, [pc, #264]	@ (80020b8 <HAL_ADC_Start_DMA+0x20c>)
 8001fb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb6:	4a41      	ldr	r2, [pc, #260]	@ (80020bc <HAL_ADC_Start_DMA+0x210>)
 8001fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001fd2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fe2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	334c      	adds	r3, #76	@ 0x4c
 8001fee:	4619      	mov	r1, r3
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f000 fcfc 	bl	80029f0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	2b00      	cmp	r3, #0
 8002002:	d12a      	bne.n	800205a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2d      	ldr	r2, [pc, #180]	@ (80020c0 <HAL_ADC_Start_DMA+0x214>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d015      	beq.n	800203a <HAL_ADC_Start_DMA+0x18e>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a2c      	ldr	r2, [pc, #176]	@ (80020c4 <HAL_ADC_Start_DMA+0x218>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d105      	bne.n	8002024 <HAL_ADC_Start_DMA+0x178>
 8002018:	4b25      	ldr	r3, [pc, #148]	@ (80020b0 <HAL_ADC_Start_DMA+0x204>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a27      	ldr	r2, [pc, #156]	@ (80020c8 <HAL_ADC_Start_DMA+0x21c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d136      	bne.n	800209c <HAL_ADC_Start_DMA+0x1f0>
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <HAL_ADC_Start_DMA+0x204>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d130      	bne.n	800209c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d129      	bne.n	800209c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	e020      	b.n	800209c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a18      	ldr	r2, [pc, #96]	@ (80020c0 <HAL_ADC_Start_DMA+0x214>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d11b      	bne.n	800209c <HAL_ADC_Start_DMA+0x1f0>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d114      	bne.n	800209c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	e00b      	b.n	800209c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	f043 0210 	orr.w	r2, r3, #16
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000008 	.word	0x20000008
 80020ac:	431bde83 	.word	0x431bde83
 80020b0:	40012300 	.word	0x40012300
 80020b4:	08002559 	.word	0x08002559
 80020b8:	08002613 	.word	0x08002613
 80020bc:	0800262f 	.word	0x0800262f
 80020c0:	40012000 	.word	0x40012000
 80020c4:	40012100 	.word	0x40012100
 80020c8:	40012200 	.word	0x40012200

080020cc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x1c>
 8002134:	2302      	movs	r3, #2
 8002136:	e105      	b.n	8002344 <HAL_ADC_ConfigChannel+0x228>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b09      	cmp	r3, #9
 8002146:	d925      	bls.n	8002194 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68d9      	ldr	r1, [r3, #12]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	3b1e      	subs	r3, #30
 800215e:	2207      	movs	r2, #7
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43da      	mvns	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	400a      	ands	r2, r1
 800216c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68d9      	ldr	r1, [r3, #12]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	4603      	mov	r3, r0
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4403      	add	r3, r0
 8002186:	3b1e      	subs	r3, #30
 8002188:	409a      	lsls	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	e022      	b.n	80021da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6919      	ldr	r1, [r3, #16]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	2207      	movs	r2, #7
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	400a      	ands	r2, r1
 80021b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6919      	ldr	r1, [r3, #16]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	4618      	mov	r0, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4403      	add	r3, r0
 80021d0:	409a      	lsls	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d824      	bhi.n	800222c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b05      	subs	r3, #5
 80021f4:	221f      	movs	r2, #31
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	400a      	ands	r2, r1
 8002202:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	3b05      	subs	r3, #5
 800221e:	fa00 f203 	lsl.w	r2, r0, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	635a      	str	r2, [r3, #52]	@ 0x34
 800222a:	e04c      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b0c      	cmp	r3, #12
 8002232:	d824      	bhi.n	800227e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	3b23      	subs	r3, #35	@ 0x23
 8002246:	221f      	movs	r2, #31
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43da      	mvns	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	400a      	ands	r2, r1
 8002254:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	4618      	mov	r0, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	3b23      	subs	r3, #35	@ 0x23
 8002270:	fa00 f203 	lsl.w	r2, r0, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	631a      	str	r2, [r3, #48]	@ 0x30
 800227c:	e023      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	3b41      	subs	r3, #65	@ 0x41
 8002290:	221f      	movs	r2, #31
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	400a      	ands	r2, r1
 800229e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4618      	mov	r0, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	3b41      	subs	r3, #65	@ 0x41
 80022ba:	fa00 f203 	lsl.w	r2, r0, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c6:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <HAL_ADC_ConfigChannel+0x234>)
 80022c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a21      	ldr	r2, [pc, #132]	@ (8002354 <HAL_ADC_ConfigChannel+0x238>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d109      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1cc>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b12      	cmp	r3, #18
 80022da:	d105      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a19      	ldr	r2, [pc, #100]	@ (8002354 <HAL_ADC_ConfigChannel+0x238>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d123      	bne.n	800233a <HAL_ADC_ConfigChannel+0x21e>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b10      	cmp	r3, #16
 80022f8:	d003      	beq.n	8002302 <HAL_ADC_ConfigChannel+0x1e6>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b11      	cmp	r3, #17
 8002300:	d11b      	bne.n	800233a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b10      	cmp	r3, #16
 8002314:	d111      	bne.n	800233a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002316:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <HAL_ADC_ConfigChannel+0x23c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a10      	ldr	r2, [pc, #64]	@ (800235c <HAL_ADC_ConfigChannel+0x240>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	0c9a      	lsrs	r2, r3, #18
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800232c:	e002      	b.n	8002334 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3b01      	subs	r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f9      	bne.n	800232e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40012300 	.word	0x40012300
 8002354:	40012000 	.word	0x40012000
 8002358:	20000008 	.word	0x20000008
 800235c:	431bde83 	.word	0x431bde83

08002360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002368:	4b79      	ldr	r3, [pc, #484]	@ (8002550 <ADC_Init+0x1f0>)
 800236a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	431a      	orrs	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	021a      	lsls	r2, r3, #8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6899      	ldr	r1, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f2:	4a58      	ldr	r2, [pc, #352]	@ (8002554 <ADC_Init+0x1f4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d022      	beq.n	800243e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002406:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	e00f      	b.n	800245e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800244c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800245c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0202 	bic.w	r2, r2, #2
 800246c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6899      	ldr	r1, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e1b      	ldrb	r3, [r3, #24]
 8002478:	005a      	lsls	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01b      	beq.n	80024c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800249a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	3b01      	subs	r3, #1
 80024b8:	035a      	lsls	r2, r3, #13
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	e007      	b.n	80024d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	051a      	lsls	r2, r3, #20
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6899      	ldr	r1, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002516:	025a      	lsls	r2, r3, #9
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800252e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6899      	ldr	r1, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	029a      	lsls	r2, r3, #10
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	609a      	str	r2, [r3, #8]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40012300 	.word	0x40012300
 8002554:	0f000001 	.word	0x0f000001

08002558 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002564:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800256e:	2b00      	cmp	r3, #0
 8002570:	d13c      	bne.n	80025ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d12b      	bne.n	80025e4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002590:	2b00      	cmp	r3, #0
 8002592:	d127      	bne.n	80025e4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d119      	bne.n	80025e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0220 	bic.w	r2, r2, #32
 80025be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7ff fd71 	bl	80020cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025ea:	e00e      	b.n	800260a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7ff fd85 	bl	8002108 <HAL_ADC_ErrorCallback>
}
 80025fe:	e004      	b.n	800260a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7ff fd5d 	bl	80020e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2240      	movs	r2, #64	@ 0x40
 8002640:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	f043 0204 	orr.w	r2, r3, #4
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f7ff fd5a 	bl	8002108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <__NVIC_SetPriorityGrouping>:
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002680:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800268c:	4013      	ands	r3, r2
 800268e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002698:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800269c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a2:	4a04      	ldr	r2, [pc, #16]	@ (80026b4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	60d3      	str	r3, [r2, #12]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_GetPriorityGrouping>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026bc:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <__NVIC_GetPriorityGrouping+0x18>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	f003 0307 	and.w	r3, r3, #7
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <__NVIC_EnableIRQ>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	db0b      	blt.n	80026fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	f003 021f 	and.w	r2, r3, #31
 80026ec:	4907      	ldr	r1, [pc, #28]	@ (800270c <__NVIC_EnableIRQ+0x38>)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	2001      	movs	r0, #1
 80026f6:	fa00 f202 	lsl.w	r2, r0, r2
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	e000e100 	.word	0xe000e100

08002710 <__NVIC_SetPriority>:
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	2b00      	cmp	r3, #0
 8002722:	db0a      	blt.n	800273a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	490c      	ldr	r1, [pc, #48]	@ (800275c <__NVIC_SetPriority+0x4c>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	0112      	lsls	r2, r2, #4
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	440b      	add	r3, r1
 8002734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002738:	e00a      	b.n	8002750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4908      	ldr	r1, [pc, #32]	@ (8002760 <__NVIC_SetPriority+0x50>)
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3b04      	subs	r3, #4
 8002748:	0112      	lsls	r2, r2, #4
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	440b      	add	r3, r1
 800274e:	761a      	strb	r2, [r3, #24]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000e100 	.word	0xe000e100
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <NVIC_EncodePriority>:
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	@ 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f1c3 0307 	rsb	r3, r3, #7
 800277e:	2b04      	cmp	r3, #4
 8002780:	bf28      	it	cs
 8002782:	2304      	movcs	r3, #4
 8002784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3304      	adds	r3, #4
 800278a:	2b06      	cmp	r3, #6
 800278c:	d902      	bls.n	8002794 <NVIC_EncodePriority+0x30>
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3b03      	subs	r3, #3
 8002792:	e000      	b.n	8002796 <NVIC_EncodePriority+0x32>
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	401a      	ands	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	43d9      	mvns	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	4313      	orrs	r3, r2
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3724      	adds	r7, #36	@ 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <SysTick_Config>:
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027dc:	d301      	bcc.n	80027e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80027de:	2301      	movs	r3, #1
 80027e0:	e00f      	b.n	8002802 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e2:	4a0a      	ldr	r2, [pc, #40]	@ (800280c <SysTick_Config+0x40>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ea:	210f      	movs	r1, #15
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027f0:	f7ff ff8e 	bl	8002710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f4:	4b05      	ldr	r3, [pc, #20]	@ (800280c <SysTick_Config+0x40>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027fa:	4b04      	ldr	r3, [pc, #16]	@ (800280c <SysTick_Config+0x40>)
 80027fc:	2207      	movs	r2, #7
 80027fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	e000e010 	.word	0xe000e010

08002810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff29 	bl	8002670 <__NVIC_SetPriorityGrouping>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002838:	f7ff ff3e 	bl	80026b8 <__NVIC_GetPriorityGrouping>
 800283c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	6978      	ldr	r0, [r7, #20]
 8002844:	f7ff ff8e 	bl	8002764 <NVIC_EncodePriority>
 8002848:	4602      	mov	r2, r0
 800284a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff5d 	bl	8002710 <__NVIC_SetPriority>
}
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff31 	bl	80026d4 <__NVIC_EnableIRQ>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ffa2 	bl	80027cc <SysTick_Config>
 8002888:	4603      	mov	r3, r0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028a0:	f7ff f980 	bl	8001ba4 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e099      	b.n	80029e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d0:	e00f      	b.n	80028f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d2:	f7ff f967 	bl	8001ba4 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d908      	bls.n	80028f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2203      	movs	r2, #3
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e078      	b.n	80029e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e8      	bne.n	80028d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4b38      	ldr	r3, [pc, #224]	@ (80029ec <HAL_DMA_Init+0x158>)
 800290c:	4013      	ands	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	2b04      	cmp	r3, #4
 800294a:	d107      	bne.n	800295c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002954:	4313      	orrs	r3, r2
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f023 0307 	bic.w	r3, r3, #7
 8002972:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	2b04      	cmp	r3, #4
 8002984:	d117      	bne.n	80029b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00e      	beq.n	80029b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fa6f 	bl	8002e7c <DMA_CheckFifoParam>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2240      	movs	r2, #64	@ 0x40
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029b2:	2301      	movs	r3, #1
 80029b4:	e016      	b.n	80029e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa26 	bl	8002e10 <DMA_CalcBaseAndBitshift>
 80029c4:	4603      	mov	r3, r0
 80029c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029cc:	223f      	movs	r2, #63	@ 0x3f
 80029ce:	409a      	lsls	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	f010803f 	.word	0xf010803f

080029f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_DMA_Start_IT+0x26>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e040      	b.n	8002a98 <HAL_DMA_Start_IT+0xa8>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d12f      	bne.n	8002a8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f9b8 	bl	8002db4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a48:	223f      	movs	r2, #63	@ 0x3f
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0216 	orr.w	r2, r2, #22
 8002a5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0208 	orr.w	r2, r2, #8
 8002a76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	e005      	b.n	8002a96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a92:	2302      	movs	r3, #2
 8002a94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002aac:	4b8e      	ldr	r3, [pc, #568]	@ (8002ce8 <HAL_DMA_IRQHandler+0x248>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a8e      	ldr	r2, [pc, #568]	@ (8002cec <HAL_DMA_IRQHandler+0x24c>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0a9b      	lsrs	r3, r3, #10
 8002ab8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aca:	2208      	movs	r2, #8
 8002acc:	409a      	lsls	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01a      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0204 	bic.w	r2, r2, #4
 8002af2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af8:	2208      	movs	r2, #8
 8002afa:	409a      	lsls	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b04:	f043 0201 	orr.w	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	2201      	movs	r2, #1
 8002b12:	409a      	lsls	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d012      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2e:	2201      	movs	r2, #1
 8002b30:	409a      	lsls	r2, r3
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3a:	f043 0202 	orr.w	r2, r3, #2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b46:	2204      	movs	r2, #4
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d012      	beq.n	8002b78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b64:	2204      	movs	r2, #4
 8002b66:	409a      	lsls	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b70:	f043 0204 	orr.w	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d043      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d03c      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d018      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d108      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d024      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
 8002bce:	e01f      	b.n	8002c10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01b      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4798      	blx	r3
 8002be0:	e016      	b.n	8002c10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0208 	bic.w	r2, r2, #8
 8002bfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c14:	2220      	movs	r2, #32
 8002c16:	409a      	lsls	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 808f 	beq.w	8002d40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8087 	beq.w	8002d40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c36:	2220      	movs	r2, #32
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d136      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0216 	bic.w	r2, r2, #22
 8002c58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d103      	bne.n	8002c7a <HAL_DMA_IRQHandler+0x1da>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0208 	bic.w	r2, r2, #8
 8002c88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8e:	223f      	movs	r2, #63	@ 0x3f
 8002c90:	409a      	lsls	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d07e      	beq.n	8002dac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4798      	blx	r3
        }
        return;
 8002cb6:	e079      	b.n	8002dac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01d      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10d      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d031      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
 8002ce4:	e02c      	b.n	8002d40 <HAL_DMA_IRQHandler+0x2a0>
 8002ce6:	bf00      	nop
 8002ce8:	20000008 	.word	0x20000008
 8002cec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d023      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
 8002d00:	e01e      	b.n	8002d40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10f      	bne.n	8002d30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0210 	bic.w	r2, r2, #16
 8002d1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d032      	beq.n	8002dae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d022      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2205      	movs	r2, #5
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d307      	bcc.n	8002d88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f2      	bne.n	8002d6c <HAL_DMA_IRQHandler+0x2cc>
 8002d86:	e000      	b.n	8002d8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
 8002daa:	e000      	b.n	8002dae <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dac:	bf00      	nop
    }
  }
}
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b40      	cmp	r3, #64	@ 0x40
 8002de0:	d108      	bne.n	8002df4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002df2:	e007      	b.n	8002e04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	60da      	str	r2, [r3, #12]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	3b10      	subs	r3, #16
 8002e20:	4a14      	ldr	r2, [pc, #80]	@ (8002e74 <DMA_CalcBaseAndBitshift+0x64>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e2a:	4a13      	ldr	r2, [pc, #76]	@ (8002e78 <DMA_CalcBaseAndBitshift+0x68>)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4413      	add	r3, r2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d909      	bls.n	8002e52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e46:	f023 0303 	bic.w	r3, r3, #3
 8002e4a:	1d1a      	adds	r2, r3, #4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e50:	e007      	b.n	8002e62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e5a:	f023 0303 	bic.w	r3, r3, #3
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	aaaaaaab 	.word	0xaaaaaaab
 8002e78:	08009188 	.word	0x08009188

08002e7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11f      	bne.n	8002ed6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d856      	bhi.n	8002f4a <DMA_CheckFifoParam+0xce>
 8002e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea4 <DMA_CheckFifoParam+0x28>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08002ec7 	.word	0x08002ec7
 8002eac:	08002eb5 	.word	0x08002eb5
 8002eb0:	08002f4b 	.word	0x08002f4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d046      	beq.n	8002f4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec4:	e043      	b.n	8002f4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ece:	d140      	bne.n	8002f52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed4:	e03d      	b.n	8002f52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ede:	d121      	bne.n	8002f24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d837      	bhi.n	8002f56 <DMA_CheckFifoParam+0xda>
 8002ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eec <DMA_CheckFifoParam+0x70>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002efd 	.word	0x08002efd
 8002ef0:	08002f03 	.word	0x08002f03
 8002ef4:	08002efd 	.word	0x08002efd
 8002ef8:	08002f15 	.word	0x08002f15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      break;
 8002f00:	e030      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d025      	beq.n	8002f5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f12:	e022      	b.n	8002f5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f1c:	d11f      	bne.n	8002f5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f22:	e01c      	b.n	8002f5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d903      	bls.n	8002f32 <DMA_CheckFifoParam+0xb6>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d003      	beq.n	8002f38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f30:	e018      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
      break;
 8002f36:	e015      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00e      	beq.n	8002f62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
      break;
 8002f48:	e00b      	b.n	8002f62 <DMA_CheckFifoParam+0xe6>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e00a      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e008      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      break;
 8002f52:	bf00      	nop
 8002f54:	e006      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
 8002f58:	e004      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e002      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f5e:	bf00      	nop
 8002f60:	e000      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      break;
 8002f62:	bf00      	nop
    }
  } 
  
  return status; 
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop

08002f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	@ 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e16b      	b.n	8003268 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f90:	2201      	movs	r2, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	f040 815a 	bne.w	8003262 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d005      	beq.n	8002fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d130      	bne.n	8003028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 0201 	and.w	r2, r3, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b03      	cmp	r3, #3
 8003032:	d017      	beq.n	8003064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d123      	bne.n	80030b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	08da      	lsrs	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3208      	adds	r2, #8
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80b4 	beq.w	8003262 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b60      	ldr	r3, [pc, #384]	@ (8003280 <HAL_GPIO_Init+0x30c>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	4a5f      	ldr	r2, [pc, #380]	@ (8003280 <HAL_GPIO_Init+0x30c>)
 8003104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003108:	6453      	str	r3, [r2, #68]	@ 0x44
 800310a:	4b5d      	ldr	r3, [pc, #372]	@ (8003280 <HAL_GPIO_Init+0x30c>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003116:	4a5b      	ldr	r2, [pc, #364]	@ (8003284 <HAL_GPIO_Init+0x310>)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	3302      	adds	r3, #2
 800311e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a52      	ldr	r2, [pc, #328]	@ (8003288 <HAL_GPIO_Init+0x314>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d02b      	beq.n	800319a <HAL_GPIO_Init+0x226>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a51      	ldr	r2, [pc, #324]	@ (800328c <HAL_GPIO_Init+0x318>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d025      	beq.n	8003196 <HAL_GPIO_Init+0x222>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a50      	ldr	r2, [pc, #320]	@ (8003290 <HAL_GPIO_Init+0x31c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01f      	beq.n	8003192 <HAL_GPIO_Init+0x21e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4f      	ldr	r2, [pc, #316]	@ (8003294 <HAL_GPIO_Init+0x320>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d019      	beq.n	800318e <HAL_GPIO_Init+0x21a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4e      	ldr	r2, [pc, #312]	@ (8003298 <HAL_GPIO_Init+0x324>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_GPIO_Init+0x216>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4d      	ldr	r2, [pc, #308]	@ (800329c <HAL_GPIO_Init+0x328>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00d      	beq.n	8003186 <HAL_GPIO_Init+0x212>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a4c      	ldr	r2, [pc, #304]	@ (80032a0 <HAL_GPIO_Init+0x32c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <HAL_GPIO_Init+0x20e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a4b      	ldr	r2, [pc, #300]	@ (80032a4 <HAL_GPIO_Init+0x330>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d101      	bne.n	800317e <HAL_GPIO_Init+0x20a>
 800317a:	2307      	movs	r3, #7
 800317c:	e00e      	b.n	800319c <HAL_GPIO_Init+0x228>
 800317e:	2308      	movs	r3, #8
 8003180:	e00c      	b.n	800319c <HAL_GPIO_Init+0x228>
 8003182:	2306      	movs	r3, #6
 8003184:	e00a      	b.n	800319c <HAL_GPIO_Init+0x228>
 8003186:	2305      	movs	r3, #5
 8003188:	e008      	b.n	800319c <HAL_GPIO_Init+0x228>
 800318a:	2304      	movs	r3, #4
 800318c:	e006      	b.n	800319c <HAL_GPIO_Init+0x228>
 800318e:	2303      	movs	r3, #3
 8003190:	e004      	b.n	800319c <HAL_GPIO_Init+0x228>
 8003192:	2302      	movs	r3, #2
 8003194:	e002      	b.n	800319c <HAL_GPIO_Init+0x228>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_GPIO_Init+0x228>
 800319a:	2300      	movs	r3, #0
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	f002 0203 	and.w	r2, r2, #3
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	4093      	lsls	r3, r2
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ac:	4935      	ldr	r1, [pc, #212]	@ (8003284 <HAL_GPIO_Init+0x310>)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	3302      	adds	r3, #2
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ba:	4b3b      	ldr	r3, [pc, #236]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031de:	4a32      	ldr	r2, [pc, #200]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e4:	4b30      	ldr	r3, [pc, #192]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003208:	4a27      	ldr	r2, [pc, #156]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800320e:	4b26      	ldr	r3, [pc, #152]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003232:	4a1d      	ldr	r2, [pc, #116]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003238:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800325c:	4a12      	ldr	r2, [pc, #72]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3301      	adds	r3, #1
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	f67f ae90 	bls.w	8002f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3724      	adds	r7, #36	@ 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	40013800 	.word	0x40013800
 8003288:	40020000 	.word	0x40020000
 800328c:	40020400 	.word	0x40020400
 8003290:	40020800 	.word	0x40020800
 8003294:	40020c00 	.word	0x40020c00
 8003298:	40021000 	.word	0x40021000
 800329c:	40021400 	.word	0x40021400
 80032a0:	40021800 	.word	0x40021800
 80032a4:	40021c00 	.word	0x40021c00
 80032a8:	40013c00 	.word	0x40013c00

080032ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
 80032b8:	4613      	mov	r3, r2
 80032ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032bc:	787b      	ldrb	r3, [r7, #1]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032c2:	887a      	ldrh	r2, [r7, #2]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032c8:	e003      	b.n	80032d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ca:	887b      	ldrh	r3, [r7, #2]
 80032cc:	041a      	lsls	r2, r3, #16
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	619a      	str	r2, [r3, #24]
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e12b      	b.n	800354a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd fcf4 	bl	8000cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	@ 0x24
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003332:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003342:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003344:	f002 fe80 	bl	8006048 <HAL_RCC_GetPCLK1Freq>
 8003348:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4a81      	ldr	r2, [pc, #516]	@ (8003554 <HAL_I2C_Init+0x274>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d807      	bhi.n	8003364 <HAL_I2C_Init+0x84>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a80      	ldr	r2, [pc, #512]	@ (8003558 <HAL_I2C_Init+0x278>)
 8003358:	4293      	cmp	r3, r2
 800335a:	bf94      	ite	ls
 800335c:	2301      	movls	r3, #1
 800335e:	2300      	movhi	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e006      	b.n	8003372 <HAL_I2C_Init+0x92>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4a7d      	ldr	r2, [pc, #500]	@ (800355c <HAL_I2C_Init+0x27c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	bf94      	ite	ls
 800336c:	2301      	movls	r3, #1
 800336e:	2300      	movhi	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0e7      	b.n	800354a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a78      	ldr	r2, [pc, #480]	@ (8003560 <HAL_I2C_Init+0x280>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0c9b      	lsrs	r3, r3, #18
 8003384:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003554 <HAL_I2C_Init+0x274>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d802      	bhi.n	80033b4 <HAL_I2C_Init+0xd4>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	3301      	adds	r3, #1
 80033b2:	e009      	b.n	80033c8 <HAL_I2C_Init+0xe8>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	4a69      	ldr	r2, [pc, #420]	@ (8003564 <HAL_I2C_Init+0x284>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	3301      	adds	r3, #1
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	495c      	ldr	r1, [pc, #368]	@ (8003554 <HAL_I2C_Init+0x274>)
 80033e4:	428b      	cmp	r3, r1
 80033e6:	d819      	bhi.n	800341c <HAL_I2C_Init+0x13c>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e59      	subs	r1, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f6:	1c59      	adds	r1, r3, #1
 80033f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033fc:	400b      	ands	r3, r1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_I2C_Init+0x138>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1e59      	subs	r1, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003416:	e051      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 8003418:	2304      	movs	r3, #4
 800341a:	e04f      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d111      	bne.n	8003448 <HAL_I2C_Init+0x168>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1e58      	subs	r0, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	440b      	add	r3, r1
 8003432:	fbb0 f3f3 	udiv	r3, r0, r3
 8003436:	3301      	adds	r3, #1
 8003438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e012      	b.n	800346e <HAL_I2C_Init+0x18e>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	0099      	lsls	r1, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_Init+0x196>
 8003472:	2301      	movs	r3, #1
 8003474:	e022      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10e      	bne.n	800349c <HAL_I2C_Init+0x1bc>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1e58      	subs	r0, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	440b      	add	r3, r1
 800348c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003490:	3301      	adds	r3, #1
 8003492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800349a:	e00f      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e58      	subs	r0, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	0099      	lsls	r1, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	6809      	ldr	r1, [r1, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6911      	ldr	r1, [r2, #16]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	4311      	orrs	r1, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	000186a0 	.word	0x000186a0
 8003558:	001e847f 	.word	0x001e847f
 800355c:	003d08ff 	.word	0x003d08ff
 8003560:	431bde83 	.word	0x431bde83
 8003564:	10624dd3 	.word	0x10624dd3

08003568 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	461a      	mov	r2, r3
 8003576:	4603      	mov	r3, r0
 8003578:	817b      	strh	r3, [r7, #10]
 800357a:	460b      	mov	r3, r1
 800357c:	813b      	strh	r3, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003582:	f7fe fb0f 	bl	8001ba4 <HAL_GetTick>
 8003586:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b20      	cmp	r3, #32
 8003592:	f040 80d9 	bne.w	8003748 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2319      	movs	r3, #25
 800359c:	2201      	movs	r2, #1
 800359e:	496d      	ldr	r1, [pc, #436]	@ (8003754 <HAL_I2C_Mem_Write+0x1ec>)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f971 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
 80035ae:	e0cc      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_I2C_Mem_Write+0x56>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e0c5      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d007      	beq.n	80035e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2221      	movs	r2, #33	@ 0x21
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2240      	movs	r2, #64	@ 0x40
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a3a      	ldr	r2, [r7, #32]
 800360e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003614:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a4d      	ldr	r2, [pc, #308]	@ (8003758 <HAL_I2C_Mem_Write+0x1f0>)
 8003624:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003626:	88f8      	ldrh	r0, [r7, #6]
 8003628:	893a      	ldrh	r2, [r7, #8]
 800362a:	8979      	ldrh	r1, [r7, #10]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	4603      	mov	r3, r0
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f890 	bl	800375c <I2C_RequestMemoryWrite>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d052      	beq.n	80036e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e081      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fa36 	bl	8003abc <I2C_WaitOnTXEFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00d      	beq.n	8003672 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	2b04      	cmp	r3, #4
 800365c:	d107      	bne.n	800366e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800366c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d11b      	bne.n	80036e8 <HAL_I2C_Mem_Write+0x180>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d017      	beq.n	80036e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1aa      	bne.n	8003646 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fa29 	bl	8003b4c <I2C_WaitOnBTFFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00d      	beq.n	800371c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	2b04      	cmp	r3, #4
 8003706:	d107      	bne.n	8003718 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003716:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e016      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800372a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	00100002 	.word	0x00100002
 8003758:	ffff0000 	.word	0xffff0000

0800375c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	4608      	mov	r0, r1
 8003766:	4611      	mov	r1, r2
 8003768:	461a      	mov	r2, r3
 800376a:	4603      	mov	r3, r0
 800376c:	817b      	strh	r3, [r7, #10]
 800376e:	460b      	mov	r3, r1
 8003770:	813b      	strh	r3, [r7, #8]
 8003772:	4613      	mov	r3, r2
 8003774:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003784:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	2200      	movs	r2, #0
 800378e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f878 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00d      	beq.n	80037ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ac:	d103      	bne.n	80037b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e05f      	b.n	800387a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ba:	897b      	ldrh	r3, [r7, #10]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	6a3a      	ldr	r2, [r7, #32]
 80037ce:	492d      	ldr	r1, [pc, #180]	@ (8003884 <I2C_RequestMemoryWrite+0x128>)
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f8d3 	bl	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e04c      	b.n	800387a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f8:	6a39      	ldr	r1, [r7, #32]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f95e 	bl	8003abc <I2C_WaitOnTXEFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	2b04      	cmp	r3, #4
 800380c:	d107      	bne.n	800381e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e02b      	b.n	800387a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d105      	bne.n	8003834 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003828:	893b      	ldrh	r3, [r7, #8]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	611a      	str	r2, [r3, #16]
 8003832:	e021      	b.n	8003878 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003834:	893b      	ldrh	r3, [r7, #8]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	b29b      	uxth	r3, r3
 800383a:	b2da      	uxtb	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003844:	6a39      	ldr	r1, [r7, #32]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f938 	bl	8003abc <I2C_WaitOnTXEFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00d      	beq.n	800386e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	2b04      	cmp	r3, #4
 8003858:	d107      	bne.n	800386a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003868:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e005      	b.n	800387a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800386e:	893b      	ldrh	r3, [r7, #8]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	00010002 	.word	0x00010002

08003888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003898:	e048      	b.n	800392c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a0:	d044      	beq.n	800392c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fe f97f 	bl	8001ba4 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d139      	bne.n	800392c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	0c1b      	lsrs	r3, r3, #16
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d10d      	bne.n	80038de <I2C_WaitOnFlagUntilTimeout+0x56>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	43da      	mvns	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4013      	ands	r3, r2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	e00c      	b.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	43da      	mvns	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4013      	ands	r3, r2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d116      	bne.n	800392c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	f043 0220 	orr.w	r2, r3, #32
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e023      	b.n	8003974 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d10d      	bne.n	8003952 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	43da      	mvns	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	e00c      	b.n	800396c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	43da      	mvns	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4013      	ands	r3, r2
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	429a      	cmp	r2, r3
 8003970:	d093      	beq.n	800389a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800398a:	e071      	b.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800399a:	d123      	bne.n	80039e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	f043 0204 	orr.w	r2, r3, #4
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e067      	b.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039ea:	d041      	beq.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ec:	f7fe f8da 	bl	8001ba4 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d302      	bcc.n	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d136      	bne.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d10c      	bne.n	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf14      	ite	ne
 8003a1e:	2301      	movne	r3, #1
 8003a20:	2300      	moveq	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e00b      	b.n	8003a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	43da      	mvns	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf14      	ite	ne
 8003a38:	2301      	movne	r3, #1
 8003a3a:	2300      	moveq	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d016      	beq.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e021      	b.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d10c      	bne.n	8003a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	43da      	mvns	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4013      	ands	r3, r2
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e00b      	b.n	8003aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bf14      	ite	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	2300      	moveq	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f47f af6d 	bne.w	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ac8:	e034      	b.n	8003b34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f886 	bl	8003bdc <I2C_IsAcknowledgeFailed>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e034      	b.n	8003b44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ae0:	d028      	beq.n	8003b34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae2:	f7fe f85f 	bl	8001ba4 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d302      	bcc.n	8003af8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d11d      	bne.n	8003b34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b02:	2b80      	cmp	r3, #128	@ 0x80
 8003b04:	d016      	beq.n	8003b34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e007      	b.n	8003b44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3e:	2b80      	cmp	r3, #128	@ 0x80
 8003b40:	d1c3      	bne.n	8003aca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b58:	e034      	b.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f83e 	bl	8003bdc <I2C_IsAcknowledgeFailed>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e034      	b.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b70:	d028      	beq.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fe f817 	bl	8001ba4 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11d      	bne.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d016      	beq.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	f043 0220 	orr.w	r2, r3, #32
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e007      	b.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d1c3      	bne.n	8003b5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf2:	d11b      	bne.n	8003c2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	f043 0204 	orr.w	r2, r3, #4
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e128      	b.n	8003ea0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a90      	ldr	r2, [pc, #576]	@ (8003ea8 <HAL_I2S_Init+0x26c>)
 8003c66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7fd f8b9 	bl	8000de0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2202      	movs	r2, #2
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c84:	f023 030f 	bic.w	r3, r3, #15
 8003c88:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d060      	beq.n	8003d5c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e001      	b.n	8003cac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ca8:	2320      	movs	r3, #32
 8003caa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d802      	bhi.n	8003cba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f002 face 	bl	800625c <HAL_RCCEx_GetPeriphCLKFreq>
 8003cc0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cca:	d125      	bne.n	8003d18 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d010      	beq.n	8003cf6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	3305      	adds	r3, #5
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	e01f      	b.n	8003d36 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	461a      	mov	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	3305      	adds	r3, #5
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	e00e      	b.n	8003d36 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	461a      	mov	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d32:	3305      	adds	r3, #5
 8003d34:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4a5c      	ldr	r2, [pc, #368]	@ (8003eac <HAL_I2S_Init+0x270>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	08db      	lsrs	r3, r3, #3
 8003d40:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e003      	b.n	8003d64 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d902      	bls.n	8003d70 <HAL_I2S_Init+0x134>
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	2bff      	cmp	r3, #255	@ 0xff
 8003d6e:	d907      	bls.n	8003d80 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d74:	f043 0210 	orr.w	r2, r3, #16
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e08f      	b.n	8003ea0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	ea42 0103 	orr.w	r1, r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d9e:	f023 030f 	bic.w	r3, r3, #15
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6851      	ldr	r1, [r2, #4]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6892      	ldr	r2, [r2, #8]
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68d2      	ldr	r2, [r2, #12]
 8003db0:	4311      	orrs	r1, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6992      	ldr	r2, [r2, #24]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dc2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d161      	bne.n	8003e90 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a38      	ldr	r2, [pc, #224]	@ (8003eb0 <HAL_I2S_Init+0x274>)
 8003dd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a37      	ldr	r2, [pc, #220]	@ (8003eb4 <HAL_I2S_Init+0x278>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <HAL_I2S_Init+0x1a4>
 8003ddc:	4b36      	ldr	r3, [pc, #216]	@ (8003eb8 <HAL_I2S_Init+0x27c>)
 8003dde:	e001      	b.n	8003de4 <HAL_I2S_Init+0x1a8>
 8003de0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	4932      	ldr	r1, [pc, #200]	@ (8003eb4 <HAL_I2S_Init+0x278>)
 8003dec:	428a      	cmp	r2, r1
 8003dee:	d101      	bne.n	8003df4 <HAL_I2S_Init+0x1b8>
 8003df0:	4a31      	ldr	r2, [pc, #196]	@ (8003eb8 <HAL_I2S_Init+0x27c>)
 8003df2:	e001      	b.n	8003df8 <HAL_I2S_Init+0x1bc>
 8003df4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003df8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003dfc:	f023 030f 	bic.w	r3, r3, #15
 8003e00:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb4 <HAL_I2S_Init+0x278>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <HAL_I2S_Init+0x1d4>
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb8 <HAL_I2S_Init+0x27c>)
 8003e0e:	e001      	b.n	8003e14 <HAL_I2S_Init+0x1d8>
 8003e10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e14:	2202      	movs	r2, #2
 8003e16:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a25      	ldr	r2, [pc, #148]	@ (8003eb4 <HAL_I2S_Init+0x278>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_I2S_Init+0x1ea>
 8003e22:	4b25      	ldr	r3, [pc, #148]	@ (8003eb8 <HAL_I2S_Init+0x27c>)
 8003e24:	e001      	b.n	8003e2a <HAL_I2S_Init+0x1ee>
 8003e26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e36:	d003      	beq.n	8003e40 <HAL_I2S_Init+0x204>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d103      	bne.n	8003e48 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	e001      	b.n	8003e4c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e56:	4313      	orrs	r3, r2
 8003e58:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e60:	4313      	orrs	r3, r2
 8003e62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	897b      	ldrh	r3, [r7, #10]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e78:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb4 <HAL_I2S_Init+0x278>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d101      	bne.n	8003e88 <HAL_I2S_Init+0x24c>
 8003e84:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb8 <HAL_I2S_Init+0x27c>)
 8003e86:	e001      	b.n	8003e8c <HAL_I2S_Init+0x250>
 8003e88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e8c:	897a      	ldrh	r2, [r7, #10]
 8003e8e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	08004169 	.word	0x08004169
 8003eac:	cccccccd 	.word	0xcccccccd
 8003eb0:	0800427d 	.word	0x0800427d
 8003eb4:	40003800 	.word	0x40003800
 8003eb8:	40003400 	.word	0x40003400

08003ebc <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_I2S_Transmit_DMA+0x1a>
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e08a      	b.n	8003ff0 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d001      	beq.n	8003eea <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e082      	b.n	8003ff0 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_I2S_Transmit_DMA+0x3e>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e07a      	b.n	8003ff0 <HAL_I2S_Transmit_DMA+0x134>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2203      	movs	r2, #3
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d002      	beq.n	8003f2e <HAL_I2S_Transmit_DMA+0x72>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b05      	cmp	r3, #5
 8003f2c:	d10a      	bne.n	8003f44 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f42:	e005      	b.n	8003f50 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	88fa      	ldrh	r2, [r7, #6]
 8003f48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	88fa      	ldrh	r2, [r7, #6]
 8003f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f54:	4a28      	ldr	r2, [pc, #160]	@ (8003ff8 <HAL_I2S_Transmit_DMA+0x13c>)
 8003f56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5c:	4a27      	ldr	r2, [pc, #156]	@ (8003ffc <HAL_I2S_Transmit_DMA+0x140>)
 8003f5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	4a26      	ldr	r2, [pc, #152]	@ (8004000 <HAL_I2S_Transmit_DMA+0x144>)
 8003f66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f70:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f78:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f80:	f7fe fd36 	bl	80029f0 <HAL_DMA_Start_IT>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00f      	beq.n	8003faa <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8e:	f043 0208 	orr.w	r2, r3, #8
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e022      	b.n	8003ff0 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d107      	bne.n	8003fd0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0202 	orr.w	r2, r2, #2
 8003fce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d107      	bne.n	8003fee <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fec:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	08004047 	.word	0x08004047
 8003ffc:	08004005 	.word	0x08004005
 8004000:	08004063 	.word	0x08004063

08004004 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10e      	bne.n	8004038 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0202 	bic.w	r2, r2, #2
 8004028:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f7fd f8ab 	bl	8001194 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004052:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7fd f87f 	bl	8001158 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0203 	bic.w	r2, r2, #3
 800407e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004098:	f043 0208 	orr.w	r2, r3, #8
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f7fd fcff 	bl	8001aa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	881a      	ldrh	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	1c9a      	adds	r2, r3, #2
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10e      	bne.n	8004102 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fd f849 	bl	8001194 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	b292      	uxth	r2, r2
 800411e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10e      	bne.n	8004160 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004150:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd fc8a 	bl	8001a74 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b04      	cmp	r3, #4
 8004182:	d13a      	bne.n	80041fa <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b01      	cmp	r3, #1
 800418c:	d109      	bne.n	80041a2 <I2S_IRQHandler+0x3a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004198:	2b40      	cmp	r3, #64	@ 0x40
 800419a:	d102      	bne.n	80041a2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ffb4 	bl	800410a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a8:	2b40      	cmp	r3, #64	@ 0x40
 80041aa:	d126      	bne.n	80041fa <I2S_IRQHandler+0x92>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d11f      	bne.n	80041fa <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041c8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ec:	f043 0202 	orr.w	r2, r3, #2
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7fd fc55 	bl	8001aa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b03      	cmp	r3, #3
 8004204:	d136      	bne.n	8004274 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b02      	cmp	r3, #2
 800420e:	d109      	bne.n	8004224 <I2S_IRQHandler+0xbc>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421a:	2b80      	cmp	r3, #128	@ 0x80
 800421c:	d102      	bne.n	8004224 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ff45 	bl	80040ae <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b08      	cmp	r3, #8
 800422c:	d122      	bne.n	8004274 <I2S_IRQHandler+0x10c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b20      	cmp	r3, #32
 800423a:	d11b      	bne.n	8004274 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800424a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	f043 0204 	orr.w	r2, r3, #4
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fd fc18 	bl	8001aa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004274:	bf00      	nop
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a92      	ldr	r2, [pc, #584]	@ (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d101      	bne.n	800429a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004296:	4b92      	ldr	r3, [pc, #584]	@ (80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004298:	e001      	b.n	800429e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800429a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a8b      	ldr	r2, [pc, #556]	@ (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d101      	bne.n	80042b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80042b4:	4b8a      	ldr	r3, [pc, #552]	@ (80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042b6:	e001      	b.n	80042bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80042b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c8:	d004      	beq.n	80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f040 8099 	bne.w	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d107      	bne.n	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f925 	bl	8004538 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d107      	bne.n	8004308 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9c8 	bl	8004698 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430e:	2b40      	cmp	r3, #64	@ 0x40
 8004310:	d13a      	bne.n	8004388 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d035      	beq.n	8004388 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a6e      	ldr	r2, [pc, #440]	@ (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004326:	4b6e      	ldr	r3, [pc, #440]	@ (80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004328:	e001      	b.n	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800432a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4969      	ldr	r1, [pc, #420]	@ (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004336:	428b      	cmp	r3, r1
 8004338:	d101      	bne.n	800433e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800433a:	4b69      	ldr	r3, [pc, #420]	@ (80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800433c:	e001      	b.n	8004342 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800433e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004342:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004346:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004356:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437a:	f043 0202 	orr.w	r2, r3, #2
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fd fb8e 	bl	8001aa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b08      	cmp	r3, #8
 8004390:	f040 80c3 	bne.w	800451a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80bd 	beq.w	800451a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a49      	ldr	r2, [pc, #292]	@ (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80043ba:	4b49      	ldr	r3, [pc, #292]	@ (80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043bc:	e001      	b.n	80043c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80043be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4944      	ldr	r1, [pc, #272]	@ (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ca:	428b      	cmp	r3, r1
 80043cc:	d101      	bne.n	80043d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80043ce:	4b44      	ldr	r3, [pc, #272]	@ (80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043d0:	e001      	b.n	80043d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80043d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043dc:	2300      	movs	r3, #0
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f6:	f043 0204 	orr.w	r2, r3, #4
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fd fb50 	bl	8001aa4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004404:	e089      	b.n	800451a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b02      	cmp	r3, #2
 800440e:	d107      	bne.n	8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f8be 	bl	800459c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d107      	bne.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f8fd 	bl	8004634 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004440:	2b40      	cmp	r3, #64	@ 0x40
 8004442:	d12f      	bne.n	80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d02a      	beq.n	80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800445c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1e      	ldr	r2, [pc, #120]	@ (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d101      	bne.n	800446c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004468:	4b1d      	ldr	r3, [pc, #116]	@ (80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800446a:	e001      	b.n	8004470 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800446c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4919      	ldr	r1, [pc, #100]	@ (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004478:	428b      	cmp	r3, r1
 800447a:	d101      	bne.n	8004480 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800447c:	4b18      	ldr	r3, [pc, #96]	@ (80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800447e:	e001      	b.n	8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004480:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004484:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004488:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	f043 0202 	orr.w	r2, r3, #2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd fb00 	bl	8001aa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d136      	bne.n	800451c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d031      	beq.n	800451c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a07      	ldr	r2, [pc, #28]	@ (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d101      	bne.n	80044c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80044c2:	4b07      	ldr	r3, [pc, #28]	@ (80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044c4:	e001      	b.n	80044ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80044c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4902      	ldr	r1, [pc, #8]	@ (80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044d2:	428b      	cmp	r3, r1
 80044d4:	d106      	bne.n	80044e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80044d6:	4b02      	ldr	r3, [pc, #8]	@ (80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044d8:	e006      	b.n	80044e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80044da:	bf00      	nop
 80044dc:	40003800 	.word	0x40003800
 80044e0:	40003400 	.word	0x40003400
 80044e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044ec:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450a:	f043 0204 	orr.w	r2, r3, #4
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd fac6 	bl	8001aa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004518:	e000      	b.n	800451c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800451a:	bf00      	nop
}
 800451c:	bf00      	nop
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	1c99      	adds	r1, r3, #2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6251      	str	r1, [r2, #36]	@ 0x24
 800454a:	881a      	ldrh	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d113      	bne.n	8004592 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004578:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff ffc9 	bl	8004524 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	1c99      	adds	r1, r3, #2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6251      	str	r1, [r2, #36]	@ 0x24
 80045ae:	8819      	ldrh	r1, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1d      	ldr	r2, [pc, #116]	@ (800462c <I2SEx_TxISR_I2SExt+0x90>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d101      	bne.n	80045be <I2SEx_TxISR_I2SExt+0x22>
 80045ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004630 <I2SEx_TxISR_I2SExt+0x94>)
 80045bc:	e001      	b.n	80045c2 <I2SEx_TxISR_I2SExt+0x26>
 80045be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045c2:	460a      	mov	r2, r1
 80045c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d121      	bne.n	8004622 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a12      	ldr	r2, [pc, #72]	@ (800462c <I2SEx_TxISR_I2SExt+0x90>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <I2SEx_TxISR_I2SExt+0x50>
 80045e8:	4b11      	ldr	r3, [pc, #68]	@ (8004630 <I2SEx_TxISR_I2SExt+0x94>)
 80045ea:	e001      	b.n	80045f0 <I2SEx_TxISR_I2SExt+0x54>
 80045ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	490d      	ldr	r1, [pc, #52]	@ (800462c <I2SEx_TxISR_I2SExt+0x90>)
 80045f8:	428b      	cmp	r3, r1
 80045fa:	d101      	bne.n	8004600 <I2SEx_TxISR_I2SExt+0x64>
 80045fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004630 <I2SEx_TxISR_I2SExt+0x94>)
 80045fe:	e001      	b.n	8004604 <I2SEx_TxISR_I2SExt+0x68>
 8004600:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004604:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004608:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff ff81 	bl	8004524 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40003800 	.word	0x40003800
 8004630:	40003400 	.word	0x40003400

08004634 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68d8      	ldr	r0, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004646:	1c99      	adds	r1, r3, #2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800464c:	b282      	uxth	r2, r0
 800464e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d113      	bne.n	8004690 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004676:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff ff4a 	bl	8004524 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a20      	ldr	r2, [pc, #128]	@ (8004728 <I2SEx_RxISR_I2SExt+0x90>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <I2SEx_RxISR_I2SExt+0x16>
 80046aa:	4b20      	ldr	r3, [pc, #128]	@ (800472c <I2SEx_RxISR_I2SExt+0x94>)
 80046ac:	e001      	b.n	80046b2 <I2SEx_RxISR_I2SExt+0x1a>
 80046ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046b2:	68d8      	ldr	r0, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b8:	1c99      	adds	r1, r3, #2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80046be:	b282      	uxth	r2, r0
 80046c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d121      	bne.n	800471e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a12      	ldr	r2, [pc, #72]	@ (8004728 <I2SEx_RxISR_I2SExt+0x90>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d101      	bne.n	80046e8 <I2SEx_RxISR_I2SExt+0x50>
 80046e4:	4b11      	ldr	r3, [pc, #68]	@ (800472c <I2SEx_RxISR_I2SExt+0x94>)
 80046e6:	e001      	b.n	80046ec <I2SEx_RxISR_I2SExt+0x54>
 80046e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	490d      	ldr	r1, [pc, #52]	@ (8004728 <I2SEx_RxISR_I2SExt+0x90>)
 80046f4:	428b      	cmp	r3, r1
 80046f6:	d101      	bne.n	80046fc <I2SEx_RxISR_I2SExt+0x64>
 80046f8:	4b0c      	ldr	r3, [pc, #48]	@ (800472c <I2SEx_RxISR_I2SExt+0x94>)
 80046fa:	e001      	b.n	8004700 <I2SEx_RxISR_I2SExt+0x68>
 80046fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004700:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004704:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ff03 	bl	8004524 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40003800 	.word	0x40003800
 800472c:	40003400 	.word	0x40003400

08004730 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af02      	add	r7, sp, #8
 8004736:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e101      	b.n	8004946 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fd f8f7 	bl	8001950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2203      	movs	r2, #3
 8004766:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004770:	d102      	bne.n	8004778 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f003 f82b 	bl	80077d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	7c1a      	ldrb	r2, [r3, #16]
 800478a:	f88d 2000 	strb.w	r2, [sp]
 800478e:	3304      	adds	r3, #4
 8004790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004792:	f002 ff1b 	bl	80075cc <USB_CoreInit>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0ce      	b.n	8004946 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f003 f823 	bl	80077fa <USB_SetCurrentMode>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e0bf      	b.n	8004946 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	73fb      	strb	r3, [r7, #15]
 80047ca:	e04a      	b.n	8004862 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047cc:	7bfa      	ldrb	r2, [r7, #15]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	3315      	adds	r3, #21
 80047dc:	2201      	movs	r2, #1
 80047de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	3314      	adds	r3, #20
 80047f0:	7bfa      	ldrb	r2, [r7, #15]
 80047f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047f4:	7bfa      	ldrb	r2, [r7, #15]
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	b298      	uxth	r0, r3
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	332e      	adds	r3, #46	@ 0x2e
 8004808:	4602      	mov	r2, r0
 800480a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800480c:	7bfa      	ldrb	r2, [r7, #15]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	3318      	adds	r3, #24
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004820:	7bfa      	ldrb	r2, [r7, #15]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	331c      	adds	r3, #28
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004834:	7bfa      	ldrb	r2, [r7, #15]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	3320      	adds	r3, #32
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004848:	7bfa      	ldrb	r2, [r7, #15]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	3324      	adds	r3, #36	@ 0x24
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	3301      	adds	r3, #1
 8004860:	73fb      	strb	r3, [r7, #15]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	791b      	ldrb	r3, [r3, #4]
 8004866:	7bfa      	ldrb	r2, [r7, #15]
 8004868:	429a      	cmp	r2, r3
 800486a:	d3af      	bcc.n	80047cc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800486c:	2300      	movs	r3, #0
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	e044      	b.n	80048fc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004872:	7bfa      	ldrb	r2, [r7, #15]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004888:	7bfa      	ldrb	r2, [r7, #15]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800489a:	7bfa      	ldrb	r2, [r7, #15]
 800489c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800489e:	7bfa      	ldrb	r2, [r7, #15]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80048b0:	2200      	movs	r2, #0
 80048b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048b4:	7bfa      	ldrb	r2, [r7, #15]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048ca:	7bfa      	ldrb	r2, [r7, #15]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048e0:	7bfa      	ldrb	r2, [r7, #15]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	3301      	adds	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	791b      	ldrb	r3, [r3, #4]
 8004900:	7bfa      	ldrb	r2, [r7, #15]
 8004902:	429a      	cmp	r2, r3
 8004904:	d3b5      	bcc.n	8004872 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	7c1a      	ldrb	r2, [r3, #16]
 800490e:	f88d 2000 	strb.w	r2, [sp]
 8004912:	3304      	adds	r3, #4
 8004914:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004916:	f002 ffbd 	bl	8007894 <USB_DevInit>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e00c      	b.n	8004946 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f003 faea 	bl	8007f18 <USB_DevDisconnect>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800494e:	b590      	push	{r4, r7, lr}
 8004950:	b08d      	sub	sp, #52	@ 0x34
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f003 fb8b 	bl	8008080 <USB_GetMode>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	f040 848c 	bne.w	800528a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f003 faef 	bl	8007f5a <USB_ReadInterrupts>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 8482 	beq.w	8005288 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	0a1b      	lsrs	r3, r3, #8
 800498e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f003 fadc 	bl	8007f5a <USB_ReadInterrupts>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d107      	bne.n	80049bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f002 0202 	and.w	r2, r2, #2
 80049ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f003 faca 	bl	8007f5a <USB_ReadInterrupts>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	2b10      	cmp	r3, #16
 80049ce:	d161      	bne.n	8004a94 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0210 	bic.w	r2, r2, #16
 80049de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f003 020f 	and.w	r2, r3, #15
 80049ec:	4613      	mov	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	4413      	add	r3, r2
 80049fc:	3304      	adds	r3, #4
 80049fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004a06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a0a:	d124      	bne.n	8004a56 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d035      	beq.n	8004a84 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6a38      	ldr	r0, [r7, #32]
 8004a2c:	f003 fa1c 	bl	8007e68 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	091b      	lsrs	r3, r3, #4
 8004a38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a3c:	441a      	add	r2, r3
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	695a      	ldr	r2, [r3, #20]
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	091b      	lsrs	r3, r3, #4
 8004a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a4e:	441a      	add	r2, r3
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	615a      	str	r2, [r3, #20]
 8004a54:	e016      	b.n	8004a84 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004a5c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a60:	d110      	bne.n	8004a84 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a68:	2208      	movs	r2, #8
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6a38      	ldr	r0, [r7, #32]
 8004a6e:	f003 f9fb 	bl	8007e68 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a7e:	441a      	add	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0210 	orr.w	r2, r2, #16
 8004a92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f003 fa5e 	bl	8007f5a <USB_ReadInterrupts>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aa4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004aa8:	f040 80a7 	bne.w	8004bfa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f003 fa63 	bl	8007f80 <USB_ReadDevAllOutEpInterrupt>
 8004aba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004abc:	e099      	b.n	8004bf2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 808e 	beq.w	8004be6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f003 fa87 	bl	8007fe8 <USB_ReadDevOutEPInterrupt>
 8004ada:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00c      	beq.n	8004b00 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af2:	461a      	mov	r2, r3
 8004af4:	2301      	movs	r3, #1
 8004af6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004af8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fcfc 	bl	80054f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00c      	beq.n	8004b24 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b16:	461a      	mov	r2, r3
 8004b18:	2308      	movs	r3, #8
 8004b1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fdd2 	bl	80056c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d008      	beq.n	8004b40 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d030      	beq.n	8004bac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b52:	2b80      	cmp	r3, #128	@ 0x80
 8004b54:	d109      	bne.n	8004b6a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b68:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	78db      	ldrb	r3, [r3, #3]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d108      	bne.n	8004b9a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	4619      	mov	r1, r3
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fbc5 	bl	8005324 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	2302      	movs	r3, #2
 8004baa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	2320      	movs	r3, #32
 8004bc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d009      	beq.n	8004be6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bde:	461a      	mov	r2, r3
 8004be0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004be4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	3301      	adds	r3, #1
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f47f af62 	bne.w	8004abe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f003 f9ab 	bl	8007f5a <USB_ReadInterrupts>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c0e:	f040 80db 	bne.w	8004dc8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f003 f9cc 	bl	8007fb4 <USB_ReadDevAllInEpInterrupt>
 8004c1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004c22:	e0cd      	b.n	8004dc0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 80c2 	beq.w	8004db4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f003 f9f2 	bl	8008024 <USB_ReadDevInEPInterrupt>
 8004c40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d057      	beq.n	8004cfc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	2201      	movs	r2, #1
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	43db      	mvns	r3, r3
 8004c66:	69f9      	ldr	r1, [r7, #28]
 8004c68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2301      	movs	r3, #1
 8004c80:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	799b      	ldrb	r3, [r3, #6]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d132      	bne.n	8004cf0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	3320      	adds	r3, #32
 8004c9a:	6819      	ldr	r1, [r3, #0]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4403      	add	r3, r0
 8004caa:	331c      	adds	r3, #28
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4419      	add	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4403      	add	r3, r0
 8004cbe:	3320      	adds	r3, #32
 8004cc0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d113      	bne.n	8004cf0 <HAL_PCD_IRQHandler+0x3a2>
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ccc:	4613      	mov	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	3324      	adds	r3, #36	@ 0x24
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d108      	bne.n	8004cf0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2101      	movs	r1, #1
 8004cec:	f003 f9fa 	bl	80080e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fad6 	bl	80052a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d12:	461a      	mov	r2, r3
 8004d14:	2308      	movs	r3, #8
 8004d16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f003 0310 	and.w	r3, r3, #16
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2310      	movs	r3, #16
 8004d32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d008      	beq.n	8004d50 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	2340      	movs	r3, #64	@ 0x40
 8004d4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d023      	beq.n	8004da2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004d5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d5c:	6a38      	ldr	r0, [r7, #32]
 8004d5e:	f002 fefd 	bl	8007b5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	3310      	adds	r3, #16
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4413      	add	r3, r2
 8004d72:	3304      	adds	r3, #4
 8004d74:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	78db      	ldrb	r3, [r3, #3]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d108      	bne.n	8004d90 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2200      	movs	r2, #0
 8004d82:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fad6 	bl	800533c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	2302      	movs	r3, #2
 8004da0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004dac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fb15 	bl	80053de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	3301      	adds	r3, #1
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f47f af2e 	bne.w	8004c24 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f003 f8c4 	bl	8007f5a <USB_ReadInterrupts>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ddc:	d122      	bne.n	8004e24 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d108      	bne.n	8004e0e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e04:	2100      	movs	r1, #0
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fca4 	bl	8005754 <HAL_PCDEx_LPM_Callback>
 8004e0c:	e002      	b.n	8004e14 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fa7e 	bl	8005310 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f003 f896 	bl	8007f5a <USB_ReadInterrupts>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e38:	d112      	bne.n	8004e60 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d102      	bne.n	8004e50 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fa56 	bl	80052fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004e5e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f003 f878 	bl	8007f5a <USB_ReadInterrupts>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e74:	f040 80b7 	bne.w	8004fe6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2110      	movs	r1, #16
 8004e92:	4618      	mov	r0, r3
 8004e94:	f002 fe62 	bl	8007b5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e9c:	e046      	b.n	8004f2c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004eb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ecc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ed0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ee4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f24:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f28:	3301      	adds	r3, #1
 8004f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	791b      	ldrb	r3, [r3, #4]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d3b2      	bcc.n	8004e9e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f46:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004f4a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7bdb      	ldrb	r3, [r3, #15]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d016      	beq.n	8004f82 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f64:	f043 030b 	orr.w	r3, r3, #11
 8004f68:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f74:	69fa      	ldr	r2, [r7, #28]
 8004f76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f7a:	f043 030b 	orr.w	r3, r3, #11
 8004f7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f80:	e015      	b.n	8004fae <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004f94:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004f98:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fa8:	f043 030b 	orr.w	r3, r3, #11
 8004fac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fbc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004fc0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f003 f887 	bl	80080e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f002 ffb5 	bl	8007f5a <USB_ReadInterrupts>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ffa:	d123      	bne.n	8005044 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f003 f84b 	bl	800809c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f002 fe1f 	bl	8007c4e <USB_GetDevSpeed>
 8005010:	4603      	mov	r3, r0
 8005012:	461a      	mov	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681c      	ldr	r4, [r3, #0]
 800501c:	f001 f808 	bl	8006030 <HAL_RCC_GetHCLKFreq>
 8005020:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005026:	461a      	mov	r2, r3
 8005028:	4620      	mov	r0, r4
 800502a:	f002 fb33 	bl	8007694 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f95a 	bl	80052e8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005042:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f002 ff86 	bl	8007f5a <USB_ReadInterrupts>
 800504e:	4603      	mov	r3, r0
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b08      	cmp	r3, #8
 8005056:	d10a      	bne.n	800506e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f93b 	bl	80052d4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695a      	ldr	r2, [r3, #20]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f002 0208 	and.w	r2, r2, #8
 800506c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f002 ff71 	bl	8007f5a <USB_ReadInterrupts>
 8005078:	4603      	mov	r3, r0
 800507a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507e:	2b80      	cmp	r3, #128	@ 0x80
 8005080:	d123      	bne.n	80050ca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800508e:	2301      	movs	r3, #1
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
 8005092:	e014      	b.n	80050be <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d105      	bne.n	80050b8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f962 	bl	800537c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	3301      	adds	r3, #1
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	791b      	ldrb	r3, [r3, #4]
 80050c2:	461a      	mov	r2, r3
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d3e4      	bcc.n	8005094 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f002 ff43 	bl	8007f5a <USB_ReadInterrupts>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050de:	d13c      	bne.n	800515a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050e0:	2301      	movs	r3, #1
 80050e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e4:	e02b      	b.n	800513e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050fa:	4613      	mov	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	3318      	adds	r3, #24
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d115      	bne.n	8005138 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800510c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800510e:	2b00      	cmp	r3, #0
 8005110:	da12      	bge.n	8005138 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005116:	4613      	mov	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	3317      	adds	r3, #23
 8005122:	2201      	movs	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	b2db      	uxtb	r3, r3
 800512a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800512e:	b2db      	uxtb	r3, r3
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f922 	bl	800537c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	3301      	adds	r3, #1
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	791b      	ldrb	r3, [r3, #4]
 8005142:	461a      	mov	r2, r3
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	4293      	cmp	r3, r2
 8005148:	d3cd      	bcc.n	80050e6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695a      	ldr	r2, [r3, #20]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f002 fefb 	bl	8007f5a <USB_ReadInterrupts>
 8005164:	4603      	mov	r3, r0
 8005166:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800516a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800516e:	d156      	bne.n	800521e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005170:	2301      	movs	r3, #1
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24
 8005174:	e045      	b.n	8005202 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518a:	4613      	mov	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d12e      	bne.n	80051fc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800519e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	da2b      	bge.n	80051fc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80051b0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d121      	bne.n	80051fc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051bc:	4613      	mov	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80051ca:	2201      	movs	r2, #1
 80051cc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051f8:	6053      	str	r3, [r2, #4]
            break;
 80051fa:	e008      	b.n	800520e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	3301      	adds	r3, #1
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	791b      	ldrb	r3, [r3, #4]
 8005206:	461a      	mov	r2, r3
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	4293      	cmp	r3, r2
 800520c:	d3b3      	bcc.n	8005176 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800521c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f002 fe99 	bl	8007f5a <USB_ReadInterrupts>
 8005228:	4603      	mov	r3, r0
 800522a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800522e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005232:	d10a      	bne.n	800524a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f88d 	bl	8005354 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695a      	ldr	r2, [r3, #20]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005248:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f002 fe83 	bl	8007f5a <USB_ReadInterrupts>
 8005254:	4603      	mov	r3, r0
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b04      	cmp	r3, #4
 800525c:	d115      	bne.n	800528a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f879 	bl	8005368 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6859      	ldr	r1, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	e000      	b.n	800528a <HAL_PCD_IRQHandler+0x93c>
      return;
 8005288:	bf00      	nop
    }
  }
}
 800528a:	3734      	adds	r7, #52	@ 0x34
 800528c:	46bd      	mov	sp, r7
 800528e:	bd90      	pop	{r4, r7, pc}

08005290 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800538c:	2b00      	cmp	r3, #0
 800538e:	da0c      	bge.n	80053aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	f003 020f 	and.w	r2, r3, #15
 8005396:	4613      	mov	r3, r2
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	3310      	adds	r3, #16
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	4413      	add	r3, r2
 80053a4:	3304      	adds	r3, #4
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e00c      	b.n	80053c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	4413      	add	r3, r2
 80053c0:	3304      	adds	r3, #4
 80053c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68f9      	ldr	r1, [r7, #12]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f002 fc64 	bl	8007c98 <USB_EPStopXfer>
 80053d0:	4603      	mov	r3, r0
 80053d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80053d4:	7afb      	ldrb	r3, [r7, #11]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b08a      	sub	sp, #40	@ 0x28
 80053e2:	af02      	add	r7, sp, #8
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	3310      	adds	r3, #16
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4413      	add	r3, r2
 8005402:	3304      	adds	r3, #4
 8005404:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	429a      	cmp	r2, r3
 8005410:	d901      	bls.n	8005416 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e06b      	b.n	80054ee <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	429a      	cmp	r2, r3
 800542a:	d902      	bls.n	8005432 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3303      	adds	r3, #3
 8005436:	089b      	lsrs	r3, r3, #2
 8005438:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800543a:	e02a      	b.n	8005492 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	429a      	cmp	r2, r3
 8005450:	d902      	bls.n	8005458 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	3303      	adds	r3, #3
 800545c:	089b      	lsrs	r3, r3, #2
 800545e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68d9      	ldr	r1, [r3, #12]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	4603      	mov	r3, r0
 8005474:	6978      	ldr	r0, [r7, #20]
 8005476:	f002 fcb9 	bl	8007dec <USB_WritePacket>

    ep->xfer_buff  += len;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	441a      	add	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	695a      	ldr	r2, [r3, #20]
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	441a      	add	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d809      	bhi.n	80054bc <PCD_WriteEmptyTxFifo+0xde>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d203      	bcs.n	80054bc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1bf      	bne.n	800543c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d811      	bhi.n	80054ec <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	2201      	movs	r2, #1
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	6939      	ldr	r1, [r7, #16]
 80054e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054e8:	4013      	ands	r3, r2
 80054ea:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3720      	adds	r7, #32
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	333c      	adds	r3, #60	@ 0x3c
 8005510:	3304      	adds	r3, #4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	799b      	ldrb	r3, [r3, #6]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d17b      	bne.n	8005626 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d015      	beq.n	8005564 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	4a61      	ldr	r2, [pc, #388]	@ (80056c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	f240 80b9 	bls.w	80056b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 80b3 	beq.w	80056b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800555a:	461a      	mov	r2, r3
 800555c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005560:	6093      	str	r3, [r2, #8]
 8005562:	e0a7      	b.n	80056b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800557a:	461a      	mov	r2, r3
 800557c:	2320      	movs	r3, #32
 800557e:	6093      	str	r3, [r2, #8]
 8005580:	e098      	b.n	80056b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005588:	2b00      	cmp	r3, #0
 800558a:	f040 8093 	bne.w	80056b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	4a4b      	ldr	r2, [pc, #300]	@ (80056c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d90f      	bls.n	80055b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ac:	461a      	mov	r2, r3
 80055ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055b2:	6093      	str	r3, [r2, #8]
 80055b4:	e07e      	b.n	80056b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4413      	add	r3, r2
 80055c8:	3304      	adds	r3, #4
 80055ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a1a      	ldr	r2, [r3, #32]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	0159      	lsls	r1, r3, #5
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	440b      	add	r3, r1
 80055d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e2:	1ad2      	subs	r2, r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d114      	bne.n	8005618 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005600:	461a      	mov	r2, r3
 8005602:	2101      	movs	r1, #1
 8005604:	f002 fd6e 	bl	80080e4 <USB_EP0_OutStart>
 8005608:	e006      	b.n	8005618 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	441a      	add	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	4619      	mov	r1, r3
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff fe36 	bl	8005290 <HAL_PCD_DataOutStageCallback>
 8005624:	e046      	b.n	80056b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	4a26      	ldr	r2, [pc, #152]	@ (80056c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d124      	bne.n	8005678 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005644:	461a      	mov	r2, r3
 8005646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800564a:	6093      	str	r3, [r2, #8]
 800564c:	e032      	b.n	80056b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005664:	461a      	mov	r2, r3
 8005666:	2320      	movs	r3, #32
 8005668:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff fe0d 	bl	8005290 <HAL_PCD_DataOutStageCallback>
 8005676:	e01d      	b.n	80056b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d114      	bne.n	80056a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	4613      	mov	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d108      	bne.n	80056a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056a0:	461a      	mov	r2, r3
 80056a2:	2100      	movs	r1, #0
 80056a4:	f002 fd1e 	bl	80080e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff fdee 	bl	8005290 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	4f54300a 	.word	0x4f54300a
 80056c4:	4f54310a 	.word	0x4f54310a

080056c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	333c      	adds	r3, #60	@ 0x3c
 80056e0:	3304      	adds	r3, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4a15      	ldr	r2, [pc, #84]	@ (8005750 <PCD_EP_OutSetupPacket_int+0x88>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d90e      	bls.n	800571c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005704:	2b00      	cmp	r3, #0
 8005706:	d009      	beq.n	800571c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005714:	461a      	mov	r2, r3
 8005716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800571a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff fdcf 	bl	80052c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a0a      	ldr	r2, [pc, #40]	@ (8005750 <PCD_EP_OutSetupPacket_int+0x88>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d90c      	bls.n	8005744 <PCD_EP_OutSetupPacket_int+0x7c>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	799b      	ldrb	r3, [r3, #6]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d108      	bne.n	8005744 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800573c:	461a      	mov	r2, r3
 800573e:	2101      	movs	r1, #1
 8005740:	f002 fcd0 	bl	80080e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	4f54300a 	.word	0x4f54300a

08005754 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e267      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d075      	beq.n	8005876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800578a:	4b88      	ldr	r3, [pc, #544]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 030c 	and.w	r3, r3, #12
 8005792:	2b04      	cmp	r3, #4
 8005794:	d00c      	beq.n	80057b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005796:	4b85      	ldr	r3, [pc, #532]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d112      	bne.n	80057c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057a2:	4b82      	ldr	r3, [pc, #520]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057ae:	d10b      	bne.n	80057c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b0:	4b7e      	ldr	r3, [pc, #504]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d05b      	beq.n	8005874 <HAL_RCC_OscConfig+0x108>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d157      	bne.n	8005874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e242      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d0:	d106      	bne.n	80057e0 <HAL_RCC_OscConfig+0x74>
 80057d2:	4b76      	ldr	r3, [pc, #472]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a75      	ldr	r2, [pc, #468]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 80057d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e01d      	b.n	800581c <HAL_RCC_OscConfig+0xb0>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0x98>
 80057ea:	4b70      	ldr	r3, [pc, #448]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a6f      	ldr	r2, [pc, #444]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 80057f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b6d      	ldr	r3, [pc, #436]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a6c      	ldr	r2, [pc, #432]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 80057fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e00b      	b.n	800581c <HAL_RCC_OscConfig+0xb0>
 8005804:	4b69      	ldr	r3, [pc, #420]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a68      	ldr	r2, [pc, #416]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 800580a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	4b66      	ldr	r3, [pc, #408]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a65      	ldr	r2, [pc, #404]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 8005816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800581a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d013      	beq.n	800584c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005824:	f7fc f9be 	bl	8001ba4 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800582c:	f7fc f9ba 	bl	8001ba4 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b64      	cmp	r3, #100	@ 0x64
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e207      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583e:	4b5b      	ldr	r3, [pc, #364]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0xc0>
 800584a:	e014      	b.n	8005876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584c:	f7fc f9aa 	bl	8001ba4 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005854:	f7fc f9a6 	bl	8001ba4 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b64      	cmp	r3, #100	@ 0x64
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e1f3      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005866:	4b51      	ldr	r3, [pc, #324]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f0      	bne.n	8005854 <HAL_RCC_OscConfig+0xe8>
 8005872:	e000      	b.n	8005876 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d063      	beq.n	800594a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005882:	4b4a      	ldr	r3, [pc, #296]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800588e:	4b47      	ldr	r3, [pc, #284]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005896:	2b08      	cmp	r3, #8
 8005898:	d11c      	bne.n	80058d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800589a:	4b44      	ldr	r3, [pc, #272]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d116      	bne.n	80058d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a6:	4b41      	ldr	r3, [pc, #260]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <HAL_RCC_OscConfig+0x152>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d001      	beq.n	80058be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e1c7      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058be:	4b3b      	ldr	r3, [pc, #236]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	4937      	ldr	r1, [pc, #220]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058d2:	e03a      	b.n	800594a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d020      	beq.n	800591e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058dc:	4b34      	ldr	r3, [pc, #208]	@ (80059b0 <HAL_RCC_OscConfig+0x244>)
 80058de:	2201      	movs	r2, #1
 80058e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e2:	f7fc f95f 	bl	8001ba4 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ea:	f7fc f95b 	bl	8001ba4 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e1a8      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fc:	4b2b      	ldr	r3, [pc, #172]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0f0      	beq.n	80058ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005908:	4b28      	ldr	r3, [pc, #160]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	4925      	ldr	r1, [pc, #148]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 8005918:	4313      	orrs	r3, r2
 800591a:	600b      	str	r3, [r1, #0]
 800591c:	e015      	b.n	800594a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800591e:	4b24      	ldr	r3, [pc, #144]	@ (80059b0 <HAL_RCC_OscConfig+0x244>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fc f93e 	bl	8001ba4 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800592c:	f7fc f93a 	bl	8001ba4 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e187      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593e:	4b1b      	ldr	r3, [pc, #108]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d036      	beq.n	80059c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d016      	beq.n	800598c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800595e:	4b15      	ldr	r3, [pc, #84]	@ (80059b4 <HAL_RCC_OscConfig+0x248>)
 8005960:	2201      	movs	r2, #1
 8005962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005964:	f7fc f91e 	bl	8001ba4 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800596c:	f7fc f91a 	bl	8001ba4 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e167      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597e:	4b0b      	ldr	r3, [pc, #44]	@ (80059ac <HAL_RCC_OscConfig+0x240>)
 8005980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCC_OscConfig+0x200>
 800598a:	e01b      	b.n	80059c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800598c:	4b09      	ldr	r3, [pc, #36]	@ (80059b4 <HAL_RCC_OscConfig+0x248>)
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005992:	f7fc f907 	bl	8001ba4 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005998:	e00e      	b.n	80059b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800599a:	f7fc f903 	bl	8001ba4 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d907      	bls.n	80059b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e150      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
 80059ac:	40023800 	.word	0x40023800
 80059b0:	42470000 	.word	0x42470000
 80059b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b8:	4b88      	ldr	r3, [pc, #544]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 80059ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1ea      	bne.n	800599a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8097 	beq.w	8005b00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059d6:	4b81      	ldr	r3, [pc, #516]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10f      	bne.n	8005a02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	4b7d      	ldr	r3, [pc, #500]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ea:	4a7c      	ldr	r2, [pc, #496]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 80059ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80059f2:	4b7a      	ldr	r3, [pc, #488]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059fe:	2301      	movs	r3, #1
 8005a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a02:	4b77      	ldr	r3, [pc, #476]	@ (8005be0 <HAL_RCC_OscConfig+0x474>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d118      	bne.n	8005a40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a0e:	4b74      	ldr	r3, [pc, #464]	@ (8005be0 <HAL_RCC_OscConfig+0x474>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a73      	ldr	r2, [pc, #460]	@ (8005be0 <HAL_RCC_OscConfig+0x474>)
 8005a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a1a:	f7fc f8c3 	bl	8001ba4 <HAL_GetTick>
 8005a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a20:	e008      	b.n	8005a34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a22:	f7fc f8bf 	bl	8001ba4 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e10c      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a34:	4b6a      	ldr	r3, [pc, #424]	@ (8005be0 <HAL_RCC_OscConfig+0x474>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0f0      	beq.n	8005a22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d106      	bne.n	8005a56 <HAL_RCC_OscConfig+0x2ea>
 8005a48:	4b64      	ldr	r3, [pc, #400]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a4c:	4a63      	ldr	r2, [pc, #396]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a54:	e01c      	b.n	8005a90 <HAL_RCC_OscConfig+0x324>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b05      	cmp	r3, #5
 8005a5c:	d10c      	bne.n	8005a78 <HAL_RCC_OscConfig+0x30c>
 8005a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a62:	4a5e      	ldr	r2, [pc, #376]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a64:	f043 0304 	orr.w	r3, r3, #4
 8005a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a6a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a76:	e00b      	b.n	8005a90 <HAL_RCC_OscConfig+0x324>
 8005a78:	4b58      	ldr	r3, [pc, #352]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a7c:	4a57      	ldr	r2, [pc, #348]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a7e:	f023 0301 	bic.w	r3, r3, #1
 8005a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a84:	4b55      	ldr	r3, [pc, #340]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a88:	4a54      	ldr	r2, [pc, #336]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005a8a:	f023 0304 	bic.w	r3, r3, #4
 8005a8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d015      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a98:	f7fc f884 	bl	8001ba4 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a9e:	e00a      	b.n	8005ab6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa0:	f7fc f880 	bl	8001ba4 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e0cb      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab6:	4b49      	ldr	r3, [pc, #292]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0ee      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x334>
 8005ac2:	e014      	b.n	8005aee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac4:	f7fc f86e 	bl	8001ba4 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aca:	e00a      	b.n	8005ae2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005acc:	f7fc f86a 	bl	8001ba4 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e0b5      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1ee      	bne.n	8005acc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d105      	bne.n	8005b00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af4:	4b39      	ldr	r3, [pc, #228]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af8:	4a38      	ldr	r2, [pc, #224]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005afe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80a1 	beq.w	8005c4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b0a:	4b34      	ldr	r3, [pc, #208]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 030c 	and.w	r3, r3, #12
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d05c      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d141      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b1e:	4b31      	ldr	r3, [pc, #196]	@ (8005be4 <HAL_RCC_OscConfig+0x478>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b24:	f7fc f83e 	bl	8001ba4 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2c:	f7fc f83a 	bl	8001ba4 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e087      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3e:	4b27      	ldr	r3, [pc, #156]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69da      	ldr	r2, [r3, #28]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b58:	019b      	lsls	r3, r3, #6
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b60:	085b      	lsrs	r3, r3, #1
 8005b62:	3b01      	subs	r3, #1
 8005b64:	041b      	lsls	r3, r3, #16
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	061b      	lsls	r3, r3, #24
 8005b6e:	491b      	ldr	r1, [pc, #108]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b74:	4b1b      	ldr	r3, [pc, #108]	@ (8005be4 <HAL_RCC_OscConfig+0x478>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7a:	f7fc f813 	bl	8001ba4 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b82:	f7fc f80f 	bl	8001ba4 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e05c      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b94:	4b11      	ldr	r3, [pc, #68]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x416>
 8005ba0:	e054      	b.n	8005c4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba2:	4b10      	ldr	r3, [pc, #64]	@ (8005be4 <HAL_RCC_OscConfig+0x478>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba8:	f7fb fffc 	bl	8001ba4 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb0:	f7fb fff8 	bl	8001ba4 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e045      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc2:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <HAL_RCC_OscConfig+0x470>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x444>
 8005bce:	e03d      	b.n	8005c4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e038      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40007000 	.word	0x40007000
 8005be4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005be8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c58 <HAL_RCC_OscConfig+0x4ec>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d028      	beq.n	8005c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d121      	bne.n	8005c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d11a      	bne.n	8005c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c18:	4013      	ands	r3, r2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d111      	bne.n	8005c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2e:	085b      	lsrs	r3, r3, #1
 8005c30:	3b01      	subs	r3, #1
 8005c32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d107      	bne.n	8005c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d001      	beq.n	8005c4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40023800 	.word	0x40023800

08005c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0cc      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c70:	4b68      	ldr	r3, [pc, #416]	@ (8005e14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d90c      	bls.n	8005c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7e:	4b65      	ldr	r3, [pc, #404]	@ (8005e14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c86:	4b63      	ldr	r3, [pc, #396]	@ (8005e14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d001      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0b8      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d020      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cb0:	4b59      	ldr	r3, [pc, #356]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	4a58      	ldr	r2, [pc, #352]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cc8:	4b53      	ldr	r3, [pc, #332]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4a52      	ldr	r2, [pc, #328]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd4:	4b50      	ldr	r3, [pc, #320]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	494d      	ldr	r1, [pc, #308]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d044      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d107      	bne.n	8005d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfa:	4b47      	ldr	r3, [pc, #284]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d119      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e07f      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d003      	beq.n	8005d1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d107      	bne.n	8005d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e06f      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e067      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d3a:	4b37      	ldr	r3, [pc, #220]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f023 0203 	bic.w	r2, r3, #3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	4934      	ldr	r1, [pc, #208]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d4c:	f7fb ff2a 	bl	8001ba4 <HAL_GetTick>
 8005d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d52:	e00a      	b.n	8005d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d54:	f7fb ff26 	bl	8001ba4 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e04f      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 020c 	and.w	r2, r3, #12
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d1eb      	bne.n	8005d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d7c:	4b25      	ldr	r3, [pc, #148]	@ (8005e14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d20c      	bcs.n	8005da4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8a:	4b22      	ldr	r3, [pc, #136]	@ (8005e14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d92:	4b20      	ldr	r3, [pc, #128]	@ (8005e14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d001      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e032      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d008      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db0:	4b19      	ldr	r3, [pc, #100]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4916      	ldr	r1, [pc, #88]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dce:	4b12      	ldr	r3, [pc, #72]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	490e      	ldr	r1, [pc, #56]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005de2:	f000 f821 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8005de6:	4602      	mov	r2, r0
 8005de8:	4b0b      	ldr	r3, [pc, #44]	@ (8005e18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	490a      	ldr	r1, [pc, #40]	@ (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005df4:	5ccb      	ldrb	r3, [r1, r3]
 8005df6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfa:	4a09      	ldr	r2, [pc, #36]	@ (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005dfe:	4b09      	ldr	r3, [pc, #36]	@ (8005e24 <HAL_RCC_ClockConfig+0x1c8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fb fe8a 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	40023c00 	.word	0x40023c00
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	08009170 	.word	0x08009170
 8005e20:	20000008 	.word	0x20000008
 8005e24:	2000000c 	.word	0x2000000c

08005e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e2c:	b094      	sub	sp, #80	@ 0x50
 8005e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e40:	4b79      	ldr	r3, [pc, #484]	@ (8006028 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 030c 	and.w	r3, r3, #12
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d00d      	beq.n	8005e68 <HAL_RCC_GetSysClockFreq+0x40>
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	f200 80e1 	bhi.w	8006014 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <HAL_RCC_GetSysClockFreq+0x34>
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d003      	beq.n	8005e62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e5a:	e0db      	b.n	8006014 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e5c:	4b73      	ldr	r3, [pc, #460]	@ (800602c <HAL_RCC_GetSysClockFreq+0x204>)
 8005e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e60:	e0db      	b.n	800601a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e62:	4b72      	ldr	r3, [pc, #456]	@ (800602c <HAL_RCC_GetSysClockFreq+0x204>)
 8005e64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e66:	e0d8      	b.n	800601a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e68:	4b6f      	ldr	r3, [pc, #444]	@ (8006028 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e72:	4b6d      	ldr	r3, [pc, #436]	@ (8006028 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d063      	beq.n	8005f46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8006028 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	099b      	lsrs	r3, r3, #6
 8005e84:	2200      	movs	r2, #0
 8005e86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e92:	2300      	movs	r3, #0
 8005e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	462b      	mov	r3, r5
 8005e9e:	f04f 0000 	mov.w	r0, #0
 8005ea2:	f04f 0100 	mov.w	r1, #0
 8005ea6:	0159      	lsls	r1, r3, #5
 8005ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eac:	0150      	lsls	r0, r2, #5
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	1a51      	subs	r1, r2, r1
 8005eb6:	6139      	str	r1, [r7, #16]
 8005eb8:	4629      	mov	r1, r5
 8005eba:	eb63 0301 	sbc.w	r3, r3, r1
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ecc:	4659      	mov	r1, fp
 8005ece:	018b      	lsls	r3, r1, #6
 8005ed0:	4651      	mov	r1, sl
 8005ed2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ed6:	4651      	mov	r1, sl
 8005ed8:	018a      	lsls	r2, r1, #6
 8005eda:	4651      	mov	r1, sl
 8005edc:	ebb2 0801 	subs.w	r8, r2, r1
 8005ee0:	4659      	mov	r1, fp
 8005ee2:	eb63 0901 	sbc.w	r9, r3, r1
 8005ee6:	f04f 0200 	mov.w	r2, #0
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005efa:	4690      	mov	r8, r2
 8005efc:	4699      	mov	r9, r3
 8005efe:	4623      	mov	r3, r4
 8005f00:	eb18 0303 	adds.w	r3, r8, r3
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	462b      	mov	r3, r5
 8005f08:	eb49 0303 	adc.w	r3, r9, r3
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	028b      	lsls	r3, r1, #10
 8005f1e:	4621      	mov	r1, r4
 8005f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f24:	4621      	mov	r1, r4
 8005f26:	028a      	lsls	r2, r1, #10
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f2e:	2200      	movs	r2, #0
 8005f30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f38:	f7fa f99a 	bl	8000270 <__aeabi_uldivmod>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4613      	mov	r3, r2
 8005f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f44:	e058      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f46:	4b38      	ldr	r3, [pc, #224]	@ (8006028 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	099b      	lsrs	r3, r3, #6
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	4611      	mov	r1, r2
 8005f52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f56:	623b      	str	r3, [r7, #32]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f60:	4642      	mov	r2, r8
 8005f62:	464b      	mov	r3, r9
 8005f64:	f04f 0000 	mov.w	r0, #0
 8005f68:	f04f 0100 	mov.w	r1, #0
 8005f6c:	0159      	lsls	r1, r3, #5
 8005f6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f72:	0150      	lsls	r0, r2, #5
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4641      	mov	r1, r8
 8005f7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f7e:	4649      	mov	r1, r9
 8005f80:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f98:	ebb2 040a 	subs.w	r4, r2, sl
 8005f9c:	eb63 050b 	sbc.w	r5, r3, fp
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	00eb      	lsls	r3, r5, #3
 8005faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fae:	00e2      	lsls	r2, r4, #3
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	461d      	mov	r5, r3
 8005fb4:	4643      	mov	r3, r8
 8005fb6:	18e3      	adds	r3, r4, r3
 8005fb8:	603b      	str	r3, [r7, #0]
 8005fba:	464b      	mov	r3, r9
 8005fbc:	eb45 0303 	adc.w	r3, r5, r3
 8005fc0:	607b      	str	r3, [r7, #4]
 8005fc2:	f04f 0200 	mov.w	r2, #0
 8005fc6:	f04f 0300 	mov.w	r3, #0
 8005fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fce:	4629      	mov	r1, r5
 8005fd0:	028b      	lsls	r3, r1, #10
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fd8:	4621      	mov	r1, r4
 8005fda:	028a      	lsls	r2, r1, #10
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	61fa      	str	r2, [r7, #28]
 8005fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fec:	f7fa f940 	bl	8000270 <__aeabi_uldivmod>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8006028 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	3301      	adds	r3, #1
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006008:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800600a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006012:	e002      	b.n	800601a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006014:	4b05      	ldr	r3, [pc, #20]	@ (800602c <HAL_RCC_GetSysClockFreq+0x204>)
 8006016:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800601a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800601c:	4618      	mov	r0, r3
 800601e:	3750      	adds	r7, #80	@ 0x50
 8006020:	46bd      	mov	sp, r7
 8006022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006026:	bf00      	nop
 8006028:	40023800 	.word	0x40023800
 800602c:	00f42400 	.word	0x00f42400

08006030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006034:	4b03      	ldr	r3, [pc, #12]	@ (8006044 <HAL_RCC_GetHCLKFreq+0x14>)
 8006036:	681b      	ldr	r3, [r3, #0]
}
 8006038:	4618      	mov	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	20000008 	.word	0x20000008

08006048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800604c:	f7ff fff0 	bl	8006030 <HAL_RCC_GetHCLKFreq>
 8006050:	4602      	mov	r2, r0
 8006052:	4b05      	ldr	r3, [pc, #20]	@ (8006068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	0a9b      	lsrs	r3, r3, #10
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	4903      	ldr	r1, [pc, #12]	@ (800606c <HAL_RCC_GetPCLK1Freq+0x24>)
 800605e:	5ccb      	ldrb	r3, [r1, r3]
 8006060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006064:	4618      	mov	r0, r3
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40023800 	.word	0x40023800
 800606c:	08009180 	.word	0x08009180

08006070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006074:	f7ff ffdc 	bl	8006030 <HAL_RCC_GetHCLKFreq>
 8006078:	4602      	mov	r2, r0
 800607a:	4b05      	ldr	r3, [pc, #20]	@ (8006090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	0b5b      	lsrs	r3, r3, #13
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	4903      	ldr	r1, [pc, #12]	@ (8006094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006086:	5ccb      	ldrb	r3, [r1, r3]
 8006088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800608c:	4618      	mov	r0, r3
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40023800 	.word	0x40023800
 8006094:	08009180 	.word	0x08009180

08006098 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d105      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d035      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060c0:	4b62      	ldr	r3, [pc, #392]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060c6:	f7fb fd6d 	bl	8001ba4 <HAL_GetTick>
 80060ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060cc:	e008      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060ce:	f7fb fd69 	bl	8001ba4 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e0b0      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060e0:	4b5b      	ldr	r3, [pc, #364]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1f0      	bne.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	019a      	lsls	r2, r3, #6
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	071b      	lsls	r3, r3, #28
 80060f8:	4955      	ldr	r1, [pc, #340]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006100:	4b52      	ldr	r3, [pc, #328]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006102:	2201      	movs	r2, #1
 8006104:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006106:	f7fb fd4d 	bl	8001ba4 <HAL_GetTick>
 800610a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800610c:	e008      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800610e:	f7fb fd49 	bl	8001ba4 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e090      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006120:	4b4b      	ldr	r3, [pc, #300]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0f0      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 8083 	beq.w	8006240 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	4b44      	ldr	r3, [pc, #272]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006142:	4a43      	ldr	r2, [pc, #268]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006148:	6413      	str	r3, [r2, #64]	@ 0x40
 800614a:	4b41      	ldr	r3, [pc, #260]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006156:	4b3f      	ldr	r3, [pc, #252]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a3e      	ldr	r2, [pc, #248]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800615c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006160:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006162:	f7fb fd1f 	bl	8001ba4 <HAL_GetTick>
 8006166:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006168:	e008      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800616a:	f7fb fd1b 	bl	8001ba4 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e062      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800617c:	4b35      	ldr	r3, [pc, #212]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006188:	4b31      	ldr	r3, [pc, #196]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800618a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800618c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006190:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d02f      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d028      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061a6:	4b2a      	ldr	r3, [pc, #168]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061b0:	4b29      	ldr	r3, [pc, #164]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061b6:	4b28      	ldr	r3, [pc, #160]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061bc:	4a24      	ldr	r2, [pc, #144]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061c2:	4b23      	ldr	r3, [pc, #140]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d114      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061ce:	f7fb fce9 	bl	8001ba4 <HAL_GetTick>
 80061d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d4:	e00a      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d6:	f7fb fce5 	bl	8001ba4 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d901      	bls.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e02a      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ec:	4b18      	ldr	r3, [pc, #96]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0ee      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006204:	d10d      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006206:	4b12      	ldr	r3, [pc, #72]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621a:	490d      	ldr	r1, [pc, #52]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800621c:	4313      	orrs	r3, r2
 800621e:	608b      	str	r3, [r1, #8]
 8006220:	e005      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006222:	4b0b      	ldr	r3, [pc, #44]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	4a0a      	ldr	r2, [pc, #40]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006228:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800622c:	6093      	str	r3, [r2, #8]
 800622e:	4b08      	ldr	r3, [pc, #32]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006230:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800623a:	4905      	ldr	r1, [pc, #20]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800623c:	4313      	orrs	r3, r2
 800623e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	42470068 	.word	0x42470068
 8006250:	40023800 	.word	0x40023800
 8006254:	40007000 	.word	0x40007000
 8006258:	42470e40 	.word	0x42470e40

0800625c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d13f      	bne.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800627a:	4b24      	ldr	r3, [pc, #144]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006282:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d006      	beq.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006290:	d12f      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006292:	4b1f      	ldr	r3, [pc, #124]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006294:	617b      	str	r3, [r7, #20]
          break;
 8006296:	e02f      	b.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006298:	4b1c      	ldr	r3, [pc, #112]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062a4:	d108      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80062a6:	4b19      	ldr	r3, [pc, #100]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062ae:	4a19      	ldr	r2, [pc, #100]	@ (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80062b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	e007      	b.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80062b8:	4b14      	ldr	r3, [pc, #80]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062c0:	4a14      	ldr	r2, [pc, #80]	@ (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80062c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80062c8:	4b10      	ldr	r3, [pc, #64]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ce:	099b      	lsrs	r3, r3, #6
 80062d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
 80062da:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80062dc:	4b0b      	ldr	r3, [pc, #44]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062e2:	0f1b      	lsrs	r3, r3, #28
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ee:	617b      	str	r3, [r7, #20]
          break;
 80062f0:	e002      	b.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	617b      	str	r3, [r7, #20]
          break;
 80062f6:	bf00      	nop
        }
      }
      break;
 80062f8:	e000      	b.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80062fa:	bf00      	nop
    }
  }
  return frequency;
 80062fc:	697b      	ldr	r3, [r7, #20]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40023800 	.word	0x40023800
 8006310:	00bb8000 	.word	0x00bb8000
 8006314:	00f42400 	.word	0x00f42400

08006318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e07b      	b.n	8006422 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632e:	2b00      	cmp	r3, #0
 8006330:	d108      	bne.n	8006344 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800633a:	d009      	beq.n	8006350 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	61da      	str	r2, [r3, #28]
 8006342:	e005      	b.n	8006350 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fb f830 	bl	80013d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006386:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	431a      	orrs	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063c0:	431a      	orrs	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d4:	ea42 0103 	orr.w	r1, r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	0c1b      	lsrs	r3, r3, #16
 80063ee:	f003 0104 	and.w	r1, r3, #4
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	f003 0210 	and.w	r2, r3, #16
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69da      	ldr	r2, [r3, #28]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006410:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e041      	b.n	80064c0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7fb f99b 	bl	800178c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3304      	adds	r3, #4
 8006466:	4619      	mov	r1, r3
 8006468:	4610      	mov	r0, r2
 800646a:	f000 fa79 	bl	8006960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d001      	beq.n	80064e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e046      	b.n	800656e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a23      	ldr	r2, [pc, #140]	@ (800657c <HAL_TIM_Base_Start+0xb4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d022      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fa:	d01d      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a1f      	ldr	r2, [pc, #124]	@ (8006580 <HAL_TIM_Base_Start+0xb8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d018      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a1e      	ldr	r2, [pc, #120]	@ (8006584 <HAL_TIM_Base_Start+0xbc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d013      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1c      	ldr	r2, [pc, #112]	@ (8006588 <HAL_TIM_Base_Start+0xc0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00e      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1b      	ldr	r2, [pc, #108]	@ (800658c <HAL_TIM_Base_Start+0xc4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d009      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a19      	ldr	r2, [pc, #100]	@ (8006590 <HAL_TIM_Base_Start+0xc8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d004      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a18      	ldr	r2, [pc, #96]	@ (8006594 <HAL_TIM_Base_Start+0xcc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d111      	bne.n	800655c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b06      	cmp	r3, #6
 8006548:	d010      	beq.n	800656c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0201 	orr.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655a:	e007      	b.n	800656c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40010000 	.word	0x40010000
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800
 8006588:	40000c00 	.word	0x40000c00
 800658c:	40010400 	.word	0x40010400
 8006590:	40014000 	.word	0x40014000
 8006594:	40001800 	.word	0x40001800

08006598 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e041      	b.n	800662e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f839 	bl	8006636 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f000 f9c2 	bl	8006960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
	...

0800664c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006666:	2302      	movs	r3, #2
 8006668:	e0ae      	b.n	80067c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b0c      	cmp	r3, #12
 8006676:	f200 809f 	bhi.w	80067b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800667a:	a201      	add	r2, pc, #4	@ (adr r2, 8006680 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800667c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006680:	080066b5 	.word	0x080066b5
 8006684:	080067b9 	.word	0x080067b9
 8006688:	080067b9 	.word	0x080067b9
 800668c:	080067b9 	.word	0x080067b9
 8006690:	080066f5 	.word	0x080066f5
 8006694:	080067b9 	.word	0x080067b9
 8006698:	080067b9 	.word	0x080067b9
 800669c:	080067b9 	.word	0x080067b9
 80066a0:	08006737 	.word	0x08006737
 80066a4:	080067b9 	.word	0x080067b9
 80066a8:	080067b9 	.word	0x080067b9
 80066ac:	080067b9 	.word	0x080067b9
 80066b0:	08006777 	.word	0x08006777
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 f9fc 	bl	8006ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0208 	orr.w	r2, r2, #8
 80066ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0204 	bic.w	r2, r2, #4
 80066de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6999      	ldr	r1, [r3, #24]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	619a      	str	r2, [r3, #24]
      break;
 80066f2:	e064      	b.n	80067be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 fa4c 	bl	8006b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800670e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800671e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6999      	ldr	r1, [r3, #24]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	021a      	lsls	r2, r3, #8
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	619a      	str	r2, [r3, #24]
      break;
 8006734:	e043      	b.n	80067be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	4618      	mov	r0, r3
 800673e:	f000 faa1 	bl	8006c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0208 	orr.w	r2, r2, #8
 8006750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0204 	bic.w	r2, r2, #4
 8006760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69d9      	ldr	r1, [r3, #28]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	61da      	str	r2, [r3, #28]
      break;
 8006774:	e023      	b.n	80067be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	4618      	mov	r0, r3
 800677e:	f000 faf5 	bl	8006d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69da      	ldr	r2, [r3, #28]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69d9      	ldr	r1, [r3, #28]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	021a      	lsls	r2, r3, #8
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	61da      	str	r2, [r3, #28]
      break;
 80067b6:	e002      	b.n	80067be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	75fb      	strb	r3, [r7, #23]
      break;
 80067bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_TIM_ConfigClockSource+0x1c>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e0b4      	b.n	8006956 <HAL_TIM_ConfigClockSource+0x186>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800680a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006824:	d03e      	beq.n	80068a4 <HAL_TIM_ConfigClockSource+0xd4>
 8006826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800682a:	f200 8087 	bhi.w	800693c <HAL_TIM_ConfigClockSource+0x16c>
 800682e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006832:	f000 8086 	beq.w	8006942 <HAL_TIM_ConfigClockSource+0x172>
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800683a:	d87f      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x16c>
 800683c:	2b70      	cmp	r3, #112	@ 0x70
 800683e:	d01a      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0xa6>
 8006840:	2b70      	cmp	r3, #112	@ 0x70
 8006842:	d87b      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x16c>
 8006844:	2b60      	cmp	r3, #96	@ 0x60
 8006846:	d050      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x11a>
 8006848:	2b60      	cmp	r3, #96	@ 0x60
 800684a:	d877      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x16c>
 800684c:	2b50      	cmp	r3, #80	@ 0x50
 800684e:	d03c      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0xfa>
 8006850:	2b50      	cmp	r3, #80	@ 0x50
 8006852:	d873      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x16c>
 8006854:	2b40      	cmp	r3, #64	@ 0x40
 8006856:	d058      	beq.n	800690a <HAL_TIM_ConfigClockSource+0x13a>
 8006858:	2b40      	cmp	r3, #64	@ 0x40
 800685a:	d86f      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x16c>
 800685c:	2b30      	cmp	r3, #48	@ 0x30
 800685e:	d064      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x15a>
 8006860:	2b30      	cmp	r3, #48	@ 0x30
 8006862:	d86b      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x16c>
 8006864:	2b20      	cmp	r3, #32
 8006866:	d060      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x15a>
 8006868:	2b20      	cmp	r3, #32
 800686a:	d867      	bhi.n	800693c <HAL_TIM_ConfigClockSource+0x16c>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d05c      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x15a>
 8006870:	2b10      	cmp	r3, #16
 8006872:	d05a      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x15a>
 8006874:	e062      	b.n	800693c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006886:	f000 fb41 	bl	8006f0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	609a      	str	r2, [r3, #8]
      break;
 80068a2:	e04f      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068b4:	f000 fb2a 	bl	8006f0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068c6:	609a      	str	r2, [r3, #8]
      break;
 80068c8:	e03c      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d6:	461a      	mov	r2, r3
 80068d8:	f000 fa9e 	bl	8006e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2150      	movs	r1, #80	@ 0x50
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 faf7 	bl	8006ed6 <TIM_ITRx_SetConfig>
      break;
 80068e8:	e02c      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068f6:	461a      	mov	r2, r3
 80068f8:	f000 fabd 	bl	8006e76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2160      	movs	r1, #96	@ 0x60
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fae7 	bl	8006ed6 <TIM_ITRx_SetConfig>
      break;
 8006908:	e01c      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006916:	461a      	mov	r2, r3
 8006918:	f000 fa7e 	bl	8006e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2140      	movs	r1, #64	@ 0x40
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fad7 	bl	8006ed6 <TIM_ITRx_SetConfig>
      break;
 8006928:	e00c      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4619      	mov	r1, r3
 8006934:	4610      	mov	r0, r2
 8006936:	f000 face 	bl	8006ed6 <TIM_ITRx_SetConfig>
      break;
 800693a:	e003      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
      break;
 8006940:	e000      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006954:	7bfb      	ldrb	r3, [r7, #15]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a46      	ldr	r2, [pc, #280]	@ (8006a8c <TIM_Base_SetConfig+0x12c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d013      	beq.n	80069a0 <TIM_Base_SetConfig+0x40>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800697e:	d00f      	beq.n	80069a0 <TIM_Base_SetConfig+0x40>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a43      	ldr	r2, [pc, #268]	@ (8006a90 <TIM_Base_SetConfig+0x130>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00b      	beq.n	80069a0 <TIM_Base_SetConfig+0x40>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a42      	ldr	r2, [pc, #264]	@ (8006a94 <TIM_Base_SetConfig+0x134>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d007      	beq.n	80069a0 <TIM_Base_SetConfig+0x40>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a41      	ldr	r2, [pc, #260]	@ (8006a98 <TIM_Base_SetConfig+0x138>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d003      	beq.n	80069a0 <TIM_Base_SetConfig+0x40>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a40      	ldr	r2, [pc, #256]	@ (8006a9c <TIM_Base_SetConfig+0x13c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d108      	bne.n	80069b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a35      	ldr	r2, [pc, #212]	@ (8006a8c <TIM_Base_SetConfig+0x12c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d02b      	beq.n	8006a12 <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c0:	d027      	beq.n	8006a12 <TIM_Base_SetConfig+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a32      	ldr	r2, [pc, #200]	@ (8006a90 <TIM_Base_SetConfig+0x130>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d023      	beq.n	8006a12 <TIM_Base_SetConfig+0xb2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a31      	ldr	r2, [pc, #196]	@ (8006a94 <TIM_Base_SetConfig+0x134>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d01f      	beq.n	8006a12 <TIM_Base_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a30      	ldr	r2, [pc, #192]	@ (8006a98 <TIM_Base_SetConfig+0x138>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d01b      	beq.n	8006a12 <TIM_Base_SetConfig+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a2f      	ldr	r2, [pc, #188]	@ (8006a9c <TIM_Base_SetConfig+0x13c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d017      	beq.n	8006a12 <TIM_Base_SetConfig+0xb2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a2e      	ldr	r2, [pc, #184]	@ (8006aa0 <TIM_Base_SetConfig+0x140>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <TIM_Base_SetConfig+0xb2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a2d      	ldr	r2, [pc, #180]	@ (8006aa4 <TIM_Base_SetConfig+0x144>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00f      	beq.n	8006a12 <TIM_Base_SetConfig+0xb2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a2c      	ldr	r2, [pc, #176]	@ (8006aa8 <TIM_Base_SetConfig+0x148>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00b      	beq.n	8006a12 <TIM_Base_SetConfig+0xb2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2b      	ldr	r2, [pc, #172]	@ (8006aac <TIM_Base_SetConfig+0x14c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d007      	beq.n	8006a12 <TIM_Base_SetConfig+0xb2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a2a      	ldr	r2, [pc, #168]	@ (8006ab0 <TIM_Base_SetConfig+0x150>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d003      	beq.n	8006a12 <TIM_Base_SetConfig+0xb2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a29      	ldr	r2, [pc, #164]	@ (8006ab4 <TIM_Base_SetConfig+0x154>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d108      	bne.n	8006a24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a10      	ldr	r2, [pc, #64]	@ (8006a8c <TIM_Base_SetConfig+0x12c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d003      	beq.n	8006a58 <TIM_Base_SetConfig+0xf8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a12      	ldr	r2, [pc, #72]	@ (8006a9c <TIM_Base_SetConfig+0x13c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d103      	bne.n	8006a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d105      	bne.n	8006a7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f023 0201 	bic.w	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	611a      	str	r2, [r3, #16]
  }
}
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800
 8006a98:	40000c00 	.word	0x40000c00
 8006a9c:	40010400 	.word	0x40010400
 8006aa0:	40014000 	.word	0x40014000
 8006aa4:	40014400 	.word	0x40014400
 8006aa8:	40014800 	.word	0x40014800
 8006aac:	40001800 	.word	0x40001800
 8006ab0:	40001c00 	.word	0x40001c00
 8006ab4:	40002000 	.word	0x40002000

08006ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	f023 0201 	bic.w	r2, r3, #1
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f023 0302 	bic.w	r3, r3, #2
 8006b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a20      	ldr	r2, [pc, #128]	@ (8006b90 <TIM_OC1_SetConfig+0xd8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d003      	beq.n	8006b1c <TIM_OC1_SetConfig+0x64>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a1f      	ldr	r2, [pc, #124]	@ (8006b94 <TIM_OC1_SetConfig+0xdc>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d10c      	bne.n	8006b36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0308 	bic.w	r3, r3, #8
 8006b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f023 0304 	bic.w	r3, r3, #4
 8006b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a15      	ldr	r2, [pc, #84]	@ (8006b90 <TIM_OC1_SetConfig+0xd8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d003      	beq.n	8006b46 <TIM_OC1_SetConfig+0x8e>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a14      	ldr	r2, [pc, #80]	@ (8006b94 <TIM_OC1_SetConfig+0xdc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d111      	bne.n	8006b6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	621a      	str	r2, [r3, #32]
}
 8006b84:	bf00      	nop
 8006b86:	371c      	adds	r7, #28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40010400 	.word	0x40010400

08006b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f023 0210 	bic.w	r2, r3, #16
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f023 0320 	bic.w	r3, r3, #32
 8006be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a22      	ldr	r2, [pc, #136]	@ (8006c7c <TIM_OC2_SetConfig+0xe4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d003      	beq.n	8006c00 <TIM_OC2_SetConfig+0x68>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a21      	ldr	r2, [pc, #132]	@ (8006c80 <TIM_OC2_SetConfig+0xe8>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d10d      	bne.n	8006c1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a17      	ldr	r2, [pc, #92]	@ (8006c7c <TIM_OC2_SetConfig+0xe4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d003      	beq.n	8006c2c <TIM_OC2_SetConfig+0x94>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a16      	ldr	r2, [pc, #88]	@ (8006c80 <TIM_OC2_SetConfig+0xe8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d113      	bne.n	8006c54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	621a      	str	r2, [r3, #32]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	40010000 	.word	0x40010000
 8006c80:	40010400 	.word	0x40010400

08006c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0303 	bic.w	r3, r3, #3
 8006cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	021b      	lsls	r3, r3, #8
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a21      	ldr	r2, [pc, #132]	@ (8006d64 <TIM_OC3_SetConfig+0xe0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d003      	beq.n	8006cea <TIM_OC3_SetConfig+0x66>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a20      	ldr	r2, [pc, #128]	@ (8006d68 <TIM_OC3_SetConfig+0xe4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d10d      	bne.n	8006d06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a16      	ldr	r2, [pc, #88]	@ (8006d64 <TIM_OC3_SetConfig+0xe0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d003      	beq.n	8006d16 <TIM_OC3_SetConfig+0x92>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a15      	ldr	r2, [pc, #84]	@ (8006d68 <TIM_OC3_SetConfig+0xe4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d113      	bne.n	8006d3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	621a      	str	r2, [r3, #32]
}
 8006d58:	bf00      	nop
 8006d5a:	371c      	adds	r7, #28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40010400 	.word	0x40010400

08006d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	031b      	lsls	r3, r3, #12
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a12      	ldr	r2, [pc, #72]	@ (8006e10 <TIM_OC4_SetConfig+0xa4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d003      	beq.n	8006dd4 <TIM_OC4_SetConfig+0x68>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a11      	ldr	r2, [pc, #68]	@ (8006e14 <TIM_OC4_SetConfig+0xa8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d109      	bne.n	8006de8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	019b      	lsls	r3, r3, #6
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40010000 	.word	0x40010000
 8006e14:	40010400 	.word	0x40010400

08006e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f023 0201 	bic.w	r2, r3, #1
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f023 030a 	bic.w	r3, r3, #10
 8006e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	621a      	str	r2, [r3, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b087      	sub	sp, #28
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	f023 0210 	bic.w	r2, r3, #16
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	031b      	lsls	r3, r3, #12
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006eb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f043 0307 	orr.w	r3, r3, #7
 8006ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	609a      	str	r2, [r3, #8]
}
 8006f00:	bf00      	nop
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	021a      	lsls	r2, r3, #8
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	609a      	str	r2, [r3, #8]
}
 8006f40:	bf00      	nop
 8006f42:	371c      	adds	r7, #28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d101      	bne.n	8006f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f60:	2302      	movs	r3, #2
 8006f62:	e05a      	b.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a21      	ldr	r2, [pc, #132]	@ (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d022      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fb0:	d01d      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800702c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d018      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a1a      	ldr	r2, [pc, #104]	@ (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00e      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a18      	ldr	r2, [pc, #96]	@ (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d009      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a17      	ldr	r2, [pc, #92]	@ (800703c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d004      	beq.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a15      	ldr	r2, [pc, #84]	@ (8007040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d10c      	bne.n	8007008 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40010000 	.word	0x40010000
 800702c:	40000400 	.word	0x40000400
 8007030:	40000800 	.word	0x40000800
 8007034:	40000c00 	.word	0x40000c00
 8007038:	40010400 	.word	0x40010400
 800703c:	40014000 	.word	0x40014000
 8007040:	40001800 	.word	0x40001800

08007044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e042      	b.n	80070dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fa fbd8 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2224      	movs	r2, #36	@ 0x24
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f82b 	bl	80070e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800709c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695a      	ldr	r2, [r3, #20]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070e8:	b0c0      	sub	sp, #256	@ 0x100
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007100:	68d9      	ldr	r1, [r3, #12]
 8007102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	ea40 0301 	orr.w	r3, r0, r1
 800710c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800710e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	431a      	orrs	r2, r3
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	431a      	orrs	r2, r3
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	4313      	orrs	r3, r2
 800712c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800713c:	f021 010c 	bic.w	r1, r1, #12
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800714a:	430b      	orrs	r3, r1
 800714c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800714e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800715a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800715e:	6999      	ldr	r1, [r3, #24]
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	ea40 0301 	orr.w	r3, r0, r1
 800716a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b8f      	ldr	r3, [pc, #572]	@ (80073b0 <UART_SetConfig+0x2cc>)
 8007174:	429a      	cmp	r2, r3
 8007176:	d005      	beq.n	8007184 <UART_SetConfig+0xa0>
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4b8d      	ldr	r3, [pc, #564]	@ (80073b4 <UART_SetConfig+0x2d0>)
 8007180:	429a      	cmp	r2, r3
 8007182:	d104      	bne.n	800718e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007184:	f7fe ff74 	bl	8006070 <HAL_RCC_GetPCLK2Freq>
 8007188:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800718c:	e003      	b.n	8007196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800718e:	f7fe ff5b 	bl	8006048 <HAL_RCC_GetPCLK1Freq>
 8007192:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071a0:	f040 810c 	bne.w	80073bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80071b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80071b6:	4622      	mov	r2, r4
 80071b8:	462b      	mov	r3, r5
 80071ba:	1891      	adds	r1, r2, r2
 80071bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80071be:	415b      	adcs	r3, r3
 80071c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80071c6:	4621      	mov	r1, r4
 80071c8:	eb12 0801 	adds.w	r8, r2, r1
 80071cc:	4629      	mov	r1, r5
 80071ce:	eb43 0901 	adc.w	r9, r3, r1
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	f04f 0300 	mov.w	r3, #0
 80071da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071e6:	4690      	mov	r8, r2
 80071e8:	4699      	mov	r9, r3
 80071ea:	4623      	mov	r3, r4
 80071ec:	eb18 0303 	adds.w	r3, r8, r3
 80071f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071f4:	462b      	mov	r3, r5
 80071f6:	eb49 0303 	adc.w	r3, r9, r3
 80071fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800720a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800720e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007212:	460b      	mov	r3, r1
 8007214:	18db      	adds	r3, r3, r3
 8007216:	653b      	str	r3, [r7, #80]	@ 0x50
 8007218:	4613      	mov	r3, r2
 800721a:	eb42 0303 	adc.w	r3, r2, r3
 800721e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007228:	f7f9 f822 	bl	8000270 <__aeabi_uldivmod>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4b61      	ldr	r3, [pc, #388]	@ (80073b8 <UART_SetConfig+0x2d4>)
 8007232:	fba3 2302 	umull	r2, r3, r3, r2
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	011c      	lsls	r4, r3, #4
 800723a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800723e:	2200      	movs	r2, #0
 8007240:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007244:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800724c:	4642      	mov	r2, r8
 800724e:	464b      	mov	r3, r9
 8007250:	1891      	adds	r1, r2, r2
 8007252:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007254:	415b      	adcs	r3, r3
 8007256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800725c:	4641      	mov	r1, r8
 800725e:	eb12 0a01 	adds.w	sl, r2, r1
 8007262:	4649      	mov	r1, r9
 8007264:	eb43 0b01 	adc.w	fp, r3, r1
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	f04f 0300 	mov.w	r3, #0
 8007270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800727c:	4692      	mov	sl, r2
 800727e:	469b      	mov	fp, r3
 8007280:	4643      	mov	r3, r8
 8007282:	eb1a 0303 	adds.w	r3, sl, r3
 8007286:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800728a:	464b      	mov	r3, r9
 800728c:	eb4b 0303 	adc.w	r3, fp, r3
 8007290:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80072a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80072a8:	460b      	mov	r3, r1
 80072aa:	18db      	adds	r3, r3, r3
 80072ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80072ae:	4613      	mov	r3, r2
 80072b0:	eb42 0303 	adc.w	r3, r2, r3
 80072b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80072ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80072be:	f7f8 ffd7 	bl	8000270 <__aeabi_uldivmod>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	4b3b      	ldr	r3, [pc, #236]	@ (80073b8 <UART_SetConfig+0x2d4>)
 80072ca:	fba3 2301 	umull	r2, r3, r3, r1
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	2264      	movs	r2, #100	@ 0x64
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	1acb      	subs	r3, r1, r3
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80072de:	4b36      	ldr	r3, [pc, #216]	@ (80073b8 <UART_SetConfig+0x2d4>)
 80072e0:	fba3 2302 	umull	r2, r3, r3, r2
 80072e4:	095b      	lsrs	r3, r3, #5
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80072ec:	441c      	add	r4, r3
 80072ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007300:	4642      	mov	r2, r8
 8007302:	464b      	mov	r3, r9
 8007304:	1891      	adds	r1, r2, r2
 8007306:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007308:	415b      	adcs	r3, r3
 800730a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800730c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007310:	4641      	mov	r1, r8
 8007312:	1851      	adds	r1, r2, r1
 8007314:	6339      	str	r1, [r7, #48]	@ 0x30
 8007316:	4649      	mov	r1, r9
 8007318:	414b      	adcs	r3, r1
 800731a:	637b      	str	r3, [r7, #52]	@ 0x34
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	f04f 0300 	mov.w	r3, #0
 8007324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007328:	4659      	mov	r1, fp
 800732a:	00cb      	lsls	r3, r1, #3
 800732c:	4651      	mov	r1, sl
 800732e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007332:	4651      	mov	r1, sl
 8007334:	00ca      	lsls	r2, r1, #3
 8007336:	4610      	mov	r0, r2
 8007338:	4619      	mov	r1, r3
 800733a:	4603      	mov	r3, r0
 800733c:	4642      	mov	r2, r8
 800733e:	189b      	adds	r3, r3, r2
 8007340:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007344:	464b      	mov	r3, r9
 8007346:	460a      	mov	r2, r1
 8007348:	eb42 0303 	adc.w	r3, r2, r3
 800734c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800735c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007364:	460b      	mov	r3, r1
 8007366:	18db      	adds	r3, r3, r3
 8007368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800736a:	4613      	mov	r3, r2
 800736c:	eb42 0303 	adc.w	r3, r2, r3
 8007370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800737a:	f7f8 ff79 	bl	8000270 <__aeabi_uldivmod>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4b0d      	ldr	r3, [pc, #52]	@ (80073b8 <UART_SetConfig+0x2d4>)
 8007384:	fba3 1302 	umull	r1, r3, r3, r2
 8007388:	095b      	lsrs	r3, r3, #5
 800738a:	2164      	movs	r1, #100	@ 0x64
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	3332      	adds	r3, #50	@ 0x32
 8007396:	4a08      	ldr	r2, [pc, #32]	@ (80073b8 <UART_SetConfig+0x2d4>)
 8007398:	fba2 2303 	umull	r2, r3, r2, r3
 800739c:	095b      	lsrs	r3, r3, #5
 800739e:	f003 0207 	and.w	r2, r3, #7
 80073a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4422      	add	r2, r4
 80073aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073ac:	e106      	b.n	80075bc <UART_SetConfig+0x4d8>
 80073ae:	bf00      	nop
 80073b0:	40011000 	.word	0x40011000
 80073b4:	40011400 	.word	0x40011400
 80073b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073c0:	2200      	movs	r2, #0
 80073c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80073ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80073ce:	4642      	mov	r2, r8
 80073d0:	464b      	mov	r3, r9
 80073d2:	1891      	adds	r1, r2, r2
 80073d4:	6239      	str	r1, [r7, #32]
 80073d6:	415b      	adcs	r3, r3
 80073d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80073da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073de:	4641      	mov	r1, r8
 80073e0:	1854      	adds	r4, r2, r1
 80073e2:	4649      	mov	r1, r9
 80073e4:	eb43 0501 	adc.w	r5, r3, r1
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	00eb      	lsls	r3, r5, #3
 80073f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073f6:	00e2      	lsls	r2, r4, #3
 80073f8:	4614      	mov	r4, r2
 80073fa:	461d      	mov	r5, r3
 80073fc:	4643      	mov	r3, r8
 80073fe:	18e3      	adds	r3, r4, r3
 8007400:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007404:	464b      	mov	r3, r9
 8007406:	eb45 0303 	adc.w	r3, r5, r3
 800740a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800740e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800741a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800742a:	4629      	mov	r1, r5
 800742c:	008b      	lsls	r3, r1, #2
 800742e:	4621      	mov	r1, r4
 8007430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007434:	4621      	mov	r1, r4
 8007436:	008a      	lsls	r2, r1, #2
 8007438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800743c:	f7f8 ff18 	bl	8000270 <__aeabi_uldivmod>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4b60      	ldr	r3, [pc, #384]	@ (80075c8 <UART_SetConfig+0x4e4>)
 8007446:	fba3 2302 	umull	r2, r3, r3, r2
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	011c      	lsls	r4, r3, #4
 800744e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007452:	2200      	movs	r2, #0
 8007454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007458:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800745c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007460:	4642      	mov	r2, r8
 8007462:	464b      	mov	r3, r9
 8007464:	1891      	adds	r1, r2, r2
 8007466:	61b9      	str	r1, [r7, #24]
 8007468:	415b      	adcs	r3, r3
 800746a:	61fb      	str	r3, [r7, #28]
 800746c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007470:	4641      	mov	r1, r8
 8007472:	1851      	adds	r1, r2, r1
 8007474:	6139      	str	r1, [r7, #16]
 8007476:	4649      	mov	r1, r9
 8007478:	414b      	adcs	r3, r1
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007488:	4659      	mov	r1, fp
 800748a:	00cb      	lsls	r3, r1, #3
 800748c:	4651      	mov	r1, sl
 800748e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007492:	4651      	mov	r1, sl
 8007494:	00ca      	lsls	r2, r1, #3
 8007496:	4610      	mov	r0, r2
 8007498:	4619      	mov	r1, r3
 800749a:	4603      	mov	r3, r0
 800749c:	4642      	mov	r2, r8
 800749e:	189b      	adds	r3, r3, r2
 80074a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074a4:	464b      	mov	r3, r9
 80074a6:	460a      	mov	r2, r1
 80074a8:	eb42 0303 	adc.w	r3, r2, r3
 80074ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80074c8:	4649      	mov	r1, r9
 80074ca:	008b      	lsls	r3, r1, #2
 80074cc:	4641      	mov	r1, r8
 80074ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074d2:	4641      	mov	r1, r8
 80074d4:	008a      	lsls	r2, r1, #2
 80074d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80074da:	f7f8 fec9 	bl	8000270 <__aeabi_uldivmod>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4611      	mov	r1, r2
 80074e4:	4b38      	ldr	r3, [pc, #224]	@ (80075c8 <UART_SetConfig+0x4e4>)
 80074e6:	fba3 2301 	umull	r2, r3, r3, r1
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	2264      	movs	r2, #100	@ 0x64
 80074ee:	fb02 f303 	mul.w	r3, r2, r3
 80074f2:	1acb      	subs	r3, r1, r3
 80074f4:	011b      	lsls	r3, r3, #4
 80074f6:	3332      	adds	r3, #50	@ 0x32
 80074f8:	4a33      	ldr	r2, [pc, #204]	@ (80075c8 <UART_SetConfig+0x4e4>)
 80074fa:	fba2 2303 	umull	r2, r3, r2, r3
 80074fe:	095b      	lsrs	r3, r3, #5
 8007500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007504:	441c      	add	r4, r3
 8007506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800750a:	2200      	movs	r2, #0
 800750c:	673b      	str	r3, [r7, #112]	@ 0x70
 800750e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007510:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007514:	4642      	mov	r2, r8
 8007516:	464b      	mov	r3, r9
 8007518:	1891      	adds	r1, r2, r2
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	415b      	adcs	r3, r3
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007524:	4641      	mov	r1, r8
 8007526:	1851      	adds	r1, r2, r1
 8007528:	6039      	str	r1, [r7, #0]
 800752a:	4649      	mov	r1, r9
 800752c:	414b      	adcs	r3, r1
 800752e:	607b      	str	r3, [r7, #4]
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	f04f 0300 	mov.w	r3, #0
 8007538:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800753c:	4659      	mov	r1, fp
 800753e:	00cb      	lsls	r3, r1, #3
 8007540:	4651      	mov	r1, sl
 8007542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007546:	4651      	mov	r1, sl
 8007548:	00ca      	lsls	r2, r1, #3
 800754a:	4610      	mov	r0, r2
 800754c:	4619      	mov	r1, r3
 800754e:	4603      	mov	r3, r0
 8007550:	4642      	mov	r2, r8
 8007552:	189b      	adds	r3, r3, r2
 8007554:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007556:	464b      	mov	r3, r9
 8007558:	460a      	mov	r2, r1
 800755a:	eb42 0303 	adc.w	r3, r2, r3
 800755e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	663b      	str	r3, [r7, #96]	@ 0x60
 800756a:	667a      	str	r2, [r7, #100]	@ 0x64
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007578:	4649      	mov	r1, r9
 800757a:	008b      	lsls	r3, r1, #2
 800757c:	4641      	mov	r1, r8
 800757e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007582:	4641      	mov	r1, r8
 8007584:	008a      	lsls	r2, r1, #2
 8007586:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800758a:	f7f8 fe71 	bl	8000270 <__aeabi_uldivmod>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4b0d      	ldr	r3, [pc, #52]	@ (80075c8 <UART_SetConfig+0x4e4>)
 8007594:	fba3 1302 	umull	r1, r3, r3, r2
 8007598:	095b      	lsrs	r3, r3, #5
 800759a:	2164      	movs	r1, #100	@ 0x64
 800759c:	fb01 f303 	mul.w	r3, r1, r3
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	3332      	adds	r3, #50	@ 0x32
 80075a6:	4a08      	ldr	r2, [pc, #32]	@ (80075c8 <UART_SetConfig+0x4e4>)
 80075a8:	fba2 2303 	umull	r2, r3, r2, r3
 80075ac:	095b      	lsrs	r3, r3, #5
 80075ae:	f003 020f 	and.w	r2, r3, #15
 80075b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4422      	add	r2, r4
 80075ba:	609a      	str	r2, [r3, #8]
}
 80075bc:	bf00      	nop
 80075be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80075c2:	46bd      	mov	sp, r7
 80075c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075c8:	51eb851f 	.word	0x51eb851f

080075cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075cc:	b084      	sub	sp, #16
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	f107 001c 	add.w	r0, r7, #28
 80075da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d123      	bne.n	800762e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80075fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800760e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007612:	2b01      	cmp	r3, #1
 8007614:	d105      	bne.n	8007622 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fdbc 	bl	80081a0 <USB_CoreReset>
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
 800762c:	e01b      	b.n	8007666 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fdb0 	bl	80081a0 <USB_CoreReset>
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007644:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007650:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	639a      	str	r2, [r3, #56]	@ 0x38
 8007658:	e005      	b.n	8007666 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007666:	7fbb      	ldrb	r3, [r7, #30]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d10b      	bne.n	8007684 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f043 0206 	orr.w	r2, r3, #6
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f043 0220 	orr.w	r2, r3, #32
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007690:	b004      	add	sp, #16
 8007692:	4770      	bx	lr

08007694 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	4613      	mov	r3, r2
 80076a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80076a2:	79fb      	ldrb	r3, [r7, #7]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d165      	bne.n	8007774 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	4a41      	ldr	r2, [pc, #260]	@ (80077b0 <USB_SetTurnaroundTime+0x11c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d906      	bls.n	80076be <USB_SetTurnaroundTime+0x2a>
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	4a40      	ldr	r2, [pc, #256]	@ (80077b4 <USB_SetTurnaroundTime+0x120>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d202      	bcs.n	80076be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80076b8:	230f      	movs	r3, #15
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	e062      	b.n	8007784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	4a3c      	ldr	r2, [pc, #240]	@ (80077b4 <USB_SetTurnaroundTime+0x120>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d306      	bcc.n	80076d4 <USB_SetTurnaroundTime+0x40>
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	4a3b      	ldr	r2, [pc, #236]	@ (80077b8 <USB_SetTurnaroundTime+0x124>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d202      	bcs.n	80076d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80076ce:	230e      	movs	r3, #14
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	e057      	b.n	8007784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4a38      	ldr	r2, [pc, #224]	@ (80077b8 <USB_SetTurnaroundTime+0x124>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d306      	bcc.n	80076ea <USB_SetTurnaroundTime+0x56>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	4a37      	ldr	r2, [pc, #220]	@ (80077bc <USB_SetTurnaroundTime+0x128>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d202      	bcs.n	80076ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80076e4:	230d      	movs	r3, #13
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	e04c      	b.n	8007784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	4a33      	ldr	r2, [pc, #204]	@ (80077bc <USB_SetTurnaroundTime+0x128>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d306      	bcc.n	8007700 <USB_SetTurnaroundTime+0x6c>
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	4a32      	ldr	r2, [pc, #200]	@ (80077c0 <USB_SetTurnaroundTime+0x12c>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d802      	bhi.n	8007700 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80076fa:	230c      	movs	r3, #12
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	e041      	b.n	8007784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	4a2f      	ldr	r2, [pc, #188]	@ (80077c0 <USB_SetTurnaroundTime+0x12c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d906      	bls.n	8007716 <USB_SetTurnaroundTime+0x82>
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4a2e      	ldr	r2, [pc, #184]	@ (80077c4 <USB_SetTurnaroundTime+0x130>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d802      	bhi.n	8007716 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007710:	230b      	movs	r3, #11
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	e036      	b.n	8007784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	4a2a      	ldr	r2, [pc, #168]	@ (80077c4 <USB_SetTurnaroundTime+0x130>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d906      	bls.n	800772c <USB_SetTurnaroundTime+0x98>
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	4a29      	ldr	r2, [pc, #164]	@ (80077c8 <USB_SetTurnaroundTime+0x134>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d802      	bhi.n	800772c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007726:	230a      	movs	r3, #10
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	e02b      	b.n	8007784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4a26      	ldr	r2, [pc, #152]	@ (80077c8 <USB_SetTurnaroundTime+0x134>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d906      	bls.n	8007742 <USB_SetTurnaroundTime+0xae>
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4a25      	ldr	r2, [pc, #148]	@ (80077cc <USB_SetTurnaroundTime+0x138>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d202      	bcs.n	8007742 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800773c:	2309      	movs	r3, #9
 800773e:	617b      	str	r3, [r7, #20]
 8007740:	e020      	b.n	8007784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4a21      	ldr	r2, [pc, #132]	@ (80077cc <USB_SetTurnaroundTime+0x138>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d306      	bcc.n	8007758 <USB_SetTurnaroundTime+0xc4>
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4a20      	ldr	r2, [pc, #128]	@ (80077d0 <USB_SetTurnaroundTime+0x13c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d802      	bhi.n	8007758 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007752:	2308      	movs	r3, #8
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	e015      	b.n	8007784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	4a1d      	ldr	r2, [pc, #116]	@ (80077d0 <USB_SetTurnaroundTime+0x13c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d906      	bls.n	800776e <USB_SetTurnaroundTime+0xda>
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4a1c      	ldr	r2, [pc, #112]	@ (80077d4 <USB_SetTurnaroundTime+0x140>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d202      	bcs.n	800776e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007768:	2307      	movs	r3, #7
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	e00a      	b.n	8007784 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800776e:	2306      	movs	r3, #6
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	e007      	b.n	8007784 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007774:	79fb      	ldrb	r3, [r7, #7]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d102      	bne.n	8007780 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800777a:	2309      	movs	r3, #9
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	e001      	b.n	8007784 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007780:	2309      	movs	r3, #9
 8007782:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	029b      	lsls	r3, r3, #10
 8007798:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800779c:	431a      	orrs	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	371c      	adds	r7, #28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	00d8acbf 	.word	0x00d8acbf
 80077b4:	00e4e1c0 	.word	0x00e4e1c0
 80077b8:	00f42400 	.word	0x00f42400
 80077bc:	01067380 	.word	0x01067380
 80077c0:	011a499f 	.word	0x011a499f
 80077c4:	01312cff 	.word	0x01312cff
 80077c8:	014ca43f 	.word	0x014ca43f
 80077cc:	016e3600 	.word	0x016e3600
 80077d0:	01a6ab1f 	.word	0x01a6ab1f
 80077d4:	01e84800 	.word	0x01e84800

080077d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f023 0201 	bic.w	r2, r3, #1
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	460b      	mov	r3, r1
 8007804:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d115      	bne.n	8007848 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007828:	200a      	movs	r0, #10
 800782a:	f7fa f9c7 	bl	8001bbc <HAL_Delay>
      ms += 10U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	330a      	adds	r3, #10
 8007832:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fc23 	bl	8008080 <USB_GetMode>
 800783a:	4603      	mov	r3, r0
 800783c:	2b01      	cmp	r3, #1
 800783e:	d01e      	beq.n	800787e <USB_SetCurrentMode+0x84>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2bc7      	cmp	r3, #199	@ 0xc7
 8007844:	d9f0      	bls.n	8007828 <USB_SetCurrentMode+0x2e>
 8007846:	e01a      	b.n	800787e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007848:	78fb      	ldrb	r3, [r7, #3]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d115      	bne.n	800787a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800785a:	200a      	movs	r0, #10
 800785c:	f7fa f9ae 	bl	8001bbc <HAL_Delay>
      ms += 10U;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	330a      	adds	r3, #10
 8007864:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fc0a 	bl	8008080 <USB_GetMode>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d005      	beq.n	800787e <USB_SetCurrentMode+0x84>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2bc7      	cmp	r3, #199	@ 0xc7
 8007876:	d9f0      	bls.n	800785a <USB_SetCurrentMode+0x60>
 8007878:	e001      	b.n	800787e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e005      	b.n	800788a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2bc8      	cmp	r3, #200	@ 0xc8
 8007882:	d101      	bne.n	8007888 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e000      	b.n	800788a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007894:	b084      	sub	sp, #16
 8007896:	b580      	push	{r7, lr}
 8007898:	b086      	sub	sp, #24
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80078a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078ae:	2300      	movs	r3, #0
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	e009      	b.n	80078c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	3340      	adds	r3, #64	@ 0x40
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	2200      	movs	r2, #0
 80078c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	3301      	adds	r3, #1
 80078c6:	613b      	str	r3, [r7, #16]
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2b0e      	cmp	r3, #14
 80078cc:	d9f2      	bls.n	80078b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d11c      	bne.n	8007910 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078e4:	f043 0302 	orr.w	r3, r3, #2
 80078e8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007906:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	639a      	str	r2, [r3, #56]	@ 0x38
 800790e:	e00b      	b.n	8007928 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007914:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007920:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800792e:	461a      	mov	r2, r3
 8007930:	2300      	movs	r3, #0
 8007932:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007934:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007938:	2b01      	cmp	r3, #1
 800793a:	d10d      	bne.n	8007958 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800793c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007940:	2b00      	cmp	r3, #0
 8007942:	d104      	bne.n	800794e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007944:	2100      	movs	r1, #0
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f968 	bl	8007c1c <USB_SetDevSpeed>
 800794c:	e008      	b.n	8007960 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800794e:	2101      	movs	r1, #1
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f963 	bl	8007c1c <USB_SetDevSpeed>
 8007956:	e003      	b.n	8007960 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007958:	2103      	movs	r1, #3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f95e 	bl	8007c1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007960:	2110      	movs	r1, #16
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f8fa 	bl	8007b5c <USB_FlushTxFifo>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f924 	bl	8007bc0 <USB_FlushRxFifo>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007988:	461a      	mov	r2, r3
 800798a:	2300      	movs	r3, #0
 800798c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007994:	461a      	mov	r2, r3
 8007996:	2300      	movs	r3, #0
 8007998:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079a0:	461a      	mov	r2, r3
 80079a2:	2300      	movs	r3, #0
 80079a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079a6:	2300      	movs	r3, #0
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	e043      	b.n	8007a34 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079c2:	d118      	bne.n	80079f6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d6:	461a      	mov	r2, r3
 80079d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	e013      	b.n	8007a08 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ec:	461a      	mov	r2, r3
 80079ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	e008      	b.n	8007a08 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a02:	461a      	mov	r2, r3
 8007a04:	2300      	movs	r3, #0
 8007a06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a14:	461a      	mov	r2, r3
 8007a16:	2300      	movs	r3, #0
 8007a18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a26:	461a      	mov	r2, r3
 8007a28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	3301      	adds	r3, #1
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a38:	461a      	mov	r2, r3
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d3b5      	bcc.n	80079ac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a40:	2300      	movs	r3, #0
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	e043      	b.n	8007ace <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a5c:	d118      	bne.n	8007a90 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a70:	461a      	mov	r2, r3
 8007a72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	e013      	b.n	8007aa2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a86:	461a      	mov	r2, r3
 8007a88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	e008      	b.n	8007aa2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aae:	461a      	mov	r2, r3
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ac6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	3301      	adds	r3, #1
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d3b5      	bcc.n	8007a46 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007aec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007afa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007afc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d105      	bne.n	8007b10 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	f043 0210 	orr.w	r2, r3, #16
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699a      	ldr	r2, [r3, #24]
 8007b14:	4b10      	ldr	r3, [pc, #64]	@ (8007b58 <USB_DevInit+0x2c4>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	f043 0208 	orr.w	r2, r3, #8
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d107      	bne.n	8007b48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b40:	f043 0304 	orr.w	r3, r3, #4
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3718      	adds	r7, #24
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b54:	b004      	add	sp, #16
 8007b56:	4770      	bx	lr
 8007b58:	803c3800 	.word	0x803c3800

08007b5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b76:	d901      	bls.n	8007b7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e01b      	b.n	8007bb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	daf2      	bge.n	8007b6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	019b      	lsls	r3, r3, #6
 8007b8c:	f043 0220 	orr.w	r2, r3, #32
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3301      	adds	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ba0:	d901      	bls.n	8007ba6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e006      	b.n	8007bb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d0f0      	beq.n	8007b94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bd8:	d901      	bls.n	8007bde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e018      	b.n	8007c10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	daf2      	bge.n	8007bcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2210      	movs	r2, #16
 8007bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bfc:	d901      	bls.n	8007c02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e006      	b.n	8007c10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0310 	and.w	r3, r3, #16
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	d0f0      	beq.n	8007bf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	68f9      	ldr	r1, [r7, #12]
 8007c38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b087      	sub	sp, #28
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f003 0306 	and.w	r3, r3, #6
 8007c66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]
 8007c72:	e00a      	b.n	8007c8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d002      	beq.n	8007c80 <USB_GetDevSpeed+0x32>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b06      	cmp	r3, #6
 8007c7e:	d102      	bne.n	8007c86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007c80:	2302      	movs	r3, #2
 8007c82:	75fb      	strb	r3, [r7, #23]
 8007c84:	e001      	b.n	8007c8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007c86:	230f      	movs	r3, #15
 8007c88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	785b      	ldrb	r3, [r3, #1]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d14a      	bne.n	8007d4c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cce:	f040 8086 	bne.w	8007dde <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	7812      	ldrb	r2, [r2, #0]
 8007ce6:	0151      	lsls	r1, r2, #5
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	440a      	add	r2, r1
 8007cec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cf0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007cf4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	7812      	ldrb	r2, [r2, #0]
 8007d0a:	0151      	lsls	r1, r2, #5
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	440a      	add	r2, r1
 8007d10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d902      	bls.n	8007d30 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d2e:	e056      	b.n	8007dde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d48:	d0e7      	beq.n	8007d1a <USB_EPStopXfer+0x82>
 8007d4a:	e048      	b.n	8007dde <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d64:	d13b      	bne.n	8007dde <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	7812      	ldrb	r2, [r2, #0]
 8007d7a:	0151      	lsls	r1, r2, #5
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	440a      	add	r2, r1
 8007d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d88:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	7812      	ldrb	r2, [r2, #0]
 8007d9e:	0151      	lsls	r1, r2, #5
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	440a      	add	r2, r1
 8007da4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007da8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3301      	adds	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d902      	bls.n	8007dc4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8007dc2:	e00c      	b.n	8007dde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ddc:	d0e7      	beq.n	8007dae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	371c      	adds	r7, #28
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b089      	sub	sp, #36	@ 0x24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	4611      	mov	r1, r2
 8007df8:	461a      	mov	r2, r3
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	71fb      	strb	r3, [r7, #7]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d123      	bne.n	8007e5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e12:	88bb      	ldrh	r3, [r7, #4]
 8007e14:	3303      	adds	r3, #3
 8007e16:	089b      	lsrs	r3, r3, #2
 8007e18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61bb      	str	r3, [r7, #24]
 8007e1e:	e018      	b.n	8007e52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	031a      	lsls	r2, r3, #12
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	3301      	adds	r3, #1
 8007e38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	3301      	adds	r3, #1
 8007e44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d3e2      	bcc.n	8007e20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3724      	adds	r7, #36	@ 0x24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b08b      	sub	sp, #44	@ 0x2c
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	4613      	mov	r3, r2
 8007e74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e7e:	88fb      	ldrh	r3, [r7, #6]
 8007e80:	089b      	lsrs	r3, r3, #2
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e8e:	2300      	movs	r3, #0
 8007e90:	623b      	str	r3, [r7, #32]
 8007e92:	e014      	b.n	8007ebe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eae:	3301      	adds	r3, #1
 8007eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	623b      	str	r3, [r7, #32]
 8007ebe:	6a3a      	ldr	r2, [r7, #32]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d3e6      	bcc.n	8007e94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ec6:	8bfb      	ldrh	r3, [r7, #30]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d01e      	beq.n	8007f0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f107 0310 	add.w	r3, r7, #16
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	701a      	strb	r2, [r3, #0]
      i++;
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efa:	3301      	adds	r3, #1
 8007efc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007efe:	8bfb      	ldrh	r3, [r7, #30]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f04:	8bfb      	ldrh	r3, [r7, #30]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1ea      	bne.n	8007ee0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	372c      	adds	r7, #44	@ 0x2c
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f32:	f023 0303 	bic.w	r3, r3, #3
 8007f36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f46:	f043 0302 	orr.w	r3, r3, #2
 8007f4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b085      	sub	sp, #20
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f72:	68fb      	ldr	r3, [r7, #12]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	0c1b      	lsrs	r3, r3, #16
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	b29b      	uxth	r3, r3
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	4013      	ands	r3, r2
 8008014:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008016:	68bb      	ldr	r3, [r7, #8]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008046:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008048:	78fb      	ldrb	r3, [r7, #3]
 800804a:	f003 030f 	and.w	r3, r3, #15
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	fa22 f303 	lsr.w	r3, r2, r3
 8008054:	01db      	lsls	r3, r3, #7
 8008056:	b2db      	uxtb	r3, r3
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	4313      	orrs	r3, r2
 800805c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	4013      	ands	r3, r2
 8008070:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008072:	68bb      	ldr	r3, [r7, #8]
}
 8008074:	4618      	mov	r0, r3
 8008076:	371c      	adds	r7, #28
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	f003 0301 	and.w	r3, r3, #1
}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80080ba:	f023 0307 	bic.w	r3, r3, #7
 80080be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
	...

080080e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	460b      	mov	r3, r1
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	333c      	adds	r3, #60	@ 0x3c
 80080fa:	3304      	adds	r3, #4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	4a26      	ldr	r2, [pc, #152]	@ (800819c <USB_EP0_OutStart+0xb8>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d90a      	bls.n	800811e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008114:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008118:	d101      	bne.n	800811e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	e037      	b.n	800818e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008124:	461a      	mov	r2, r3
 8008126:	2300      	movs	r3, #0
 8008128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008138:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800813c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800814c:	f043 0318 	orr.w	r3, r3, #24
 8008150:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008160:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008164:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d10f      	bne.n	800818c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008172:	461a      	mov	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008186:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800818a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	4f54300a 	.word	0x4f54300a

080081a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3301      	adds	r3, #1
 80081b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081b8:	d901      	bls.n	80081be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e01b      	b.n	80081f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	daf2      	bge.n	80081ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	f043 0201 	orr.w	r2, r3, #1
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3301      	adds	r3, #1
 80081da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081e2:	d901      	bls.n	80081e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e006      	b.n	80081f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d0f0      	beq.n	80081d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
	...

08008204 <std>:
 8008204:	2300      	movs	r3, #0
 8008206:	b510      	push	{r4, lr}
 8008208:	4604      	mov	r4, r0
 800820a:	e9c0 3300 	strd	r3, r3, [r0]
 800820e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008212:	6083      	str	r3, [r0, #8]
 8008214:	8181      	strh	r1, [r0, #12]
 8008216:	6643      	str	r3, [r0, #100]	@ 0x64
 8008218:	81c2      	strh	r2, [r0, #14]
 800821a:	6183      	str	r3, [r0, #24]
 800821c:	4619      	mov	r1, r3
 800821e:	2208      	movs	r2, #8
 8008220:	305c      	adds	r0, #92	@ 0x5c
 8008222:	f000 f921 	bl	8008468 <memset>
 8008226:	4b0d      	ldr	r3, [pc, #52]	@ (800825c <std+0x58>)
 8008228:	6263      	str	r3, [r4, #36]	@ 0x24
 800822a:	4b0d      	ldr	r3, [pc, #52]	@ (8008260 <std+0x5c>)
 800822c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800822e:	4b0d      	ldr	r3, [pc, #52]	@ (8008264 <std+0x60>)
 8008230:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008232:	4b0d      	ldr	r3, [pc, #52]	@ (8008268 <std+0x64>)
 8008234:	6323      	str	r3, [r4, #48]	@ 0x30
 8008236:	4b0d      	ldr	r3, [pc, #52]	@ (800826c <std+0x68>)
 8008238:	6224      	str	r4, [r4, #32]
 800823a:	429c      	cmp	r4, r3
 800823c:	d006      	beq.n	800824c <std+0x48>
 800823e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008242:	4294      	cmp	r4, r2
 8008244:	d002      	beq.n	800824c <std+0x48>
 8008246:	33d0      	adds	r3, #208	@ 0xd0
 8008248:	429c      	cmp	r4, r3
 800824a:	d105      	bne.n	8008258 <std+0x54>
 800824c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008254:	f000 b93a 	b.w	80084cc <__retarget_lock_init_recursive>
 8008258:	bd10      	pop	{r4, pc}
 800825a:	bf00      	nop
 800825c:	08008d21 	.word	0x08008d21
 8008260:	08008d43 	.word	0x08008d43
 8008264:	08008d7b 	.word	0x08008d7b
 8008268:	08008d9f 	.word	0x08008d9f
 800826c:	20000c7c 	.word	0x20000c7c

08008270 <stdio_exit_handler>:
 8008270:	4a02      	ldr	r2, [pc, #8]	@ (800827c <stdio_exit_handler+0xc>)
 8008272:	4903      	ldr	r1, [pc, #12]	@ (8008280 <stdio_exit_handler+0x10>)
 8008274:	4803      	ldr	r0, [pc, #12]	@ (8008284 <stdio_exit_handler+0x14>)
 8008276:	f000 b869 	b.w	800834c <_fwalk_sglue>
 800827a:	bf00      	nop
 800827c:	20000014 	.word	0x20000014
 8008280:	08008cb9 	.word	0x08008cb9
 8008284:	20000024 	.word	0x20000024

08008288 <cleanup_stdio>:
 8008288:	6841      	ldr	r1, [r0, #4]
 800828a:	4b0c      	ldr	r3, [pc, #48]	@ (80082bc <cleanup_stdio+0x34>)
 800828c:	4299      	cmp	r1, r3
 800828e:	b510      	push	{r4, lr}
 8008290:	4604      	mov	r4, r0
 8008292:	d001      	beq.n	8008298 <cleanup_stdio+0x10>
 8008294:	f000 fd10 	bl	8008cb8 <_fflush_r>
 8008298:	68a1      	ldr	r1, [r4, #8]
 800829a:	4b09      	ldr	r3, [pc, #36]	@ (80082c0 <cleanup_stdio+0x38>)
 800829c:	4299      	cmp	r1, r3
 800829e:	d002      	beq.n	80082a6 <cleanup_stdio+0x1e>
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 fd09 	bl	8008cb8 <_fflush_r>
 80082a6:	68e1      	ldr	r1, [r4, #12]
 80082a8:	4b06      	ldr	r3, [pc, #24]	@ (80082c4 <cleanup_stdio+0x3c>)
 80082aa:	4299      	cmp	r1, r3
 80082ac:	d004      	beq.n	80082b8 <cleanup_stdio+0x30>
 80082ae:	4620      	mov	r0, r4
 80082b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b4:	f000 bd00 	b.w	8008cb8 <_fflush_r>
 80082b8:	bd10      	pop	{r4, pc}
 80082ba:	bf00      	nop
 80082bc:	20000c7c 	.word	0x20000c7c
 80082c0:	20000ce4 	.word	0x20000ce4
 80082c4:	20000d4c 	.word	0x20000d4c

080082c8 <global_stdio_init.part.0>:
 80082c8:	b510      	push	{r4, lr}
 80082ca:	4b0b      	ldr	r3, [pc, #44]	@ (80082f8 <global_stdio_init.part.0+0x30>)
 80082cc:	4c0b      	ldr	r4, [pc, #44]	@ (80082fc <global_stdio_init.part.0+0x34>)
 80082ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008300 <global_stdio_init.part.0+0x38>)
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	4620      	mov	r0, r4
 80082d4:	2200      	movs	r2, #0
 80082d6:	2104      	movs	r1, #4
 80082d8:	f7ff ff94 	bl	8008204 <std>
 80082dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80082e0:	2201      	movs	r2, #1
 80082e2:	2109      	movs	r1, #9
 80082e4:	f7ff ff8e 	bl	8008204 <std>
 80082e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80082ec:	2202      	movs	r2, #2
 80082ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082f2:	2112      	movs	r1, #18
 80082f4:	f7ff bf86 	b.w	8008204 <std>
 80082f8:	20000db4 	.word	0x20000db4
 80082fc:	20000c7c 	.word	0x20000c7c
 8008300:	08008271 	.word	0x08008271

08008304 <__sfp_lock_acquire>:
 8008304:	4801      	ldr	r0, [pc, #4]	@ (800830c <__sfp_lock_acquire+0x8>)
 8008306:	f000 b8e2 	b.w	80084ce <__retarget_lock_acquire_recursive>
 800830a:	bf00      	nop
 800830c:	20000db9 	.word	0x20000db9

08008310 <__sfp_lock_release>:
 8008310:	4801      	ldr	r0, [pc, #4]	@ (8008318 <__sfp_lock_release+0x8>)
 8008312:	f000 b8dd 	b.w	80084d0 <__retarget_lock_release_recursive>
 8008316:	bf00      	nop
 8008318:	20000db9 	.word	0x20000db9

0800831c <__sinit>:
 800831c:	b510      	push	{r4, lr}
 800831e:	4604      	mov	r4, r0
 8008320:	f7ff fff0 	bl	8008304 <__sfp_lock_acquire>
 8008324:	6a23      	ldr	r3, [r4, #32]
 8008326:	b11b      	cbz	r3, 8008330 <__sinit+0x14>
 8008328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800832c:	f7ff bff0 	b.w	8008310 <__sfp_lock_release>
 8008330:	4b04      	ldr	r3, [pc, #16]	@ (8008344 <__sinit+0x28>)
 8008332:	6223      	str	r3, [r4, #32]
 8008334:	4b04      	ldr	r3, [pc, #16]	@ (8008348 <__sinit+0x2c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1f5      	bne.n	8008328 <__sinit+0xc>
 800833c:	f7ff ffc4 	bl	80082c8 <global_stdio_init.part.0>
 8008340:	e7f2      	b.n	8008328 <__sinit+0xc>
 8008342:	bf00      	nop
 8008344:	08008289 	.word	0x08008289
 8008348:	20000db4 	.word	0x20000db4

0800834c <_fwalk_sglue>:
 800834c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008350:	4607      	mov	r7, r0
 8008352:	4688      	mov	r8, r1
 8008354:	4614      	mov	r4, r2
 8008356:	2600      	movs	r6, #0
 8008358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800835c:	f1b9 0901 	subs.w	r9, r9, #1
 8008360:	d505      	bpl.n	800836e <_fwalk_sglue+0x22>
 8008362:	6824      	ldr	r4, [r4, #0]
 8008364:	2c00      	cmp	r4, #0
 8008366:	d1f7      	bne.n	8008358 <_fwalk_sglue+0xc>
 8008368:	4630      	mov	r0, r6
 800836a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800836e:	89ab      	ldrh	r3, [r5, #12]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d907      	bls.n	8008384 <_fwalk_sglue+0x38>
 8008374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008378:	3301      	adds	r3, #1
 800837a:	d003      	beq.n	8008384 <_fwalk_sglue+0x38>
 800837c:	4629      	mov	r1, r5
 800837e:	4638      	mov	r0, r7
 8008380:	47c0      	blx	r8
 8008382:	4306      	orrs	r6, r0
 8008384:	3568      	adds	r5, #104	@ 0x68
 8008386:	e7e9      	b.n	800835c <_fwalk_sglue+0x10>

08008388 <iprintf>:
 8008388:	b40f      	push	{r0, r1, r2, r3}
 800838a:	b507      	push	{r0, r1, r2, lr}
 800838c:	4906      	ldr	r1, [pc, #24]	@ (80083a8 <iprintf+0x20>)
 800838e:	ab04      	add	r3, sp, #16
 8008390:	6808      	ldr	r0, [r1, #0]
 8008392:	f853 2b04 	ldr.w	r2, [r3], #4
 8008396:	6881      	ldr	r1, [r0, #8]
 8008398:	9301      	str	r3, [sp, #4]
 800839a:	f000 f8c3 	bl	8008524 <_vfiprintf_r>
 800839e:	b003      	add	sp, #12
 80083a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083a4:	b004      	add	sp, #16
 80083a6:	4770      	bx	lr
 80083a8:	20000020 	.word	0x20000020

080083ac <_puts_r>:
 80083ac:	6a03      	ldr	r3, [r0, #32]
 80083ae:	b570      	push	{r4, r5, r6, lr}
 80083b0:	6884      	ldr	r4, [r0, #8]
 80083b2:	4605      	mov	r5, r0
 80083b4:	460e      	mov	r6, r1
 80083b6:	b90b      	cbnz	r3, 80083bc <_puts_r+0x10>
 80083b8:	f7ff ffb0 	bl	800831c <__sinit>
 80083bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083be:	07db      	lsls	r3, r3, #31
 80083c0:	d405      	bmi.n	80083ce <_puts_r+0x22>
 80083c2:	89a3      	ldrh	r3, [r4, #12]
 80083c4:	0598      	lsls	r0, r3, #22
 80083c6:	d402      	bmi.n	80083ce <_puts_r+0x22>
 80083c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083ca:	f000 f880 	bl	80084ce <__retarget_lock_acquire_recursive>
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	0719      	lsls	r1, r3, #28
 80083d2:	d502      	bpl.n	80083da <_puts_r+0x2e>
 80083d4:	6923      	ldr	r3, [r4, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d135      	bne.n	8008446 <_puts_r+0x9a>
 80083da:	4621      	mov	r1, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	f000 fd21 	bl	8008e24 <__swsetup_r>
 80083e2:	b380      	cbz	r0, 8008446 <_puts_r+0x9a>
 80083e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80083e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083ea:	07da      	lsls	r2, r3, #31
 80083ec:	d405      	bmi.n	80083fa <_puts_r+0x4e>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	059b      	lsls	r3, r3, #22
 80083f2:	d402      	bmi.n	80083fa <_puts_r+0x4e>
 80083f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083f6:	f000 f86b 	bl	80084d0 <__retarget_lock_release_recursive>
 80083fa:	4628      	mov	r0, r5
 80083fc:	bd70      	pop	{r4, r5, r6, pc}
 80083fe:	2b00      	cmp	r3, #0
 8008400:	da04      	bge.n	800840c <_puts_r+0x60>
 8008402:	69a2      	ldr	r2, [r4, #24]
 8008404:	429a      	cmp	r2, r3
 8008406:	dc17      	bgt.n	8008438 <_puts_r+0x8c>
 8008408:	290a      	cmp	r1, #10
 800840a:	d015      	beq.n	8008438 <_puts_r+0x8c>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	6022      	str	r2, [r4, #0]
 8008412:	7019      	strb	r1, [r3, #0]
 8008414:	68a3      	ldr	r3, [r4, #8]
 8008416:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800841a:	3b01      	subs	r3, #1
 800841c:	60a3      	str	r3, [r4, #8]
 800841e:	2900      	cmp	r1, #0
 8008420:	d1ed      	bne.n	80083fe <_puts_r+0x52>
 8008422:	2b00      	cmp	r3, #0
 8008424:	da11      	bge.n	800844a <_puts_r+0x9e>
 8008426:	4622      	mov	r2, r4
 8008428:	210a      	movs	r1, #10
 800842a:	4628      	mov	r0, r5
 800842c:	f000 fcbb 	bl	8008da6 <__swbuf_r>
 8008430:	3001      	adds	r0, #1
 8008432:	d0d7      	beq.n	80083e4 <_puts_r+0x38>
 8008434:	250a      	movs	r5, #10
 8008436:	e7d7      	b.n	80083e8 <_puts_r+0x3c>
 8008438:	4622      	mov	r2, r4
 800843a:	4628      	mov	r0, r5
 800843c:	f000 fcb3 	bl	8008da6 <__swbuf_r>
 8008440:	3001      	adds	r0, #1
 8008442:	d1e7      	bne.n	8008414 <_puts_r+0x68>
 8008444:	e7ce      	b.n	80083e4 <_puts_r+0x38>
 8008446:	3e01      	subs	r6, #1
 8008448:	e7e4      	b.n	8008414 <_puts_r+0x68>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	6022      	str	r2, [r4, #0]
 8008450:	220a      	movs	r2, #10
 8008452:	701a      	strb	r2, [r3, #0]
 8008454:	e7ee      	b.n	8008434 <_puts_r+0x88>
	...

08008458 <puts>:
 8008458:	4b02      	ldr	r3, [pc, #8]	@ (8008464 <puts+0xc>)
 800845a:	4601      	mov	r1, r0
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	f7ff bfa5 	b.w	80083ac <_puts_r>
 8008462:	bf00      	nop
 8008464:	20000020 	.word	0x20000020

08008468 <memset>:
 8008468:	4402      	add	r2, r0
 800846a:	4603      	mov	r3, r0
 800846c:	4293      	cmp	r3, r2
 800846e:	d100      	bne.n	8008472 <memset+0xa>
 8008470:	4770      	bx	lr
 8008472:	f803 1b01 	strb.w	r1, [r3], #1
 8008476:	e7f9      	b.n	800846c <memset+0x4>

08008478 <__errno>:
 8008478:	4b01      	ldr	r3, [pc, #4]	@ (8008480 <__errno+0x8>)
 800847a:	6818      	ldr	r0, [r3, #0]
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	20000020 	.word	0x20000020

08008484 <__libc_init_array>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	4d0d      	ldr	r5, [pc, #52]	@ (80084bc <__libc_init_array+0x38>)
 8008488:	4c0d      	ldr	r4, [pc, #52]	@ (80084c0 <__libc_init_array+0x3c>)
 800848a:	1b64      	subs	r4, r4, r5
 800848c:	10a4      	asrs	r4, r4, #2
 800848e:	2600      	movs	r6, #0
 8008490:	42a6      	cmp	r6, r4
 8008492:	d109      	bne.n	80084a8 <__libc_init_array+0x24>
 8008494:	4d0b      	ldr	r5, [pc, #44]	@ (80084c4 <__libc_init_array+0x40>)
 8008496:	4c0c      	ldr	r4, [pc, #48]	@ (80084c8 <__libc_init_array+0x44>)
 8008498:	f000 fe3e 	bl	8009118 <_init>
 800849c:	1b64      	subs	r4, r4, r5
 800849e:	10a4      	asrs	r4, r4, #2
 80084a0:	2600      	movs	r6, #0
 80084a2:	42a6      	cmp	r6, r4
 80084a4:	d105      	bne.n	80084b2 <__libc_init_array+0x2e>
 80084a6:	bd70      	pop	{r4, r5, r6, pc}
 80084a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ac:	4798      	blx	r3
 80084ae:	3601      	adds	r6, #1
 80084b0:	e7ee      	b.n	8008490 <__libc_init_array+0xc>
 80084b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b6:	4798      	blx	r3
 80084b8:	3601      	adds	r6, #1
 80084ba:	e7f2      	b.n	80084a2 <__libc_init_array+0x1e>
 80084bc:	080091cc 	.word	0x080091cc
 80084c0:	080091cc 	.word	0x080091cc
 80084c4:	080091cc 	.word	0x080091cc
 80084c8:	080091d0 	.word	0x080091d0

080084cc <__retarget_lock_init_recursive>:
 80084cc:	4770      	bx	lr

080084ce <__retarget_lock_acquire_recursive>:
 80084ce:	4770      	bx	lr

080084d0 <__retarget_lock_release_recursive>:
 80084d0:	4770      	bx	lr

080084d2 <__sfputc_r>:
 80084d2:	6893      	ldr	r3, [r2, #8]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	b410      	push	{r4}
 80084da:	6093      	str	r3, [r2, #8]
 80084dc:	da08      	bge.n	80084f0 <__sfputc_r+0x1e>
 80084de:	6994      	ldr	r4, [r2, #24]
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	db01      	blt.n	80084e8 <__sfputc_r+0x16>
 80084e4:	290a      	cmp	r1, #10
 80084e6:	d103      	bne.n	80084f0 <__sfputc_r+0x1e>
 80084e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ec:	f000 bc5b 	b.w	8008da6 <__swbuf_r>
 80084f0:	6813      	ldr	r3, [r2, #0]
 80084f2:	1c58      	adds	r0, r3, #1
 80084f4:	6010      	str	r0, [r2, #0]
 80084f6:	7019      	strb	r1, [r3, #0]
 80084f8:	4608      	mov	r0, r1
 80084fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <__sfputs_r>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	4606      	mov	r6, r0
 8008504:	460f      	mov	r7, r1
 8008506:	4614      	mov	r4, r2
 8008508:	18d5      	adds	r5, r2, r3
 800850a:	42ac      	cmp	r4, r5
 800850c:	d101      	bne.n	8008512 <__sfputs_r+0x12>
 800850e:	2000      	movs	r0, #0
 8008510:	e007      	b.n	8008522 <__sfputs_r+0x22>
 8008512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008516:	463a      	mov	r2, r7
 8008518:	4630      	mov	r0, r6
 800851a:	f7ff ffda 	bl	80084d2 <__sfputc_r>
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	d1f3      	bne.n	800850a <__sfputs_r+0xa>
 8008522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008524 <_vfiprintf_r>:
 8008524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	460d      	mov	r5, r1
 800852a:	b09d      	sub	sp, #116	@ 0x74
 800852c:	4614      	mov	r4, r2
 800852e:	4698      	mov	r8, r3
 8008530:	4606      	mov	r6, r0
 8008532:	b118      	cbz	r0, 800853c <_vfiprintf_r+0x18>
 8008534:	6a03      	ldr	r3, [r0, #32]
 8008536:	b90b      	cbnz	r3, 800853c <_vfiprintf_r+0x18>
 8008538:	f7ff fef0 	bl	800831c <__sinit>
 800853c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800853e:	07d9      	lsls	r1, r3, #31
 8008540:	d405      	bmi.n	800854e <_vfiprintf_r+0x2a>
 8008542:	89ab      	ldrh	r3, [r5, #12]
 8008544:	059a      	lsls	r2, r3, #22
 8008546:	d402      	bmi.n	800854e <_vfiprintf_r+0x2a>
 8008548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800854a:	f7ff ffc0 	bl	80084ce <__retarget_lock_acquire_recursive>
 800854e:	89ab      	ldrh	r3, [r5, #12]
 8008550:	071b      	lsls	r3, r3, #28
 8008552:	d501      	bpl.n	8008558 <_vfiprintf_r+0x34>
 8008554:	692b      	ldr	r3, [r5, #16]
 8008556:	b99b      	cbnz	r3, 8008580 <_vfiprintf_r+0x5c>
 8008558:	4629      	mov	r1, r5
 800855a:	4630      	mov	r0, r6
 800855c:	f000 fc62 	bl	8008e24 <__swsetup_r>
 8008560:	b170      	cbz	r0, 8008580 <_vfiprintf_r+0x5c>
 8008562:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008564:	07dc      	lsls	r4, r3, #31
 8008566:	d504      	bpl.n	8008572 <_vfiprintf_r+0x4e>
 8008568:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800856c:	b01d      	add	sp, #116	@ 0x74
 800856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	0598      	lsls	r0, r3, #22
 8008576:	d4f7      	bmi.n	8008568 <_vfiprintf_r+0x44>
 8008578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800857a:	f7ff ffa9 	bl	80084d0 <__retarget_lock_release_recursive>
 800857e:	e7f3      	b.n	8008568 <_vfiprintf_r+0x44>
 8008580:	2300      	movs	r3, #0
 8008582:	9309      	str	r3, [sp, #36]	@ 0x24
 8008584:	2320      	movs	r3, #32
 8008586:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800858a:	f8cd 800c 	str.w	r8, [sp, #12]
 800858e:	2330      	movs	r3, #48	@ 0x30
 8008590:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008740 <_vfiprintf_r+0x21c>
 8008594:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008598:	f04f 0901 	mov.w	r9, #1
 800859c:	4623      	mov	r3, r4
 800859e:	469a      	mov	sl, r3
 80085a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085a4:	b10a      	cbz	r2, 80085aa <_vfiprintf_r+0x86>
 80085a6:	2a25      	cmp	r2, #37	@ 0x25
 80085a8:	d1f9      	bne.n	800859e <_vfiprintf_r+0x7a>
 80085aa:	ebba 0b04 	subs.w	fp, sl, r4
 80085ae:	d00b      	beq.n	80085c8 <_vfiprintf_r+0xa4>
 80085b0:	465b      	mov	r3, fp
 80085b2:	4622      	mov	r2, r4
 80085b4:	4629      	mov	r1, r5
 80085b6:	4630      	mov	r0, r6
 80085b8:	f7ff ffa2 	bl	8008500 <__sfputs_r>
 80085bc:	3001      	adds	r0, #1
 80085be:	f000 80a7 	beq.w	8008710 <_vfiprintf_r+0x1ec>
 80085c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085c4:	445a      	add	r2, fp
 80085c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80085c8:	f89a 3000 	ldrb.w	r3, [sl]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 809f 	beq.w	8008710 <_vfiprintf_r+0x1ec>
 80085d2:	2300      	movs	r3, #0
 80085d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085dc:	f10a 0a01 	add.w	sl, sl, #1
 80085e0:	9304      	str	r3, [sp, #16]
 80085e2:	9307      	str	r3, [sp, #28]
 80085e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80085ea:	4654      	mov	r4, sl
 80085ec:	2205      	movs	r2, #5
 80085ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f2:	4853      	ldr	r0, [pc, #332]	@ (8008740 <_vfiprintf_r+0x21c>)
 80085f4:	f7f7 fdec 	bl	80001d0 <memchr>
 80085f8:	9a04      	ldr	r2, [sp, #16]
 80085fa:	b9d8      	cbnz	r0, 8008634 <_vfiprintf_r+0x110>
 80085fc:	06d1      	lsls	r1, r2, #27
 80085fe:	bf44      	itt	mi
 8008600:	2320      	movmi	r3, #32
 8008602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008606:	0713      	lsls	r3, r2, #28
 8008608:	bf44      	itt	mi
 800860a:	232b      	movmi	r3, #43	@ 0x2b
 800860c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008610:	f89a 3000 	ldrb.w	r3, [sl]
 8008614:	2b2a      	cmp	r3, #42	@ 0x2a
 8008616:	d015      	beq.n	8008644 <_vfiprintf_r+0x120>
 8008618:	9a07      	ldr	r2, [sp, #28]
 800861a:	4654      	mov	r4, sl
 800861c:	2000      	movs	r0, #0
 800861e:	f04f 0c0a 	mov.w	ip, #10
 8008622:	4621      	mov	r1, r4
 8008624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008628:	3b30      	subs	r3, #48	@ 0x30
 800862a:	2b09      	cmp	r3, #9
 800862c:	d94b      	bls.n	80086c6 <_vfiprintf_r+0x1a2>
 800862e:	b1b0      	cbz	r0, 800865e <_vfiprintf_r+0x13a>
 8008630:	9207      	str	r2, [sp, #28]
 8008632:	e014      	b.n	800865e <_vfiprintf_r+0x13a>
 8008634:	eba0 0308 	sub.w	r3, r0, r8
 8008638:	fa09 f303 	lsl.w	r3, r9, r3
 800863c:	4313      	orrs	r3, r2
 800863e:	9304      	str	r3, [sp, #16]
 8008640:	46a2      	mov	sl, r4
 8008642:	e7d2      	b.n	80085ea <_vfiprintf_r+0xc6>
 8008644:	9b03      	ldr	r3, [sp, #12]
 8008646:	1d19      	adds	r1, r3, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	9103      	str	r1, [sp, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	bfbb      	ittet	lt
 8008650:	425b      	neglt	r3, r3
 8008652:	f042 0202 	orrlt.w	r2, r2, #2
 8008656:	9307      	strge	r3, [sp, #28]
 8008658:	9307      	strlt	r3, [sp, #28]
 800865a:	bfb8      	it	lt
 800865c:	9204      	strlt	r2, [sp, #16]
 800865e:	7823      	ldrb	r3, [r4, #0]
 8008660:	2b2e      	cmp	r3, #46	@ 0x2e
 8008662:	d10a      	bne.n	800867a <_vfiprintf_r+0x156>
 8008664:	7863      	ldrb	r3, [r4, #1]
 8008666:	2b2a      	cmp	r3, #42	@ 0x2a
 8008668:	d132      	bne.n	80086d0 <_vfiprintf_r+0x1ac>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	1d1a      	adds	r2, r3, #4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	9203      	str	r2, [sp, #12]
 8008672:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008676:	3402      	adds	r4, #2
 8008678:	9305      	str	r3, [sp, #20]
 800867a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008750 <_vfiprintf_r+0x22c>
 800867e:	7821      	ldrb	r1, [r4, #0]
 8008680:	2203      	movs	r2, #3
 8008682:	4650      	mov	r0, sl
 8008684:	f7f7 fda4 	bl	80001d0 <memchr>
 8008688:	b138      	cbz	r0, 800869a <_vfiprintf_r+0x176>
 800868a:	9b04      	ldr	r3, [sp, #16]
 800868c:	eba0 000a 	sub.w	r0, r0, sl
 8008690:	2240      	movs	r2, #64	@ 0x40
 8008692:	4082      	lsls	r2, r0
 8008694:	4313      	orrs	r3, r2
 8008696:	3401      	adds	r4, #1
 8008698:	9304      	str	r3, [sp, #16]
 800869a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800869e:	4829      	ldr	r0, [pc, #164]	@ (8008744 <_vfiprintf_r+0x220>)
 80086a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086a4:	2206      	movs	r2, #6
 80086a6:	f7f7 fd93 	bl	80001d0 <memchr>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d03f      	beq.n	800872e <_vfiprintf_r+0x20a>
 80086ae:	4b26      	ldr	r3, [pc, #152]	@ (8008748 <_vfiprintf_r+0x224>)
 80086b0:	bb1b      	cbnz	r3, 80086fa <_vfiprintf_r+0x1d6>
 80086b2:	9b03      	ldr	r3, [sp, #12]
 80086b4:	3307      	adds	r3, #7
 80086b6:	f023 0307 	bic.w	r3, r3, #7
 80086ba:	3308      	adds	r3, #8
 80086bc:	9303      	str	r3, [sp, #12]
 80086be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c0:	443b      	add	r3, r7
 80086c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80086c4:	e76a      	b.n	800859c <_vfiprintf_r+0x78>
 80086c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086ca:	460c      	mov	r4, r1
 80086cc:	2001      	movs	r0, #1
 80086ce:	e7a8      	b.n	8008622 <_vfiprintf_r+0xfe>
 80086d0:	2300      	movs	r3, #0
 80086d2:	3401      	adds	r4, #1
 80086d4:	9305      	str	r3, [sp, #20]
 80086d6:	4619      	mov	r1, r3
 80086d8:	f04f 0c0a 	mov.w	ip, #10
 80086dc:	4620      	mov	r0, r4
 80086de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086e2:	3a30      	subs	r2, #48	@ 0x30
 80086e4:	2a09      	cmp	r2, #9
 80086e6:	d903      	bls.n	80086f0 <_vfiprintf_r+0x1cc>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0c6      	beq.n	800867a <_vfiprintf_r+0x156>
 80086ec:	9105      	str	r1, [sp, #20]
 80086ee:	e7c4      	b.n	800867a <_vfiprintf_r+0x156>
 80086f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80086f4:	4604      	mov	r4, r0
 80086f6:	2301      	movs	r3, #1
 80086f8:	e7f0      	b.n	80086dc <_vfiprintf_r+0x1b8>
 80086fa:	ab03      	add	r3, sp, #12
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	462a      	mov	r2, r5
 8008700:	4b12      	ldr	r3, [pc, #72]	@ (800874c <_vfiprintf_r+0x228>)
 8008702:	a904      	add	r1, sp, #16
 8008704:	4630      	mov	r0, r6
 8008706:	f3af 8000 	nop.w
 800870a:	4607      	mov	r7, r0
 800870c:	1c78      	adds	r0, r7, #1
 800870e:	d1d6      	bne.n	80086be <_vfiprintf_r+0x19a>
 8008710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008712:	07d9      	lsls	r1, r3, #31
 8008714:	d405      	bmi.n	8008722 <_vfiprintf_r+0x1fe>
 8008716:	89ab      	ldrh	r3, [r5, #12]
 8008718:	059a      	lsls	r2, r3, #22
 800871a:	d402      	bmi.n	8008722 <_vfiprintf_r+0x1fe>
 800871c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800871e:	f7ff fed7 	bl	80084d0 <__retarget_lock_release_recursive>
 8008722:	89ab      	ldrh	r3, [r5, #12]
 8008724:	065b      	lsls	r3, r3, #25
 8008726:	f53f af1f 	bmi.w	8008568 <_vfiprintf_r+0x44>
 800872a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800872c:	e71e      	b.n	800856c <_vfiprintf_r+0x48>
 800872e:	ab03      	add	r3, sp, #12
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	462a      	mov	r2, r5
 8008734:	4b05      	ldr	r3, [pc, #20]	@ (800874c <_vfiprintf_r+0x228>)
 8008736:	a904      	add	r1, sp, #16
 8008738:	4630      	mov	r0, r6
 800873a:	f000 f91b 	bl	8008974 <_printf_i>
 800873e:	e7e4      	b.n	800870a <_vfiprintf_r+0x1e6>
 8008740:	08009190 	.word	0x08009190
 8008744:	0800919a 	.word	0x0800919a
 8008748:	00000000 	.word	0x00000000
 800874c:	08008501 	.word	0x08008501
 8008750:	08009196 	.word	0x08009196

08008754 <sbrk_aligned>:
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	4e0f      	ldr	r6, [pc, #60]	@ (8008794 <sbrk_aligned+0x40>)
 8008758:	460c      	mov	r4, r1
 800875a:	6831      	ldr	r1, [r6, #0]
 800875c:	4605      	mov	r5, r0
 800875e:	b911      	cbnz	r1, 8008766 <sbrk_aligned+0x12>
 8008760:	f000 fc4c 	bl	8008ffc <_sbrk_r>
 8008764:	6030      	str	r0, [r6, #0]
 8008766:	4621      	mov	r1, r4
 8008768:	4628      	mov	r0, r5
 800876a:	f000 fc47 	bl	8008ffc <_sbrk_r>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	d103      	bne.n	800877a <sbrk_aligned+0x26>
 8008772:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008776:	4620      	mov	r0, r4
 8008778:	bd70      	pop	{r4, r5, r6, pc}
 800877a:	1cc4      	adds	r4, r0, #3
 800877c:	f024 0403 	bic.w	r4, r4, #3
 8008780:	42a0      	cmp	r0, r4
 8008782:	d0f8      	beq.n	8008776 <sbrk_aligned+0x22>
 8008784:	1a21      	subs	r1, r4, r0
 8008786:	4628      	mov	r0, r5
 8008788:	f000 fc38 	bl	8008ffc <_sbrk_r>
 800878c:	3001      	adds	r0, #1
 800878e:	d1f2      	bne.n	8008776 <sbrk_aligned+0x22>
 8008790:	e7ef      	b.n	8008772 <sbrk_aligned+0x1e>
 8008792:	bf00      	nop
 8008794:	20000dbc 	.word	0x20000dbc

08008798 <_malloc_r>:
 8008798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879c:	1ccd      	adds	r5, r1, #3
 800879e:	f025 0503 	bic.w	r5, r5, #3
 80087a2:	3508      	adds	r5, #8
 80087a4:	2d0c      	cmp	r5, #12
 80087a6:	bf38      	it	cc
 80087a8:	250c      	movcc	r5, #12
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	4606      	mov	r6, r0
 80087ae:	db01      	blt.n	80087b4 <_malloc_r+0x1c>
 80087b0:	42a9      	cmp	r1, r5
 80087b2:	d904      	bls.n	80087be <_malloc_r+0x26>
 80087b4:	230c      	movs	r3, #12
 80087b6:	6033      	str	r3, [r6, #0]
 80087b8:	2000      	movs	r0, #0
 80087ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008894 <_malloc_r+0xfc>
 80087c2:	f000 faa1 	bl	8008d08 <__malloc_lock>
 80087c6:	f8d8 3000 	ldr.w	r3, [r8]
 80087ca:	461c      	mov	r4, r3
 80087cc:	bb44      	cbnz	r4, 8008820 <_malloc_r+0x88>
 80087ce:	4629      	mov	r1, r5
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7ff ffbf 	bl	8008754 <sbrk_aligned>
 80087d6:	1c43      	adds	r3, r0, #1
 80087d8:	4604      	mov	r4, r0
 80087da:	d158      	bne.n	800888e <_malloc_r+0xf6>
 80087dc:	f8d8 4000 	ldr.w	r4, [r8]
 80087e0:	4627      	mov	r7, r4
 80087e2:	2f00      	cmp	r7, #0
 80087e4:	d143      	bne.n	800886e <_malloc_r+0xd6>
 80087e6:	2c00      	cmp	r4, #0
 80087e8:	d04b      	beq.n	8008882 <_malloc_r+0xea>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	4639      	mov	r1, r7
 80087ee:	4630      	mov	r0, r6
 80087f0:	eb04 0903 	add.w	r9, r4, r3
 80087f4:	f000 fc02 	bl	8008ffc <_sbrk_r>
 80087f8:	4581      	cmp	r9, r0
 80087fa:	d142      	bne.n	8008882 <_malloc_r+0xea>
 80087fc:	6821      	ldr	r1, [r4, #0]
 80087fe:	1a6d      	subs	r5, r5, r1
 8008800:	4629      	mov	r1, r5
 8008802:	4630      	mov	r0, r6
 8008804:	f7ff ffa6 	bl	8008754 <sbrk_aligned>
 8008808:	3001      	adds	r0, #1
 800880a:	d03a      	beq.n	8008882 <_malloc_r+0xea>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	442b      	add	r3, r5
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	f8d8 3000 	ldr.w	r3, [r8]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	bb62      	cbnz	r2, 8008874 <_malloc_r+0xdc>
 800881a:	f8c8 7000 	str.w	r7, [r8]
 800881e:	e00f      	b.n	8008840 <_malloc_r+0xa8>
 8008820:	6822      	ldr	r2, [r4, #0]
 8008822:	1b52      	subs	r2, r2, r5
 8008824:	d420      	bmi.n	8008868 <_malloc_r+0xd0>
 8008826:	2a0b      	cmp	r2, #11
 8008828:	d917      	bls.n	800885a <_malloc_r+0xc2>
 800882a:	1961      	adds	r1, r4, r5
 800882c:	42a3      	cmp	r3, r4
 800882e:	6025      	str	r5, [r4, #0]
 8008830:	bf18      	it	ne
 8008832:	6059      	strne	r1, [r3, #4]
 8008834:	6863      	ldr	r3, [r4, #4]
 8008836:	bf08      	it	eq
 8008838:	f8c8 1000 	streq.w	r1, [r8]
 800883c:	5162      	str	r2, [r4, r5]
 800883e:	604b      	str	r3, [r1, #4]
 8008840:	4630      	mov	r0, r6
 8008842:	f000 fa67 	bl	8008d14 <__malloc_unlock>
 8008846:	f104 000b 	add.w	r0, r4, #11
 800884a:	1d23      	adds	r3, r4, #4
 800884c:	f020 0007 	bic.w	r0, r0, #7
 8008850:	1ac2      	subs	r2, r0, r3
 8008852:	bf1c      	itt	ne
 8008854:	1a1b      	subne	r3, r3, r0
 8008856:	50a3      	strne	r3, [r4, r2]
 8008858:	e7af      	b.n	80087ba <_malloc_r+0x22>
 800885a:	6862      	ldr	r2, [r4, #4]
 800885c:	42a3      	cmp	r3, r4
 800885e:	bf0c      	ite	eq
 8008860:	f8c8 2000 	streq.w	r2, [r8]
 8008864:	605a      	strne	r2, [r3, #4]
 8008866:	e7eb      	b.n	8008840 <_malloc_r+0xa8>
 8008868:	4623      	mov	r3, r4
 800886a:	6864      	ldr	r4, [r4, #4]
 800886c:	e7ae      	b.n	80087cc <_malloc_r+0x34>
 800886e:	463c      	mov	r4, r7
 8008870:	687f      	ldr	r7, [r7, #4]
 8008872:	e7b6      	b.n	80087e2 <_malloc_r+0x4a>
 8008874:	461a      	mov	r2, r3
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	42a3      	cmp	r3, r4
 800887a:	d1fb      	bne.n	8008874 <_malloc_r+0xdc>
 800887c:	2300      	movs	r3, #0
 800887e:	6053      	str	r3, [r2, #4]
 8008880:	e7de      	b.n	8008840 <_malloc_r+0xa8>
 8008882:	230c      	movs	r3, #12
 8008884:	6033      	str	r3, [r6, #0]
 8008886:	4630      	mov	r0, r6
 8008888:	f000 fa44 	bl	8008d14 <__malloc_unlock>
 800888c:	e794      	b.n	80087b8 <_malloc_r+0x20>
 800888e:	6005      	str	r5, [r0, #0]
 8008890:	e7d6      	b.n	8008840 <_malloc_r+0xa8>
 8008892:	bf00      	nop
 8008894:	20000dc0 	.word	0x20000dc0

08008898 <_printf_common>:
 8008898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800889c:	4616      	mov	r6, r2
 800889e:	4698      	mov	r8, r3
 80088a0:	688a      	ldr	r2, [r1, #8]
 80088a2:	690b      	ldr	r3, [r1, #16]
 80088a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088a8:	4293      	cmp	r3, r2
 80088aa:	bfb8      	it	lt
 80088ac:	4613      	movlt	r3, r2
 80088ae:	6033      	str	r3, [r6, #0]
 80088b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088b4:	4607      	mov	r7, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	b10a      	cbz	r2, 80088be <_printf_common+0x26>
 80088ba:	3301      	adds	r3, #1
 80088bc:	6033      	str	r3, [r6, #0]
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	0699      	lsls	r1, r3, #26
 80088c2:	bf42      	ittt	mi
 80088c4:	6833      	ldrmi	r3, [r6, #0]
 80088c6:	3302      	addmi	r3, #2
 80088c8:	6033      	strmi	r3, [r6, #0]
 80088ca:	6825      	ldr	r5, [r4, #0]
 80088cc:	f015 0506 	ands.w	r5, r5, #6
 80088d0:	d106      	bne.n	80088e0 <_printf_common+0x48>
 80088d2:	f104 0a19 	add.w	sl, r4, #25
 80088d6:	68e3      	ldr	r3, [r4, #12]
 80088d8:	6832      	ldr	r2, [r6, #0]
 80088da:	1a9b      	subs	r3, r3, r2
 80088dc:	42ab      	cmp	r3, r5
 80088de:	dc26      	bgt.n	800892e <_printf_common+0x96>
 80088e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088e4:	6822      	ldr	r2, [r4, #0]
 80088e6:	3b00      	subs	r3, #0
 80088e8:	bf18      	it	ne
 80088ea:	2301      	movne	r3, #1
 80088ec:	0692      	lsls	r2, r2, #26
 80088ee:	d42b      	bmi.n	8008948 <_printf_common+0xb0>
 80088f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088f4:	4641      	mov	r1, r8
 80088f6:	4638      	mov	r0, r7
 80088f8:	47c8      	blx	r9
 80088fa:	3001      	adds	r0, #1
 80088fc:	d01e      	beq.n	800893c <_printf_common+0xa4>
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	6922      	ldr	r2, [r4, #16]
 8008902:	f003 0306 	and.w	r3, r3, #6
 8008906:	2b04      	cmp	r3, #4
 8008908:	bf02      	ittt	eq
 800890a:	68e5      	ldreq	r5, [r4, #12]
 800890c:	6833      	ldreq	r3, [r6, #0]
 800890e:	1aed      	subeq	r5, r5, r3
 8008910:	68a3      	ldr	r3, [r4, #8]
 8008912:	bf0c      	ite	eq
 8008914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008918:	2500      	movne	r5, #0
 800891a:	4293      	cmp	r3, r2
 800891c:	bfc4      	itt	gt
 800891e:	1a9b      	subgt	r3, r3, r2
 8008920:	18ed      	addgt	r5, r5, r3
 8008922:	2600      	movs	r6, #0
 8008924:	341a      	adds	r4, #26
 8008926:	42b5      	cmp	r5, r6
 8008928:	d11a      	bne.n	8008960 <_printf_common+0xc8>
 800892a:	2000      	movs	r0, #0
 800892c:	e008      	b.n	8008940 <_printf_common+0xa8>
 800892e:	2301      	movs	r3, #1
 8008930:	4652      	mov	r2, sl
 8008932:	4641      	mov	r1, r8
 8008934:	4638      	mov	r0, r7
 8008936:	47c8      	blx	r9
 8008938:	3001      	adds	r0, #1
 800893a:	d103      	bne.n	8008944 <_printf_common+0xac>
 800893c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008944:	3501      	adds	r5, #1
 8008946:	e7c6      	b.n	80088d6 <_printf_common+0x3e>
 8008948:	18e1      	adds	r1, r4, r3
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	2030      	movs	r0, #48	@ 0x30
 800894e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008952:	4422      	add	r2, r4
 8008954:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008958:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800895c:	3302      	adds	r3, #2
 800895e:	e7c7      	b.n	80088f0 <_printf_common+0x58>
 8008960:	2301      	movs	r3, #1
 8008962:	4622      	mov	r2, r4
 8008964:	4641      	mov	r1, r8
 8008966:	4638      	mov	r0, r7
 8008968:	47c8      	blx	r9
 800896a:	3001      	adds	r0, #1
 800896c:	d0e6      	beq.n	800893c <_printf_common+0xa4>
 800896e:	3601      	adds	r6, #1
 8008970:	e7d9      	b.n	8008926 <_printf_common+0x8e>
	...

08008974 <_printf_i>:
 8008974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008978:	7e0f      	ldrb	r7, [r1, #24]
 800897a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800897c:	2f78      	cmp	r7, #120	@ 0x78
 800897e:	4691      	mov	r9, r2
 8008980:	4680      	mov	r8, r0
 8008982:	460c      	mov	r4, r1
 8008984:	469a      	mov	sl, r3
 8008986:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800898a:	d807      	bhi.n	800899c <_printf_i+0x28>
 800898c:	2f62      	cmp	r7, #98	@ 0x62
 800898e:	d80a      	bhi.n	80089a6 <_printf_i+0x32>
 8008990:	2f00      	cmp	r7, #0
 8008992:	f000 80d1 	beq.w	8008b38 <_printf_i+0x1c4>
 8008996:	2f58      	cmp	r7, #88	@ 0x58
 8008998:	f000 80b8 	beq.w	8008b0c <_printf_i+0x198>
 800899c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089a4:	e03a      	b.n	8008a1c <_printf_i+0xa8>
 80089a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089aa:	2b15      	cmp	r3, #21
 80089ac:	d8f6      	bhi.n	800899c <_printf_i+0x28>
 80089ae:	a101      	add	r1, pc, #4	@ (adr r1, 80089b4 <_printf_i+0x40>)
 80089b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089b4:	08008a0d 	.word	0x08008a0d
 80089b8:	08008a21 	.word	0x08008a21
 80089bc:	0800899d 	.word	0x0800899d
 80089c0:	0800899d 	.word	0x0800899d
 80089c4:	0800899d 	.word	0x0800899d
 80089c8:	0800899d 	.word	0x0800899d
 80089cc:	08008a21 	.word	0x08008a21
 80089d0:	0800899d 	.word	0x0800899d
 80089d4:	0800899d 	.word	0x0800899d
 80089d8:	0800899d 	.word	0x0800899d
 80089dc:	0800899d 	.word	0x0800899d
 80089e0:	08008b1f 	.word	0x08008b1f
 80089e4:	08008a4b 	.word	0x08008a4b
 80089e8:	08008ad9 	.word	0x08008ad9
 80089ec:	0800899d 	.word	0x0800899d
 80089f0:	0800899d 	.word	0x0800899d
 80089f4:	08008b41 	.word	0x08008b41
 80089f8:	0800899d 	.word	0x0800899d
 80089fc:	08008a4b 	.word	0x08008a4b
 8008a00:	0800899d 	.word	0x0800899d
 8008a04:	0800899d 	.word	0x0800899d
 8008a08:	08008ae1 	.word	0x08008ae1
 8008a0c:	6833      	ldr	r3, [r6, #0]
 8008a0e:	1d1a      	adds	r2, r3, #4
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6032      	str	r2, [r6, #0]
 8008a14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e09c      	b.n	8008b5a <_printf_i+0x1e6>
 8008a20:	6833      	ldr	r3, [r6, #0]
 8008a22:	6820      	ldr	r0, [r4, #0]
 8008a24:	1d19      	adds	r1, r3, #4
 8008a26:	6031      	str	r1, [r6, #0]
 8008a28:	0606      	lsls	r6, r0, #24
 8008a2a:	d501      	bpl.n	8008a30 <_printf_i+0xbc>
 8008a2c:	681d      	ldr	r5, [r3, #0]
 8008a2e:	e003      	b.n	8008a38 <_printf_i+0xc4>
 8008a30:	0645      	lsls	r5, r0, #25
 8008a32:	d5fb      	bpl.n	8008a2c <_printf_i+0xb8>
 8008a34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a38:	2d00      	cmp	r5, #0
 8008a3a:	da03      	bge.n	8008a44 <_printf_i+0xd0>
 8008a3c:	232d      	movs	r3, #45	@ 0x2d
 8008a3e:	426d      	negs	r5, r5
 8008a40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a44:	4858      	ldr	r0, [pc, #352]	@ (8008ba8 <_printf_i+0x234>)
 8008a46:	230a      	movs	r3, #10
 8008a48:	e011      	b.n	8008a6e <_printf_i+0xfa>
 8008a4a:	6821      	ldr	r1, [r4, #0]
 8008a4c:	6833      	ldr	r3, [r6, #0]
 8008a4e:	0608      	lsls	r0, r1, #24
 8008a50:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a54:	d402      	bmi.n	8008a5c <_printf_i+0xe8>
 8008a56:	0649      	lsls	r1, r1, #25
 8008a58:	bf48      	it	mi
 8008a5a:	b2ad      	uxthmi	r5, r5
 8008a5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a5e:	4852      	ldr	r0, [pc, #328]	@ (8008ba8 <_printf_i+0x234>)
 8008a60:	6033      	str	r3, [r6, #0]
 8008a62:	bf14      	ite	ne
 8008a64:	230a      	movne	r3, #10
 8008a66:	2308      	moveq	r3, #8
 8008a68:	2100      	movs	r1, #0
 8008a6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a6e:	6866      	ldr	r6, [r4, #4]
 8008a70:	60a6      	str	r6, [r4, #8]
 8008a72:	2e00      	cmp	r6, #0
 8008a74:	db05      	blt.n	8008a82 <_printf_i+0x10e>
 8008a76:	6821      	ldr	r1, [r4, #0]
 8008a78:	432e      	orrs	r6, r5
 8008a7a:	f021 0104 	bic.w	r1, r1, #4
 8008a7e:	6021      	str	r1, [r4, #0]
 8008a80:	d04b      	beq.n	8008b1a <_printf_i+0x1a6>
 8008a82:	4616      	mov	r6, r2
 8008a84:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a88:	fb03 5711 	mls	r7, r3, r1, r5
 8008a8c:	5dc7      	ldrb	r7, [r0, r7]
 8008a8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a92:	462f      	mov	r7, r5
 8008a94:	42bb      	cmp	r3, r7
 8008a96:	460d      	mov	r5, r1
 8008a98:	d9f4      	bls.n	8008a84 <_printf_i+0x110>
 8008a9a:	2b08      	cmp	r3, #8
 8008a9c:	d10b      	bne.n	8008ab6 <_printf_i+0x142>
 8008a9e:	6823      	ldr	r3, [r4, #0]
 8008aa0:	07df      	lsls	r7, r3, #31
 8008aa2:	d508      	bpl.n	8008ab6 <_printf_i+0x142>
 8008aa4:	6923      	ldr	r3, [r4, #16]
 8008aa6:	6861      	ldr	r1, [r4, #4]
 8008aa8:	4299      	cmp	r1, r3
 8008aaa:	bfde      	ittt	le
 8008aac:	2330      	movle	r3, #48	@ 0x30
 8008aae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ab2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008ab6:	1b92      	subs	r2, r2, r6
 8008ab8:	6122      	str	r2, [r4, #16]
 8008aba:	f8cd a000 	str.w	sl, [sp]
 8008abe:	464b      	mov	r3, r9
 8008ac0:	aa03      	add	r2, sp, #12
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4640      	mov	r0, r8
 8008ac6:	f7ff fee7 	bl	8008898 <_printf_common>
 8008aca:	3001      	adds	r0, #1
 8008acc:	d14a      	bne.n	8008b64 <_printf_i+0x1f0>
 8008ace:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ad2:	b004      	add	sp, #16
 8008ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	f043 0320 	orr.w	r3, r3, #32
 8008ade:	6023      	str	r3, [r4, #0]
 8008ae0:	4832      	ldr	r0, [pc, #200]	@ (8008bac <_printf_i+0x238>)
 8008ae2:	2778      	movs	r7, #120	@ 0x78
 8008ae4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	6831      	ldr	r1, [r6, #0]
 8008aec:	061f      	lsls	r7, r3, #24
 8008aee:	f851 5b04 	ldr.w	r5, [r1], #4
 8008af2:	d402      	bmi.n	8008afa <_printf_i+0x186>
 8008af4:	065f      	lsls	r7, r3, #25
 8008af6:	bf48      	it	mi
 8008af8:	b2ad      	uxthmi	r5, r5
 8008afa:	6031      	str	r1, [r6, #0]
 8008afc:	07d9      	lsls	r1, r3, #31
 8008afe:	bf44      	itt	mi
 8008b00:	f043 0320 	orrmi.w	r3, r3, #32
 8008b04:	6023      	strmi	r3, [r4, #0]
 8008b06:	b11d      	cbz	r5, 8008b10 <_printf_i+0x19c>
 8008b08:	2310      	movs	r3, #16
 8008b0a:	e7ad      	b.n	8008a68 <_printf_i+0xf4>
 8008b0c:	4826      	ldr	r0, [pc, #152]	@ (8008ba8 <_printf_i+0x234>)
 8008b0e:	e7e9      	b.n	8008ae4 <_printf_i+0x170>
 8008b10:	6823      	ldr	r3, [r4, #0]
 8008b12:	f023 0320 	bic.w	r3, r3, #32
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	e7f6      	b.n	8008b08 <_printf_i+0x194>
 8008b1a:	4616      	mov	r6, r2
 8008b1c:	e7bd      	b.n	8008a9a <_printf_i+0x126>
 8008b1e:	6833      	ldr	r3, [r6, #0]
 8008b20:	6825      	ldr	r5, [r4, #0]
 8008b22:	6961      	ldr	r1, [r4, #20]
 8008b24:	1d18      	adds	r0, r3, #4
 8008b26:	6030      	str	r0, [r6, #0]
 8008b28:	062e      	lsls	r6, r5, #24
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	d501      	bpl.n	8008b32 <_printf_i+0x1be>
 8008b2e:	6019      	str	r1, [r3, #0]
 8008b30:	e002      	b.n	8008b38 <_printf_i+0x1c4>
 8008b32:	0668      	lsls	r0, r5, #25
 8008b34:	d5fb      	bpl.n	8008b2e <_printf_i+0x1ba>
 8008b36:	8019      	strh	r1, [r3, #0]
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	4616      	mov	r6, r2
 8008b3e:	e7bc      	b.n	8008aba <_printf_i+0x146>
 8008b40:	6833      	ldr	r3, [r6, #0]
 8008b42:	1d1a      	adds	r2, r3, #4
 8008b44:	6032      	str	r2, [r6, #0]
 8008b46:	681e      	ldr	r6, [r3, #0]
 8008b48:	6862      	ldr	r2, [r4, #4]
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	f7f7 fb3f 	bl	80001d0 <memchr>
 8008b52:	b108      	cbz	r0, 8008b58 <_printf_i+0x1e4>
 8008b54:	1b80      	subs	r0, r0, r6
 8008b56:	6060      	str	r0, [r4, #4]
 8008b58:	6863      	ldr	r3, [r4, #4]
 8008b5a:	6123      	str	r3, [r4, #16]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b62:	e7aa      	b.n	8008aba <_printf_i+0x146>
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	4632      	mov	r2, r6
 8008b68:	4649      	mov	r1, r9
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	47d0      	blx	sl
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d0ad      	beq.n	8008ace <_printf_i+0x15a>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	079b      	lsls	r3, r3, #30
 8008b76:	d413      	bmi.n	8008ba0 <_printf_i+0x22c>
 8008b78:	68e0      	ldr	r0, [r4, #12]
 8008b7a:	9b03      	ldr	r3, [sp, #12]
 8008b7c:	4298      	cmp	r0, r3
 8008b7e:	bfb8      	it	lt
 8008b80:	4618      	movlt	r0, r3
 8008b82:	e7a6      	b.n	8008ad2 <_printf_i+0x15e>
 8008b84:	2301      	movs	r3, #1
 8008b86:	4632      	mov	r2, r6
 8008b88:	4649      	mov	r1, r9
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	47d0      	blx	sl
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d09d      	beq.n	8008ace <_printf_i+0x15a>
 8008b92:	3501      	adds	r5, #1
 8008b94:	68e3      	ldr	r3, [r4, #12]
 8008b96:	9903      	ldr	r1, [sp, #12]
 8008b98:	1a5b      	subs	r3, r3, r1
 8008b9a:	42ab      	cmp	r3, r5
 8008b9c:	dcf2      	bgt.n	8008b84 <_printf_i+0x210>
 8008b9e:	e7eb      	b.n	8008b78 <_printf_i+0x204>
 8008ba0:	2500      	movs	r5, #0
 8008ba2:	f104 0619 	add.w	r6, r4, #25
 8008ba6:	e7f5      	b.n	8008b94 <_printf_i+0x220>
 8008ba8:	080091a1 	.word	0x080091a1
 8008bac:	080091b2 	.word	0x080091b2

08008bb0 <__sflush_r>:
 8008bb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb8:	0716      	lsls	r6, r2, #28
 8008bba:	4605      	mov	r5, r0
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	d454      	bmi.n	8008c6a <__sflush_r+0xba>
 8008bc0:	684b      	ldr	r3, [r1, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	dc02      	bgt.n	8008bcc <__sflush_r+0x1c>
 8008bc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	dd48      	ble.n	8008c5e <__sflush_r+0xae>
 8008bcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bce:	2e00      	cmp	r6, #0
 8008bd0:	d045      	beq.n	8008c5e <__sflush_r+0xae>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008bd8:	682f      	ldr	r7, [r5, #0]
 8008bda:	6a21      	ldr	r1, [r4, #32]
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	d030      	beq.n	8008c42 <__sflush_r+0x92>
 8008be0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	0759      	lsls	r1, r3, #29
 8008be6:	d505      	bpl.n	8008bf4 <__sflush_r+0x44>
 8008be8:	6863      	ldr	r3, [r4, #4]
 8008bea:	1ad2      	subs	r2, r2, r3
 8008bec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008bee:	b10b      	cbz	r3, 8008bf4 <__sflush_r+0x44>
 8008bf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008bf2:	1ad2      	subs	r2, r2, r3
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bf8:	6a21      	ldr	r1, [r4, #32]
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b0      	blx	r6
 8008bfe:	1c43      	adds	r3, r0, #1
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	d106      	bne.n	8008c12 <__sflush_r+0x62>
 8008c04:	6829      	ldr	r1, [r5, #0]
 8008c06:	291d      	cmp	r1, #29
 8008c08:	d82b      	bhi.n	8008c62 <__sflush_r+0xb2>
 8008c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8008cb4 <__sflush_r+0x104>)
 8008c0c:	40ca      	lsrs	r2, r1
 8008c0e:	07d6      	lsls	r6, r2, #31
 8008c10:	d527      	bpl.n	8008c62 <__sflush_r+0xb2>
 8008c12:	2200      	movs	r2, #0
 8008c14:	6062      	str	r2, [r4, #4]
 8008c16:	04d9      	lsls	r1, r3, #19
 8008c18:	6922      	ldr	r2, [r4, #16]
 8008c1a:	6022      	str	r2, [r4, #0]
 8008c1c:	d504      	bpl.n	8008c28 <__sflush_r+0x78>
 8008c1e:	1c42      	adds	r2, r0, #1
 8008c20:	d101      	bne.n	8008c26 <__sflush_r+0x76>
 8008c22:	682b      	ldr	r3, [r5, #0]
 8008c24:	b903      	cbnz	r3, 8008c28 <__sflush_r+0x78>
 8008c26:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c2a:	602f      	str	r7, [r5, #0]
 8008c2c:	b1b9      	cbz	r1, 8008c5e <__sflush_r+0xae>
 8008c2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c32:	4299      	cmp	r1, r3
 8008c34:	d002      	beq.n	8008c3c <__sflush_r+0x8c>
 8008c36:	4628      	mov	r0, r5
 8008c38:	f000 fa24 	bl	8009084 <_free_r>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c40:	e00d      	b.n	8008c5e <__sflush_r+0xae>
 8008c42:	2301      	movs	r3, #1
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b0      	blx	r6
 8008c48:	4602      	mov	r2, r0
 8008c4a:	1c50      	adds	r0, r2, #1
 8008c4c:	d1c9      	bne.n	8008be2 <__sflush_r+0x32>
 8008c4e:	682b      	ldr	r3, [r5, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0c6      	beq.n	8008be2 <__sflush_r+0x32>
 8008c54:	2b1d      	cmp	r3, #29
 8008c56:	d001      	beq.n	8008c5c <__sflush_r+0xac>
 8008c58:	2b16      	cmp	r3, #22
 8008c5a:	d11e      	bne.n	8008c9a <__sflush_r+0xea>
 8008c5c:	602f      	str	r7, [r5, #0]
 8008c5e:	2000      	movs	r0, #0
 8008c60:	e022      	b.n	8008ca8 <__sflush_r+0xf8>
 8008c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c66:	b21b      	sxth	r3, r3
 8008c68:	e01b      	b.n	8008ca2 <__sflush_r+0xf2>
 8008c6a:	690f      	ldr	r7, [r1, #16]
 8008c6c:	2f00      	cmp	r7, #0
 8008c6e:	d0f6      	beq.n	8008c5e <__sflush_r+0xae>
 8008c70:	0793      	lsls	r3, r2, #30
 8008c72:	680e      	ldr	r6, [r1, #0]
 8008c74:	bf08      	it	eq
 8008c76:	694b      	ldreq	r3, [r1, #20]
 8008c78:	600f      	str	r7, [r1, #0]
 8008c7a:	bf18      	it	ne
 8008c7c:	2300      	movne	r3, #0
 8008c7e:	eba6 0807 	sub.w	r8, r6, r7
 8008c82:	608b      	str	r3, [r1, #8]
 8008c84:	f1b8 0f00 	cmp.w	r8, #0
 8008c88:	dde9      	ble.n	8008c5e <__sflush_r+0xae>
 8008c8a:	6a21      	ldr	r1, [r4, #32]
 8008c8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c8e:	4643      	mov	r3, r8
 8008c90:	463a      	mov	r2, r7
 8008c92:	4628      	mov	r0, r5
 8008c94:	47b0      	blx	r6
 8008c96:	2800      	cmp	r0, #0
 8008c98:	dc08      	bgt.n	8008cac <__sflush_r+0xfc>
 8008c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ca2:	81a3      	strh	r3, [r4, #12]
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cac:	4407      	add	r7, r0
 8008cae:	eba8 0800 	sub.w	r8, r8, r0
 8008cb2:	e7e7      	b.n	8008c84 <__sflush_r+0xd4>
 8008cb4:	20400001 	.word	0x20400001

08008cb8 <_fflush_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	690b      	ldr	r3, [r1, #16]
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	b913      	cbnz	r3, 8008cc8 <_fflush_r+0x10>
 8008cc2:	2500      	movs	r5, #0
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	b118      	cbz	r0, 8008cd2 <_fflush_r+0x1a>
 8008cca:	6a03      	ldr	r3, [r0, #32]
 8008ccc:	b90b      	cbnz	r3, 8008cd2 <_fflush_r+0x1a>
 8008cce:	f7ff fb25 	bl	800831c <__sinit>
 8008cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0f3      	beq.n	8008cc2 <_fflush_r+0xa>
 8008cda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008cdc:	07d0      	lsls	r0, r2, #31
 8008cde:	d404      	bmi.n	8008cea <_fflush_r+0x32>
 8008ce0:	0599      	lsls	r1, r3, #22
 8008ce2:	d402      	bmi.n	8008cea <_fflush_r+0x32>
 8008ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ce6:	f7ff fbf2 	bl	80084ce <__retarget_lock_acquire_recursive>
 8008cea:	4628      	mov	r0, r5
 8008cec:	4621      	mov	r1, r4
 8008cee:	f7ff ff5f 	bl	8008bb0 <__sflush_r>
 8008cf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cf4:	07da      	lsls	r2, r3, #31
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	d4e4      	bmi.n	8008cc4 <_fflush_r+0xc>
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	059b      	lsls	r3, r3, #22
 8008cfe:	d4e1      	bmi.n	8008cc4 <_fflush_r+0xc>
 8008d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d02:	f7ff fbe5 	bl	80084d0 <__retarget_lock_release_recursive>
 8008d06:	e7dd      	b.n	8008cc4 <_fflush_r+0xc>

08008d08 <__malloc_lock>:
 8008d08:	4801      	ldr	r0, [pc, #4]	@ (8008d10 <__malloc_lock+0x8>)
 8008d0a:	f7ff bbe0 	b.w	80084ce <__retarget_lock_acquire_recursive>
 8008d0e:	bf00      	nop
 8008d10:	20000db8 	.word	0x20000db8

08008d14 <__malloc_unlock>:
 8008d14:	4801      	ldr	r0, [pc, #4]	@ (8008d1c <__malloc_unlock+0x8>)
 8008d16:	f7ff bbdb 	b.w	80084d0 <__retarget_lock_release_recursive>
 8008d1a:	bf00      	nop
 8008d1c:	20000db8 	.word	0x20000db8

08008d20 <__sread>:
 8008d20:	b510      	push	{r4, lr}
 8008d22:	460c      	mov	r4, r1
 8008d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d28:	f000 f956 	bl	8008fd8 <_read_r>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	bfab      	itete	ge
 8008d30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d32:	89a3      	ldrhlt	r3, [r4, #12]
 8008d34:	181b      	addge	r3, r3, r0
 8008d36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d3a:	bfac      	ite	ge
 8008d3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d3e:	81a3      	strhlt	r3, [r4, #12]
 8008d40:	bd10      	pop	{r4, pc}

08008d42 <__swrite>:
 8008d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d46:	461f      	mov	r7, r3
 8008d48:	898b      	ldrh	r3, [r1, #12]
 8008d4a:	05db      	lsls	r3, r3, #23
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	460c      	mov	r4, r1
 8008d50:	4616      	mov	r6, r2
 8008d52:	d505      	bpl.n	8008d60 <__swrite+0x1e>
 8008d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d58:	2302      	movs	r3, #2
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f000 f92a 	bl	8008fb4 <_lseek_r>
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d6a:	81a3      	strh	r3, [r4, #12]
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	463b      	mov	r3, r7
 8008d70:	4628      	mov	r0, r5
 8008d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d76:	f000 b951 	b.w	800901c <_write_r>

08008d7a <__sseek>:
 8008d7a:	b510      	push	{r4, lr}
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d82:	f000 f917 	bl	8008fb4 <_lseek_r>
 8008d86:	1c43      	adds	r3, r0, #1
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	bf15      	itete	ne
 8008d8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d96:	81a3      	strheq	r3, [r4, #12]
 8008d98:	bf18      	it	ne
 8008d9a:	81a3      	strhne	r3, [r4, #12]
 8008d9c:	bd10      	pop	{r4, pc}

08008d9e <__sclose>:
 8008d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da2:	f000 b94d 	b.w	8009040 <_close_r>

08008da6 <__swbuf_r>:
 8008da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da8:	460e      	mov	r6, r1
 8008daa:	4614      	mov	r4, r2
 8008dac:	4605      	mov	r5, r0
 8008dae:	b118      	cbz	r0, 8008db8 <__swbuf_r+0x12>
 8008db0:	6a03      	ldr	r3, [r0, #32]
 8008db2:	b90b      	cbnz	r3, 8008db8 <__swbuf_r+0x12>
 8008db4:	f7ff fab2 	bl	800831c <__sinit>
 8008db8:	69a3      	ldr	r3, [r4, #24]
 8008dba:	60a3      	str	r3, [r4, #8]
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	071a      	lsls	r2, r3, #28
 8008dc0:	d501      	bpl.n	8008dc6 <__swbuf_r+0x20>
 8008dc2:	6923      	ldr	r3, [r4, #16]
 8008dc4:	b943      	cbnz	r3, 8008dd8 <__swbuf_r+0x32>
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f000 f82b 	bl	8008e24 <__swsetup_r>
 8008dce:	b118      	cbz	r0, 8008dd8 <__swbuf_r+0x32>
 8008dd0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	6922      	ldr	r2, [r4, #16]
 8008ddc:	1a98      	subs	r0, r3, r2
 8008dde:	6963      	ldr	r3, [r4, #20]
 8008de0:	b2f6      	uxtb	r6, r6
 8008de2:	4283      	cmp	r3, r0
 8008de4:	4637      	mov	r7, r6
 8008de6:	dc05      	bgt.n	8008df4 <__swbuf_r+0x4e>
 8008de8:	4621      	mov	r1, r4
 8008dea:	4628      	mov	r0, r5
 8008dec:	f7ff ff64 	bl	8008cb8 <_fflush_r>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d1ed      	bne.n	8008dd0 <__swbuf_r+0x2a>
 8008df4:	68a3      	ldr	r3, [r4, #8]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	60a3      	str	r3, [r4, #8]
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	6022      	str	r2, [r4, #0]
 8008e00:	701e      	strb	r6, [r3, #0]
 8008e02:	6962      	ldr	r2, [r4, #20]
 8008e04:	1c43      	adds	r3, r0, #1
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d004      	beq.n	8008e14 <__swbuf_r+0x6e>
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	07db      	lsls	r3, r3, #31
 8008e0e:	d5e1      	bpl.n	8008dd4 <__swbuf_r+0x2e>
 8008e10:	2e0a      	cmp	r6, #10
 8008e12:	d1df      	bne.n	8008dd4 <__swbuf_r+0x2e>
 8008e14:	4621      	mov	r1, r4
 8008e16:	4628      	mov	r0, r5
 8008e18:	f7ff ff4e 	bl	8008cb8 <_fflush_r>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d0d9      	beq.n	8008dd4 <__swbuf_r+0x2e>
 8008e20:	e7d6      	b.n	8008dd0 <__swbuf_r+0x2a>
	...

08008e24 <__swsetup_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4b29      	ldr	r3, [pc, #164]	@ (8008ecc <__swsetup_r+0xa8>)
 8008e28:	4605      	mov	r5, r0
 8008e2a:	6818      	ldr	r0, [r3, #0]
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	b118      	cbz	r0, 8008e38 <__swsetup_r+0x14>
 8008e30:	6a03      	ldr	r3, [r0, #32]
 8008e32:	b90b      	cbnz	r3, 8008e38 <__swsetup_r+0x14>
 8008e34:	f7ff fa72 	bl	800831c <__sinit>
 8008e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e3c:	0719      	lsls	r1, r3, #28
 8008e3e:	d422      	bmi.n	8008e86 <__swsetup_r+0x62>
 8008e40:	06da      	lsls	r2, r3, #27
 8008e42:	d407      	bmi.n	8008e54 <__swsetup_r+0x30>
 8008e44:	2209      	movs	r2, #9
 8008e46:	602a      	str	r2, [r5, #0]
 8008e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e4c:	81a3      	strh	r3, [r4, #12]
 8008e4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e52:	e033      	b.n	8008ebc <__swsetup_r+0x98>
 8008e54:	0758      	lsls	r0, r3, #29
 8008e56:	d512      	bpl.n	8008e7e <__swsetup_r+0x5a>
 8008e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e5a:	b141      	cbz	r1, 8008e6e <__swsetup_r+0x4a>
 8008e5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e60:	4299      	cmp	r1, r3
 8008e62:	d002      	beq.n	8008e6a <__swsetup_r+0x46>
 8008e64:	4628      	mov	r0, r5
 8008e66:	f000 f90d 	bl	8009084 <_free_r>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e74:	81a3      	strh	r3, [r4, #12]
 8008e76:	2300      	movs	r3, #0
 8008e78:	6063      	str	r3, [r4, #4]
 8008e7a:	6923      	ldr	r3, [r4, #16]
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f043 0308 	orr.w	r3, r3, #8
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	6923      	ldr	r3, [r4, #16]
 8008e88:	b94b      	cbnz	r3, 8008e9e <__swsetup_r+0x7a>
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e94:	d003      	beq.n	8008e9e <__swsetup_r+0x7a>
 8008e96:	4621      	mov	r1, r4
 8008e98:	4628      	mov	r0, r5
 8008e9a:	f000 f83f 	bl	8008f1c <__smakebuf_r>
 8008e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea2:	f013 0201 	ands.w	r2, r3, #1
 8008ea6:	d00a      	beq.n	8008ebe <__swsetup_r+0x9a>
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	60a2      	str	r2, [r4, #8]
 8008eac:	6962      	ldr	r2, [r4, #20]
 8008eae:	4252      	negs	r2, r2
 8008eb0:	61a2      	str	r2, [r4, #24]
 8008eb2:	6922      	ldr	r2, [r4, #16]
 8008eb4:	b942      	cbnz	r2, 8008ec8 <__swsetup_r+0xa4>
 8008eb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008eba:	d1c5      	bne.n	8008e48 <__swsetup_r+0x24>
 8008ebc:	bd38      	pop	{r3, r4, r5, pc}
 8008ebe:	0799      	lsls	r1, r3, #30
 8008ec0:	bf58      	it	pl
 8008ec2:	6962      	ldrpl	r2, [r4, #20]
 8008ec4:	60a2      	str	r2, [r4, #8]
 8008ec6:	e7f4      	b.n	8008eb2 <__swsetup_r+0x8e>
 8008ec8:	2000      	movs	r0, #0
 8008eca:	e7f7      	b.n	8008ebc <__swsetup_r+0x98>
 8008ecc:	20000020 	.word	0x20000020

08008ed0 <__swhatbuf_r>:
 8008ed0:	b570      	push	{r4, r5, r6, lr}
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	b096      	sub	sp, #88	@ 0x58
 8008edc:	4615      	mov	r5, r2
 8008ede:	461e      	mov	r6, r3
 8008ee0:	da0d      	bge.n	8008efe <__swhatbuf_r+0x2e>
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ee8:	f04f 0100 	mov.w	r1, #0
 8008eec:	bf14      	ite	ne
 8008eee:	2340      	movne	r3, #64	@ 0x40
 8008ef0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	6031      	str	r1, [r6, #0]
 8008ef8:	602b      	str	r3, [r5, #0]
 8008efa:	b016      	add	sp, #88	@ 0x58
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
 8008efe:	466a      	mov	r2, sp
 8008f00:	f000 f8ae 	bl	8009060 <_fstat_r>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	dbec      	blt.n	8008ee2 <__swhatbuf_r+0x12>
 8008f08:	9901      	ldr	r1, [sp, #4]
 8008f0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f12:	4259      	negs	r1, r3
 8008f14:	4159      	adcs	r1, r3
 8008f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f1a:	e7eb      	b.n	8008ef4 <__swhatbuf_r+0x24>

08008f1c <__smakebuf_r>:
 8008f1c:	898b      	ldrh	r3, [r1, #12]
 8008f1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f20:	079d      	lsls	r5, r3, #30
 8008f22:	4606      	mov	r6, r0
 8008f24:	460c      	mov	r4, r1
 8008f26:	d507      	bpl.n	8008f38 <__smakebuf_r+0x1c>
 8008f28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	6123      	str	r3, [r4, #16]
 8008f30:	2301      	movs	r3, #1
 8008f32:	6163      	str	r3, [r4, #20]
 8008f34:	b003      	add	sp, #12
 8008f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f38:	ab01      	add	r3, sp, #4
 8008f3a:	466a      	mov	r2, sp
 8008f3c:	f7ff ffc8 	bl	8008ed0 <__swhatbuf_r>
 8008f40:	9f00      	ldr	r7, [sp, #0]
 8008f42:	4605      	mov	r5, r0
 8008f44:	4639      	mov	r1, r7
 8008f46:	4630      	mov	r0, r6
 8008f48:	f7ff fc26 	bl	8008798 <_malloc_r>
 8008f4c:	b948      	cbnz	r0, 8008f62 <__smakebuf_r+0x46>
 8008f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f52:	059a      	lsls	r2, r3, #22
 8008f54:	d4ee      	bmi.n	8008f34 <__smakebuf_r+0x18>
 8008f56:	f023 0303 	bic.w	r3, r3, #3
 8008f5a:	f043 0302 	orr.w	r3, r3, #2
 8008f5e:	81a3      	strh	r3, [r4, #12]
 8008f60:	e7e2      	b.n	8008f28 <__smakebuf_r+0xc>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	6020      	str	r0, [r4, #0]
 8008f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	9b01      	ldr	r3, [sp, #4]
 8008f6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f72:	b15b      	cbz	r3, 8008f8c <__smakebuf_r+0x70>
 8008f74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f000 f80b 	bl	8008f94 <_isatty_r>
 8008f7e:	b128      	cbz	r0, 8008f8c <__smakebuf_r+0x70>
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	f023 0303 	bic.w	r3, r3, #3
 8008f86:	f043 0301 	orr.w	r3, r3, #1
 8008f8a:	81a3      	strh	r3, [r4, #12]
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	431d      	orrs	r5, r3
 8008f90:	81a5      	strh	r5, [r4, #12]
 8008f92:	e7cf      	b.n	8008f34 <__smakebuf_r+0x18>

08008f94 <_isatty_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d06      	ldr	r5, [pc, #24]	@ (8008fb0 <_isatty_r+0x1c>)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	602b      	str	r3, [r5, #0]
 8008fa0:	f7f8 fb21 	bl	80015e6 <_isatty>
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d102      	bne.n	8008fae <_isatty_r+0x1a>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	b103      	cbz	r3, 8008fae <_isatty_r+0x1a>
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	bd38      	pop	{r3, r4, r5, pc}
 8008fb0:	20000dc4 	.word	0x20000dc4

08008fb4 <_lseek_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	4d07      	ldr	r5, [pc, #28]	@ (8008fd4 <_lseek_r+0x20>)
 8008fb8:	4604      	mov	r4, r0
 8008fba:	4608      	mov	r0, r1
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	602a      	str	r2, [r5, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f7f8 fb1a 	bl	80015fc <_lseek>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	d102      	bne.n	8008fd2 <_lseek_r+0x1e>
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	b103      	cbz	r3, 8008fd2 <_lseek_r+0x1e>
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	20000dc4 	.word	0x20000dc4

08008fd8 <_read_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4d07      	ldr	r5, [pc, #28]	@ (8008ff8 <_read_r+0x20>)
 8008fdc:	4604      	mov	r4, r0
 8008fde:	4608      	mov	r0, r1
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	602a      	str	r2, [r5, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f7f8 fac4 	bl	8001574 <_read>
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	d102      	bne.n	8008ff6 <_read_r+0x1e>
 8008ff0:	682b      	ldr	r3, [r5, #0]
 8008ff2:	b103      	cbz	r3, 8008ff6 <_read_r+0x1e>
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	20000dc4 	.word	0x20000dc4

08008ffc <_sbrk_r>:
 8008ffc:	b538      	push	{r3, r4, r5, lr}
 8008ffe:	4d06      	ldr	r5, [pc, #24]	@ (8009018 <_sbrk_r+0x1c>)
 8009000:	2300      	movs	r3, #0
 8009002:	4604      	mov	r4, r0
 8009004:	4608      	mov	r0, r1
 8009006:	602b      	str	r3, [r5, #0]
 8009008:	f7f8 fb06 	bl	8001618 <_sbrk>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d102      	bne.n	8009016 <_sbrk_r+0x1a>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	b103      	cbz	r3, 8009016 <_sbrk_r+0x1a>
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	20000dc4 	.word	0x20000dc4

0800901c <_write_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d07      	ldr	r5, [pc, #28]	@ (800903c <_write_r+0x20>)
 8009020:	4604      	mov	r4, r0
 8009022:	4608      	mov	r0, r1
 8009024:	4611      	mov	r1, r2
 8009026:	2200      	movs	r2, #0
 8009028:	602a      	str	r2, [r5, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	f7f8 f978 	bl	8001320 <_write>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_write_r+0x1e>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_write_r+0x1e>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	20000dc4 	.word	0x20000dc4

08009040 <_close_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4d06      	ldr	r5, [pc, #24]	@ (800905c <_close_r+0x1c>)
 8009044:	2300      	movs	r3, #0
 8009046:	4604      	mov	r4, r0
 8009048:	4608      	mov	r0, r1
 800904a:	602b      	str	r3, [r5, #0]
 800904c:	f7f8 faaf 	bl	80015ae <_close>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d102      	bne.n	800905a <_close_r+0x1a>
 8009054:	682b      	ldr	r3, [r5, #0]
 8009056:	b103      	cbz	r3, 800905a <_close_r+0x1a>
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	20000dc4 	.word	0x20000dc4

08009060 <_fstat_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4d07      	ldr	r5, [pc, #28]	@ (8009080 <_fstat_r+0x20>)
 8009064:	2300      	movs	r3, #0
 8009066:	4604      	mov	r4, r0
 8009068:	4608      	mov	r0, r1
 800906a:	4611      	mov	r1, r2
 800906c:	602b      	str	r3, [r5, #0]
 800906e:	f7f8 faaa 	bl	80015c6 <_fstat>
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	d102      	bne.n	800907c <_fstat_r+0x1c>
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	b103      	cbz	r3, 800907c <_fstat_r+0x1c>
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	bd38      	pop	{r3, r4, r5, pc}
 800907e:	bf00      	nop
 8009080:	20000dc4 	.word	0x20000dc4

08009084 <_free_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4605      	mov	r5, r0
 8009088:	2900      	cmp	r1, #0
 800908a:	d041      	beq.n	8009110 <_free_r+0x8c>
 800908c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009090:	1f0c      	subs	r4, r1, #4
 8009092:	2b00      	cmp	r3, #0
 8009094:	bfb8      	it	lt
 8009096:	18e4      	addlt	r4, r4, r3
 8009098:	f7ff fe36 	bl	8008d08 <__malloc_lock>
 800909c:	4a1d      	ldr	r2, [pc, #116]	@ (8009114 <_free_r+0x90>)
 800909e:	6813      	ldr	r3, [r2, #0]
 80090a0:	b933      	cbnz	r3, 80090b0 <_free_r+0x2c>
 80090a2:	6063      	str	r3, [r4, #4]
 80090a4:	6014      	str	r4, [r2, #0]
 80090a6:	4628      	mov	r0, r5
 80090a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ac:	f7ff be32 	b.w	8008d14 <__malloc_unlock>
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	d908      	bls.n	80090c6 <_free_r+0x42>
 80090b4:	6820      	ldr	r0, [r4, #0]
 80090b6:	1821      	adds	r1, r4, r0
 80090b8:	428b      	cmp	r3, r1
 80090ba:	bf01      	itttt	eq
 80090bc:	6819      	ldreq	r1, [r3, #0]
 80090be:	685b      	ldreq	r3, [r3, #4]
 80090c0:	1809      	addeq	r1, r1, r0
 80090c2:	6021      	streq	r1, [r4, #0]
 80090c4:	e7ed      	b.n	80090a2 <_free_r+0x1e>
 80090c6:	461a      	mov	r2, r3
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	b10b      	cbz	r3, 80090d0 <_free_r+0x4c>
 80090cc:	42a3      	cmp	r3, r4
 80090ce:	d9fa      	bls.n	80090c6 <_free_r+0x42>
 80090d0:	6811      	ldr	r1, [r2, #0]
 80090d2:	1850      	adds	r0, r2, r1
 80090d4:	42a0      	cmp	r0, r4
 80090d6:	d10b      	bne.n	80090f0 <_free_r+0x6c>
 80090d8:	6820      	ldr	r0, [r4, #0]
 80090da:	4401      	add	r1, r0
 80090dc:	1850      	adds	r0, r2, r1
 80090de:	4283      	cmp	r3, r0
 80090e0:	6011      	str	r1, [r2, #0]
 80090e2:	d1e0      	bne.n	80090a6 <_free_r+0x22>
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	6053      	str	r3, [r2, #4]
 80090ea:	4408      	add	r0, r1
 80090ec:	6010      	str	r0, [r2, #0]
 80090ee:	e7da      	b.n	80090a6 <_free_r+0x22>
 80090f0:	d902      	bls.n	80090f8 <_free_r+0x74>
 80090f2:	230c      	movs	r3, #12
 80090f4:	602b      	str	r3, [r5, #0]
 80090f6:	e7d6      	b.n	80090a6 <_free_r+0x22>
 80090f8:	6820      	ldr	r0, [r4, #0]
 80090fa:	1821      	adds	r1, r4, r0
 80090fc:	428b      	cmp	r3, r1
 80090fe:	bf04      	itt	eq
 8009100:	6819      	ldreq	r1, [r3, #0]
 8009102:	685b      	ldreq	r3, [r3, #4]
 8009104:	6063      	str	r3, [r4, #4]
 8009106:	bf04      	itt	eq
 8009108:	1809      	addeq	r1, r1, r0
 800910a:	6021      	streq	r1, [r4, #0]
 800910c:	6054      	str	r4, [r2, #4]
 800910e:	e7ca      	b.n	80090a6 <_free_r+0x22>
 8009110:	bd38      	pop	{r3, r4, r5, pc}
 8009112:	bf00      	nop
 8009114:	20000dc0 	.word	0x20000dc0

08009118 <_init>:
 8009118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911a:	bf00      	nop
 800911c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911e:	bc08      	pop	{r3}
 8009120:	469e      	mov	lr, r3
 8009122:	4770      	bx	lr

08009124 <_fini>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	bf00      	nop
 8009128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912a:	bc08      	pop	{r3}
 800912c:	469e      	mov	lr, r3
 800912e:	4770      	bx	lr
